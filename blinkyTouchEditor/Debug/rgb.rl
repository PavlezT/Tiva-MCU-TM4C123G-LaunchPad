L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c"
N//*****************************************************************************
N//
N// rgb.c - Evaluation board driver for RGB LED.
N//
N// Copyright (c) 2012-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 2.1.3.156 of the EK-TM4C123GXL Firmware Package.
N//
N//*****************************************************************************
N
N#include <stdint.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdint.h" 1
N/*****************************************************************************/
N/* STDINT.H v5.2.6                                                           */
N/*                                                                           */
N/* Copyright (c) 2002-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N#ifndef _STDINT_H_
N#define _STDINT_H_
N
N/* 7.18.1.1 Exact-width integer types */
N
N    typedef   signed char   int8_t;
N    typedef unsigned char  uint8_t;
N    typedef          short  int16_t;
N    typedef unsigned short uint16_t;
N    typedef          int    int32_t;
N    typedef unsigned int   uint32_t;
N
N
N    typedef          long long  int64_t;
N    typedef unsigned long long uint64_t;
N
N/* 7.18.1.2 Minimum-width integer types */
N
N    typedef  int8_t   int_least8_t;
N    typedef uint8_t  uint_least8_t;
N
N    typedef  int16_t  int_least16_t;
N    typedef uint16_t uint_least16_t;
N    typedef  int32_t  int_least32_t;
N    typedef uint32_t uint_least32_t;
N
N
N    typedef  int64_t  int_least64_t;
N    typedef uint64_t uint_least64_t;
N
N/* 7.18.1.3 Fastest minimum-width integer types */
N
N    typedef  int32_t  int_fast8_t;
N    typedef uint32_t uint_fast8_t;
N    typedef  int32_t  int_fast16_t;
N    typedef uint32_t uint_fast16_t;
N
N    typedef  int32_t  int_fast32_t;
N    typedef uint32_t uint_fast32_t;
N
N
N    typedef  int64_t  int_fast64_t;
N    typedef uint64_t uint_fast64_t;
N
N/* 7.18.1.4 Integer types capable of holding object pointers */
N    typedef          int intptr_t;
N    typedef unsigned int uintptr_t;
N
N/* 7.18.1.5 Greatest-width integer types */
N    typedef          long long intmax_t;
N    typedef unsigned long long uintmax_t;
N
N/* 
N   According to footnotes in the 1999 C standard, "C++ implementations
N   should define these macros only when __STDC_LIMIT_MACROS is defined
N   before <stdint.h> is included." 
N*/
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N/* 7.18.2 Limits of specified width integer types */
N
N    #define  INT8_MAX   0x7f
N    #define  INT8_MIN   (-INT8_MAX-1)
N    #define UINT8_MAX   0xff
N
N    #define  INT16_MAX  0x7fff
N    #define  INT16_MIN  (-INT16_MAX-1)
N    #define UINT16_MAX  0xffff
N
N    #define  INT32_MAX  0x7fffffff
N    #define  INT32_MIN  (-INT32_MAX-1)
N    #define UINT32_MAX  0xffffffff
N
N
N    #define  INT64_MAX  0x7fffffffffffffff
N    #define  INT64_MIN  (-INT64_MAX-1)
N    #define UINT64_MAX  0xffffffffffffffff
N
N    #define  INT_LEAST8_MAX   (INT8_MAX)
N    #define  INT_LEAST8_MIN   (INT8_MIN)
N    #define UINT_LEAST8_MAX   (UINT8_MAX)
N
N    #define  INT_LEAST16_MAX  (INT16_MAX)
N    #define  INT_LEAST16_MIN  (INT16_MIN)
N    #define UINT_LEAST16_MAX  (UINT16_MAX)
N    #define  INT_LEAST32_MAX  (INT32_MAX)
N    #define  INT_LEAST32_MIN  (INT32_MIN)
N    #define UINT_LEAST32_MAX  (UINT32_MAX)
N
N
N    #define  INT_LEAST64_MAX  (INT64_MAX)
N    #define  INT_LEAST64_MIN  (INT64_MIN)
N    #define UINT_LEAST64_MAX  (UINT64_MAX)
N
N    #define  INT_FAST8_MAX   (INT32_MAX)
N    #define  INT_FAST8_MIN   (INT32_MIN)
N    #define UINT_FAST8_MAX   (UINT32_MAX)
N    #define  INT_FAST16_MAX  (INT32_MAX)
N    #define  INT_FAST16_MIN  (INT32_MIN)
N    #define UINT_FAST16_MAX  (UINT32_MAX)
N
N    #define  INT_FAST32_MAX  (INT32_MAX)
N    #define  INT_FAST32_MIN  (INT32_MIN)
N    #define UINT_FAST32_MAX  (UINT32_MAX)
N
N
N    #define  INT_FAST64_MAX  (INT64_MAX)
N    #define  INT_FAST64_MIN  (INT64_MIN)
N    #define UINT_FAST64_MAX  (UINT64_MAX)
N
N    #define INTPTR_MAX   (INT32_MAX)
N    #define INTPTR_MIN   (INT32_MIN)
N    #define UINTPTR_MAX  (UINT32_MAX)
N
N    #define INTMAX_MIN   (INT64_MIN)
N    #define INTMAX_MAX   (INT64_MAX)
N    #define UINTMAX_MAX  (UINT64_MAX)
N
N/* 7.18.3 Limits of other integer types */
N
N    #define PTRDIFF_MAX (INT32_MAX)
N    #define PTRDIFF_MIN (INT32_MIN)
N
N    #define SIG_ATOMIC_MIN (INT32_MIN)
N    #define SIG_ATOMIC_MAX (INT32_MAX)
N
N    #define SIZE_MAX (UINT32_MAX)
N
N#ifndef WCHAR_MAX
N#if !defined(__TI_WCHAR_T_BITS__) || __TI_WCHAR_T_BITS__ == 16
X#if !1L || 16 == 16
N#define WCHAR_MAX 0xffffu
N#else 
S#define WCHAR_MAX 0xffffffffu
N#endif
N#endif
N
N#ifndef WCHAR_MIN
N#define WCHAR_MIN 0
N#endif
N
N    #define WINT_MIN (INT32_MIN)
N    #define WINT_MAX (INT32_MAX)
N
N/* 7.18.4.1 Macros for minimum-width integer constants */
N
N/*
N   There is a defect report filed against the C99 standard concerning how 
N   the (U)INTN_C macros should be implemented.  Please refer to --
N   http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm 
N   for more information.  These macros are implemented according to the
N   suggestion given at this web site.
N*/
N
N    #define  INT8_C(value)  ((int_least8_t)(value))
N    #define UINT8_C(value)  ((uint_least8_t)(value))
N    #define  INT16_C(value) ((int_least16_t)(value))
N    #define UINT16_C(value) ((uint_least16_t)(value))
N    #define  INT32_C(value) ((int_least32_t)(value))
N    #define UINT32_C(value) ((uint_least32_t)(value))
N
N
N    #define  INT64_C(value) ((int_least64_t)(value))
N    #define UINT64_C(value) ((uint_least64_t)(value))
N
N/* 7.18.4.2 Macros for greatest-width integer constants */
N
N    #define  INTMAX_C(value) ((intmax_t)(value))
N    #define UINTMAX_C(value) ((uintmax_t)(value))
N
N#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
N
N#endif /* _STDINT_H_ */
L 26 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include <stdbool.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdbool.h" 1
N/* stdbool.h standard header */
N#ifndef _STDBOOL
N#define _STDBOOL
N#ifndef _YVALS
N #include <yvals.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 1
N/* yvals.h values header for conforming compilers on various systems */
N#ifndef _YVALS
N#define _YVALS
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.1") /* #includes required for implementation */
N#pragma CHECK_MISRA("-19.4") /* macros required for implementation */
N#pragma CHECK_MISRA("-19.6") /* undef required for implementation */
N#pragma CHECK_MISRA("-19.7") /* macros required for implementation */
N#pragma CHECK_MISRA("-20.1") /* standard headers must define standard names */
N
N#include <stdarg.h> 
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdarg.h" 1
N/*****************************************************************************/
N/* stdarg.h   v5.2.6                                                         */
N/*                                                                           */
N/* Copyright (c) 1996-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _STDARG
N#define _STDARG
N
N#pragma diag_push
N#pragma CHECK_MISRA("-20.2") /* standard headers must define standard names */
N#pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
N
N#ifdef __cplusplus
S#define _NS_PREFIX std::
Snamespace std {
N#else
N#define _NS_PREFIX
N#endif /* __cplusplus */
N
N#ifdef __TI_EABI_SUPPORT__
Ntypedef struct __va_list {
N    void * __ap;
N} va_list;
N#else
Stypedef char *va_list;
N#endif
N
N#ifdef __cplusplus
S} /* namespace std */
N#endif
N
N#define _VA_RNDUP(sz) 	(((sz) + 3) & ~3)
N#define _VA_MASK(tp)     ((__ALIGNOF__(tp) == 8) ? 7 : 3)
N#define _VA_ALN(ap,tp)  (((int)(ap) + _VA_MASK(tp)) & ~(_VA_MASK(tp)))
N
N#ifdef __TI_EABI_SUPPORT__
N#define va_start(ap, parmN)						      \
N   ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   \
N		                              _VA_RNDUP(sizeof(parmN)))))
X#define va_start(ap, parmN)						         ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   		                              _VA_RNDUP(sizeof(parmN)))))
N#else
S#define va_start(ap, parmN)						      \
S   ((ap) = (__va_argref(parmN) 						      \
S	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      \
S	    : (sizeof(parmN) < sizeof(int)) 				      \
S	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      \
S	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
X#define va_start(ap, parmN)						         ((ap) = (__va_argref(parmN) 						      	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      	    : (sizeof(parmN) < sizeof(int)) 				      	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
N#endif
N
N#ifdef __big_endian__
S#ifdef __TI_EABI_SUPPORT__
S#define va_arg(_ap, _type)					 	      \
S    (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       \
S			                         _VA_RNDUP(sizeof(_type)))),  \
S     (*(_type *)((int)(_ap).__ap -                                            \
S		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      \
S		                       : (sizeof(_type))))))
X#define va_arg(_ap, _type)					 	          (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       			                         _VA_RNDUP(sizeof(_type)))),       (*(_type *)((int)(_ap).__ap -                                            		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      		                       : (sizeof(_type))))))
S#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                                		      \
S	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                                		      	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
S#endif
N#else
N#ifdef __TI_EABI_SUPPORT__
N#define va_arg(_ap, _type) 						      \
N   (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        \
N			   _VA_RNDUP(sizeof(_type)))),                        \
N	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
X#define va_arg(_ap, _type) 						         (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        			   _VA_RNDUP(sizeof(_type)))),                        	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
N#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                         		              \
S	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      \
S	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                         		              	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
N#endif
N#endif
N
N#define va_end(ap) ((void)0)
N
N#pragma diag_pop
N
N#endif /* _STDARG */
N
N#pragma diag_push
N
N/* using declarations must occur outside header guard to support including both
N   C and C++-wrapped version of header; see _CPP_STYLE_HEADER check */
N/* this code is for C++ mode only and thus also not relevant for MISRA */
N#pragma CHECK_MISRA("-19.15")
N
N#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
X#if 0L && !0L
Susing std::va_list;
N#endif /* _CPP_STYLE_HEADER */
N
N#pragma diag_pop
L 13 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N
N#define _CPPLIB_VER	402
N
N/*---------------------------------------------------------------------------*/
N/* A header file conforming to ARM CLIB ABI (GENC-003539), should            */
N/* define _AEABI_PORTABLE when _AEABI_PORTABILITY_LEVEL is defined.          */
N/*---------------------------------------------------------------------------*/
N#if defined(_AEABI_PORTABILITY_LEVEL) && !defined(_AEABI_PORTABLE)
X#if 0L && !0L
S#define _AEABI_PORTABLE
N#endif
N
N/*---------------------------------------------------------------------------*/
N/* The macro definition that guards CLIB ABI (GENC-003539) requirements.     */
N/*---------------------------------------------------------------------------*/
N#if defined(__TMS470__) && defined(__TI_EABI_SUPPORT__)
X#if 1L && 1L
N#define _AEABI_PORTABILITY_CHECK (defined(__TMS470__) && \
N                                  defined(__TI_EABI_SUPPORT__) && \
N                                  defined(_AEABI_PORTABILITY_LEVEL) && \
N                                  _AEABI_PORTABILITY_LEVEL != 0)
X#define _AEABI_PORTABILITY_CHECK (defined(__TMS470__) &&                                   defined(__TI_EABI_SUPPORT__) &&                                   defined(_AEABI_PORTABILITY_LEVEL) &&                                   _AEABI_PORTABILITY_LEVEL != 0)
N#else
S#define _AEABI_PORTABILITY_CHECK 0
N#endif
N
N/* You can predefine (on the compile command line, for example):
N
N_ALT_NS=1 -- to use namespace _Dinkum_std for C++
N_ALT_NS=2 -- to use namespace _Dinkum_std for C++ and C
N_C_AS_CPP -- to compile C library as C++
N_C_IN_NS -- to define C names in std/_Dinkum_std instead of global namespace
N_C99 -- to turn ON C99 library support
N_ABRCPP -- to turn ON Abridged C++ dialect (implies _ECPP)
N_ECPP -- to turn ON Embedded C++ dialect
N_NO_EX -- to turn OFF use of try/throw
N_NO_MT -- to turn OFF thread synchronization
N_NO_NS -- to turn OFF use of namespace declarations
N_STL_DB (or _STLP_DEBUG) -- to turn ON iterator/range debugging
N__NO_LONG_LONG -- to define _Longlong as long, not long long
N
NYou can change (in this header):
N
N_ADDED_C_LIB -- from 1 to 0 to omit declarations for C extensions
N_COMPILER_TLS -- from 0 to 1 if _TLS_QUAL is not nil
N_EXFAIL -- from 1 to any nonzero value for EXIT_FAILURE
N_FILE_OP_LOCKS -- from 0 to 1 for file atomic locks
N_GLOBAL_LOCALE -- from 0 to 1 for shared locales instead of per-thread
N_HAS_IMMUTABLE_SETS -- from 1 to 0 to permit alterable set elements
N_HAS_STRICT_CONFORMANCE -- from 0 to 1 to disable nonconforming extensions
N_HAS_TRADITIONAL_IOSTREAMS -- from 1 to 0 to omit old iostreams functions
N_HAS_TRADITIONAL_ITERATORS -- from 0 to 1 for vector/string pointer iterators
N_HAS_TRADITIONAL_POS_TYPE -- from 0 to 1 for streampos same as streamoff
N_HAS_TRADITIONAL_STL -- from 1 to 0 to omit old STL functions
N_IOSTREAM_OP_LOCKS -- from 0 to 1 for iostream atomic locks
N_TLS_QUAL -- from nil to compiler TLS qualifier, such as __declspec(thread)
N_USE_EXISTING_SYSTEM_NAMES -- from 1 to 0 to disable mappings (_Open to open)
N
NInclude directories needed to compile with Dinkum C:
N
NC -- include/c
NC99 -- include/c (define _C99)
NEmbedded C++ -- include/c include/embedded (define _ECPP)
NAbridged C++ -- include/c include/embedded include (define _ABRCPP)
NStandard C++ -- include/c include
NStandard C++ with export -- include/c include/export include
N	(--export --template_dir=lib/export)
N
NInclude directories needed to compile with native C:
N
NC -- none
NC99 -- N/A
NEmbedded C++ -- include/embedded (define _ECPP)
NAbridged C++ -- include/embedded include (define _ABRCPP)
NStandard C++ -- include
NStandard C++ with export -- include/export include
N	(--export --template_dir=lib/export)
N */
N
N #define _C_IN_NS 1
N #define __EDG__  1
N #define __FPUTS_RETURN_NUM_BYTES__ 1
N #ifdef __EXCEPTIONS
S    #undef _NO_EX 
N #else
N    #define _NO_EX 1
N #endif /* __EXCEPTIONS */
N #if defined(__unsigned_chars__)
X #if 1L
N   #define __CHAR_UNSIGNED__ 1
N #else
S   #undef __CHAR_UNSIGNED__
S   #undef _CHAR_UNSIGNED
N #endif /* defined(__unsigned_chars__) */
N #undef _32_BIT_DOUBLE
N #undef _32_BIT_LDOUBLE
N
N /* targets with "native" mode libraries don't support C9X */
N #define _HAS_C9X 0
N
N /* TI RTS supports the C9X snprintf() and vsnprintf() functions */
N #ifndef _C9X_SNPRINTF
N  #define _C9X_SNPRINTF 1
N #endif /* _C9X_SNPRINTF */
N
N /* TI C6x supports complex arithmetic */
N #ifndef _C9X_COMPLEX
N  #define _C9X_COMPLEX (_TMS320C6X || 199901L <= __STDC_VERSION__)
N #endif /* _C9X_COMPLEX */
N
N
N #ifndef __STDC_HOSTED__
N  #define __STDC_HOSTED__	1
N #endif /* __STDC_HOSTED__ */
N
N  #undef __STDC_IEC_559__
N  #undef __STDC_IEC_559_COMPLEX__
N
N #ifndef __STDC_ISO_10646__
N  #define __STDC_ISO_10646__	200009L	/* match glibc */
N #endif /* __STDC_ISO_10646__ */
N
N		/* DETERMINE MACHINE TYPE */
N
N
N   /* _C99_MATH must be defined for using Dinkum Math */
N  #if !defined(_C99_MATH)
X  #if !0L
N    #define _C99_MATH 1
N  #endif
N
N  #if defined(__TI_VFPLIB_SUPPORT__)
X  #if 0L
S    #if defined(__TI_FPV4SPD16_SUPPORT__)
S      #define _HAS_C9X_FAST_FMAF 1
S    #else
S      #define _HAS_C9X_FAST_FMA 1
S    #endif
N  #endif
N  
N   #if defined(__big_endian__)
X   #if 0L
S       #define _D0	0	/* 0: big endian, 3: little endian floating-point */
N   #elif defined(__little_endian__)
X   #elif 1L
N      #if defined(__TI_VFPLIB_SUPPORT__)
X      #if 0L
S          #define _D0   3       /* MSW offset 3 */
S      #elif defined(__TI_FPALIB_SUPPORT__)
X      #elif 0L
S          #define _D0   1       /* MSW offset 1, special FPALIB endianness */
N      #else
N          #define _D0   3       /* MSW offset 3 */
N      #endif
N   #endif
N  #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
N  #define _LBIAS	0x3fe	/* 64 long double bits */
N  #define _LOFF		4	/* 64 long double bits */
N  #define _FPP_TYPE	_FPP_NONE   /* set to _FPP_NONE because of software emulation */
N
N
N		/* DETERMINE _Ptrdifft AND _Sizet FROM MACHINE TYPE */
N
Ntypedef long _Int32t;
Ntypedef unsigned long _Uint32t;
N
Ntypedef  __PTRDIFF_T_TYPE__  _Ptrdifft;
Xtypedef  int  _Ptrdifft;
N
Ntypedef  __SIZE_T_TYPE__ _Sizet;
Xtypedef  unsigned _Sizet;
N
N #if defined(__linux)
X #if 0L
S  #define _LINUX_C_LIB	1	/* Linux-specific conventions */
N #endif /* defined(__linux) */
N
N   #undef _POSIX_C_LIB
N
N #if !defined(_HAS_C9X) && defined(_C99)
X #if !1L && 0L
S  #define _HAS_C9X	1
N #endif /* !defined(_HAS_C9X) etc. */
N
N #define _HAS_C9X_IMAGINARY_TYPE	(_C9X_COMPLEX && __EDG__ \
N	&& !defined(__cplusplus))
X #define _HAS_C9X_IMAGINARY_TYPE	(_C9X_COMPLEX && __EDG__ 	&& !defined(__cplusplus))
N
N #if !defined(_ECPP) && defined(_ABRCPP)
X #if !0L && 0L
S  #define _ECPP
N #endif /* !defined(_ECPP) && defined(_ABRCPP) */
N
N #if !defined(_IS_EMBEDDED) && defined(_ECPP)
X #if !0L && 0L
S  #define _IS_EMBEDDED	1	/* 1 for Embedded C++ */
N #endif /* _IS_EMBEDDED */
N
N		/* EXCEPTION CONTROL */
N #ifndef _HAS_EXCEPTIONS
N  #ifndef _NO_EX	/* don't simplify */
S   #define _HAS_EXCEPTIONS	1	/* 1 for try/throw logic */
S
N  #else	/* _NO_EX */
N   #define _HAS_EXCEPTIONS	0
N  #endif /* _NO_EX */
N
N #endif /* _HAS_EXCEPTIONS */
N
N		/* NAMING PROPERTIES */
N/* #define _STD_LINKAGE	defines C names as extern "C++" */
N/* #define _STD_USING	defines C names in namespace std or _Dinkum_std */
N
N #ifndef _HAS_NAMESPACE
N  #ifndef _NO_NS	/* don't simplify */
N   #define _HAS_NAMESPACE	1	/* 1 for C++ names in std */
N
N  #else	/* _NO_NS */
S   #define _HAS_NAMESPACE	0
N  #endif /* _NO_NS */
N
N #endif /* _HAS_NAMESPACE */
N 
N #if !defined(_STD_USING) && defined(__cplusplus) \
N	&& defined(_C_IN_NS)
X #if !0L && 0L 	&& 1L
S  #define _STD_USING	/* exports C names to global, else reversed */
S
S #elif defined(_STD_USING) && !defined(__cplusplus)
X #elif 0L && !0L
S  #undef _STD_USING	/* define only for C++ */
N #endif /* !defined(_STD_USING) */
N
N #if !defined(_HAS_STRICT_LINKAGE) \
N	&& __EDG__ && !defined(_WIN32_C_LIB)
X #if !0L 	&& 1 && !0L
N  #define _HAS_STRICT_LINKAGE __TI_STRICT_ANSI_MODE__   /* extern "C" in function type */
N #endif /* !defined(_HAS_STRICT_LINKAGE) */
N
N		/* THREAD AND LOCALE CONTROL */
N  #define _NO_MT 1
N  #define _MULTI_THREAD	0
N 
N#define _GLOBAL_LOCALE	0	/* 0 for per-thread locales, 1 for shared */
N#define _FILE_OP_LOCKS	0	/* 0 for no FILE locks, 1 for atomic */
N#define _IOSTREAM_OP_LOCKS	0	/* 0 for no iostream locks, 1 for atomic */
N
N		/* THREAD-LOCAL STORAGE */
N#define _COMPILER_TLS	0	/* 1 if compiler supports TLS directly */
N#define _TLS_QUAL	/* TLS qualifier, such as __declspec(thread), if any */
N
N #define _HAS_IMMUTABLE_SETS	1
N #define _HAS_IMMUTABLE_SETS	1
N #define _HAS_TRADITIONAL_IOSTREAMS	0
N #define _HAS_TRADITIONAL_ITERATORS	0
N #define _HAS_TRADITIONAL_POS_TYPE	0
N #define _HAS_TRADITIONAL_STL	1
N #define _HAS_TRADITIONAL_IOSTREAMS	0
N #define _HAS_TRADITIONAL_ITERATORS	0
N #define _HAS_TRADITIONAL_POS_TYPE	0
N #define _HAS_TRADITIONAL_STL	1
N
N #define _ADDED_C_LIB	1
N #define _USE_EXISTING_SYSTEM_NAMES	1 /* _Open => open etc. */
N
N #if !defined(_HAS_STRICT_CONFORMANCE)
X #if !0L
N  #define _HAS_STRICT_CONFORMANCE	0	/* enable nonconforming extensions */
N #endif /* !defined(_HAS_STRICT_CONFORMANCE) */
N
N #if !defined(_HAS_ITERATOR_DEBUGGING) \
N	&& (defined(_STL_DB) || defined(_STLP_DEBUG))
X #if !0L 	&& (0L || 0L)
S  #define _HAS_ITERATOR_DEBUGGING	1	/* for range checks, etc. */
N #endif /* define _HAS_ITERATOR_DEBUGGING */
N
N		/* NAMESPACE CONTROL */
N
N #if defined(__cplusplus)
X #if 0L
S
S #if _HAS_NAMESPACE
Snamespace std {}
S
S #if defined(_C_AS_CPP)
S  #define _NO_CPP_INLINES	/* just for compiling C library as C++ */
S #endif /* _C_AS_CPP */
S
S #if defined(_STD_USING)
S  #if defined(_C_AS_CPP)	/* define library in std */
S   #define _STD_BEGIN	namespace std {_C_LIB_DECL
S   #define _STD_END		_END_C_LIB_DECL }
S
S  #else /* _C_AS_CPP */
S   #define _STD_BEGIN	namespace std {
S   #define _STD_END		}
S  #endif /* _C_AS_CPP */
S
S   #define _C_STD_BEGIN	namespace std {
S   #define _C_STD_END	}
S   #define _CSTD	        ::std::
S   #define _STD			::std::
S
S #else /* _ALT_NS == 0 && !defined(_STD_USING) */
S
S  #if defined(_C_AS_CPP)	/* define C++ library in std, C in global */
S   #define _STD_BEGIN	_C_LIB_DECL
S   #define _STD_END		_END_C_LIB_DECL
S
S  #else /* _C_AS_CPP */
S   #define _STD_BEGIN	namespace std {
S   #define _STD_END		}
S  #endif /* _C_AS_CPP */
S
S   #define _C_STD_BEGIN	
S   #define _C_STD_END	
S   #define _CSTD		::
S   #define _STD			::std::
S #endif /* _ALT_NS etc */
S
S  #define _X_STD_BEGIN	namespace std {
S  #define _X_STD_END	}
S  #define _XSTD			::std::
S
S  #if defined(_STD_USING)
S   #undef _GLOBAL_USING		/* c* in std namespace, *.h imports to global */
S
S  #else
S   #define _GLOBAL_USING	/* *.h in global namespace, c* imports to std */
S  #endif /* defined(_STD_USING) */
S
S  #if defined(_STD_LINKAGE)
S   #define _C_LIB_DECL		extern "C++" {	/* C has extern "C++" linkage */
S
S  #else /* defined(_STD_LINKAGE) */
S   #define _C_LIB_DECL		extern "C" {	/* C has extern "C" linkage */
S  #endif /* defined(_STD_LINKAGE) */
S
S  #define _END_C_LIB_DECL	}
S  #define _EXTERN_C			extern "C" {
S  #define _END_EXTERN_C		}
S
S #else /* _HAS_NAMESPACE */
S
S  #define _STD_BEGIN
S  #define _STD_END
S  #define _STD	::
S
S  #define _X_STD_BEGIN
S  #define _X_STD_END
S  #define _XSTD	::
S
S  #define _C_STD_BEGIN
S  #define _C_STD_END
S  #define _CSTD	::
S
S  #define _C_LIB_DECL		extern "C" {
S  #define _END_C_LIB_DECL	}
S  #define _EXTERN_C			extern "C" {
S  #define _END_EXTERN_C		}
S #endif /* _HAS_NAMESPACE */
S
N #else /* __cplusplus */
N  #define _STD_BEGIN
N  #define _STD_END
N  #define _STD
N
N  #define _X_STD_BEGIN
N  #define _X_STD_END
N  #define _XSTD
N
N  #define _C_STD_BEGIN
N  #define _C_STD_END
N  #define _CSTD
N
N  #define _C_LIB_DECL
N  #define _END_C_LIB_DECL
N  #define _EXTERN_C
N  #define _END_EXTERN_C
N #endif /* __cplusplus */
N
N #if 199901L <= __STDC_VERSION__
X #if 199901L <= 199409L
S
S #if defined(__GNUC__) || defined(__cplusplus)
S  #define _Restrict
S
S #else /* defined(__GNUC__) || defined(__cplusplus) */
S  #define _Restrict restrict
S #endif /* defined(__GNUC__) || defined(__cplusplus) */
S
S
N #else /* 199901L <= __STDC_VERSION__ */
N #define _Restrict
N #endif /* 199901L <= __STDC_VERSION__ */
N
N #ifdef __cplusplus
S_STD_BEGIN
Stypedef bool _Bool;
S_STD_END
N #endif /* __cplusplus */
N
N		/* VC++ COMPILER PARAMETERS */
N #define _CRTIMP
N #define _CDECL
N
N
N #ifdef __NO_LONG_LONG
S
N #else
N        /* defined(__NO_LONG_LONG) && !defined (_MSC_VER) && ! TI 32 bit processor*/
N  #define _LONGLONG	long long
N  #define _ULONGLONG	unsigned long long
N  #define _LLONG_MAX	0x7fffffffffffffffLL
N  #define _ULLONG_MAX	0xffffffffffffffffULL
N #endif /* __NO_LONG_LONG */
N
N		/* MAKE MINGW LOOK LIKE WIN32 HEREAFTER */
N
N
N
N_C_STD_BEGIN
X
N		/* FLOATING-POINT PROPERTIES */
N#if (!defined(_32_BIT_DOUBLE))
X#if (!0L)
N#define _DBIAS	0x3fe	/* IEEE format double and float */
N#define _DOFF	4
N#define _FBIAS	0x7e
N#define _FOFF	7
N#define _FRND	1
N#endif /* (!defined(_32_BIT_DOUBLE)) */
N
N#define _BITS_BYTE	8
N#define _C2		1	/* 0 if not 2's complement */
N#define _MBMAX		8	/* MB_LEN_MAX */
N#define _ILONG		1	/* 0 if 16-bit int */
N
N #if defined(__s390__) || defined(__CHAR_UNSIGNED__)  \
N	|| defined(_CHAR_UNSIGNED) 
X #if 0L || 1L  	|| 0L 
N  #define _CSIGN	0	/* 0 if char is not signed */ 
N #else /* defined(__s390__) etc */
S  #define _CSIGN	1
N #endif /* defined(__s390__) etc */
N
N#define _MAX_EXP_DIG	8	/* for parsing numerics */
N#define _MAX_INT_DIG	32
N#define _MAX_SIG_DIG	36
N
N #if defined(_LONGLONG)
X #if 1L
Ntypedef _LONGLONG _Longlong;
Xtypedef long long _Longlong;
Ntypedef _ULONGLONG _ULonglong;
Xtypedef unsigned long long _ULonglong;
N
N #else /* defined(_LONGLONG) */
S     typedef long long _Longlong;
S     typedef unsigned long long  _ULonglong;
S     #define _LLONG_MAX  0x7fffffffffffffff
S     #define _ULLONG_MAX 0xffffffffffffffff
N #endif /* defined(_LONGLONG) */
N
N		/* wchar_t AND wint_t PROPERTIES */
N #if defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) \
N	|| defined (_MSL_WCHAR_T_TYPE)
X #if 0L || 0L 	|| 0L
S  #define _WCHART
N #endif /* defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) */
N
N #if defined(_WINT_T)
X #if 0L
S  #define _WINTT
N #endif /* _WINT_T */
N
N #ifdef __cplusplus
S  #define _WCHART
Stypedef wchar_t _Wchart;
Stypedef wchar_t _Wintt;
N #endif /* __cplusplus */
N
N #if defined(__WCHAR_TYPE__)
X #if 0L
S  #define _WCMIN	(-_WCMAX - _C2)
S  #define _WCMAX	0x7fffffff	/* assume signed 32-bit wchar_t */
S
S  #ifndef __cplusplus
Stypedef __WCHAR_TYPE__ _Wchart;
Stypedef __WCHAR_TYPE__ _Wintt;
S  #endif /* __cplusplus */
S/******************************************************************************/
S/* Here we define the _Wchart _Wintt for TI processors, they are all defined  */
S/* as 16 bit unsigned integer type by the predefined macro __WCHAR_T_TYPE__   */
S/******************************************************************************/
N #else
N   #if defined(_AEABI_PORTABILITY_CHECK) && _AEABI_PORTABILITY_CHECK
X   #if 1L && (1L && 1L && 0L && _AEABI_PORTABILITY_LEVEL != 0)
S      #ifndef __cplusplus
S       typedef int  _Wchart;
S       typedef int  _Wintt;
S      #endif /* __cplusplus */
S      #define _WCMIN	0
S      #define _WCMAX	0xffffffff
N   #else 
N    #ifndef __cplusplus
N       typedef __WCHAR_T_TYPE__ _Wchart;
X       typedef unsigned short _Wchart;
N       typedef __WCHAR_T_TYPE__ _Wintt;
X       typedef unsigned short _Wintt;
N    #endif /* __cplusplus */
N    #define _WCMIN	0
N    #define _WCMAX	0xffff
N   #endif /* _AEABI_PORTABILITY_CHECK */
N #endif /* compiler/library type */
N
N		/* POINTER PROPERTIES */
N#define _NULL		0	/* 0L if pointer same as long */
N
N		/* signal PROPERTIES */
N
N#define _SIGABRT	6
N#define _SIGMAX		44
N
N		/* stdarg PROPERTIES */
Ntypedef _CSTD va_list _Va_list;
Xtypedef  va_list _Va_list;
N
N #if _HAS_C9X
X #if 0
S
S #if __EDG__
S  #undef va_copy
S #endif /* __EDG__ */
S
S #ifndef va_copy
S_EXTERN_C
Svoid _Vacopy(va_list *apd, va_list aps);
S_END_EXTERN_C
S  #define va_copy(apd, aps)	_Vacopy(&(apd), aps)
S #endif /* va_copy */
S
N #endif /* _IS_C9X */
N
N		/* stdlib PROPERTIES */
N#define _EXFAIL	1	/* EXIT_FAILURE */
N
N_EXTERN_C
X
Nvoid _Atexit(void (*fn)(void));
N_END_EXTERN_C
X
N
N		/* stdio PROPERTIES */
N#define _FNAMAX	256           /* Dinkum original value 260 */
N#define _FOPMAX	10            /* Dinkum original value 20 */
N#define _TNAMAX	16
N
N #define _FD_TYPE	signed char
N  #define _FD_NO(str) ((str)->_Handle)
N #define _FD_VALID(fd)	(0 <= (fd))	/* fd is signed integer */
N #define _FD_INVALID	(-1)
N #define _SYSCH(x)	(x)
Ntypedef char _Sysch_t;
N
N		/* STORAGE ALIGNMENT PROPERTIES */
N#define _MEMBND	3U /* eight-byte boundaries (2^^3) */
N
N		/* time PROPERTIES */
N  #if _AEABI_PORTABILITY_CHECK
X  #if (1L && 1L && 0L && _AEABI_PORTABILITY_LEVEL != 0)
S    #define _CPS (__aeabi_CLOCKS_PER_SEC)
N  #else
N    #define _CPS    1000
N  #endif /* _AEABI_PORTABILITY_CHECK */
N  #define _TBIAS	0
N_C_STD_END
X
N
N		/* MULTITHREAD PROPERTIES */
N #if _MULTI_THREAD
X #if 0
S_EXTERN_C
Svoid _Locksyslock(int);
Svoid _Unlocksyslock(int);
S_END_EXTERN_C
S
N #else /* _MULTI_THREAD */
N     #define _Locksyslock(x)   _lock()
N     #define _Unlocksyslock(x) _unlock()
N #endif /* _MULTI_THREAD */
N
N		/* LOCK MACROS */
N #define _LOCK_LOCALE	0
N #define _LOCK_MALLOC	1
N #define _LOCK_STREAM	2
N #define _LOCK_DEBUG	3
N #define _MAX_LOCK		4	/* one more than highest lock number */
N
N #if _IOSTREAM_OP_LOCKS
X #if 0
S  #define _MAYBE_LOCK
S
N #else /* _IOSTREAM_OP_LOCKS */
N  #define _MAYBE_LOCK	\
N	if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
X  #define _MAYBE_LOCK		if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
N #endif /* _IOSTREAM_OP_LOCKS */
N
N #ifdef __cplusplus
S_STD_BEGIN
Sextern "C++" {	/* in case of _C_AS_CPP */
S		/* CLASS _Lockit */
Sclass _Lockit
S	{	/* lock while object in existence -- MUST NEST */
Spublic:
S
S  #if !_MULTI_THREAD
S   #define _LOCKIT(x)
S
S	explicit _Lockit()
S		{	/* do nothing */
S		}
S
S	explicit _Lockit(int)
S		{	/* do nothing */
S		}
S
S	~_Lockit()
S		{	/* do nothing */
S		}
S
S  #else /* non-Windows multithreading */
S   #define _LOCKIT(x)	lockit x
S
S	explicit _Lockit()
S		: _Locktype(_LOCK_MALLOC)
S		{	/* set default lock */
S		_MAYBE_LOCK
S			_Locksyslock(_Locktype);
S		}
S
S	explicit _Lockit(int _Type)
S		: _Locktype(_Type)
S		{	/* set the lock */
S		_MAYBE_LOCK
S			_Locksyslock(_Locktype);
S		}
S
S	~_Lockit()
S		{	/* clear the lock */
S		_MAYBE_LOCK
S			_Unlocksyslock(_Locktype);
S		}
S
Sprivate:
S	int _Locktype;
S  #endif /* _MULTI_THREAD */
S
Spublic:
S	_Lockit(const _Lockit&);			/* not defined */
S	_Lockit& operator=(const _Lockit&);	/* not defined */
S	};
S
Sclass _Mutex
S	{	/* lock under program control */
Spublic:
S
S  #if !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS
S    void _Lock()
S		{	/* do nothing */
S		}
S
S	void _Unlock()
S		{	/* do nothing */
S	}
S
S  #else /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
S	_Mutex();
S	~_Mutex();
S	void _Lock();
S	void _Unlock();
S
Sprivate:
S	_Mutex(const _Mutex&);				/* not defined */
S	_Mutex& operator=(const _Mutex&);	/* not defined */
S	void *_Mtx;
S  #endif /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
S
S	};
S}	/* extern "C++" */
S_STD_END
N #endif /* __cplusplus */
N
N		/* MISCELLANEOUS MACROS */
N#define _ATEXIT_T	void
N
N#define _MAX	max
N#define _MIN	min
N
N#define _TEMPLATE_STAT
N
N #pragma diag_push
N #pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
N
N  #define _NO_RETURN(fun)	void fun
N
N #pragma diag_pop
N
N #if _HAS_NAMESPACE
X #if 1
N
N #ifdef __cplusplus
S  #ifndef _STDARG
S  #if defined(_STD_USING)
S_STD_BEGIN
Susing _CSTD va_list;
S_STD_END
S  #endif /* !defined(_C_AS_CPP) && defined(_GLOBAL_USING) */
S  #endif /* _STDARG */
N #endif /* __cplusplus */
N #endif /* _HAS_NAMESPACE */
N
N#include <linkage.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/linkage.h" 1
N/*****************************************************************************/
N/* linkage.h   v5.2.6                                                        */
N/*                                                                           */
N/* Copyright (c) 1998-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _LINKAGE
N#define _LINKAGE
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.4") /* macros required for implementation */
N
N/* No modifiers are needed to access code or data */
N
N#define _CODE_ACCESS
N#define _DATA_ACCESS
N#define _DATA_ACCESS_NEAR
N
N/*--------------------------------------------------------------------------*/
N/* Define _IDECL ==> how inline functions are declared                      */
N/*--------------------------------------------------------------------------*/
N#ifdef _INLINE
N#define _IDECL static __inline
N#define _IDEFN static __inline
N#define __INLINE static __inline
N#else
S#define _IDECL extern _CODE_ACCESS
S#define _IDEFN _CODE_ACCESS
S#define __INLINE __EXTERN
N#endif
N
N#pragma diag_pop
N
N#endif /* ifndef _LINKAGE */
L 691 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N#ifndef __LOCK_H
N#include <_lock.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/_lock.h" 1
N/*****************************************************************************/
N/*  _lock.h v5.2.6                                                           */
N/*                                                                           */
N/* Copyright (c) 2000-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef __LOCK_H
N#define __LOCK_H
N
N#include <linkage.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#pragma diag_push
N
N/* _nop(), _lock(), and _unlock() all accept zero or more optional arguments,
N   which must remain as empty rather than (void) parameter lists to avoid
N   breaking the API */
N#pragma CHECK_MISRA("-16.5")
N
N_CODE_ACCESS void _nop();
X void _nop();
N
Nextern _DATA_ACCESS void (  *_lock)();
Xextern  void (  *_lock)();
Nextern _DATA_ACCESS void (*_unlock)();
Xextern  void (*_unlock)();
N
N_CODE_ACCESS void _register_lock  (void (  *lock)());
X void _register_lock  (void (  *lock)());
N_CODE_ACCESS void _register_unlock(void (*unlock)());
X void _register_unlock(void (*unlock)());
N
N#pragma diag_pop
N
N#define SYSTEM_WIDE_LOCK_REGISTERED	(_lock != _nop)
N#define SYSTEM_WIDE_UNLOCK_REGISTERED	(_unlock != _nop)
N
N#ifdef __cplusplus
S} /* extern "C" */
N#endif
N
N#endif /* __LOCK_H */
L 693 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N#endif /* __LOCK_H */
N
N#pragma diag_pop
N
N#endif /* _YVALS */
N
N/*
N * Copyright (c) 1992-2004 by P.J. Plauger.  ALL RIGHTS RESERVED.
N * Consult your license regarding permissions and restrictions.
NV4.02:1476 */
N
L 6 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdbool.h" 2
N#endif /* _YVALS */
N
N_C_STD_BEGIN
X
N
N #define __bool_true_false_are_defined	1
N
N #ifndef __cplusplus
N		/* TYPES */
N
N #if 199901L <= __STDC_VERSION__
X #if 199901L <= 199409L
S
S
N #else /* 199901L <= __STDC_VERSION__ */
N#if __TI_STRICT_ANSI_MODE__
X#if 0
Stypedef unsigned char _Bool;
N#endif
N #endif /* 199901L <= __STDC_VERSION__ */
N
N		/* MACROS */
N #define bool	_Bool
N #define false	0
N #define true	1
N #endif /* __cplusplus */
N
N_C_STD_END
X
N#endif /* _STDBOOL */
N
N/*
N * Copyright (c) 1992-2004 by P.J. Plauger.  ALL RIGHTS RESERVED.
N * Consult your license regarding permissions and restrictions.
NV4.02:1476 */
L 27 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "inc/hw_types.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/inc/hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile uint32_t *)(x)))
X#define HWREG(x)                                                                      (*((volatile uint32_t *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile uint16_t *)(x)))
X#define HWREGH(x)                                                                     (*((volatile uint16_t *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile uint8_t *)(x)))
X#define HWREGB(x)                                                                     (*((volatile uint8_t *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                     \
N              (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Tiva silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_TM4C123)
N//     {
N//         do some TM4C123-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Tiva family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Tiva silicon.  Many compilers will then
N// detect the "hard-coded" conditionals, and appropriately optimize the code
N// blocks, eliminating any "unreachable" code.  This would result in a smaller
N// Driverlib, thus producing a smaller final application size, but at the cost
N// of limiting the Driverlib binary to a specific Tiva silicon revision.
N//
N//*****************************************************************************
N#ifndef CLASS_IS_TM4C123
N#define CLASS_IS_TM4C123                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
X#define CLASS_IS_TM4C123                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
N#endif
N
N#ifndef CLASS_IS_TM4C129
N#define CLASS_IS_TM4C129                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
X#define CLASS_IS_TM4C129                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N//*****************************************************************************
N//
N// For TivaWare 2.1, we removed all references to Tiva IC codenames from the
N// source.  To ensure that existing customer code doesn't break as a result
N// of this change, make sure that the old definitions are still available at
N// least for the time being.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define CLASS_IS_BLIZZARD CLASS_IS_TM4C123
N#define CLASS_IS_SNOWFLAKE CLASS_IS_TM4C123
N#endif
N
N#endif // __HW_TYPES_H__
L 28 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "inc/hw_memmap.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/inc/hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of the device.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_BASE               0x40020000  // I2C0
N#define I2C1_BASE               0x40021000  // I2C1
N#define I2C2_BASE               0x40022000  // I2C2
N#define I2C3_BASE               0x40023000  // I2C3
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define GPIO_PORTR_BASE         0x40067000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTS_BASE         0x40068000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTT_BASE         0x40069000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define ONEWIRE0_BASE           0x400B6000  // 1-Wire Master Module
N#define I2C8_BASE               0x400B8000  // I2C8
N#define I2C9_BASE               0x400B9000  // I2C9
N#define I2C4_BASE               0x400C0000  // I2C4
N#define I2C5_BASE               0x400C1000  // I2C5
N#define I2C6_BASE               0x400C2000  // I2C6
N#define I2C7_BASE               0x400C3000  // I2C7
N#define EPI0_BASE               0x400D0000  // EPI0
N#define TIMER6_BASE             0x400E0000  // General-Purpose Timers
N#define TIMER7_BASE             0x400E1000  // General-Purpose Timers
N#define EMAC0_BASE              0x400EC000  // Ethernet Controller
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define CCM0_BASE               0x44030000  // Cyclical Redundancy Check (CRC)
N#define SHAMD5_BASE             0x44034000  // SHA/MD5 Accelerator
N#define AES_BASE                0x44036000  // Advance Encryption
N                                            // Hardware-Accelerated Module
N#define DES_BASE                0x44038000  // Data Encryption Standard
N                                            // Accelerator (DES)
N#define LCD0_BASE               0x44050000  // LCD Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N#endif // __HW_MEMMAP_H__
L 29 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "inc/hw_timer.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/inc/hw_timer.h" 1
N//*****************************************************************************
N//
N// hw_timer.h - Defines and macros used when accessing the timer.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TIMER_H__
N#define __HW_TIMER_H__
N
N//*****************************************************************************
N//
N// The following are defines for the Timer register offsets.
N//
N//*****************************************************************************
N#define TIMER_O_CFG             0x00000000  // GPTM Configuration
N#define TIMER_O_TAMR            0x00000004  // GPTM Timer A Mode
N#define TIMER_O_TBMR            0x00000008  // GPTM Timer B Mode
N#define TIMER_O_CTL             0x0000000C  // GPTM Control
N#define TIMER_O_SYNC            0x00000010  // GPTM Synchronize
N#define TIMER_O_IMR             0x00000018  // GPTM Interrupt Mask
N#define TIMER_O_RIS             0x0000001C  // GPTM Raw Interrupt Status
N#define TIMER_O_MIS             0x00000020  // GPTM Masked Interrupt Status
N#define TIMER_O_ICR             0x00000024  // GPTM Interrupt Clear
N#define TIMER_O_TAILR           0x00000028  // GPTM Timer A Interval Load
N#define TIMER_O_TBILR           0x0000002C  // GPTM Timer B Interval Load
N#define TIMER_O_TAMATCHR        0x00000030  // GPTM Timer A Match
N#define TIMER_O_TBMATCHR        0x00000034  // GPTM Timer B Match
N#define TIMER_O_TAPR            0x00000038  // GPTM Timer A Prescale
N#define TIMER_O_TBPR            0x0000003C  // GPTM Timer B Prescale
N#define TIMER_O_TAPMR           0x00000040  // GPTM TimerA Prescale Match
N#define TIMER_O_TBPMR           0x00000044  // GPTM TimerB Prescale Match
N#define TIMER_O_TAR             0x00000048  // GPTM Timer A
N#define TIMER_O_TBR             0x0000004C  // GPTM Timer B
N#define TIMER_O_TAV             0x00000050  // GPTM Timer A Value
N#define TIMER_O_TBV             0x00000054  // GPTM Timer B Value
N#define TIMER_O_RTCPD           0x00000058  // GPTM RTC Predivide
N#define TIMER_O_TAPS            0x0000005C  // GPTM Timer A Prescale Snapshot
N#define TIMER_O_TBPS            0x00000060  // GPTM Timer B Prescale Snapshot
N#define TIMER_O_TAPV            0x00000064  // GPTM Timer A Prescale Value
N#define TIMER_O_TBPV            0x00000068  // GPTM Timer B Prescale Value
N#define TIMER_O_DMAEV           0x0000006C  // GPTM DMA Event
N#define TIMER_O_ADCEV           0x00000070  // GPTM ADC Event
N#define TIMER_O_PP              0x00000FC0  // GPTM Peripheral Properties
N#define TIMER_O_CC              0x00000FC8  // GPTM Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CFG register.
N//
N//*****************************************************************************
N#define TIMER_CFG_M             0x00000007  // GPTM Configuration
N#define TIMER_CFG_32_BIT_TIMER  0x00000000  // For a 16/32-bit timer, this
N                                            // value selects the 32-bit timer
N                                            // configuration
N#define TIMER_CFG_32_BIT_RTC    0x00000001  // For a 16/32-bit timer, this
N                                            // value selects the 32-bit
N                                            // real-time clock (RTC) counter
N                                            // configuration
N#define TIMER_CFG_16_BIT        0x00000004  // For a 16/32-bit timer, this
N                                            // value selects the 16-bit timer
N                                            // configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMR register.
N//
N//*****************************************************************************
N#define TIMER_TAMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TAMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TAMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TAMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TAMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TAMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TAMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TAMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TAMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TAMR_TACINTD      0x00001000  // One-shot/Periodic Interrupt
N                                            // Disable
N#define TIMER_TAMR_TAPLO        0x00000800  // GPTM Timer A PWM Legacy
N                                            // Operation
N#define TIMER_TAMR_TAMRSU       0x00000400  // GPTM Timer A Match Register
N                                            // Update
N#define TIMER_TAMR_TAPWMIE      0x00000200  // GPTM Timer A PWM Interrupt
N                                            // Enable
N#define TIMER_TAMR_TAILD        0x00000100  // GPTM Timer A Interval Load Write
N#define TIMER_TAMR_TASNAPS      0x00000080  // GPTM Timer A Snap-Shot Mode
N#define TIMER_TAMR_TAWOT        0x00000040  // GPTM Timer A Wait-on-Trigger
N#define TIMER_TAMR_TAMIE        0x00000020  // GPTM Timer A Match Interrupt
N                                            // Enable
N#define TIMER_TAMR_TACDIR       0x00000010  // GPTM Timer A Count Direction
N#define TIMER_TAMR_TAAMS        0x00000008  // GPTM Timer A Alternate Mode
N                                            // Select
N#define TIMER_TAMR_TACMR        0x00000004  // GPTM Timer A Capture Mode
N#define TIMER_TAMR_TAMR_M       0x00000003  // GPTM Timer A Mode
N#define TIMER_TAMR_TAMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TAMR_TAMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TAMR_TAMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMR register.
N//
N//*****************************************************************************
N#define TIMER_TBMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TBMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TBMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TBMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TBMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TBMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TBMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TBMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TBMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TBMR_TBCINTD      0x00001000  // One-Shot/Periodic Interrupt
N                                            // Disable
N#define TIMER_TBMR_TBPLO        0x00000800  // GPTM Timer B PWM Legacy
N                                            // Operation
N#define TIMER_TBMR_TBMRSU       0x00000400  // GPTM Timer B Match Register
N                                            // Update
N#define TIMER_TBMR_TBPWMIE      0x00000200  // GPTM Timer B PWM Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBILD        0x00000100  // GPTM Timer B Interval Load Write
N#define TIMER_TBMR_TBSNAPS      0x00000080  // GPTM Timer B Snap-Shot Mode
N#define TIMER_TBMR_TBWOT        0x00000040  // GPTM Timer B Wait-on-Trigger
N#define TIMER_TBMR_TBMIE        0x00000020  // GPTM Timer B Match Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBCDIR       0x00000010  // GPTM Timer B Count Direction
N#define TIMER_TBMR_TBAMS        0x00000008  // GPTM Timer B Alternate Mode
N                                            // Select
N#define TIMER_TBMR_TBCMR        0x00000004  // GPTM Timer B Capture Mode
N#define TIMER_TBMR_TBMR_M       0x00000003  // GPTM Timer B Mode
N#define TIMER_TBMR_TBMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TBMR_TBMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TBMR_TBMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CTL register.
N//
N//*****************************************************************************
N#define TIMER_CTL_TBPWML        0x00004000  // GPTM Timer B PWM Output Level
N#define TIMER_CTL_TBOTE         0x00002000  // GPTM Timer B Output Trigger
N                                            // Enable
N#define TIMER_CTL_TBEVENT_M     0x00000C00  // GPTM Timer B Event Mode
N#define TIMER_CTL_TBEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TBEVENT_NEG   0x00000400  // Negative edge
N#define TIMER_CTL_TBEVENT_BOTH  0x00000C00  // Both edges
N#define TIMER_CTL_TBSTALL       0x00000200  // GPTM Timer B Stall Enable
N#define TIMER_CTL_TBEN          0x00000100  // GPTM Timer B Enable
N#define TIMER_CTL_TAPWML        0x00000040  // GPTM Timer A PWM Output Level
N#define TIMER_CTL_TAOTE         0x00000020  // GPTM Timer A Output Trigger
N                                            // Enable
N#define TIMER_CTL_RTCEN         0x00000010  // GPTM RTC Stall Enable
N#define TIMER_CTL_TAEVENT_M     0x0000000C  // GPTM Timer A Event Mode
N#define TIMER_CTL_TAEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TAEVENT_NEG   0x00000004  // Negative edge
N#define TIMER_CTL_TAEVENT_BOTH  0x0000000C  // Both edges
N#define TIMER_CTL_TASTALL       0x00000002  // GPTM Timer A Stall Enable
N#define TIMER_CTL_TAEN          0x00000001  // GPTM Timer A Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_SYNC register.
N//
N//*****************************************************************************
N#define TIMER_SYNC_SYNCWT5_M    0x00C00000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 5
N#define TIMER_SYNC_SYNCWT5_NONE 0x00000000  // GPTM 32/64-Bit Timer 5 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT5_TA   0x00400000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT5_TB   0x00800000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT5_TATB 0x00C00000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 5 is triggered
N#define TIMER_SYNC_SYNCWT4_M    0x00300000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 4
N#define TIMER_SYNC_SYNCWT4_NONE 0x00000000  // GPTM 32/64-Bit Timer 4 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT4_TA   0x00100000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT4_TB   0x00200000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT4_TATB 0x00300000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 4 is triggered
N#define TIMER_SYNC_SYNCWT3_M    0x000C0000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 3
N#define TIMER_SYNC_SYNCWT3_NONE 0x00000000  // GPTM 32/64-Bit Timer 3 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT3_TA   0x00040000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT3_TB   0x00080000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT3_TATB 0x000C0000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 3 is triggered
N#define TIMER_SYNC_SYNCWT2_M    0x00030000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 2
N#define TIMER_SYNC_SYNCWT2_NONE 0x00000000  // GPTM 32/64-Bit Timer 2 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT2_TA   0x00010000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT2_TB   0x00020000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT2_TATB 0x00030000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 2 is triggered
N#define TIMER_SYNC_SYNCT7_M     0x0000C000  // Synchronize GPTM Timer 7
N#define TIMER_SYNC_SYNCT7_NONE  0x00000000  // GPT7 is not affected
N#define TIMER_SYNC_SYNCT7_TA    0x00004000  // A timeout event for Timer A of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TB    0x00008000  // A timeout event for Timer B of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TATB  0x0000C000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM7 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_M    0x0000C000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 1
N#define TIMER_SYNC_SYNCWT1_NONE 0x00000000  // GPTM 32/64-Bit Timer 1 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT1_TA   0x00004000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_TB   0x00008000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_TATB 0x0000C000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 1 is triggered
N#define TIMER_SYNC_SYNCWT0_M    0x00003000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 0
N#define TIMER_SYNC_SYNCWT0_NONE 0x00000000  // GPTM 32/64-Bit Timer 0 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT0_TA   0x00001000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT0_TB   0x00002000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT0_TATB 0x00003000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 0 is triggered
N#define TIMER_SYNC_SYNCT6_M     0x00003000  // Synchronize GPTM Timer 6
N#define TIMER_SYNC_SYNCT6_NONE  0x00000000  // GPTM6 is not affected
N#define TIMER_SYNC_SYNCT6_TA    0x00001000  // A timeout event for Timer A of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TB    0x00002000  // A timeout event for Timer B of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TATB  0x00003000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM6 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT5_M     0x00000C00  // Synchronize GPTM Timer 5
N#define TIMER_SYNC_SYNCT5_NONE  0x00000000  // GPTM5 is not affected
N#define TIMER_SYNC_SYNCT5_TA    0x00000400  // A timeout event for Timer A of
N                                            // GPTM5 is triggered
N#define TIMER_SYNC_SYNCT5_TB    0x00000800  // A timeout event for Timer B of
N                                            // GPTM5 is triggered
N#define TIMER_SYNC_SYNCT5_TATB  0x00000C00  // A timeout event for both Timer A
N                                            // and Timer B of GPTM5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT4_M     0x00000300  // Synchronize GPTM Timer 4
N#define TIMER_SYNC_SYNCT4_NONE  0x00000000  // GPTM4 is not affected
N#define TIMER_SYNC_SYNCT4_TA    0x00000100  // A timeout event for Timer A of
N                                            // GPTM4 is triggered
N#define TIMER_SYNC_SYNCT4_TB    0x00000200  // A timeout event for Timer B of
N                                            // GPTM4 is triggered
N#define TIMER_SYNC_SYNCT4_TATB  0x00000300  // A timeout event for both Timer A
N                                            // and Timer B of GPTM4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT3_M     0x000000C0  // Synchronize GPTM Timer 3
N#define TIMER_SYNC_SYNCT3_NONE  0x00000000  // GPTM3 is not affected
N#define TIMER_SYNC_SYNCT3_TA    0x00000040  // A timeout event for Timer A of
N                                            // GPTM3 is triggered
N#define TIMER_SYNC_SYNCT3_TB    0x00000080  // A timeout event for Timer B of
N                                            // GPTM3 is triggered
N#define TIMER_SYNC_SYNCT3_TATB  0x000000C0  // A timeout event for both Timer A
N                                            // and Timer B of GPTM3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT2_M     0x00000030  // Synchronize GPTM Timer 2
N#define TIMER_SYNC_SYNCT2_NONE  0x00000000  // GPTM2 is not affected
N#define TIMER_SYNC_SYNCT2_TA    0x00000010  // A timeout event for Timer A of
N                                            // GPTM2 is triggered
N#define TIMER_SYNC_SYNCT2_TB    0x00000020  // A timeout event for Timer B of
N                                            // GPTM2 is triggered
N#define TIMER_SYNC_SYNCT2_TATB  0x00000030  // A timeout event for both Timer A
N                                            // and Timer B of GPTM2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT1_M     0x0000000C  // Synchronize GPTM Timer 1
N#define TIMER_SYNC_SYNCT1_NONE  0x00000000  // GPTM1 is not affected
N#define TIMER_SYNC_SYNCT1_TA    0x00000004  // A timeout event for Timer A of
N                                            // GPTM1 is triggered
N#define TIMER_SYNC_SYNCT1_TB    0x00000008  // A timeout event for Timer B of
N                                            // GPTM1 is triggered
N#define TIMER_SYNC_SYNCT1_TATB  0x0000000C  // A timeout event for both Timer A
N                                            // and Timer B of GPTM1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT0_M     0x00000003  // Synchronize GPTM Timer 0
N#define TIMER_SYNC_SYNCT0_NONE  0x00000000  // GPTM0 is not affected
N#define TIMER_SYNC_SYNCT0_TA    0x00000001  // A timeout event for Timer A of
N                                            // GPTM0 is triggered
N#define TIMER_SYNC_SYNCT0_TB    0x00000002  // A timeout event for Timer B of
N                                            // GPTM0 is triggered
N#define TIMER_SYNC_SYNCT0_TATB  0x00000003  // A timeout event for both Timer A
N                                            // and Timer B of GPTM0 is
N                                            // triggered
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_IMR register.
N//
N//*****************************************************************************
N#define TIMER_IMR_WUEIM         0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Interrupt Mask
N#define TIMER_IMR_DMABIM        0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TBMIM         0x00000800  // GPTM Timer B Match Interrupt
N                                            // Mask
N#define TIMER_IMR_CBEIM         0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CBMIM         0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TBTOIM        0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Mask
N#define TIMER_IMR_DMAAIM        0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TAMIM         0x00000010  // GPTM Timer A Match Interrupt
N                                            // Mask
N#define TIMER_IMR_RTCIM         0x00000008  // GPTM RTC Interrupt Mask
N#define TIMER_IMR_CAEIM         0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CAMIM         0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TATOIM        0x00000001  // GPTM Timer A Time-Out Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RIS register.
N//
N//*****************************************************************************
N#define TIMER_RIS_WUERIS        0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Raw Interrupt Status
N#define TIMER_RIS_DMABRIS       0x00002000  // GPTM Timer B DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TBMRIS        0x00000800  // GPTM Timer B Match Raw Interrupt
N#define TIMER_RIS_CBERIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CBMRIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TBTORIS       0x00000100  // GPTM Timer B Time-Out Raw
N                                            // Interrupt
N#define TIMER_RIS_DMAARIS       0x00000020  // GPTM Timer A DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TAMRIS        0x00000010  // GPTM Timer A Match Raw Interrupt
N#define TIMER_RIS_RTCRIS        0x00000008  // GPTM RTC Raw Interrupt
N#define TIMER_RIS_CAERIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CAMRIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TATORIS       0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_MIS register.
N//
N//*****************************************************************************
N#define TIMER_MIS_WUEMIS        0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Masked Interrupt Status
N#define TIMER_MIS_DMABMIS       0x00002000  // GPTM Timer B DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TBMMIS        0x00000800  // GPTM Timer B Match Masked
N                                            // Interrupt
N#define TIMER_MIS_CBEMIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CBMMIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TBTOMIS       0x00000100  // GPTM Timer B Time-Out Masked
N                                            // Interrupt
N#define TIMER_MIS_DMAAMIS       0x00000020  // GPTM Timer A DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TAMMIS        0x00000010  // GPTM Timer A Match Masked
N                                            // Interrupt
N#define TIMER_MIS_RTCMIS        0x00000008  // GPTM RTC Masked Interrupt
N#define TIMER_MIS_CAEMIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CAMMIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TATOMIS       0x00000001  // GPTM Timer A Time-Out Masked
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ICR register.
N//
N//*****************************************************************************
N#define TIMER_ICR_WUECINT       0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Interrupt Clear
N#define TIMER_ICR_DMABINT       0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TBMCINT       0x00000800  // GPTM Timer B Match Interrupt
N                                            // Clear
N#define TIMER_ICR_CBECINT       0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CBMCINT       0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TBTOCINT      0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Clear
N#define TIMER_ICR_DMAAINT       0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TAMCINT       0x00000010  // GPTM Timer A Match Interrupt
N                                            // Clear
N#define TIMER_ICR_RTCCINT       0x00000008  // GPTM RTC Interrupt Clear
N#define TIMER_ICR_CAECINT       0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CAMCINT       0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TATOCINT      0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAILR register.
N//
N//*****************************************************************************
N#define TIMER_TAILR_M           0xFFFFFFFF  // GPTM Timer A Interval Load
N                                            // Register
N#define TIMER_TAILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBILR register.
N//
N//*****************************************************************************
N#define TIMER_TBILR_M           0xFFFFFFFF  // GPTM Timer B Interval Load
N                                            // Register
N#define TIMER_TBILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TAMATCHR_TAMR_M   0xFFFFFFFF  // GPTM Timer A Match Register
N#define TIMER_TAMATCHR_TAMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TBMATCHR_TBMR_M   0xFFFFFFFF  // GPTM Timer B Match Register
N#define TIMER_TBMATCHR_TBMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPR register.
N//
N//*****************************************************************************
N#define TIMER_TAPR_TAPSRH_M     0x0000FF00  // GPTM Timer A Prescale High Byte
N#define TIMER_TAPR_TAPSR_M      0x000000FF  // GPTM Timer A Prescale
N#define TIMER_TAPR_TAPSRH_S     8
N#define TIMER_TAPR_TAPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPR register.
N//
N//*****************************************************************************
N#define TIMER_TBPR_TBPSRH_M     0x0000FF00  // GPTM Timer B Prescale High Byte
N#define TIMER_TBPR_TBPSR_M      0x000000FF  // GPTM Timer B Prescale
N#define TIMER_TBPR_TBPSRH_S     8
N#define TIMER_TBPR_TBPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPMR register.
N//
N//*****************************************************************************
N#define TIMER_TAPMR_TAPSMRH_M   0x0000FF00  // GPTM Timer A Prescale Match High
N                                            // Byte
N#define TIMER_TAPMR_TAPSMR_M    0x000000FF  // GPTM TimerA Prescale Match
N#define TIMER_TAPMR_TAPSMRH_S   8
N#define TIMER_TAPMR_TAPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPMR register.
N//
N//*****************************************************************************
N#define TIMER_TBPMR_TBPSMRH_M   0x0000FF00  // GPTM Timer B Prescale Match High
N                                            // Byte
N#define TIMER_TBPMR_TBPSMR_M    0x000000FF  // GPTM TimerB Prescale Match
N#define TIMER_TBPMR_TBPSMRH_S   8
N#define TIMER_TBPMR_TBPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAR register.
N//
N//*****************************************************************************
N#define TIMER_TAR_M             0xFFFFFFFF  // GPTM Timer A Register
N#define TIMER_TAR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBR register.
N//
N//*****************************************************************************
N#define TIMER_TBR_M             0xFFFFFFFF  // GPTM Timer B Register
N#define TIMER_TBR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAV register.
N//
N//*****************************************************************************
N#define TIMER_TAV_M             0xFFFFFFFF  // GPTM Timer A Value
N#define TIMER_TAV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBV register.
N//
N//*****************************************************************************
N#define TIMER_TBV_M             0xFFFFFFFF  // GPTM Timer B Value
N#define TIMER_TBV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RTCPD register.
N//
N//*****************************************************************************
N#define TIMER_RTCPD_RTCPD_M     0x0000FFFF  // RTC Predivide Counter Value
N#define TIMER_RTCPD_RTCPD_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPS register.
N//
N//*****************************************************************************
N#define TIMER_TAPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Snapshot
N#define TIMER_TAPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPS register.
N//
N//*****************************************************************************
N#define TIMER_TBPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Value
N#define TIMER_TBPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPV register.
N//
N//*****************************************************************************
N#define TIMER_TAPV_PSV_M        0x0000FFFF  // GPTM Timer A Prescaler Value
N#define TIMER_TAPV_PSV_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPV register.
N//
N//*****************************************************************************
N#define TIMER_TBPV_PSV_M        0x0000FFFF  // GPTM Timer B Prescaler Value
N#define TIMER_TBPV_PSV_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_DMAEV register.
N//
N//*****************************************************************************
N#define TIMER_DMAEV_TBMDMAEN    0x00000800  // GPTM B Mode Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_CBEDMAEN    0x00000400  // GPTM B Capture Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CBMDMAEN    0x00000200  // GPTM B Capture Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TBTODMAEN   0x00000100  // GPTM B Time-Out Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TAMDMAEN    0x00000010  // GPTM A Mode Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_RTCDMAEN    0x00000008  // GPTM A RTC Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_CAEDMAEN    0x00000004  // GPTM A Capture Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CAMDMAEN    0x00000002  // GPTM A Capture Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TATODMAEN   0x00000001  // GPTM A Time-Out Event DMA
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ADCEV register.
N//
N//*****************************************************************************
N#define TIMER_ADCEV_TBMADCEN    0x00000800  // GPTM B Mode Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_CBEADCEN    0x00000400  // GPTM B Capture Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CBMADCEN    0x00000200  // GPTM B Capture Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TBTOADCEN   0x00000100  // GPTM B Time-Out Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TAMADCEN    0x00000010  // GPTM A Mode Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_RTCADCEN    0x00000008  // GPTM RTC Match Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CAEADCEN    0x00000004  // GPTM A Capture Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CAMADCEN    0x00000002  // GPTM A Capture Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TATOADCEN   0x00000001  // GPTM A Time-Out Event ADC
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_PP register.
N//
N//*****************************************************************************
N#define TIMER_PP_ALTCLK         0x00000040  // Alternate Clock Source
N#define TIMER_PP_SYNCCNT        0x00000020  // Synchronize Start
N#define TIMER_PP_CHAIN          0x00000010  // Chain with Other Timers
N#define TIMER_PP_SIZE_M         0x0000000F  // Count Size
N#define TIMER_PP_SIZE_16        0x00000000  // Timer A and Timer B counters are
N                                            // 16 bits each with an 8-bit
N                                            // prescale counter
N#define TIMER_PP_SIZE_32        0x00000001  // Timer A and Timer B counters are
N                                            // 32 bits each with a 16-bit
N                                            // prescale counter
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CC register.
N//
N//*****************************************************************************
N#define TIMER_CC_ALTCLK         0x00000001  // Alternate Clock Source
N
N#endif // __HW_TIMER_H__
L 30 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "inc/hw_ints.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/inc/hw_ints.h" 1
N//*****************************************************************************
N//
N// hw_ints.h - Macros that define the interrupt assignment on Tiva C Series
N// MCUs.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_INTS_H__
N#define __HW_INTS_H__
N
N//*****************************************************************************
N//
N// The following are defines for the fault assignments.
N//
N//*****************************************************************************
N#define FAULT_NMI               2           // NMI fault
N#define FAULT_HARD              3           // Hard fault
N#define FAULT_MPU               4           // MPU fault
N#define FAULT_BUS               5           // Bus fault
N#define FAULT_USAGE             6           // Usage fault
N#define FAULT_SVCALL            11          // SVCall
N#define FAULT_DEBUG             12          // Debug monitor
N#define FAULT_PENDSV            14          // PendSV
N#define FAULT_SYSTICK           15          // System Tick
N
N//*****************************************************************************
N//
N// TM4C123 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C123       16          // GPIO Port A
N#define INT_GPIOB_TM4C123       17          // GPIO Port B
N#define INT_GPIOC_TM4C123       18          // GPIO Port C
N#define INT_GPIOD_TM4C123       19          // GPIO Port D
N#define INT_GPIOE_TM4C123       20          // GPIO Port E
N#define INT_UART0_TM4C123       21          // UART0
N#define INT_UART1_TM4C123       22          // UART1
N#define INT_SSI0_TM4C123        23          // SSI0
N#define INT_I2C0_TM4C123        24          // I2C0
N#define INT_PWM0_FAULT_TM4C123  25          // PWM0 Fault
N#define INT_PWM0_0_TM4C123      26          // PWM0 Generator 0
N#define INT_PWM0_1_TM4C123      27          // PWM0 Generator 1
N#define INT_PWM0_2_TM4C123      28          // PWM0 Generator 2
N#define INT_QEI0_TM4C123        29          // QEI0
N#define INT_ADC0SS0_TM4C123     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C123     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C123     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C123     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C123    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C123     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C123     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C123     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C123     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C123     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C123     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C123       41          // Analog Comparator 0
N#define INT_COMP1_TM4C123       42          // Analog Comparator 1
N#define INT_COMP2_TM4C123       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C123      44          // System Control
N#define INT_FLASH_TM4C123       45          // Flash Memory Control and EEPROM
N                                            // Control
N#define INT_GPIOF_TM4C123       46          // GPIO Port F
N#define INT_GPIOG_TM4C123       47          // GPIO Port G
N#define INT_GPIOH_TM4C123       48          // GPIO Port H
N#define INT_UART2_TM4C123       49          // UART2
N#define INT_SSI1_TM4C123        50          // SSI1
N#define INT_TIMER3A_TM4C123     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C123     52          // Timer 3B
N#define INT_I2C1_TM4C123        53          // I2C1
N#define INT_QEI1_TM4C123        54          // QEI1
N#define INT_CAN0_TM4C123        55          // CAN0
N#define INT_CAN1_TM4C123        56          // CAN1
N#define INT_HIBERNATE_TM4C123   59          // Hibernation Module
N#define INT_USB0_TM4C123        60          // USB
N#define INT_PWM0_3_TM4C123      61          // PWM Generator 3
N#define INT_UDMA_TM4C123        62          // uDMA Software
N#define INT_UDMAERR_TM4C123     63          // uDMA Error
N#define INT_ADC1SS0_TM4C123     64          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C123     65          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C123     66          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C123     67          // ADC1 Sequence 3
N#define INT_GPIOJ_TM4C123       70          // GPIO Port J
N#define INT_GPIOK_TM4C123       71          // GPIO Port K
N#define INT_GPIOL_TM4C123       72          // GPIO Port L
N#define INT_SSI2_TM4C123        73          // SSI2
N#define INT_SSI3_TM4C123        74          // SSI3
N#define INT_UART3_TM4C123       75          // UART3
N#define INT_UART4_TM4C123       76          // UART4
N#define INT_UART5_TM4C123       77          // UART5
N#define INT_UART6_TM4C123       78          // UART6
N#define INT_UART7_TM4C123       79          // UART7
N#define INT_I2C2_TM4C123        84          // I2C2
N#define INT_I2C3_TM4C123        85          // I2C3
N#define INT_TIMER4A_TM4C123     86          // 16/32-Bit Timer 4A
N#define INT_TIMER4B_TM4C123     87          // 16/32-Bit Timer 4B
N#define INT_TIMER5A_TM4C123     108         // 16/32-Bit Timer 5A
N#define INT_TIMER5B_TM4C123     109         // 16/32-Bit Timer 5B
N#define INT_WTIMER0A_TM4C123    110         // 32/64-Bit Timer 0A
N#define INT_WTIMER0B_TM4C123    111         // 32/64-Bit Timer 0B
N#define INT_WTIMER1A_TM4C123    112         // 32/64-Bit Timer 1A
N#define INT_WTIMER1B_TM4C123    113         // 32/64-Bit Timer 1B
N#define INT_WTIMER2A_TM4C123    114         // 32/64-Bit Timer 2A
N#define INT_WTIMER2B_TM4C123    115         // 32/64-Bit Timer 2B
N#define INT_WTIMER3A_TM4C123    116         // 32/64-Bit Timer 3A
N#define INT_WTIMER3B_TM4C123    117         // 32/64-Bit Timer 3B
N#define INT_WTIMER4A_TM4C123    118         // 32/64-Bit Timer 4A
N#define INT_WTIMER4B_TM4C123    119         // 32/64-Bit Timer 4B
N#define INT_WTIMER5A_TM4C123    120         // 32/64-Bit Timer 5A
N#define INT_WTIMER5B_TM4C123    121         // 32/64-Bit Timer 5B
N#define INT_SYSEXC_TM4C123      122         // System Exception (imprecise)
N#define INT_I2C4_TM4C123        125         // I2C4
N#define INT_I2C5_TM4C123        126         // I2C5
N#define INT_GPIOM_TM4C123       127         // GPIO Port M
N#define INT_GPION_TM4C123       128         // GPIO Port N
N#define INT_GPIOP0_TM4C123      132         // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C123      133         // GPIO Port P1
N#define INT_GPIOP2_TM4C123      134         // GPIO Port P2
N#define INT_GPIOP3_TM4C123      135         // GPIO Port P3
N#define INT_GPIOP4_TM4C123      136         // GPIO Port P4
N#define INT_GPIOP5_TM4C123      137         // GPIO Port P5
N#define INT_GPIOP6_TM4C123      138         // GPIO Port P6
N#define INT_GPIOP7_TM4C123      139         // GPIO Port P7
N#define INT_GPIOQ0_TM4C123      140         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C123      141         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C123      142         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C123      143         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C123      144         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C123      145         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C123      146         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C123      147         // GPIO Port Q7
N#define INT_PWM1_0_TM4C123      150         // PWM1 Generator 0
N#define INT_PWM1_1_TM4C123      151         // PWM1 Generator 1
N#define INT_PWM1_2_TM4C123      152         // PWM1 Generator 2
N#define INT_PWM1_3_TM4C123      153         // PWM1 Generator 3
N#define INT_PWM1_FAULT_TM4C123  154         // PWM1 Fault
N#define NUM_INTERRUPTS_TM4C123  155
N
N//*****************************************************************************
N//
N// TM4C129 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C129       16          // GPIO Port A
N#define INT_GPIOB_TM4C129       17          // GPIO Port B
N#define INT_GPIOC_TM4C129       18          // GPIO Port C
N#define INT_GPIOD_TM4C129       19          // GPIO Port D
N#define INT_GPIOE_TM4C129       20          // GPIO Port E
N#define INT_UART0_TM4C129       21          // UART0
N#define INT_UART1_TM4C129       22          // UART1
N#define INT_SSI0_TM4C129        23          // SSI0
N#define INT_I2C0_TM4C129        24          // I2C0
N#define INT_PWM0_FAULT_TM4C129  25          // PWM Fault
N#define INT_PWM0_0_TM4C129      26          // PWM Generator 0
N#define INT_PWM0_1_TM4C129      27          // PWM Generator 1
N#define INT_PWM0_2_TM4C129      28          // PWM Generator 2
N#define INT_QEI0_TM4C129        29          // QEI0
N#define INT_ADC0SS0_TM4C129     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C129     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C129     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C129     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C129    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C129     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C129     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C129     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C129     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C129     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C129     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C129       41          // Analog Comparator 0
N#define INT_COMP1_TM4C129       42          // Analog Comparator 1
N#define INT_COMP2_TM4C129       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C129      44          // System Control
N#define INT_FLASH_TM4C129       45          // Flash Memory Control
N#define INT_GPIOF_TM4C129       46          // GPIO Port F
N#define INT_GPIOG_TM4C129       47          // GPIO Port G
N#define INT_GPIOH_TM4C129       48          // GPIO Port H
N#define INT_UART2_TM4C129       49          // UART2
N#define INT_SSI1_TM4C129        50          // SSI1
N#define INT_TIMER3A_TM4C129     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C129     52          // 16/32-Bit Timer 3B
N#define INT_I2C1_TM4C129        53          // I2C1
N#define INT_CAN0_TM4C129        54          // CAN 0
N#define INT_CAN1_TM4C129        55          // CAN1
N#define INT_EMAC0_TM4C129       56          // Ethernet MAC
N#define INT_HIBERNATE_TM4C129   57          // HIB
N#define INT_USB0_TM4C129        58          // USB MAC
N#define INT_PWM0_3_TM4C129      59          // PWM Generator 3
N#define INT_UDMA_TM4C129        60          // uDMA 0 Software
N#define INT_UDMAERR_TM4C129     61          // uDMA 0 Error
N#define INT_ADC1SS0_TM4C129     62          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C129     63          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C129     64          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C129     65          // ADC1 Sequence 3
N#define INT_EPI0_TM4C129        66          // EPI 0
N#define INT_GPIOJ_TM4C129       67          // GPIO Port J
N#define INT_GPIOK_TM4C129       68          // GPIO Port K
N#define INT_GPIOL_TM4C129       69          // GPIO Port L
N#define INT_SSI2_TM4C129        70          // SSI 2
N#define INT_SSI3_TM4C129        71          // SSI 3
N#define INT_UART3_TM4C129       72          // UART 3
N#define INT_UART4_TM4C129       73          // UART 4
N#define INT_UART5_TM4C129       74          // UART 5
N#define INT_UART6_TM4C129       75          // UART 6
N#define INT_UART7_TM4C129       76          // UART 7
N#define INT_I2C2_TM4C129        77          // I2C 2
N#define INT_I2C3_TM4C129        78          // I2C 3
N#define INT_TIMER4A_TM4C129     79          // Timer 4A
N#define INT_TIMER4B_TM4C129     80          // Timer 4B
N#define INT_TIMER5A_TM4C129     81          // Timer 5A
N#define INT_TIMER5B_TM4C129     82          // Timer 5B
N#define INT_SYSEXC_TM4C129      83          // Floating-Point Exception
N                                            // (imprecise)
N#define INT_I2C4_TM4C129        86          // I2C 4
N#define INT_I2C5_TM4C129        87          // I2C 5
N#define INT_GPIOM_TM4C129       88          // GPIO Port M
N#define INT_GPION_TM4C129       89          // GPIO Port N
N#define INT_TAMPER0_TM4C129     91          // Tamper
N#define INT_GPIOP0_TM4C129      92          // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C129      93          // GPIO Port P1
N#define INT_GPIOP2_TM4C129      94          // GPIO Port P2
N#define INT_GPIOP3_TM4C129      95          // GPIO Port P3
N#define INT_GPIOP4_TM4C129      96          // GPIO Port P4
N#define INT_GPIOP5_TM4C129      97          // GPIO Port P5
N#define INT_GPIOP6_TM4C129      98          // GPIO Port P6
N#define INT_GPIOP7_TM4C129      99          // GPIO Port P7
N#define INT_GPIOQ0_TM4C129      100         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C129      101         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C129      102         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C129      103         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C129      104         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C129      105         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C129      106         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C129      107         // GPIO Port Q7
N#define INT_GPIOR_TM4C129       108         // GPIO Port R
N#define INT_GPIOS_TM4C129       109         // GPIO Port S
N#define INT_SHA0_TM4C129        110         // SHA/MD5
N#define INT_AES0_TM4C129        111         // AES
N#define INT_DES0_TM4C129        112         // DES
N#define INT_LCD0_TM4C129        113         // LCD
N#define INT_TIMER6A_TM4C129     114         // 16/32-Bit Timer 6A
N#define INT_TIMER6B_TM4C129     115         // 16/32-Bit Timer 6B
N#define INT_TIMER7A_TM4C129     116         // 16/32-Bit Timer 7A
N#define INT_TIMER7B_TM4C129     117         // 16/32-Bit Timer 7B
N#define INT_I2C6_TM4C129        118         // I2C 6
N#define INT_I2C7_TM4C129        119         // I2C 7
N#define INT_ONEWIRE0_TM4C129    121         // 1-Wire
N#define INT_I2C8_TM4C129        125         // I2C 8
N#define INT_I2C9_TM4C129        126         // I2C 9
N#define INT_GPIOT_TM4C129       127         // GPIO T
N#define NUM_INTERRUPTS_TM4C129  129
N
N//*****************************************************************************
N//
N// TM4C123 Interrupt Class Definition
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) || defined(TARGET_IS_TM4C123_RA2) || \
N    defined(TARGET_IS_TM4C123_RA3) || defined(TARGET_IS_TM4C123_RB0) || \
N    defined(TARGET_IS_TM4C123_RB1) || defined(PART_TM4C1230C3PM) || \
N    defined(PART_TM4C1230D5PM) || defined(PART_TM4C1230E6PM) || \
N    defined(PART_TM4C1230H6PM) || defined(PART_TM4C1231C3PM) || \
N    defined(PART_TM4C1231D5PM) || defined(PART_TM4C1231D5PZ) || \
N    defined(PART_TM4C1231E6PM) || defined(PART_TM4C1231E6PZ) || \
N    defined(PART_TM4C1231H6PM) || defined(PART_TM4C1231H6PZ) || \
N    defined(PART_TM4C1232C3PM) || defined(PART_TM4C1232D5PM) || \
N    defined(PART_TM4C1232E6PM) || defined(PART_TM4C1232H6PM) || \
N    defined(PART_TM4C1233C3PM) || defined(PART_TM4C1233D5PM) || \
N    defined(PART_TM4C1233D5PZ) || defined(PART_TM4C1233E6PM) || \
N    defined(PART_TM4C1233E6PZ) || defined(PART_TM4C1233H6PM) || \
N    defined(PART_TM4C1233H6PZ) || defined(PART_TM4C1236D5PM) || \
N    defined(PART_TM4C1236E6PM) || defined(PART_TM4C1236H6PM) || \
N    defined(PART_TM4C1237D5PM) || defined(PART_TM4C1237D5PZ) || \
N    defined(PART_TM4C1237E6PM) || defined(PART_TM4C1237E6PZ) || \
N    defined(PART_TM4C1237H6PM) || defined(PART_TM4C1237H6PZ) || \
N    defined(PART_TM4C123AE6PM) || defined(PART_TM4C123AH6PM) || \
N    defined(PART_TM4C123BE6PM) || defined(PART_TM4C123BE6PZ) || \
N    defined(PART_TM4C123BH6PM) || defined(PART_TM4C123BH6PZ) || \
N    defined(PART_TM4C123FE6PM) || defined(PART_TM4C123FH6PM) || \
N    defined(PART_TM4C123GE6PM) || defined(PART_TM4C123GE6PZ) || \
N    defined(PART_TM4C123GH6PM) || defined(PART_TM4C123GH6PZ) || \
N    defined(PART_TM4C1231H6PGE) || defined(PART_TM4C1233H6PGE) || \
N    defined(PART_TM4C1237H6PGE) || defined(PART_TM4C123BH6PGE) || \
N    defined(PART_TM4C123BH6ZRB) || defined(PART_TM4C123GH6PGE) || \
N    defined(PART_TM4C123GH6ZRB) || defined(PART_TM4C123GH6ZXR)
X#if 0L || 0L ||     0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L
N#define INT_RESOLVE(intname, class) intname##TM4C123
N
N//*****************************************************************************
N//
N// TM4C129 Interrupt Class Definition
N//
N//*****************************************************************************
N#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) || \
N    defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) || \
N    defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) || \
N    defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) || \
N    defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) || \
N    defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) || \
N    defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) || \
N    defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) || \
N    defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) || \
N    defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) || \
N    defined(PART_TM4C129XNCZAD)
X#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) ||     defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) ||     defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) ||     defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) ||     defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) ||     defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) ||     defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) ||     defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) ||     defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) ||     defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) ||     defined(PART_TM4C129XNCZAD)
S#define INT_RESOLVE(intname, class) intname##TM4C129
S#else
S#define INT_DEVICE_CLASS        "UNKNOWN"
N#endif
N
N//*****************************************************************************
N//
N// Macros to resolve the INT_PERIPH_CLASS name to a common INT_PERIPH name.
N//
N//*****************************************************************************
N#define INT_CONCAT(intname, class)  INT_RESOLVE(intname, class)
N
N//*****************************************************************************
N//
N// The following are defines for the interrupt assignments.
N//
N//*****************************************************************************
N#define INT_ADC0SS0             INT_CONCAT(INT_ADC0SS0_, INT_DEVICE_CLASS)
N#define INT_ADC0SS1             INT_CONCAT(INT_ADC0SS1_, INT_DEVICE_CLASS)
N#define INT_ADC0SS2             INT_CONCAT(INT_ADC0SS2_, INT_DEVICE_CLASS)
N#define INT_ADC0SS3             INT_CONCAT(INT_ADC0SS3_, INT_DEVICE_CLASS)
N#define INT_ADC1SS0             INT_CONCAT(INT_ADC1SS0_, INT_DEVICE_CLASS)
N#define INT_ADC1SS1             INT_CONCAT(INT_ADC1SS1_, INT_DEVICE_CLASS)
N#define INT_ADC1SS2             INT_CONCAT(INT_ADC1SS2_, INT_DEVICE_CLASS)
N#define INT_ADC1SS3             INT_CONCAT(INT_ADC1SS3_, INT_DEVICE_CLASS)
N#define INT_AES0                INT_CONCAT(INT_AES0_, INT_DEVICE_CLASS)
N#define INT_CAN0                INT_CONCAT(INT_CAN0_, INT_DEVICE_CLASS)
N#define INT_CAN1                INT_CONCAT(INT_CAN1_, INT_DEVICE_CLASS)
N#define INT_COMP0               INT_CONCAT(INT_COMP0_, INT_DEVICE_CLASS)
N#define INT_COMP1               INT_CONCAT(INT_COMP1_, INT_DEVICE_CLASS)
N#define INT_COMP2               INT_CONCAT(INT_COMP2_, INT_DEVICE_CLASS)
N#define INT_DES0                INT_CONCAT(INT_DES0_, INT_DEVICE_CLASS)
N#define INT_EMAC0               INT_CONCAT(INT_EMAC0_, INT_DEVICE_CLASS)
N#define INT_EPI0                INT_CONCAT(INT_EPI0_, INT_DEVICE_CLASS)
N#define INT_FLASH               INT_CONCAT(INT_FLASH_, INT_DEVICE_CLASS)
N#define INT_GPIOA               INT_CONCAT(INT_GPIOA_, INT_DEVICE_CLASS)
N#define INT_GPIOB               INT_CONCAT(INT_GPIOB_, INT_DEVICE_CLASS)
N#define INT_GPIOC               INT_CONCAT(INT_GPIOC_, INT_DEVICE_CLASS)
N#define INT_GPIOD               INT_CONCAT(INT_GPIOD_, INT_DEVICE_CLASS)
N#define INT_GPIOE               INT_CONCAT(INT_GPIOE_, INT_DEVICE_CLASS)
N#define INT_GPIOF               INT_CONCAT(INT_GPIOF_, INT_DEVICE_CLASS)
N#define INT_GPIOG               INT_CONCAT(INT_GPIOG_, INT_DEVICE_CLASS)
N#define INT_GPIOH               INT_CONCAT(INT_GPIOH_, INT_DEVICE_CLASS)
N#define INT_GPIOJ               INT_CONCAT(INT_GPIOJ_, INT_DEVICE_CLASS)
N#define INT_GPIOK               INT_CONCAT(INT_GPIOK_, INT_DEVICE_CLASS)
N#define INT_GPIOL               INT_CONCAT(INT_GPIOL_, INT_DEVICE_CLASS)
N#define INT_GPIOM               INT_CONCAT(INT_GPIOM_, INT_DEVICE_CLASS)
N#define INT_GPION               INT_CONCAT(INT_GPION_, INT_DEVICE_CLASS)
N#define INT_GPIOP0              INT_CONCAT(INT_GPIOP0_, INT_DEVICE_CLASS)
N#define INT_GPIOP1              INT_CONCAT(INT_GPIOP1_, INT_DEVICE_CLASS)
N#define INT_GPIOP2              INT_CONCAT(INT_GPIOP2_, INT_DEVICE_CLASS)
N#define INT_GPIOP3              INT_CONCAT(INT_GPIOP3_, INT_DEVICE_CLASS)
N#define INT_GPIOP4              INT_CONCAT(INT_GPIOP4_, INT_DEVICE_CLASS)
N#define INT_GPIOP5              INT_CONCAT(INT_GPIOP5_, INT_DEVICE_CLASS)
N#define INT_GPIOP6              INT_CONCAT(INT_GPIOP6_, INT_DEVICE_CLASS)
N#define INT_GPIOP7              INT_CONCAT(INT_GPIOP7_, INT_DEVICE_CLASS)
N#define INT_GPIOQ0              INT_CONCAT(INT_GPIOQ0_, INT_DEVICE_CLASS)
N#define INT_GPIOQ1              INT_CONCAT(INT_GPIOQ1_, INT_DEVICE_CLASS)
N#define INT_GPIOQ2              INT_CONCAT(INT_GPIOQ2_, INT_DEVICE_CLASS)
N#define INT_GPIOQ3              INT_CONCAT(INT_GPIOQ3_, INT_DEVICE_CLASS)
N#define INT_GPIOQ4              INT_CONCAT(INT_GPIOQ4_, INT_DEVICE_CLASS)
N#define INT_GPIOQ5              INT_CONCAT(INT_GPIOQ5_, INT_DEVICE_CLASS)
N#define INT_GPIOQ6              INT_CONCAT(INT_GPIOQ6_, INT_DEVICE_CLASS)
N#define INT_GPIOQ7              INT_CONCAT(INT_GPIOQ7_, INT_DEVICE_CLASS)
N#define INT_GPIOR               INT_CONCAT(INT_GPIOR_, INT_DEVICE_CLASS)
N#define INT_GPIOS               INT_CONCAT(INT_GPIOS_, INT_DEVICE_CLASS)
N#define INT_GPIOT               INT_CONCAT(INT_GPIOT_, INT_DEVICE_CLASS)
N#define INT_HIBERNATE           INT_CONCAT(INT_HIBERNATE_, INT_DEVICE_CLASS)
N#define INT_I2C0                INT_CONCAT(INT_I2C0_, INT_DEVICE_CLASS)
N#define INT_I2C1                INT_CONCAT(INT_I2C1_, INT_DEVICE_CLASS)
N#define INT_I2C2                INT_CONCAT(INT_I2C2_, INT_DEVICE_CLASS)
N#define INT_I2C3                INT_CONCAT(INT_I2C3_, INT_DEVICE_CLASS)
N#define INT_I2C4                INT_CONCAT(INT_I2C4_, INT_DEVICE_CLASS)
N#define INT_I2C5                INT_CONCAT(INT_I2C5_, INT_DEVICE_CLASS)
N#define INT_I2C6                INT_CONCAT(INT_I2C6_, INT_DEVICE_CLASS)
N#define INT_I2C7                INT_CONCAT(INT_I2C7_, INT_DEVICE_CLASS)
N#define INT_I2C8                INT_CONCAT(INT_I2C8_, INT_DEVICE_CLASS)
N#define INT_I2C9                INT_CONCAT(INT_I2C9_, INT_DEVICE_CLASS)
N#define INT_LCD0                INT_CONCAT(INT_LCD0_, INT_DEVICE_CLASS)
N#define INT_ONEWIRE0            INT_CONCAT(INT_ONEWIRE0_, INT_DEVICE_CLASS)
N#define INT_PWM0_0              INT_CONCAT(INT_PWM0_0_, INT_DEVICE_CLASS)
N#define INT_PWM0_1              INT_CONCAT(INT_PWM0_1_, INT_DEVICE_CLASS)
N#define INT_PWM0_2              INT_CONCAT(INT_PWM0_2_, INT_DEVICE_CLASS)
N#define INT_PWM0_3              INT_CONCAT(INT_PWM0_3_, INT_DEVICE_CLASS)
N#define INT_PWM0_FAULT          INT_CONCAT(INT_PWM0_FAULT_, INT_DEVICE_CLASS)
N#define INT_PWM1_0              INT_CONCAT(INT_PWM1_0_, INT_DEVICE_CLASS)
N#define INT_PWM1_1              INT_CONCAT(INT_PWM1_1_, INT_DEVICE_CLASS)
N#define INT_PWM1_2              INT_CONCAT(INT_PWM1_2_, INT_DEVICE_CLASS)
N#define INT_PWM1_3              INT_CONCAT(INT_PWM1_3_, INT_DEVICE_CLASS)
N#define INT_PWM1_FAULT          INT_CONCAT(INT_PWM1_FAULT_, INT_DEVICE_CLASS)
N#define INT_QEI0                INT_CONCAT(INT_QEI0_, INT_DEVICE_CLASS)
N#define INT_QEI1                INT_CONCAT(INT_QEI1_, INT_DEVICE_CLASS)
N#define INT_SHA0                INT_CONCAT(INT_SHA0_, INT_DEVICE_CLASS)
N#define INT_SSI0                INT_CONCAT(INT_SSI0_, INT_DEVICE_CLASS)
N#define INT_SSI1                INT_CONCAT(INT_SSI1_, INT_DEVICE_CLASS)
N#define INT_SSI2                INT_CONCAT(INT_SSI2_, INT_DEVICE_CLASS)
N#define INT_SSI3                INT_CONCAT(INT_SSI3_, INT_DEVICE_CLASS)
N#define INT_SYSCTL              INT_CONCAT(INT_SYSCTL_, INT_DEVICE_CLASS)
N#define INT_SYSEXC              INT_CONCAT(INT_SYSEXC_, INT_DEVICE_CLASS)
N#define INT_TAMPER0             INT_CONCAT(INT_TAMPER0_, INT_DEVICE_CLASS)
N#define INT_TIMER0A             INT_CONCAT(INT_TIMER0A_, INT_DEVICE_CLASS)
N#define INT_TIMER0B             INT_CONCAT(INT_TIMER0B_, INT_DEVICE_CLASS)
N#define INT_TIMER1A             INT_CONCAT(INT_TIMER1A_, INT_DEVICE_CLASS)
N#define INT_TIMER1B             INT_CONCAT(INT_TIMER1B_, INT_DEVICE_CLASS)
N#define INT_TIMER2A             INT_CONCAT(INT_TIMER2A_, INT_DEVICE_CLASS)
N#define INT_TIMER2B             INT_CONCAT(INT_TIMER2B_, INT_DEVICE_CLASS)
N#define INT_TIMER3A             INT_CONCAT(INT_TIMER3A_, INT_DEVICE_CLASS)
N#define INT_TIMER3B             INT_CONCAT(INT_TIMER3B_, INT_DEVICE_CLASS)
N#define INT_TIMER4A             INT_CONCAT(INT_TIMER4A_, INT_DEVICE_CLASS)
N#define INT_TIMER4B             INT_CONCAT(INT_TIMER4B_, INT_DEVICE_CLASS)
N#define INT_TIMER5A             INT_CONCAT(INT_TIMER5A_, INT_DEVICE_CLASS)
N#define INT_TIMER5B             INT_CONCAT(INT_TIMER5B_, INT_DEVICE_CLASS)
N#define INT_TIMER6A             INT_CONCAT(INT_TIMER6A_, INT_DEVICE_CLASS)
N#define INT_TIMER6B             INT_CONCAT(INT_TIMER6B_, INT_DEVICE_CLASS)
N#define INT_TIMER7A             INT_CONCAT(INT_TIMER7A_, INT_DEVICE_CLASS)
N#define INT_TIMER7B             INT_CONCAT(INT_TIMER7B_, INT_DEVICE_CLASS)
N#define INT_UART0               INT_CONCAT(INT_UART0_, INT_DEVICE_CLASS)
N#define INT_UART1               INT_CONCAT(INT_UART1_, INT_DEVICE_CLASS)
N#define INT_UART2               INT_CONCAT(INT_UART2_, INT_DEVICE_CLASS)
N#define INT_UART3               INT_CONCAT(INT_UART3_, INT_DEVICE_CLASS)
N#define INT_UART4               INT_CONCAT(INT_UART4_, INT_DEVICE_CLASS)
N#define INT_UART5               INT_CONCAT(INT_UART5_, INT_DEVICE_CLASS)
N#define INT_UART6               INT_CONCAT(INT_UART6_, INT_DEVICE_CLASS)
N#define INT_UART7               INT_CONCAT(INT_UART7_, INT_DEVICE_CLASS)
N#define INT_UDMA                INT_CONCAT(INT_UDMA_, INT_DEVICE_CLASS)
N#define INT_UDMAERR             INT_CONCAT(INT_UDMAERR_, INT_DEVICE_CLASS)
N#define INT_USB0                INT_CONCAT(INT_USB0_, INT_DEVICE_CLASS)
N#define INT_WATCHDOG            INT_CONCAT(INT_WATCHDOG_, INT_DEVICE_CLASS)
N#define INT_WTIMER0A            INT_CONCAT(INT_WTIMER0A_, INT_DEVICE_CLASS)
N#define INT_WTIMER0B            INT_CONCAT(INT_WTIMER0B_, INT_DEVICE_CLASS)
N#define INT_WTIMER1A            INT_CONCAT(INT_WTIMER1A_, INT_DEVICE_CLASS)
N#define INT_WTIMER1B            INT_CONCAT(INT_WTIMER1B_, INT_DEVICE_CLASS)
N#define INT_WTIMER2A            INT_CONCAT(INT_WTIMER2A_, INT_DEVICE_CLASS)
N#define INT_WTIMER2B            INT_CONCAT(INT_WTIMER2B_, INT_DEVICE_CLASS)
N#define INT_WTIMER3A            INT_CONCAT(INT_WTIMER3A_, INT_DEVICE_CLASS)
N#define INT_WTIMER3B            INT_CONCAT(INT_WTIMER3B_, INT_DEVICE_CLASS)
N#define INT_WTIMER4A            INT_CONCAT(INT_WTIMER4A_, INT_DEVICE_CLASS)
N#define INT_WTIMER4B            INT_CONCAT(INT_WTIMER4B_, INT_DEVICE_CLASS)
N#define INT_WTIMER5A            INT_CONCAT(INT_WTIMER5A_, INT_DEVICE_CLASS)
N#define INT_WTIMER5B            INT_CONCAT(INT_WTIMER5B_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of interrupts.
N//
N//*****************************************************************************
N#define NUM_INTERRUPTS          INT_CONCAT(NUM_INTERRUPTS_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of priority levels.
N//
N//*****************************************************************************
N#define NUM_PRIORITY            8
N#define NUM_PRIORITY_BITS       3
N
N#endif // __HW_INTS_H__
L 31 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/sysctl.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/sysctl.h" 1
N//*****************************************************************************
N//
N// sysctl.h - Prototypes for the system control driver.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SYSCTL_H__
N#define __DRIVERLIB_SYSCTL_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the
N// SysCtlPeripheralPresent(), SysCtlPeripheralEnable(),
N// SysCtlPeripheralDisable(), and SysCtlPeripheralReset() APIs as the
N// ui32Peripheral parameter.  The peripherals in the fourth group (upper nibble
N// is 3) can only be used with the SysCtlPeripheralPresent() API.
N//
N//*****************************************************************************
N#define SYSCTL_PERIPH_ADC0      0xf0003800  // ADC 0
N#define SYSCTL_PERIPH_ADC1      0xf0003801  // ADC 1
N#define SYSCTL_PERIPH_CAN0      0xf0003400  // CAN 0
N#define SYSCTL_PERIPH_CAN1      0xf0003401  // CAN 1
N#define SYSCTL_PERIPH_COMP0     0xf0003c00  // Analog Comparator Module 0
N#define SYSCTL_PERIPH_EMAC0     0xf0009c00  // Ethernet MAC0
N#define SYSCTL_PERIPH_EPHY0     0xf0003000  // Ethernet PHY0
N#define SYSCTL_PERIPH_EPI0      0xf0001000  // EPI0
N#define SYSCTL_PERIPH_GPIOA     0xf0000800  // GPIO A
N#define SYSCTL_PERIPH_GPIOB     0xf0000801  // GPIO B
N#define SYSCTL_PERIPH_GPIOC     0xf0000802  // GPIO C
N#define SYSCTL_PERIPH_GPIOD     0xf0000803  // GPIO D
N#define SYSCTL_PERIPH_GPIOE     0xf0000804  // GPIO E
N#define SYSCTL_PERIPH_GPIOF     0xf0000805  // GPIO F
N#define SYSCTL_PERIPH_GPIOG     0xf0000806  // GPIO G
N#define SYSCTL_PERIPH_GPIOH     0xf0000807  // GPIO H
N#define SYSCTL_PERIPH_GPIOJ     0xf0000808  // GPIO J
N#define SYSCTL_PERIPH_HIBERNATE 0xf0001400  // Hibernation module
N#define SYSCTL_PERIPH_CCM0      0xf0007400  // CCM 0
N#define SYSCTL_PERIPH_EEPROM0   0xf0005800  // EEPROM 0
N#define SYSCTL_PERIPH_FAN0      0xf0005400  // FAN 0
N#define SYSCTL_PERIPH_FAN1      0xf0005401  // FAN 1
N#define SYSCTL_PERIPH_GPIOK     0xf0000809  // GPIO K
N#define SYSCTL_PERIPH_GPIOL     0xf000080a  // GPIO L
N#define SYSCTL_PERIPH_GPIOM     0xf000080b  // GPIO M
N#define SYSCTL_PERIPH_GPION     0xf000080c  // GPIO N
N#define SYSCTL_PERIPH_GPIOP     0xf000080d  // GPIO P
N#define SYSCTL_PERIPH_GPIOQ     0xf000080e  // GPIO Q
N#define SYSCTL_PERIPH_GPIOR     0xf000080f  // GPIO R
N#define SYSCTL_PERIPH_GPIOS     0xf0000810  // GPIO S
N#define SYSCTL_PERIPH_GPIOT     0xf0000811  // GPIO T
N#define SYSCTL_PERIPH_I2C0      0xf0002000  // I2C 0
N#define SYSCTL_PERIPH_I2C1      0xf0002001  // I2C 1
N#define SYSCTL_PERIPH_I2C2      0xf0002002  // I2C 2
N#define SYSCTL_PERIPH_I2C3      0xf0002003  // I2C 3
N#define SYSCTL_PERIPH_I2C4      0xf0002004  // I2C 4
N#define SYSCTL_PERIPH_I2C5      0xf0002005  // I2C 5
N#define SYSCTL_PERIPH_I2C6      0xf0002006  // I2C 6
N#define SYSCTL_PERIPH_I2C7      0xf0002007  // I2C 7
N#define SYSCTL_PERIPH_I2C8      0xf0002008  // I2C 8
N#define SYSCTL_PERIPH_I2C9      0xf0002009  // I2C 9
N#define SYSCTL_PERIPH_LCD0      0xf0009000  // LCD 0
N#define SYSCTL_PERIPH_ONEWIRE0  0xf0009800  // One Wire 0
N#define SYSCTL_PERIPH_PWM0      0xf0004000  // PWM 0
N#define SYSCTL_PERIPH_PWM1      0xf0004001  // PWM 1
N#define SYSCTL_PERIPH_QEI0      0xf0004400  // QEI 0
N#define SYSCTL_PERIPH_QEI1      0xf0004401  // QEI 1
N#define SYSCTL_PERIPH_SSI0      0xf0001c00  // SSI 0
N#define SYSCTL_PERIPH_SSI1      0xf0001c01  // SSI 1
N#define SYSCTL_PERIPH_SSI2      0xf0001c02  // SSI 2
N#define SYSCTL_PERIPH_SSI3      0xf0001c03  // SSI 3
N#define SYSCTL_PERIPH_TIMER0    0xf0000400  // Timer 0
N#define SYSCTL_PERIPH_TIMER1    0xf0000401  // Timer 1
N#define SYSCTL_PERIPH_TIMER2    0xf0000402  // Timer 2
N#define SYSCTL_PERIPH_TIMER3    0xf0000403  // Timer 3
N#define SYSCTL_PERIPH_TIMER4    0xf0000404  // Timer 4
N#define SYSCTL_PERIPH_TIMER5    0xf0000405  // Timer 5
N#define SYSCTL_PERIPH_TIMER6    0xf0000406  // Timer 6
N#define SYSCTL_PERIPH_TIMER7    0xf0000407  // Timer 7
N#define SYSCTL_PERIPH_UART0     0xf0001800  // UART 0
N#define SYSCTL_PERIPH_UART1     0xf0001801  // UART 1
N#define SYSCTL_PERIPH_UART2     0xf0001802  // UART 2
N#define SYSCTL_PERIPH_UART3     0xf0001803  // UART 3
N#define SYSCTL_PERIPH_UART4     0xf0001804  // UART 4
N#define SYSCTL_PERIPH_UART5     0xf0001805  // UART 5
N#define SYSCTL_PERIPH_UART6     0xf0001806  // UART 6
N#define SYSCTL_PERIPH_UART7     0xf0001807  // UART 7
N#define SYSCTL_PERIPH_UDMA      0xf0000c00  // uDMA
N#define SYSCTL_PERIPH_USB0      0xf0002800  // USB 0
N#define SYSCTL_PERIPH_WDOG0     0xf0000000  // Watchdog 0
N#define SYSCTL_PERIPH_WDOG1     0xf0000001  // Watchdog 1
N#define SYSCTL_PERIPH_WTIMER0   0xf0005c00  // Wide Timer 0
N#define SYSCTL_PERIPH_WTIMER1   0xf0005c01  // Wide Timer 1
N#define SYSCTL_PERIPH_WTIMER2   0xf0005c02  // Wide Timer 2
N#define SYSCTL_PERIPH_WTIMER3   0xf0005c03  // Wide Timer 3
N#define SYSCTL_PERIPH_WTIMER4   0xf0005c04  // Wide Timer 4
N#define SYSCTL_PERIPH_WTIMER5   0xf0005c05  // Wide Timer 5
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOSleepSet() and
N// SysCtlLDODeepSleepSet() APIs as the ui32Voltage value, or returned by the
N// SysCtlLDOSleepGet() and SysCtlLDODeepSleepGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_0_90V        0x80000012  // LDO output of 0.90V
N#define SYSCTL_LDO_0_95V        0x80000013  // LDO output of 0.95V
N#define SYSCTL_LDO_1_00V        0x80000014  // LDO output of 1.00V
N#define SYSCTL_LDO_1_05V        0x80000015  // LDO output of 1.05V
N#define SYSCTL_LDO_1_10V        0x80000016  // LDO output of 1.10V
N#define SYSCTL_LDO_1_15V        0x80000017  // LDO output of 1.15V
N#define SYSCTL_LDO_1_20V        0x80000018  // LDO output of 1.20V
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlIntEnable(),
N// SysCtlIntDisable(), and SysCtlIntClear() APIs, or returned in the bit mask
N// by the SysCtlIntStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_INT_BOR0         0x00000800  // VDD under BOR0
N#define SYSCTL_INT_VDDA_OK      0x00000400  // VDDA Power OK
N#define SYSCTL_INT_MOSC_PUP     0x00000100  // MOSC power-up interrupt
N#define SYSCTL_INT_USBPLL_LOCK  0x00000080  // USB PLL lock interrupt
N#define SYSCTL_INT_PLL_LOCK     0x00000040  // PLL lock interrupt
N#define SYSCTL_INT_MOSC_FAIL    0x00000008  // Main oscillator failure int
N#define SYSCTL_INT_BOR1         0x00000002  // VDD under BOR1
N#define SYSCTL_INT_BOR          0x00000002  // Brown out interrupt
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlResetCauseClear()
N// API or returned by the SysCtlResetCauseGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_CAUSE_HSRVREQ    0x00001000  // Hardware System Service Request
N#define SYSCTL_CAUSE_HIB        0x00000040  // Hibernate reset
N#define SYSCTL_CAUSE_WDOG1      0x00000020  // Watchdog 1 reset
N#define SYSCTL_CAUSE_SW         0x00000010  // Software reset
N#define SYSCTL_CAUSE_WDOG0      0x00000008  // Watchdog 0 reset
N#ifndef DEPRECATED
N#define SYSCTL_CAUSE_WDOG       SYSCTL_CAUSE_WDOG0
N                                            // Watchdog reset(Deprecated)
N#endif
N#define SYSCTL_CAUSE_BOR        0x00000004  // Brown-out reset
N#define SYSCTL_CAUSE_POR        0x00000002  // Power on reset
N#define SYSCTL_CAUSE_EXT        0x00000001  // External reset
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlBrownOutConfigSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_BOR_RESET        0x00000002  // Reset instead of interrupting
N#define SYSCTL_BOR_RESAMPLE     0x00000001  // Resample BOR before asserting
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPWMClockSet() API
N// as the ui32Config parameter, and can be returned by the SysCtlPWMClockGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_PWMDIV_1         0x00000000  // PWM clock is processor clock /1
N#define SYSCTL_PWMDIV_2         0x00100000  // PWM clock is processor clock /2
N#define SYSCTL_PWMDIV_4         0x00120000  // PWM clock is processor clock /4
N#define SYSCTL_PWMDIV_8         0x00140000  // PWM clock is processor clock /8
N#define SYSCTL_PWMDIV_16        0x00160000  // PWM clock is processor clock /16
N#define SYSCTL_PWMDIV_32        0x00180000  // PWM clock is processor clock /32
N#define SYSCTL_PWMDIV_64        0x001A0000  // PWM clock is processor clock /64
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlClockSet() API as
N// the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_SYSDIV_1         0x07800000  // Processor clock is osc/pll /1
N#define SYSCTL_SYSDIV_2         0x00C00000  // Processor clock is osc/pll /2
N#define SYSCTL_SYSDIV_3         0x01400000  // Processor clock is osc/pll /3
N#define SYSCTL_SYSDIV_4         0x01C00000  // Processor clock is osc/pll /4
N#define SYSCTL_SYSDIV_5         0x02400000  // Processor clock is osc/pll /5
N#define SYSCTL_SYSDIV_6         0x02C00000  // Processor clock is osc/pll /6
N#define SYSCTL_SYSDIV_7         0x03400000  // Processor clock is osc/pll /7
N#define SYSCTL_SYSDIV_8         0x03C00000  // Processor clock is osc/pll /8
N#define SYSCTL_SYSDIV_9         0x04400000  // Processor clock is osc/pll /9
N#define SYSCTL_SYSDIV_10        0x04C00000  // Processor clock is osc/pll /10
N#define SYSCTL_SYSDIV_11        0x05400000  // Processor clock is osc/pll /11
N#define SYSCTL_SYSDIV_12        0x05C00000  // Processor clock is osc/pll /12
N#define SYSCTL_SYSDIV_13        0x06400000  // Processor clock is osc/pll /13
N#define SYSCTL_SYSDIV_14        0x06C00000  // Processor clock is osc/pll /14
N#define SYSCTL_SYSDIV_15        0x07400000  // Processor clock is osc/pll /15
N#define SYSCTL_SYSDIV_16        0x07C00000  // Processor clock is osc/pll /16
N#define SYSCTL_SYSDIV_17        0x88400000  // Processor clock is osc/pll /17
N#define SYSCTL_SYSDIV_18        0x88C00000  // Processor clock is osc/pll /18
N#define SYSCTL_SYSDIV_19        0x89400000  // Processor clock is osc/pll /19
N#define SYSCTL_SYSDIV_20        0x89C00000  // Processor clock is osc/pll /20
N#define SYSCTL_SYSDIV_21        0x8A400000  // Processor clock is osc/pll /21
N#define SYSCTL_SYSDIV_22        0x8AC00000  // Processor clock is osc/pll /22
N#define SYSCTL_SYSDIV_23        0x8B400000  // Processor clock is osc/pll /23
N#define SYSCTL_SYSDIV_24        0x8BC00000  // Processor clock is osc/pll /24
N#define SYSCTL_SYSDIV_25        0x8C400000  // Processor clock is osc/pll /25
N#define SYSCTL_SYSDIV_26        0x8CC00000  // Processor clock is osc/pll /26
N#define SYSCTL_SYSDIV_27        0x8D400000  // Processor clock is osc/pll /27
N#define SYSCTL_SYSDIV_28        0x8DC00000  // Processor clock is osc/pll /28
N#define SYSCTL_SYSDIV_29        0x8E400000  // Processor clock is osc/pll /29
N#define SYSCTL_SYSDIV_30        0x8EC00000  // Processor clock is osc/pll /30
N#define SYSCTL_SYSDIV_31        0x8F400000  // Processor clock is osc/pll /31
N#define SYSCTL_SYSDIV_32        0x8FC00000  // Processor clock is osc/pll /32
N#define SYSCTL_SYSDIV_33        0x90400000  // Processor clock is osc/pll /33
N#define SYSCTL_SYSDIV_34        0x90C00000  // Processor clock is osc/pll /34
N#define SYSCTL_SYSDIV_35        0x91400000  // Processor clock is osc/pll /35
N#define SYSCTL_SYSDIV_36        0x91C00000  // Processor clock is osc/pll /36
N#define SYSCTL_SYSDIV_37        0x92400000  // Processor clock is osc/pll /37
N#define SYSCTL_SYSDIV_38        0x92C00000  // Processor clock is osc/pll /38
N#define SYSCTL_SYSDIV_39        0x93400000  // Processor clock is osc/pll /39
N#define SYSCTL_SYSDIV_40        0x93C00000  // Processor clock is osc/pll /40
N#define SYSCTL_SYSDIV_41        0x94400000  // Processor clock is osc/pll /41
N#define SYSCTL_SYSDIV_42        0x94C00000  // Processor clock is osc/pll /42
N#define SYSCTL_SYSDIV_43        0x95400000  // Processor clock is osc/pll /43
N#define SYSCTL_SYSDIV_44        0x95C00000  // Processor clock is osc/pll /44
N#define SYSCTL_SYSDIV_45        0x96400000  // Processor clock is osc/pll /45
N#define SYSCTL_SYSDIV_46        0x96C00000  // Processor clock is osc/pll /46
N#define SYSCTL_SYSDIV_47        0x97400000  // Processor clock is osc/pll /47
N#define SYSCTL_SYSDIV_48        0x97C00000  // Processor clock is osc/pll /48
N#define SYSCTL_SYSDIV_49        0x98400000  // Processor clock is osc/pll /49
N#define SYSCTL_SYSDIV_50        0x98C00000  // Processor clock is osc/pll /50
N#define SYSCTL_SYSDIV_51        0x99400000  // Processor clock is osc/pll /51
N#define SYSCTL_SYSDIV_52        0x99C00000  // Processor clock is osc/pll /52
N#define SYSCTL_SYSDIV_53        0x9A400000  // Processor clock is osc/pll /53
N#define SYSCTL_SYSDIV_54        0x9AC00000  // Processor clock is osc/pll /54
N#define SYSCTL_SYSDIV_55        0x9B400000  // Processor clock is osc/pll /55
N#define SYSCTL_SYSDIV_56        0x9BC00000  // Processor clock is osc/pll /56
N#define SYSCTL_SYSDIV_57        0x9C400000  // Processor clock is osc/pll /57
N#define SYSCTL_SYSDIV_58        0x9CC00000  // Processor clock is osc/pll /58
N#define SYSCTL_SYSDIV_59        0x9D400000  // Processor clock is osc/pll /59
N#define SYSCTL_SYSDIV_60        0x9DC00000  // Processor clock is osc/pll /60
N#define SYSCTL_SYSDIV_61        0x9E400000  // Processor clock is osc/pll /61
N#define SYSCTL_SYSDIV_62        0x9EC00000  // Processor clock is osc/pll /62
N#define SYSCTL_SYSDIV_63        0x9F400000  // Processor clock is osc/pll /63
N#define SYSCTL_SYSDIV_64        0x9FC00000  // Processor clock is osc/pll /64
N#define SYSCTL_SYSDIV_2_5       0xC1000000  // Processor clock is pll / 2.5
N#define SYSCTL_SYSDIV_3_5       0xC1800000  // Processor clock is pll / 3.5
N#define SYSCTL_SYSDIV_4_5       0xC2000000  // Processor clock is pll / 4.5
N#define SYSCTL_SYSDIV_5_5       0xC2800000  // Processor clock is pll / 5.5
N#define SYSCTL_SYSDIV_6_5       0xC3000000  // Processor clock is pll / 6.5
N#define SYSCTL_SYSDIV_7_5       0xC3800000  // Processor clock is pll / 7.5
N#define SYSCTL_SYSDIV_8_5       0xC4000000  // Processor clock is pll / 8.5
N#define SYSCTL_SYSDIV_9_5       0xC4800000  // Processor clock is pll / 9.5
N#define SYSCTL_SYSDIV_10_5      0xC5000000  // Processor clock is pll / 10.5
N#define SYSCTL_SYSDIV_11_5      0xC5800000  // Processor clock is pll / 11.5
N#define SYSCTL_SYSDIV_12_5      0xC6000000  // Processor clock is pll / 12.5
N#define SYSCTL_SYSDIV_13_5      0xC6800000  // Processor clock is pll / 13.5
N#define SYSCTL_SYSDIV_14_5      0xC7000000  // Processor clock is pll / 14.5
N#define SYSCTL_SYSDIV_15_5      0xC7800000  // Processor clock is pll / 15.5
N#define SYSCTL_SYSDIV_16_5      0xC8000000  // Processor clock is pll / 16.5
N#define SYSCTL_SYSDIV_17_5      0xC8800000  // Processor clock is pll / 17.5
N#define SYSCTL_SYSDIV_18_5      0xC9000000  // Processor clock is pll / 18.5
N#define SYSCTL_SYSDIV_19_5      0xC9800000  // Processor clock is pll / 19.5
N#define SYSCTL_SYSDIV_20_5      0xCA000000  // Processor clock is pll / 20.5
N#define SYSCTL_SYSDIV_21_5      0xCA800000  // Processor clock is pll / 21.5
N#define SYSCTL_SYSDIV_22_5      0xCB000000  // Processor clock is pll / 22.5
N#define SYSCTL_SYSDIV_23_5      0xCB800000  // Processor clock is pll / 23.5
N#define SYSCTL_SYSDIV_24_5      0xCC000000  // Processor clock is pll / 24.5
N#define SYSCTL_SYSDIV_25_5      0xCC800000  // Processor clock is pll / 25.5
N#define SYSCTL_SYSDIV_26_5      0xCD000000  // Processor clock is pll / 26.5
N#define SYSCTL_SYSDIV_27_5      0xCD800000  // Processor clock is pll / 27.5
N#define SYSCTL_SYSDIV_28_5      0xCE000000  // Processor clock is pll / 28.5
N#define SYSCTL_SYSDIV_29_5      0xCE800000  // Processor clock is pll / 29.5
N#define SYSCTL_SYSDIV_30_5      0xCF000000  // Processor clock is pll / 30.5
N#define SYSCTL_SYSDIV_31_5      0xCF800000  // Processor clock is pll / 31.5
N#define SYSCTL_SYSDIV_32_5      0xD0000000  // Processor clock is pll / 32.5
N#define SYSCTL_SYSDIV_33_5      0xD0800000  // Processor clock is pll / 33.5
N#define SYSCTL_SYSDIV_34_5      0xD1000000  // Processor clock is pll / 34.5
N#define SYSCTL_SYSDIV_35_5      0xD1800000  // Processor clock is pll / 35.5
N#define SYSCTL_SYSDIV_36_5      0xD2000000  // Processor clock is pll / 36.5
N#define SYSCTL_SYSDIV_37_5      0xD2800000  // Processor clock is pll / 37.5
N#define SYSCTL_SYSDIV_38_5      0xD3000000  // Processor clock is pll / 38.5
N#define SYSCTL_SYSDIV_39_5      0xD3800000  // Processor clock is pll / 39.5
N#define SYSCTL_SYSDIV_40_5      0xD4000000  // Processor clock is pll / 40.5
N#define SYSCTL_SYSDIV_41_5      0xD4800000  // Processor clock is pll / 41.5
N#define SYSCTL_SYSDIV_42_5      0xD5000000  // Processor clock is pll / 42.5
N#define SYSCTL_SYSDIV_43_5      0xD5800000  // Processor clock is pll / 43.5
N#define SYSCTL_SYSDIV_44_5      0xD6000000  // Processor clock is pll / 44.5
N#define SYSCTL_SYSDIV_45_5      0xD6800000  // Processor clock is pll / 45.5
N#define SYSCTL_SYSDIV_46_5      0xD7000000  // Processor clock is pll / 46.5
N#define SYSCTL_SYSDIV_47_5      0xD7800000  // Processor clock is pll / 47.5
N#define SYSCTL_SYSDIV_48_5      0xD8000000  // Processor clock is pll / 48.5
N#define SYSCTL_SYSDIV_49_5      0xD8800000  // Processor clock is pll / 49.5
N#define SYSCTL_SYSDIV_50_5      0xD9000000  // Processor clock is pll / 50.5
N#define SYSCTL_SYSDIV_51_5      0xD9800000  // Processor clock is pll / 51.5
N#define SYSCTL_SYSDIV_52_5      0xDA000000  // Processor clock is pll / 52.5
N#define SYSCTL_SYSDIV_53_5      0xDA800000  // Processor clock is pll / 53.5
N#define SYSCTL_SYSDIV_54_5      0xDB000000  // Processor clock is pll / 54.5
N#define SYSCTL_SYSDIV_55_5      0xDB800000  // Processor clock is pll / 55.5
N#define SYSCTL_SYSDIV_56_5      0xDC000000  // Processor clock is pll / 56.5
N#define SYSCTL_SYSDIV_57_5      0xDC800000  // Processor clock is pll / 57.5
N#define SYSCTL_SYSDIV_58_5      0xDD000000  // Processor clock is pll / 58.5
N#define SYSCTL_SYSDIV_59_5      0xDD800000  // Processor clock is pll / 59.5
N#define SYSCTL_SYSDIV_60_5      0xDE000000  // Processor clock is pll / 60.5
N#define SYSCTL_SYSDIV_61_5      0xDE800000  // Processor clock is pll / 61.5
N#define SYSCTL_SYSDIV_62_5      0xDF000000  // Processor clock is pll / 62.5
N#define SYSCTL_SYSDIV_63_5      0xDF800000  // Processor clock is pll / 63.5
N#define SYSCTL_CFG_VCO_480      0xF1000000  // VCO is 480 MHz
N#define SYSCTL_CFG_VCO_320      0xF0000000  // VCO is 320 MHz
N#define SYSCTL_USE_PLL          0x00000000  // System clock is the PLL clock
N#define SYSCTL_USE_OSC          0x00003800  // System clock is the osc clock
N#define SYSCTL_XTAL_1MHZ        0x00000000  // External crystal is 1MHz
N#define SYSCTL_XTAL_1_84MHZ     0x00000040  // External crystal is 1.8432MHz
N#define SYSCTL_XTAL_2MHZ        0x00000080  // External crystal is 2MHz
N#define SYSCTL_XTAL_2_45MHZ     0x000000C0  // External crystal is 2.4576MHz
N#define SYSCTL_XTAL_3_57MHZ     0x00000100  // External crystal is 3.579545MHz
N#define SYSCTL_XTAL_3_68MHZ     0x00000140  // External crystal is 3.6864MHz
N#define SYSCTL_XTAL_4MHZ        0x00000180  // External crystal is 4MHz
N#define SYSCTL_XTAL_4_09MHZ     0x000001C0  // External crystal is 4.096MHz
N#define SYSCTL_XTAL_4_91MHZ     0x00000200  // External crystal is 4.9152MHz
N#define SYSCTL_XTAL_5MHZ        0x00000240  // External crystal is 5MHz
N#define SYSCTL_XTAL_5_12MHZ     0x00000280  // External crystal is 5.12MHz
N#define SYSCTL_XTAL_6MHZ        0x000002C0  // External crystal is 6MHz
N#define SYSCTL_XTAL_6_14MHZ     0x00000300  // External crystal is 6.144MHz
N#define SYSCTL_XTAL_7_37MHZ     0x00000340  // External crystal is 7.3728MHz
N#define SYSCTL_XTAL_8MHZ        0x00000380  // External crystal is 8MHz
N#define SYSCTL_XTAL_8_19MHZ     0x000003C0  // External crystal is 8.192MHz
N#define SYSCTL_XTAL_10MHZ       0x00000400  // External crystal is 10 MHz
N#define SYSCTL_XTAL_12MHZ       0x00000440  // External crystal is 12 MHz
N#define SYSCTL_XTAL_12_2MHZ     0x00000480  // External crystal is 12.288 MHz
N#define SYSCTL_XTAL_13_5MHZ     0x000004C0  // External crystal is 13.56 MHz
N#define SYSCTL_XTAL_14_3MHZ     0x00000500  // External crystal is 14.31818 MHz
N#define SYSCTL_XTAL_16MHZ       0x00000540  // External crystal is 16 MHz
N#define SYSCTL_XTAL_16_3MHZ     0x00000580  // External crystal is 16.384 MHz
N#define SYSCTL_XTAL_18MHZ       0x000005C0  // External crystal is 18.0 MHz
N#define SYSCTL_XTAL_20MHZ       0x00000600  // External crystal is 20.0 MHz
N#define SYSCTL_XTAL_24MHZ       0x00000640  // External crystal is 24.0 MHz
N#define SYSCTL_XTAL_25MHZ       0x00000680  // External crystal is 25.0 MHz
N#define SYSCTL_OSC_MAIN         0x00000000  // Osc source is main osc
N#define SYSCTL_OSC_INT          0x00000010  // Osc source is int. osc
N#define SYSCTL_OSC_INT4         0x00000020  // Osc source is int. osc /4
N#define SYSCTL_OSC_INT30        0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_OSC_EXT32        0x80000038  // Osc source is ext. 32 KHz
N#define SYSCTL_INT_OSC_DIS      0x00000002  // Disable internal oscillator
N#define SYSCTL_MAIN_OSC_DIS     0x00000001  // Disable main oscillator
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlDeepSleepClockSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_DSLP_DIV_1       0x00000000  // Deep-sleep clock is osc /1
N#define SYSCTL_DSLP_DIV_2       0x00800000  // Deep-sleep clock is osc /2
N#define SYSCTL_DSLP_DIV_3       0x01000000  // Deep-sleep clock is osc /3
N#define SYSCTL_DSLP_DIV_4       0x01800000  // Deep-sleep clock is osc /4
N#define SYSCTL_DSLP_DIV_5       0x02000000  // Deep-sleep clock is osc /5
N#define SYSCTL_DSLP_DIV_6       0x02800000  // Deep-sleep clock is osc /6
N#define SYSCTL_DSLP_DIV_7       0x03000000  // Deep-sleep clock is osc /7
N#define SYSCTL_DSLP_DIV_8       0x03800000  // Deep-sleep clock is osc /8
N#define SYSCTL_DSLP_DIV_9       0x04000000  // Deep-sleep clock is osc /9
N#define SYSCTL_DSLP_DIV_10      0x04800000  // Deep-sleep clock is osc /10
N#define SYSCTL_DSLP_DIV_11      0x05000000  // Deep-sleep clock is osc /11
N#define SYSCTL_DSLP_DIV_12      0x05800000  // Deep-sleep clock is osc /12
N#define SYSCTL_DSLP_DIV_13      0x06000000  // Deep-sleep clock is osc /13
N#define SYSCTL_DSLP_DIV_14      0x06800000  // Deep-sleep clock is osc /14
N#define SYSCTL_DSLP_DIV_15      0x07000000  // Deep-sleep clock is osc /15
N#define SYSCTL_DSLP_DIV_16      0x07800000  // Deep-sleep clock is osc /16
N#define SYSCTL_DSLP_DIV_17      0x08000000  // Deep-sleep clock is osc /17
N#define SYSCTL_DSLP_DIV_18      0x08800000  // Deep-sleep clock is osc /18
N#define SYSCTL_DSLP_DIV_19      0x09000000  // Deep-sleep clock is osc /19
N#define SYSCTL_DSLP_DIV_20      0x09800000  // Deep-sleep clock is osc /20
N#define SYSCTL_DSLP_DIV_21      0x0A000000  // Deep-sleep clock is osc /21
N#define SYSCTL_DSLP_DIV_22      0x0A800000  // Deep-sleep clock is osc /22
N#define SYSCTL_DSLP_DIV_23      0x0B000000  // Deep-sleep clock is osc /23
N#define SYSCTL_DSLP_DIV_24      0x0B800000  // Deep-sleep clock is osc /24
N#define SYSCTL_DSLP_DIV_25      0x0C000000  // Deep-sleep clock is osc /25
N#define SYSCTL_DSLP_DIV_26      0x0C800000  // Deep-sleep clock is osc /26
N#define SYSCTL_DSLP_DIV_27      0x0D000000  // Deep-sleep clock is osc /27
N#define SYSCTL_DSLP_DIV_28      0x0D800000  // Deep-sleep clock is osc /28
N#define SYSCTL_DSLP_DIV_29      0x0E000000  // Deep-sleep clock is osc /29
N#define SYSCTL_DSLP_DIV_30      0x0E800000  // Deep-sleep clock is osc /30
N#define SYSCTL_DSLP_DIV_31      0x0F000000  // Deep-sleep clock is osc /31
N#define SYSCTL_DSLP_DIV_32      0x0F800000  // Deep-sleep clock is osc /32
N#define SYSCTL_DSLP_DIV_33      0x10000000  // Deep-sleep clock is osc /33
N#define SYSCTL_DSLP_DIV_34      0x10800000  // Deep-sleep clock is osc /34
N#define SYSCTL_DSLP_DIV_35      0x11000000  // Deep-sleep clock is osc /35
N#define SYSCTL_DSLP_DIV_36      0x11800000  // Deep-sleep clock is osc /36
N#define SYSCTL_DSLP_DIV_37      0x12000000  // Deep-sleep clock is osc /37
N#define SYSCTL_DSLP_DIV_38      0x12800000  // Deep-sleep clock is osc /38
N#define SYSCTL_DSLP_DIV_39      0x13000000  // Deep-sleep clock is osc /39
N#define SYSCTL_DSLP_DIV_40      0x13800000  // Deep-sleep clock is osc /40
N#define SYSCTL_DSLP_DIV_41      0x14000000  // Deep-sleep clock is osc /41
N#define SYSCTL_DSLP_DIV_42      0x14800000  // Deep-sleep clock is osc /42
N#define SYSCTL_DSLP_DIV_43      0x15000000  // Deep-sleep clock is osc /43
N#define SYSCTL_DSLP_DIV_44      0x15800000  // Deep-sleep clock is osc /44
N#define SYSCTL_DSLP_DIV_45      0x16000000  // Deep-sleep clock is osc /45
N#define SYSCTL_DSLP_DIV_46      0x16800000  // Deep-sleep clock is osc /46
N#define SYSCTL_DSLP_DIV_47      0x17000000  // Deep-sleep clock is osc /47
N#define SYSCTL_DSLP_DIV_48      0x17800000  // Deep-sleep clock is osc /48
N#define SYSCTL_DSLP_DIV_49      0x18000000  // Deep-sleep clock is osc /49
N#define SYSCTL_DSLP_DIV_50      0x18800000  // Deep-sleep clock is osc /50
N#define SYSCTL_DSLP_DIV_51      0x19000000  // Deep-sleep clock is osc /51
N#define SYSCTL_DSLP_DIV_52      0x19800000  // Deep-sleep clock is osc /52
N#define SYSCTL_DSLP_DIV_53      0x1A000000  // Deep-sleep clock is osc /53
N#define SYSCTL_DSLP_DIV_54      0x1A800000  // Deep-sleep clock is osc /54
N#define SYSCTL_DSLP_DIV_55      0x1B000000  // Deep-sleep clock is osc /55
N#define SYSCTL_DSLP_DIV_56      0x1B800000  // Deep-sleep clock is osc /56
N#define SYSCTL_DSLP_DIV_57      0x1C000000  // Deep-sleep clock is osc /57
N#define SYSCTL_DSLP_DIV_58      0x1C800000  // Deep-sleep clock is osc /58
N#define SYSCTL_DSLP_DIV_59      0x1D000000  // Deep-sleep clock is osc /59
N#define SYSCTL_DSLP_DIV_60      0x1D800000  // Deep-sleep clock is osc /60
N#define SYSCTL_DSLP_DIV_61      0x1E000000  // Deep-sleep clock is osc /61
N#define SYSCTL_DSLP_DIV_62      0x1E800000  // Deep-sleep clock is osc /62
N#define SYSCTL_DSLP_DIV_63      0x1F000000  // Deep-sleep clock is osc /63
N#define SYSCTL_DSLP_DIV_64      0x1F800000  // Deep-sleep clock is osc /64
N#define SYSCTL_DSLP_OSC_MAIN    0x00000000  // Osc source is main osc
N#define SYSCTL_DSLP_OSC_INT     0x00000010  // Osc source is int. osc
N#define SYSCTL_DSLP_OSC_INT30   0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_DSLP_OSC_EXT32   0x00000070  // Osc source is ext. 32 KHz
N#define SYSCTL_DSLP_PIOSC_PD    0x00000002  // Power down PIOSC in deep-sleep
N#define SYSCTL_DSLP_MOSC_PD     0x40000000  // Power down MOSC in deep-sleep
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPIOSCCalibrate()
N// API as the ui32Type parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSC_CAL_AUTO   0x00000200  // Automatic calibration
N#define SYSCTL_PIOSC_CAL_FACT   0x00000100  // Factory calibration
N#define SYSCTL_PIOSC_CAL_USER   0x80000100  // User-supplied calibration
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlMOSCConfigSet() API
N// as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_MOSC_VALIDATE    0x00000001  // Enable MOSC validation
N#define SYSCTL_MOSC_INTERRUPT   0x00000002  // Generate interrupt on MOSC fail
N#define SYSCTL_MOSC_NO_XTAL     0x00000004  // No crystal is attached to MOSC
N#define SYSCTL_MOSC_PWR_DIS     0x00000008  // Power down the MOSC.
N#define SYSCTL_MOSC_LOWFREQ     0x00000000  // MOSC is less than 10MHz
N#define SYSCTL_MOSC_HIGHFREQ    0x00000010  // MOSC is greater than 10MHz
N#define SYSCTL_MOSC_SESRC       0x00000020  // Singled ended oscillator source.
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlSleepPowerSet() and
N// SysCtlDeepSleepPowerSet() APIs as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_SLEEP        0x00000200  // LDO in sleep mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_TEMP_LOW_POWER   0x00000100  // Temp sensor in low power mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_FLASH_NORMAL     0x00000000  // Flash in normal mode
N#define SYSCTL_FLASH_LOW_POWER  0x00000020  // Flash in low power mode
N#define SYSCTL_SRAM_NORMAL      0x00000000  // SRAM in normal mode
N#define SYSCTL_SRAM_STANDBY     0x00000001  // SRAM in standby mode
N#define SYSCTL_SRAM_LOW_POWER   0x00000003  // SRAM in low power mode
N
N//*****************************************************************************
N//
N// Defines for the SysCtlResetBehaviorSet() and SysCtlResetBehaviorGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_ONRST_WDOG0_POR  0x00000030
N#define SYSCTL_ONRST_WDOG0_SYS  0x00000020
N#define SYSCTL_ONRST_WDOG1_POR  0x000000C0
N#define SYSCTL_ONRST_WDOG1_SYS  0x00000080
N#define SYSCTL_ONRST_BOR_POR    0x0000000C
N#define SYSCTL_ONRST_BOR_SYS    0x00000008
N#define SYSCTL_ONRST_EXT_POR    0x00000003
N#define SYSCTL_ONRST_EXT_SYS    0x00000002
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_VEVENT_VDDABO_NONE                                             \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDABO_NONE                                                                             0x00000000
N#define SYSCTL_VEVENT_VDDABO_INT                                              \
N                                0x00000100
X#define SYSCTL_VEVENT_VDDABO_INT                                                                              0x00000100
N#define SYSCTL_VEVENT_VDDABO_NMI                                              \
N                                0x00000200
X#define SYSCTL_VEVENT_VDDABO_NMI                                                                              0x00000200
N#define SYSCTL_VEVENT_VDDABO_RST                                              \
N                                0x00000300
X#define SYSCTL_VEVENT_VDDABO_RST                                                                              0x00000300
N#define SYSCTL_VEVENT_VDDBO_NONE                                              \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDBO_NONE                                                                              0x00000000
N#define SYSCTL_VEVENT_VDDBO_INT 0x00000001
N#define SYSCTL_VEVENT_VDDBO_NMI 0x00000002
N#define SYSCTL_VEVENT_VDDBO_RST 0x00000003
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventStatus() and
N// SysCtlVoltageEventClear() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_VESTAT_VDDBOR    0x00000040
N#define SYSCTL_VESTAT_VDDABOR   0x00000010
N
N//*****************************************************************************
N//
N// Values used with the SysCtlNMIStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_NMI_MOSCFAIL     0x00010000
N#define SYSCTL_NMI_TAMPER       0x00000200
N#define SYSCTL_NMI_WDT1         0x00000020
N#define SYSCTL_NMI_WDT0         0x00000008
N#define SYSCTL_NMI_POWER        0x00000004
N#define SYSCTL_NMI_EXTERNAL     0x00000001
N
N//*****************************************************************************
N//
N// The defines for the SysCtlClockOutConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_CLKOUT_EN        0x80000000
N#define SYSCTL_CLKOUT_DIS       0x00000000
N#define SYSCTL_CLKOUT_SYSCLK    0x00000000
N#define SYSCTL_CLKOUT_PIOSC     0x00010000
N#define SYSCTL_CLKOUT_MOSC      0x00020000
N
N//*****************************************************************************
N//
N// The following defines are used with the SysCtlAltClkConfig() function.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLK_PIOSC     0x00000000
N#define SYSCTL_ALTCLK_RTCOSC    0x00000003
N#define SYSCTL_ALTCLK_LFIOSC    0x00000004
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern uint32_t SysCtlSRAMSizeGet(void);
Nextern uint32_t SysCtlFlashSizeGet(void);
Nextern uint32_t SysCtlFlashSectorSizeGet(void);
Nextern bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Nextern bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOn(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOff(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralReset(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralClockGating(bool bEnable);
Xextern void SysCtlPeripheralClockGating(_Bool bEnable);
Nextern void SysCtlIntRegister(void (*pfnHandler)(void));
Nextern void SysCtlIntUnregister(void);
Nextern void SysCtlIntEnable(uint32_t ui32Ints);
Nextern void SysCtlIntDisable(uint32_t ui32Ints);
Nextern void SysCtlIntClear(uint32_t ui32Ints);
Nextern uint32_t SysCtlIntStatus(bool bMasked);
Xextern uint32_t SysCtlIntStatus(_Bool bMasked);
Nextern void SysCtlLDOSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDOSleepGet(void);
Nextern void SysCtlLDODeepSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDODeepSleepGet(void);
Nextern void SysCtlSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlReset(void);
Nextern void SysCtlSleep(void);
Nextern void SysCtlDeepSleep(void);
Nextern uint32_t SysCtlResetCauseGet(void);
Nextern void SysCtlResetCauseClear(uint32_t ui32Causes);
Nextern void SysCtlBrownOutConfigSet(uint32_t ui32Config,
N                                    uint32_t ui32Delay);
Nextern void SysCtlDelay(uint32_t ui32Count);
Nextern void SysCtlMOSCConfigSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPIOSCCalibrate(uint32_t ui32Type);
Nextern void SysCtlClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlClockGet(void);
Nextern void SysCtlDeepSleepClockSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepClockConfigSet(uint32_t ui32Div,
N                                          uint32_t ui32Config);
Nextern void SysCtlPWMClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPWMClockGet(void);
Nextern void SysCtlIOSCVerificationSet(bool bEnable);
Xextern void SysCtlIOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlMOSCVerificationSet(bool bEnable);
Xextern void SysCtlMOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlPLLVerificationSet(bool bEnable);
Xextern void SysCtlPLLVerificationSet(_Bool bEnable);
Nextern void SysCtlClkVerificationClear(void);
Nextern void SysCtlGPIOAHBEnable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlGPIOAHBDisable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlUSBPLLEnable(void);
Nextern void SysCtlUSBPLLDisable(void);
Nextern uint32_t SysCtlClockFreqSet(uint32_t ui32Config,
N                                   uint32_t ui32SysClock);
Nextern void SysCtlResetBehaviorSet(uint32_t ui32Behavior);
Nextern uint32_t SysCtlResetBehaviorGet(void);
Nextern void SysCtlClockOutConfig(uint32_t ui32Config, uint32_t ui32Div);
Nextern void SysCtlAltClkConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlNMIStatus(void);
Nextern void SysCtlNMIClear(uint32_t ui32Status);
Nextern void SysCtlVoltageEventConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlVoltageEventStatus(void);
Nextern void SysCtlVoltageEventClear(uint32_t ui32Status);
Nextern bool SysCtlVCOGet(uint32_t ui32Crystal, uint32_t *pui32VCOFrequency);
Xextern _Bool SysCtlVCOGet(uint32_t ui32Crystal, uint32_t *pui32VCOFrequency);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SYSCTL_H__
L 32 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/rom.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/rom.h" 1
N//*****************************************************************************
N//
N// rom.h - Macros to facilitate calling functions in the ROM.
N//
N// Copyright (c) 2007-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_ROM_H__
N#define __DRIVERLIB_ROM_H__
N
N#ifndef DEPRECATED
N//*****************************************************************************
N//
N// ROM selection labels changed between TivaWare 2.0.1 and 2.1.  The following
N// labels are intended to ensure backwards compatibility for applications
N// which have not yet been updated to use the replacement labels.
N//
N//*****************************************************************************
N#ifdef TARGET_IS_SNOWFLAKE_RA0
S#define TARGET_IS_TM4C129_RA0
N#endif
N#ifdef TARGET_IS_SNOWFLAKE_RA1
S#define TARGET_IS_TM4C129_RA1
N#endif
N#ifdef TARGET_IS_SNOWFLAKE_RA2
S#define TARGET_IS_TM4C129_RA2
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA1
S#define TARGET_IS_TM4C123_RA1
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA2
S#define TARGET_IS_TM4C123_RA2
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA3
S#define TARGET_IS_TM4C123_RA3
N#endif
N#ifdef TARGET_IS_BLIZZARD_RB0
S#define TARGET_IS_TM4C123_RB0
N#endif
N#ifdef TARGET_IS_BLIZZARD_RB1
S#define TARGET_IS_TM4C123_RB1
N#endif
N#endif
N
N//*****************************************************************************
N//
N// Pointers to the main API tables.
N//
N//*****************************************************************************
N#define ROM_APITABLE            ((uint32_t *)0x01000010)
N#define ROM_VERSION             (ROM_APITABLE[0])
N#define ROM_UARTTABLE           ((uint32_t *)(ROM_APITABLE[1]))
N#define ROM_SSITABLE            ((uint32_t *)(ROM_APITABLE[2]))
N#define ROM_I2CTABLE            ((uint32_t *)(ROM_APITABLE[3]))
N#define ROM_GPIOTABLE           ((uint32_t *)(ROM_APITABLE[4]))
N#define ROM_ADCTABLE            ((uint32_t *)(ROM_APITABLE[5]))
N#define ROM_COMPARATORTABLE     ((uint32_t *)(ROM_APITABLE[6]))
N#define ROM_FLASHTABLE          ((uint32_t *)(ROM_APITABLE[7]))
N#define ROM_PWMTABLE            ((uint32_t *)(ROM_APITABLE[8]))
N#define ROM_QEITABLE            ((uint32_t *)(ROM_APITABLE[9]))
N#define ROM_SYSTICKTABLE        ((uint32_t *)(ROM_APITABLE[10]))
N#define ROM_TIMERTABLE          ((uint32_t *)(ROM_APITABLE[11]))
N#define ROM_WATCHDOGTABLE       ((uint32_t *)(ROM_APITABLE[12]))
N#define ROM_SYSCTLTABLE         ((uint32_t *)(ROM_APITABLE[13]))
N#define ROM_INTERRUPTTABLE      ((uint32_t *)(ROM_APITABLE[14]))
N#define ROM_USBTABLE            ((uint32_t *)(ROM_APITABLE[16]))
N#define ROM_UDMATABLE           ((uint32_t *)(ROM_APITABLE[17]))
N#define ROM_CANTABLE            ((uint32_t *)(ROM_APITABLE[18]))
N#define ROM_HIBERNATETABLE      ((uint32_t *)(ROM_APITABLE[19]))
N#define ROM_MPUTABLE            ((uint32_t *)(ROM_APITABLE[20]))
N#define ROM_SOFTWARETABLE       ((uint32_t *)(ROM_APITABLE[21]))
N#define ROM_EPITABLE            ((uint32_t *)(ROM_APITABLE[23]))
N#define ROM_EEPROMTABLE         ((uint32_t *)(ROM_APITABLE[24]))
N#define ROM_FPUTABLE            ((uint32_t *)(ROM_APITABLE[26]))
N#define ROM_SMBUSTABLE          ((uint32_t *)(ROM_APITABLE[29]))
N#define ROM_SYSEXCTABLE         ((uint32_t *)(ROM_APITABLE[30]))
N#define ROM_ONEWIRETABLE        ((uint32_t *)(ROM_APITABLE[34]))
N#define ROM_SPIFLASHTABLE       ((uint32_t *)(ROM_APITABLE[38]))
N#define ROM_LCDTABLE            ((uint32_t *)(ROM_APITABLE[41]))
N#define ROM_EMACTABLE           ((uint32_t *)(ROM_APITABLE[42]))
N#define ROM_AESTABLE            ((uint32_t *)(ROM_APITABLE[43]))
N#define ROM_CRCTABLE            ((uint32_t *)(ROM_APITABLE[44]))
N#define ROM_DESTABLE            ((uint32_t *)(ROM_APITABLE[45]))
N#define ROM_SHAMD5TABLE         ((uint32_t *)(ROM_APITABLE[46]))
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the ADC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceDataGet                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum,                               \
N                      uint32_t *pui32Buffer))ROM_ADCTABLE[0])
X#define ROM_ADCSequenceDataGet                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t *pui32Buffer))ROM_ADCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[1])
X#define ROM_ADCIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[2])
X#define ROM_ADCIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32SequenceNum,                              \
N                       bool bMasked))ROM_ADCTABLE[3])
X#define ROM_ADCIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     bool bMasked))ROM_ADCTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[4])
X#define ROM_ADCIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceEnable                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[5])
X#define ROM_ADCSequenceEnable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceDisable                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[6])
X#define ROM_ADCSequenceDisable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCSequenceConfigure                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SequenceNum,                                  \
S                   uint32_t ui32Trigger,                                      \
S                   uint32_t ui32Priority))ROM_ADCTABLE[7])
X#define ROM_ADCSequenceConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t ui32Trigger,                                                         uint32_t ui32Priority))ROM_ADCTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceStepConfigure                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum,                                  \
N                   uint32_t ui32Step,                                         \
N                   uint32_t ui32Config))ROM_ADCTABLE[8])
X#define ROM_ADCSequenceStepConfigure                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t ui32Step,                                                            uint32_t ui32Config))ROM_ADCTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceOverflow                                               \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum))ROM_ADCTABLE[9])
X#define ROM_ADCSequenceOverflow                                                       ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceOverflowClear                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[10])
X#define ROM_ADCSequenceOverflowClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceUnderflow                                              \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum))ROM_ADCTABLE[11])
X#define ROM_ADCSequenceUnderflow                                                      ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceUnderflowClear                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[12])
X#define ROM_ADCSequenceUnderflowClear                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCProcessorTrigger                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[13])
X#define ROM_ADCProcessorTrigger                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCHardwareOversampleConfigure                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Factor))ROM_ADCTABLE[14])
X#define ROM_ADCHardwareOversampleConfigure                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Factor))ROM_ADCTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorConfigure                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32Config))ROM_ADCTABLE[15])
X#define ROM_ADCComparatorConfigure                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32Config))ROM_ADCTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorRegionSet                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32LowRef,                                       \
N                   uint32_t ui32HighRef))ROM_ADCTABLE[16])
X#define ROM_ADCComparatorRegionSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32LowRef,                                                          uint32_t ui32HighRef))ROM_ADCTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorReset                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   bool bTrigger,                                             \
N                   bool bInterrupt))ROM_ADCTABLE[17])
X#define ROM_ADCComparatorReset                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            bool bTrigger,                                                                bool bInterrupt))ROM_ADCTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntDisable                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[18])
X#define ROM_ADCComparatorIntDisable                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntEnable                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[19])
X#define ROM_ADCComparatorIntEnable                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntStatus                                            \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[20])
X#define ROM_ADCComparatorIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntClear                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Status))ROM_ADCTABLE[21])
X#define ROM_ADCComparatorIntClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Status))ROM_ADCTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCReferenceSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Ref))ROM_ADCTABLE[22])
X#define ROM_ADCReferenceSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ref))ROM_ADCTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCReferenceGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[23])
X#define ROM_ADCReferenceGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCPhaseDelaySet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Phase))ROM_ADCTABLE[24])
X#define ROM_ADCPhaseDelaySet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Phase))ROM_ADCTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCPhaseDelayGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[25])
X#define ROM_ADCPhaseDelayGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCIntDisableEx                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ADCTABLE[29])
X#define ROM_ADCIntDisableEx                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ADCTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCIntEnableEx                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ADCTABLE[30])
X#define ROM_ADCIntEnableEx                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ADCTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCIntStatusEx                                                    \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_ADCTABLE[31])
X#define ROM_ADCIntStatusEx                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_ADCTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCSequenceDMAEnable                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SequenceNum))ROM_ADCTABLE[32])
X#define ROM_ADCSequenceDMAEnable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCSequenceDMADisable                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SequenceNum))ROM_ADCTABLE[33])
X#define ROM_ADCSequenceDMADisable                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_ADCBusy                                                           \
S        ((bool (*)(uint32_t ui32Base))ROM_ADCTABLE[34])
X#define ROM_ADCBusy                                                                   ((bool (*)(uint32_t ui32Base))ROM_ADCTABLE[34])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the AES API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_AESTABLE[0])
X#define ROM_AESIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_AESTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESAuthLengthSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_AESTABLE[1])
X#define ROM_AESAuthLengthSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_AESTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_AESTABLE[2])
X#define ROM_AESConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_AESTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataAuth                                                       \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t ui32Length,                                       \
S                   uint32_t *pui32Tag))ROM_AESTABLE[3])
X#define ROM_AESDataAuth                                                               ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t ui32Length,                                                          uint32_t *pui32Tag))ROM_AESTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataProcess                                                    \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length))ROM_AESTABLE[4])
X#define ROM_AESDataProcess                                                            ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length))ROM_AESTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataProcessAuth                                                \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length,                                       \
S                   uint32_t *pui32AuthSrc,                                    \
S                   uint32_t ui32AuthLength,                                   \
S                   uint32_t *pui32Tag))ROM_AESTABLE[5])
X#define ROM_AESDataProcessAuth                                                        ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length,                                                          uint32_t *pui32AuthSrc,                                                       uint32_t ui32AuthLength,                                                      uint32_t *pui32Tag))ROM_AESTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataRead                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_AESTABLE[6])
X#define ROM_AESDataRead                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_AESTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataReadNonBlocking                                            \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_AESTABLE[7])
X#define ROM_AESDataReadNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_AESTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_AESTABLE[8])
X#define ROM_AESDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_AESTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDataWriteNonBlocking                                           \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_AESTABLE[9])
X#define ROM_AESDataWriteNonBlocking                                                   ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_AESTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDMADisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_AESTABLE[10])
X#define ROM_AESDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_AESTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESDMAEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_AESTABLE[11])
X#define ROM_AESDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_AESTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[12])
X#define ROM_AESIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[13])
X#define ROM_AESIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[14])
X#define ROM_AESIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESIVSet                                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_AESTABLE[15])
X#define ROM_AESIVSet                                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_AESTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESKey1Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t ui32Keysize))ROM_AESTABLE[16])
X#define ROM_AESKey1Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t ui32Keysize))ROM_AESTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESKey2Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t ui32Keysize))ROM_AESTABLE[17])
X#define ROM_AESKey2Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t ui32Keysize))ROM_AESTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESKey3Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key))ROM_AESTABLE[18])
X#define ROM_AESKey3Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key))ROM_AESTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESLengthSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint64_t ui64Length))ROM_AESTABLE[19])
X#define ROM_AESLengthSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Length))ROM_AESTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESReset                                                          \
S        ((void (*)(uint32_t ui32Base))ROM_AESTABLE[20])
X#define ROM_AESReset                                                                  ((void (*)(uint32_t ui32Base))ROM_AESTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_AESTagRead                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32TagData))ROM_AESTABLE[21])
X#define ROM_AESTagRead                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32TagData))ROM_AESTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_AESIVRead                                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_AESTABLE[22])
X#define ROM_AESIVRead                                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_AESTABLE[22])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the CAN API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANInit                                                           \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[1])
X#define ROM_CANInit                                                                   ((void (*)(uint32_t ui32Base))ROM_CANTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[2])
X#define ROM_CANEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_CANTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[3])
X#define ROM_CANDisable                                                                ((void (*)(uint32_t ui32Base))ROM_CANTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitTimingSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   tCANBitClkParms *psClkParms))ROM_CANTABLE[4])
X#define ROM_CANBitTimingSet                                                           ((void (*)(uint32_t ui32Base,                                                            tCANBitClkParms *psClkParms))ROM_CANTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitTimingGet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   tCANBitClkParms *psClkParms))ROM_CANTABLE[5])
X#define ROM_CANBitTimingGet                                                           ((void (*)(uint32_t ui32Base,                                                            tCANBitClkParms *psClkParms))ROM_CANTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID,                                        \
N                   tCANMsgObject *psMsgObject,                                \
N                   tMsgObjType eMsgType))ROM_CANTABLE[6])
X#define ROM_CANMessageSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID,                                                           tCANMsgObject *psMsgObject,                                                   tMsgObjType eMsgType))ROM_CANTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageGet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID,                                        \
N                   tCANMsgObject *psMsgObject,                                \
N                   bool bClrPendingInt))ROM_CANTABLE[7])
X#define ROM_CANMessageGet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID,                                                           tCANMsgObject *psMsgObject,                                                   bool bClrPendingInt))ROM_CANTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANStatusGet                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       tCANStsReg eStatusReg))ROM_CANTABLE[8])
X#define ROM_CANStatusGet                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            tCANStsReg eStatusReg))ROM_CANTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageClear                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID))ROM_CANTABLE[9])
X#define ROM_CANMessageClear                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID))ROM_CANTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_CANTABLE[10])
X#define ROM_CANIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_CANTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_CANTABLE[11])
X#define ROM_CANIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_CANTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
X#define ROM_CANIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANRetryGet                                                       \
N        ((bool (*)(uint32_t ui32Base))ROM_CANTABLE[13])
X#define ROM_CANRetryGet                                                               ((bool (*)(uint32_t ui32Base))ROM_CANTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANRetrySet                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bAutoRetry))ROM_CANTABLE[14])
X#define ROM_CANRetrySet                                                               ((void (*)(uint32_t ui32Base,                                                            bool bAutoRetry))ROM_CANTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANErrCntrGet                                                     \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32RxCount,                                    \
N                   uint32_t *pui32TxCount))ROM_CANTABLE[15])
X#define ROM_CANErrCntrGet                                                             ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32RxCount,                                                       uint32_t *pui32TxCount))ROM_CANTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitRateSet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32SourceClock,                              \
N                       uint32_t ui32BitRate))ROM_CANTABLE[16])
X#define ROM_CANBitRateSet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SourceClock,                                                     uint32_t ui32BitRate))ROM_CANTABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Comparator API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntClear                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[0])
X#define ROM_ComparatorIntClear                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorConfigure                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32Config))ROM_COMPARATORTABLE[1])
X#define ROM_ComparatorConfigure                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32Config))ROM_COMPARATORTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorRefSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Ref))ROM_COMPARATORTABLE[2])
X#define ROM_ComparatorRefSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ref))ROM_COMPARATORTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorValueGet                                                \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[3])
X#define ROM_ComparatorValueGet                                                        ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntEnable                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[4])
X#define ROM_ComparatorIntEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntDisable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[5])
X#define ROM_ComparatorIntDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntStatus                                               \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   bool bMasked))ROM_COMPARATORTABLE[6])
X#define ROM_ComparatorIntStatus                                                       ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            bool bMasked))ROM_COMPARATORTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the CRC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_CRCConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CRCConfig))ROM_CRCTABLE[0])
X#define ROM_CRCConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CRCConfig))ROM_CRCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_CRCDataProcess                                                    \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t *pui32DataIn,                                 \
S                       uint32_t ui32DataLength,                               \
S                       bool bPPResult))ROM_CRCTABLE[1])
X#define ROM_CRCDataProcess                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataIn,                                                        uint32_t ui32DataLength,                                                      bool bPPResult))ROM_CRCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_CRCDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Data))ROM_CRCTABLE[2])
X#define ROM_CRCDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_CRCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_CRCResultRead                                                     \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bPPResult))ROM_CRCTABLE[3])
X#define ROM_CRCResultRead                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bPPResult))ROM_CRCTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_CRCSeedSet                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seed))ROM_CRCTABLE[4])
X#define ROM_CRCSeedSet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seed))ROM_CRCTABLE[4])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the DES API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_DESTABLE[0])
X#define ROM_DESIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_DESTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_DESTABLE[1])
X#define ROM_DESConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_DESTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDataRead                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_DESTABLE[2])
X#define ROM_DESDataRead                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_DESTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDataReadNonBlocking                                            \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_DESTABLE[3])
X#define ROM_DESDataReadNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_DESTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDataProcess                                                    \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length))ROM_DESTABLE[4])
X#define ROM_DESDataProcess                                                            ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length))ROM_DESTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_DESTABLE[5])
X#define ROM_DESDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_DESTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDataWriteNonBlocking                                           \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_DESTABLE[6])
X#define ROM_DESDataWriteNonBlocking                                                   ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_DESTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDMADisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_DESTABLE[7])
X#define ROM_DESDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_DESTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESDMAEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_DESTABLE[8])
X#define ROM_DESDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_DESTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[9])
X#define ROM_DESIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[10])
X#define ROM_DESIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[11])
X#define ROM_DESIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESIVSet                                                          \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_DESTABLE[12])
X#define ROM_DESIVSet                                                                  ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_DESTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESKeySet                                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key))ROM_DESTABLE[13])
X#define ROM_DESKeySet                                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key))ROM_DESTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESLengthSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_DESTABLE[14])
X#define ROM_DESLengthSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_DESTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_DESReset                                                          \
S        ((void (*)(uint32_t ui32Base))ROM_DESTABLE[15])
X#define ROM_DESReset                                                                  ((void (*)(uint32_t ui32Base))ROM_DESTABLE[15])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EEPROM API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMRead                                                        \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Address,                                      \
N                   uint32_t ui32Count))ROM_EEPROMTABLE[0])
X#define ROM_EEPROMRead                                                                ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_EEPROMTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockCountGet                                               \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[1])
X#define ROM_EEPROMBlockCountGet                                                       ((uint32_t (*)(void))ROM_EEPROMTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockHide                                                   \
N        ((void (*)(uint32_t ui32Block))ROM_EEPROMTABLE[2])
X#define ROM_EEPROMBlockHide                                                           ((void (*)(uint32_t ui32Block))ROM_EEPROMTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockLock                                                   \
N        ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[3])
X#define ROM_EEPROMBlockLock                                                           ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockPasswordSet                                            \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t *pui32Password,                               \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[4])
X#define ROM_EEPROMBlockPasswordSet                                                    ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t *pui32Password,                                                      uint32_t ui32Count))ROM_EEPROMTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockProtectGet                                             \
N        ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[5])
X#define ROM_EEPROMBlockProtectGet                                                     ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockProtectSet                                             \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t ui32Protect))ROM_EEPROMTABLE[6])
X#define ROM_EEPROMBlockProtectSet                                                     ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t ui32Protect))ROM_EEPROMTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockUnlock                                                 \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t *pui32Password,                               \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[7])
X#define ROM_EEPROMBlockUnlock                                                         ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t *pui32Password,                                                      uint32_t ui32Count))ROM_EEPROMTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntClear                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[8])
X#define ROM_EEPROMIntClear                                                            ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntDisable                                                  \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[9])
X#define ROM_EEPROMIntDisable                                                          ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntEnable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[10])
X#define ROM_EEPROMIntEnable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_EEPROMTABLE[11])
X#define ROM_EEPROMIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_EEPROMTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L
N#define ROM_EEPROMMassErase                                                   \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[12])
X#define ROM_EEPROMMassErase                                                           ((uint32_t (*)(void))ROM_EEPROMTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMProgram                                                     \
N        ((uint32_t (*)(uint32_t *pui32Data,                                   \
N                       uint32_t ui32Address,                                  \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[13])
X#define ROM_EEPROMProgram                                                             ((uint32_t (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_EEPROMTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMProgramNonBlocking                                          \
N        ((uint32_t (*)(uint32_t ui32Data,                                     \
N                       uint32_t ui32Address))ROM_EEPROMTABLE[14])
X#define ROM_EEPROMProgramNonBlocking                                                  ((uint32_t (*)(uint32_t ui32Data,                                                            uint32_t ui32Address))ROM_EEPROMTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMSizeGet                                                     \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[15])
X#define ROM_EEPROMSizeGet                                                             ((uint32_t (*)(void))ROM_EEPROMTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMStatusGet                                                   \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[16])
X#define ROM_EEPROMStatusGet                                                           ((uint32_t (*)(void))ROM_EEPROMTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMInit                                                        \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[17])
X#define ROM_EEPROMInit                                                                ((uint32_t (*)(void))ROM_EEPROMTABLE[17])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EPI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_EPITABLE[0])
X#define ROM_EPIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_EPITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIModeSet                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_EPITABLE[1])
X#define ROM_EPIModeSet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_EPITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIDividerSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Divider))ROM_EPITABLE[2])
X#define ROM_EPIDividerSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Divider))ROM_EPITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigSDRAMSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32Refresh))ROM_EPITABLE[3])
X#define ROM_EPIConfigSDRAMSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32Refresh))ROM_EPITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigGPModeSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32FrameCount,                                   \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[4])
X#define ROM_EPIConfigGPModeSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32FrameCount,                                                      uint32_t ui32MaxWait))ROM_EPITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB8Set                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[5])
X#define ROM_EPIConfigHB8Set                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxWait))ROM_EPITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB16Set                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[6])
X#define ROM_EPIConfigHB16Set                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxWait))ROM_EPITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIAddressMapSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Map))ROM_EPITABLE[7])
X#define ROM_EPIAddressMapSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Map))ROM_EPITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadConfigure                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32DataSize,                                     \
S                   uint32_t ui32Address))ROM_EPITABLE[8])
X#define ROM_EPINonBlockingReadConfigure                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32DataSize,                                                        uint32_t ui32Address))ROM_EPITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadStart                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Count))ROM_EPITABLE[9])
X#define ROM_EPINonBlockingReadStart                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Count))ROM_EPITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadStop                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_EPITABLE[10])
X#define ROM_EPINonBlockingReadStop                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_EPITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadCount                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_EPITABLE[11])
X#define ROM_EPINonBlockingReadCount                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_EPITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadAvail                                           \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[12])
X#define ROM_EPINonBlockingReadAvail                                                   ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadGet32                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint32_t *pui32Buf))ROM_EPITABLE[13])
X#define ROM_EPINonBlockingReadGet32                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint32_t *pui32Buf))ROM_EPITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadGet16                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint16_t *pui16Buf))ROM_EPITABLE[14])
X#define ROM_EPINonBlockingReadGet16                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint16_t *pui16Buf))ROM_EPITABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPINonBlockingReadGet8                                            \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint8_t *pui8Buf))ROM_EPITABLE[15])
X#define ROM_EPINonBlockingReadGet8                                                    ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint8_t *pui8Buf))ROM_EPITABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIFIFOConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EPITABLE[16])
X#define ROM_EPIFIFOConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EPITABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIWriteFIFOCountGet                                              \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[17])
X#define ROM_EPIWriteFIFOCountGet                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EPITABLE[18])
X#define ROM_EPIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EPITABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EPITABLE[19])
X#define ROM_EPIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EPITABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIIntErrorStatus                                                 \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[20])
X#define ROM_EPIIntErrorStatus                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIIntErrorClear                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ErrFlags))ROM_EPITABLE[21])
X#define ROM_EPIIntErrorClear                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ErrFlags))ROM_EPITABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIDividerCSSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Divider))ROM_EPITABLE[22])
X#define ROM_EPIDividerCSSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Divider))ROM_EPITABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIDMATxCount                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Count))ROM_EPITABLE[23])
X#define ROM_EPIDMATxCount                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Count))ROM_EPITABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB8CSSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[24])
X#define ROM_EPIConfigHB8CSSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB16CSSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[25])
X#define ROM_EPIConfigHB16CSSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB8TimingSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[26])
X#define ROM_EPIConfigHB8TimingSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIConfigHB16TimingSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[27])
X#define ROM_EPIConfigHB16TimingSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegSet                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32CR))ROM_EPITABLE[28])
X#define ROM_EPIPSRAMConfigRegSet                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32CR))ROM_EPITABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegRead                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS))ROM_EPITABLE[29])
X#define ROM_EPIPSRAMConfigRegRead                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_EPITABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegGetNonBlocking                                   \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t *pui32CR))ROM_EPITABLE[30])
X#define ROM_EPIPSRAMConfigRegGetNonBlocking                                           ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t *pui32CR))ROM_EPITABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegGet                                              \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_EPITABLE[31])
X#define ROM_EPIPSRAMConfigRegGet                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_EPITABLE[31])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EMAC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACIntStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_EMACTABLE[0])
X#define ROM_EMACIntStatus                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_EMACTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACAddrGet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   uint8_t *pui8MACAddr))ROM_EMACTABLE[1])
X#define ROM_EMACAddrGet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           uint8_t *pui8MACAddr))ROM_EMACTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACAddrSet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   const uint8_t *pui8MACAddr))ROM_EMACTABLE[2])
X#define ROM_EMACAddrSet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           const uint8_t *pui8MACAddr))ROM_EMACTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACConfigGet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Config,                                     \
S                   uint32_t *pui32Mode,                                       \
S                   uint32_t *pui32RxMaxFrameSize))ROM_EMACTABLE[3])
X#define ROM_EMACConfigGet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Config,                                                        uint32_t *pui32Mode,                                                          uint32_t *pui32RxMaxFrameSize))ROM_EMACTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACConfigSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32ModeFlags,                                    \
S                   uint32_t ui32RxMaxFrameSize))ROM_EMACTABLE[4])
X#define ROM_EMACConfigSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32ModeFlags,                                                       uint32_t ui32RxMaxFrameSize))ROM_EMACTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACDMAStateGet                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[5])
X#define ROM_EMACDMAStateGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACFrameFilterGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[6])
X#define ROM_EMACFrameFilterGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACFrameFilterSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32FilterOpts))ROM_EMACTABLE[7])
X#define ROM_EMACFrameFilterSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FilterOpts))ROM_EMACTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACInit                                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SysClk,                                       \
S                   uint32_t ui32BusConfig,                                    \
S                   uint32_t ui32RxBurst,                                      \
S                   uint32_t ui32TxBurst,                                      \
S                   uint32_t ui32DescSkipSize))ROM_EMACTABLE[8])
X#define ROM_EMACInit                                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SysClk,                                                          uint32_t ui32BusConfig,                                                       uint32_t ui32RxBurst,                                                         uint32_t ui32TxBurst,                                                         uint32_t ui32DescSkipSize))ROM_EMACTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACIntClear                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[9])
X#define ROM_EMACIntClear                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACIntDisable                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[10])
X#define ROM_EMACIntDisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACIntEnable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[11])
X#define ROM_EMACIntEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPHYConfigSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EMACTABLE[12])
X#define ROM_EMACPHYConfigSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EMACTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACPHYPowerOff                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr))ROM_EMACTABLE[13])
X#define ROM_EMACPHYPowerOff                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr))ROM_EMACTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACPHYPowerOn                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr))ROM_EMACTABLE[14])
X#define ROM_EMACPHYPowerOn                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr))ROM_EMACTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACPHYRead                                                       \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                        uint8_t ui8PhyAddr,                                   \
S                       uint8_t ui8RegAddr))ROM_EMACTABLE[15])
X#define ROM_EMACPHYRead                                                               ((uint16_t (*)(uint32_t ui32Base,                                                             uint8_t ui8PhyAddr,                                                          uint8_t ui8RegAddr))ROM_EMACTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACPHYWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr,                                        \
S                   uint8_t ui8RegAddr,                                        \
S                   uint16_t ui16Data))ROM_EMACTABLE[16])
X#define ROM_EMACPHYWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint8_t ui8RegAddr,                                                           uint16_t ui16Data))ROM_EMACTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACReset                                                         \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[17])
X#define ROM_EMACReset                                                                 ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDisable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[18])
X#define ROM_EMACRxDisable                                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDMACurrentBufferGet                                         \
S        ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[19])
X#define ROM_EMACRxDMACurrentBufferGet                                                 ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDMACurrentDescriptorGet                                     \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[20])
X#define ROM_EMACRxDMACurrentDescriptorGet                                             ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDMADescriptorListGet                                        \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[21])
X#define ROM_EMACRxDMADescriptorListGet                                                ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDMADescriptorListSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[22])
X#define ROM_EMACRxDMADescriptorListSet                                                ((void (*)(uint32_t ui32Base,                                                            tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxDMAPollDemand                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[23])
X#define ROM_EMACRxDMAPollDemand                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxEnable                                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[24])
X#define ROM_EMACRxEnable                                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACRxWatchdogTimerSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Timeout))ROM_EMACTABLE[25])
X#define ROM_EMACRxWatchdogTimerSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Timeout))ROM_EMACTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACStatusGet                                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[26])
X#define ROM_EMACStatusGet                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDisable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[27])
X#define ROM_EMACTxDisable                                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDMACurrentBufferGet                                         \
S        ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[28])
X#define ROM_EMACTxDMACurrentBufferGet                                                 ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDMACurrentDescriptorGet                                     \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[29])
X#define ROM_EMACTxDMACurrentDescriptorGet                                             ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDMADescriptorListGet                                        \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[30])
X#define ROM_EMACTxDMADescriptorListGet                                                ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDMADescriptorListSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[31])
X#define ROM_EMACTxDMADescriptorListSet                                                ((void (*)(uint32_t ui32Base,                                                            tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxDMAPollDemand                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[32])
X#define ROM_EMACTxDMAPollDemand                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxEnable                                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[33])
X#define ROM_EMACTxEnable                                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACTxFlush                                                       \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[34])
X#define ROM_EMACTxFlush                                                               ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACAddrFilterGet                                                 \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Index))ROM_EMACTABLE[35])
X#define ROM_EMACAddrFilterGet                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Index))ROM_EMACTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACAddrFilterSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   uint32_t ui32Config))ROM_EMACTABLE[36])
X#define ROM_EMACAddrFilterSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           uint32_t ui32Config))ROM_EMACTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACHashFilterBitCalculate                                        \
S        ((uint32_t (*)(uint8_t *pui8MACAddr))ROM_EMACTABLE[37])
X#define ROM_EMACHashFilterBitCalculate                                                ((uint32_t (*)(uint8_t *pui8MACAddr))ROM_EMACTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACHashFilterGet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32HashHi,                                     \
S                   uint32_t *pui32HashLo))ROM_EMACTABLE[38])
X#define ROM_EMACHashFilterGet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32HashHi,                                                        uint32_t *pui32HashLo))ROM_EMACTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_EMACHashFilterSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32HashHi,                                       \
S                   uint32_t ui32HashLo))ROM_EMACTABLE[39])
X#define ROM_EMACHashFilterSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32HashHi,                                                          uint32_t ui32HashLo))ROM_EMACTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACNumAddrGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[40])
X#define ROM_EMACNumAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPHYExtendedRead                                               \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8PhyAddr,                                    \
S                       uint16_t ui16RegAddr))ROM_EMACTABLE[41])
X#define ROM_EMACPHYExtendedRead                                                       ((uint16_t (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint16_t ui16RegAddr))ROM_EMACTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPHYExtendedWrite                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr,                                        \
S                   uint16_t ui16RegAddr,                                      \
S                   uint16_t ui16Data))ROM_EMACTABLE[42])
X#define ROM_EMACPHYExtendedWrite                                                      ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint16_t ui16RegAddr,                                                         uint16_t ui16Data))ROM_EMACTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPowerManagementControlGet                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[43])
X#define ROM_EMACPowerManagementControlGet                                             ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPowerManagementControlSet                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_EMACTABLE[44])
X#define ROM_EMACPowerManagementControlSet                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_EMACTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACPowerManagementStatusGet                                      \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[45])
X#define ROM_EMACPowerManagementStatusGet                                              ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACRemoteWakeUpFrameFilterGet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[46])
X#define ROM_EMACRemoteWakeUpFrameFilterGet                                            ((void (*)(uint32_t ui32Base,                                                            tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACRemoteWakeUpFrameFilterSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   const tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[47])
X#define ROM_EMACRemoteWakeUpFrameFilterSet                                            ((void (*)(uint32_t ui32Base,                                                            const tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampAddendSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds))ROM_EMACTABLE[48])
X#define ROM_EMACTimestampAddendSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds))ROM_EMACTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampConfigGet                                            \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t *pui32SubSecondInc))ROM_EMACTABLE[49])
X#define ROM_EMACTimestampConfigGet                                                    ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32SubSecondInc))ROM_EMACTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampConfigSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32SubSecondInc))ROM_EMACTABLE[50])
X#define ROM_EMACTimestampConfigSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32SubSecondInc))ROM_EMACTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[51])
X#define ROM_EMACTimestampDisable                                                      ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[52])
X#define ROM_EMACTimestampEnable                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampIntStatus                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[53])
X#define ROM_EMACTimestampIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampPPSCommand                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Cmd))ROM_EMACTABLE[54])
X#define ROM_EMACTimestampPPSCommand                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Cmd))ROM_EMACTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampPPSCommandModeSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EMACTABLE[55])
X#define ROM_EMACTimestampPPSCommandModeSet                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EMACTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampPPSPeriodSet                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Period,                                       \
S                   uint32_t ui32Width))ROM_EMACTABLE[56])
X#define ROM_EMACTimestampPPSPeriodSet                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Period,                                                          uint32_t ui32Width))ROM_EMACTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampPPSSimpleModeSet                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32FreqConfig))ROM_EMACTABLE[57])
X#define ROM_EMACTimestampPPSSimpleModeSet                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FreqConfig))ROM_EMACTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampSysTimeGet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Seconds,                                    \
S                   uint32_t *pui32SubSeconds))ROM_EMACTABLE[58])
X#define ROM_EMACTimestampSysTimeGet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Seconds,                                                       uint32_t *pui32SubSeconds))ROM_EMACTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampSysTimeSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32SubSeconds))ROM_EMACTABLE[59])
X#define ROM_EMACTimestampSysTimeSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32SubSeconds))ROM_EMACTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampSysTimeUpdate                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32SubSeconds,                                   \
S                   bool bInc))ROM_EMACTABLE[60])
X#define ROM_EMACTimestampSysTimeUpdate                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32SubSeconds,                                                      bool bInc))ROM_EMACTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampTargetIntDisable                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[61])
X#define ROM_EMACTimestampTargetIntDisable                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[61])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampTargetIntEnable                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[62])
X#define ROM_EMACTimestampTargetIntEnable                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[62])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACTimestampTargetSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32Nanoseconds))ROM_EMACTABLE[63])
X#define ROM_EMACTimestampTargetSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32Nanoseconds))ROM_EMACTABLE[63])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANHashFilterBitCalculate                                    \
S        ((uint32_t (*)(uint16_t ui16Tag))ROM_EMACTABLE[64])
X#define ROM_EMACVLANHashFilterBitCalculate                                            ((uint32_t (*)(uint16_t ui16Tag))ROM_EMACTABLE[64])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANHashFilterGet                                             \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[65])
X#define ROM_EMACVLANHashFilterGet                                                     ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[65])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANHashFilterSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Hash))ROM_EMACTABLE[66])
X#define ROM_EMACVLANHashFilterSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Hash))ROM_EMACTABLE[66])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANRxConfigGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint16_t *pui16Tag))ROM_EMACTABLE[67])
X#define ROM_EMACVLANRxConfigGet                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint16_t *pui16Tag))ROM_EMACTABLE[67])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANRxConfigSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint16_t ui16Tag,                                          \
S                   uint32_t ui32Config))ROM_EMACTABLE[68])
X#define ROM_EMACVLANRxConfigSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint16_t ui16Tag,                                                             uint32_t ui32Config))ROM_EMACTABLE[68])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANTxConfigGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint16_t *pui16Tag))ROM_EMACTABLE[69])
X#define ROM_EMACVLANTxConfigGet                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint16_t *pui16Tag))ROM_EMACTABLE[69])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_EMACVLANTxConfigSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint16_t ui16Tag,                                          \
S                   uint32_t ui32Config))ROM_EMACTABLE[70])
X#define ROM_EMACVLANTxConfigSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint16_t ui16Tag,                                                             uint32_t ui32Config))ROM_EMACTABLE[70])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_UpdateEMAC                                                        \
S        ((void (*)(uint32_t ui32Clock))ROM_EMACTABLE[71])
X#define ROM_UpdateEMAC                                                                ((void (*)(uint32_t ui32Clock))ROM_EMACTABLE[71])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Flash API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProgram                                                      \
N        ((int32_t (*)(uint32_t *pui32Data,                                    \
N                      uint32_t ui32Address,                                   \
N                      uint32_t ui32Count))ROM_FLASHTABLE[0])
X#define ROM_FlashProgram                                                              ((int32_t (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_FLASHTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashErase                                                        \
N        ((int32_t (*)(uint32_t ui32Address))ROM_FLASHTABLE[3])
X#define ROM_FlashErase                                                                ((int32_t (*)(uint32_t ui32Address))ROM_FLASHTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectGet                                                   \
N        ((tFlashProtection (*)(uint32_t ui32Address))ROM_FLASHTABLE[4])
X#define ROM_FlashProtectGet                                                           ((tFlashProtection (*)(uint32_t ui32Address))ROM_FLASHTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectSet                                                   \
N        ((int32_t (*)(uint32_t ui32Address,                                   \
N                      tFlashProtection eProtect))ROM_FLASHTABLE[5])
X#define ROM_FlashProtectSet                                                           ((int32_t (*)(uint32_t ui32Address,                                                         tFlashProtection eProtect))ROM_FLASHTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectSave                                                  \
N        ((int32_t (*)(void))ROM_FLASHTABLE[6])
X#define ROM_FlashProtectSave                                                          ((int32_t (*)(void))ROM_FLASHTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserGet                                                      \
N        ((int32_t (*)(uint32_t *pui32User0,                                   \
N                      uint32_t *pui32User1))ROM_FLASHTABLE[7])
X#define ROM_FlashUserGet                                                              ((int32_t (*)(uint32_t *pui32User0,                                                         uint32_t *pui32User1))ROM_FLASHTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserSet                                                      \
N        ((int32_t (*)(uint32_t ui32User0,                                     \
N                      uint32_t ui32User1))ROM_FLASHTABLE[8])
X#define ROM_FlashUserSet                                                              ((int32_t (*)(uint32_t ui32User0,                                                           uint32_t ui32User1))ROM_FLASHTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserSave                                                     \
N        ((int32_t (*)(void))ROM_FLASHTABLE[9])
X#define ROM_FlashUserSave                                                             ((int32_t (*)(void))ROM_FLASHTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntEnable                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[10])
X#define ROM_FlashIntEnable                                                            ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntDisable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[11])
X#define ROM_FlashIntDisable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntStatus                                                    \
N        ((uint32_t (*)(bool bMasked))ROM_FLASHTABLE[12])
X#define ROM_FlashIntStatus                                                            ((uint32_t (*)(bool bMasked))ROM_FLASHTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntClear                                                     \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[13])
X#define ROM_FlashIntClear                                                             ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the FPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUEnable                                                         \
N        ((void (*)(void))ROM_FPUTABLE[0])
X#define ROM_FPUEnable                                                                 ((void (*)(void))ROM_FPUTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUDisable                                                        \
N        ((void (*)(void))ROM_FPUTABLE[1])
X#define ROM_FPUDisable                                                                ((void (*)(void))ROM_FPUTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUFlushToZeroModeSet                                             \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[2])
X#define ROM_FPUFlushToZeroModeSet                                                     ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUHalfPrecisionModeSet                                           \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[3])
X#define ROM_FPUHalfPrecisionModeSet                                                   ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPULazyStackingEnable                                             \
N        ((void (*)(void))ROM_FPUTABLE[4])
X#define ROM_FPULazyStackingEnable                                                     ((void (*)(void))ROM_FPUTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUNaNModeSet                                                     \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[5])
X#define ROM_FPUNaNModeSet                                                             ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPURoundingModeSet                                                \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[6])
X#define ROM_FPURoundingModeSet                                                        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUStackingDisable                                                \
N        ((void (*)(void))ROM_FPUTABLE[7])
X#define ROM_FPUStackingDisable                                                        ((void (*)(void))ROM_FPUTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUStackingEnable                                                 \
N        ((void (*)(void))ROM_FPUTABLE[8])
X#define ROM_FPUStackingEnable                                                         ((void (*)(void))ROM_FPUTABLE[8])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the GPIO API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinWrite                                                      \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint8_t ui8Val))ROM_GPIOTABLE[0])
X#define ROM_GPIOPinWrite                                                              ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint8_t ui8Val))ROM_GPIOTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODirModeSet                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32PinIO))ROM_GPIOTABLE[1])
X#define ROM_GPIODirModeSet                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32PinIO))ROM_GPIOTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODirModeGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Port,                                     \
N                       uint8_t ui8Pin))ROM_GPIOTABLE[2])
X#define ROM_GPIODirModeGet                                                            ((uint32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin))ROM_GPIOTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOIntTypeSet                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32IntType))ROM_GPIOTABLE[3])
X#define ROM_GPIOIntTypeSet                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32IntType))ROM_GPIOTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOIntTypeGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Port,                                     \
N                       uint8_t ui8Pin))ROM_GPIOTABLE[4])
X#define ROM_GPIOIntTypeGet                                                            ((uint32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin))ROM_GPIOTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_GPIOPadConfigSet                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32Strength,                                     \
N                   uint32_t ui32PadType))ROM_GPIOTABLE[5])
X#define ROM_GPIOPadConfigSet                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32Strength,                                                        uint32_t ui32PadType))ROM_GPIOTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPadConfigGet                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pin,                                            \
N                   uint32_t *pui32Strength,                                   \
N                   uint32_t *pui32PadType))ROM_GPIOTABLE[6])
X#define ROM_GPIOPadConfigGet                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin,                                                               uint32_t *pui32Strength,                                                      uint32_t *pui32PadType))ROM_GPIOTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinRead                                                       \
N        ((int32_t (*)(uint32_t ui32Port,                                      \
N                      uint8_t ui8Pins))ROM_GPIOTABLE[11])
X#define ROM_GPIOPinRead                                                               ((int32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_GPIOPinTypeCAN                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[12])
X#define ROM_GPIOPinTypeCAN                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeComparator                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[13])
X#define ROM_GPIOPinTypeComparator                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOInput                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[14])
X#define ROM_GPIOPinTypeGPIOInput                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOOutput                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[15])
X#define ROM_GPIOPinTypeGPIOOutput                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeI2C                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[16])
X#define ROM_GPIOPinTypeI2C                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypePWM                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[17])
X#define ROM_GPIOPinTypePWM                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeQEI                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[18])
X#define ROM_GPIOPinTypeQEI                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeSSI                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[19])
X#define ROM_GPIOPinTypeSSI                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeTimer                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[20])
X#define ROM_GPIOPinTypeTimer                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUART                                                   \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[21])
X#define ROM_GPIOPinTypeUART                                                           ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOOutputOD                                           \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[22])
X#define ROM_GPIOPinTypeGPIOOutputOD                                                   ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeADC                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[23])
X#define ROM_GPIOPinTypeADC                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUSBDigital                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[24])
X#define ROM_GPIOPinTypeUSBDigital                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinConfigure                                                  \
N        ((void (*)(uint32_t ui32PinConfig))ROM_GPIOTABLE[26])
X#define ROM_GPIOPinConfigure                                                          ((void (*)(uint32_t ui32PinConfig))ROM_GPIOTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUSBAnalog                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[28])
X#define ROM_GPIOPinTypeUSBAnalog                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODMATriggerEnable                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[31])
X#define ROM_GPIODMATriggerEnable                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODMATriggerDisable                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[32])
X#define ROM_GPIODMATriggerDisable                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOADCTriggerEnable                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[33])
X#define ROM_GPIOADCTriggerEnable                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOADCTriggerDisable                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[34])
X#define ROM_GPIOADCTriggerDisable                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeI2CSCL                                                 \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[39])
X#define ROM_GPIOPinTypeI2CSCL                                                         ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOPinTypeOneWire                                                \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[44])
X#define ROM_GPIOPinTypeOneWire                                                        ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOPinTypeWakeHigh                                               \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[48])
X#define ROM_GPIOPinTypeWakeHigh                                                       ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOPinTypeWakeLow                                                \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[49])
X#define ROM_GPIOPinTypeWakeLow                                                        ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOIntClear                                                      \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[51])
X#define ROM_GPIOIntClear                                                              ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOIntDisable                                                    \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[52])
X#define ROM_GPIOIntDisable                                                            ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOIntEnable                                                     \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[53])
X#define ROM_GPIOIntEnable                                                             ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOIntStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Port,                                     \
S                       bool bMasked))ROM_GPIOTABLE[54])
X#define ROM_GPIOIntStatus                                                             ((uint32_t (*)(uint32_t ui32Port,                                                            bool bMasked))ROM_GPIOTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_GPIOPinWakeStatus                                                 \
S        ((uint32_t (*)(uint32_t ui32Port))ROM_GPIOTABLE[55])
X#define ROM_GPIOPinWakeStatus                                                         ((uint32_t (*)(uint32_t ui32Port))ROM_GPIOTABLE[55])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Hibernate API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntClear                                                 \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[0])
X#define ROM_HibernateIntClear                                                         ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateEnableExpClk                                             \
N        ((void (*)(uint32_t ui32HibClk))ROM_HIBERNATETABLE[1])
X#define ROM_HibernateEnableExpClk                                                     ((void (*)(uint32_t ui32HibClk))ROM_HIBERNATETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDisable                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[2])
X#define ROM_HibernateDisable                                                          ((void (*)(void))ROM_HIBERNATETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCEnable                                                \
N        ((void (*)(void))ROM_HIBERNATETABLE[4])
X#define ROM_HibernateRTCEnable                                                        ((void (*)(void))ROM_HIBERNATETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCDisable                                               \
N        ((void (*)(void))ROM_HIBERNATETABLE[5])
X#define ROM_HibernateRTCDisable                                                       ((void (*)(void))ROM_HIBERNATETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateWakeSet                                                  \
N        ((void (*)(uint32_t ui32WakeFlags))ROM_HIBERNATETABLE[6])
X#define ROM_HibernateWakeSet                                                          ((void (*)(uint32_t ui32WakeFlags))ROM_HIBERNATETABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateWakeGet                                                  \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[7])
X#define ROM_HibernateWakeGet                                                          ((uint32_t (*)(void))ROM_HIBERNATETABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateLowBatSet                                                \
N        ((void (*)(uint32_t ui32LowBatFlags))ROM_HIBERNATETABLE[8])
X#define ROM_HibernateLowBatSet                                                        ((void (*)(uint32_t ui32LowBatFlags))ROM_HIBERNATETABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateLowBatGet                                                \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[9])
X#define ROM_HibernateLowBatGet                                                        ((uint32_t (*)(void))ROM_HIBERNATETABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCSet                                                   \
N        ((void (*)(uint32_t ui32RTCValue))ROM_HIBERNATETABLE[10])
X#define ROM_HibernateRTCSet                                                           ((void (*)(uint32_t ui32RTCValue))ROM_HIBERNATETABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCGet                                                   \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[11])
X#define ROM_HibernateRTCGet                                                           ((uint32_t (*)(void))ROM_HIBERNATETABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCTrimSet                                               \
N        ((void (*)(uint32_t ui32Trim))ROM_HIBERNATETABLE[16])
X#define ROM_HibernateRTCTrimSet                                                       ((void (*)(uint32_t ui32Trim))ROM_HIBERNATETABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCTrimGet                                               \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[17])
X#define ROM_HibernateRTCTrimGet                                                       ((uint32_t (*)(void))ROM_HIBERNATETABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDataSet                                                  \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Count))ROM_HIBERNATETABLE[18])
X#define ROM_HibernateDataSet                                                          ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Count))ROM_HIBERNATETABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDataGet                                                  \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Count))ROM_HIBERNATETABLE[19])
X#define ROM_HibernateDataGet                                                          ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Count))ROM_HIBERNATETABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRequest                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[20])
X#define ROM_HibernateRequest                                                          ((void (*)(void))ROM_HIBERNATETABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntEnable                                                \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[21])
X#define ROM_HibernateIntEnable                                                        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntDisable                                               \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[22])
X#define ROM_HibernateIntDisable                                                       ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntStatus                                                \
N        ((uint32_t (*)(bool bMasked))ROM_HIBERNATETABLE[23])
X#define ROM_HibernateIntStatus                                                        ((uint32_t (*)(bool bMasked))ROM_HIBERNATETABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIsActive                                                 \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[24])
X#define ROM_HibernateIsActive                                                         ((uint32_t (*)(void))ROM_HIBERNATETABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCSSGet                                                 \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[27])
X#define ROM_HibernateRTCSSGet                                                         ((uint32_t (*)(void))ROM_HIBERNATETABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateClockConfig                                              \
N        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[28])
X#define ROM_HibernateClockConfig                                                      ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateBatCheckStart                                            \
N        ((void (*)(void))ROM_HIBERNATETABLE[29])
X#define ROM_HibernateBatCheckStart                                                    ((void (*)(void))ROM_HIBERNATETABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateBatCheckDone                                             \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[30])
X#define ROM_HibernateBatCheckDone                                                     ((uint32_t (*)(void))ROM_HIBERNATETABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateGPIORetentionEnable                                      \
S        ((void (*)(void))ROM_HIBERNATETABLE[31])
X#define ROM_HibernateGPIORetentionEnable                                              ((void (*)(void))ROM_HIBERNATETABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateGPIORetentionDisable                                     \
S        ((void (*)(void))ROM_HIBERNATETABLE[32])
X#define ROM_HibernateGPIORetentionDisable                                             ((void (*)(void))ROM_HIBERNATETABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateGPIORetentionGet                                         \
S        ((bool (*)(void))ROM_HIBERNATETABLE[33])
X#define ROM_HibernateGPIORetentionGet                                                 ((bool (*)(void))ROM_HIBERNATETABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateCounterMode                                              \
S        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[34])
X#define ROM_HibernateCounterMode                                                      ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateCalendarSet                                              \
N        ((void (*)(struct tm *psTime))ROM_HIBERNATETABLE[35])
X#define ROM_HibernateCalendarSet                                                      ((void (*)(struct tm *psTime))ROM_HIBERNATETABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateCalendarGet                                              \
S        ((int (*)(struct tm *psTime))ROM_HIBERNATETABLE[36])
X#define ROM_HibernateCalendarGet                                                      ((int (*)(struct tm *psTime))ROM_HIBERNATETABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateCalendarMatchSet                                         \
S        ((void (*)(uint32_t ui32Index,                                        \
S                   struct tm *psTime))ROM_HIBERNATETABLE[37])
X#define ROM_HibernateCalendarMatchSet                                                 ((void (*)(uint32_t ui32Index,                                                           struct tm *psTime))ROM_HIBERNATETABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateCalendarMatchGet                                         \
S        ((void (*)(uint32_t ui32Index,                                        \
S                   struct tm *psTime))ROM_HIBERNATETABLE[38])
X#define ROM_HibernateCalendarMatchGet                                                 ((void (*)(uint32_t ui32Index,                                                           struct tm *psTime))ROM_HIBERNATETABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperDisable                                            \
S        ((void (*)(void))ROM_HIBERNATETABLE[39])
X#define ROM_HibernateTamperDisable                                                    ((void (*)(void))ROM_HIBERNATETABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperEnable                                             \
S        ((void (*)(void))ROM_HIBERNATETABLE[40])
X#define ROM_HibernateTamperEnable                                                     ((void (*)(void))ROM_HIBERNATETABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperEventsClear                                        \
S        ((void (*)(void))ROM_HIBERNATETABLE[41])
X#define ROM_HibernateTamperEventsClear                                                ((void (*)(void))ROM_HIBERNATETABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperEventsConfig                                       \
S        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[42])
X#define ROM_HibernateTamperEventsConfig                                               ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperEventsGet                                          \
S        ((bool (*)(uint32_t ui32Index,                                        \
S                   uint32_t *pui32RTC,                                        \
S                   uint32_t *pui32Event))ROM_HIBERNATETABLE[43])
X#define ROM_HibernateTamperEventsGet                                                  ((bool (*)(uint32_t ui32Index,                                                           uint32_t *pui32RTC,                                                           uint32_t *pui32Event))ROM_HIBERNATETABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperExtOscValid                                        \
S        ((bool (*)(void))ROM_HIBERNATETABLE[44])
X#define ROM_HibernateTamperExtOscValid                                                ((bool (*)(void))ROM_HIBERNATETABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperExtOscRecover                                      \
S        ((void (*)(void))ROM_HIBERNATETABLE[45])
X#define ROM_HibernateTamperExtOscRecover                                              ((void (*)(void))ROM_HIBERNATETABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperIODisable                                          \
S        ((void (*)(uint32_t ui32Input))ROM_HIBERNATETABLE[46])
X#define ROM_HibernateTamperIODisable                                                  ((void (*)(uint32_t ui32Input))ROM_HIBERNATETABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperIOEnable                                           \
S        ((void (*)(uint32_t ui32Input,                                        \
S                   uint32_t ui32Config))ROM_HIBERNATETABLE[47])
X#define ROM_HibernateTamperIOEnable                                                   ((void (*)(uint32_t ui32Input,                                                           uint32_t ui32Config))ROM_HIBERNATETABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateTamperStatusGet                                          \
S        ((uint32_t (*)(void))ROM_HIBERNATETABLE[48])
X#define ROM_HibernateTamperStatusGet                                                  ((uint32_t (*)(void))ROM_HIBERNATETABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_HibernateRTCMatchGet                                              \
S        ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[49])
X#define ROM_HibernateRTCMatchGet                                                      ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_HibernateRTCMatchSet                                              \
S        ((void (*)(uint32_t ui32Match,                                        \
S                   uint32_t ui32Value))ROM_HIBERNATETABLE[50])
X#define ROM_HibernateRTCMatchSet                                                      ((void (*)(uint32_t ui32Match,                                                           uint32_t ui32Value))ROM_HIBERNATETABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateRTCSSMatchGet                                            \
S        ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[51])
X#define ROM_HibernateRTCSSMatchGet                                                    ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_HibernateRTCSSMatchSet                                            \
S        ((void (*)(uint32_t ui32Match,                                        \
S                   uint32_t ui32Value))ROM_HIBERNATETABLE[52])
X#define ROM_HibernateRTCSSMatchSet                                                    ((void (*)(uint32_t ui32Match,                                                           uint32_t ui32Value))ROM_HIBERNATETABLE[52])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the I2C API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDataPut                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Data))ROM_I2CTABLE[0])
X#define ROM_I2CMasterDataPut                                                          ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterInitExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32I2CClk,                                       \
N                   bool bFast))ROM_I2CTABLE[1])
X#define ROM_I2CMasterInitExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32I2CClk,                                                          bool bFast))ROM_I2CTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveInit                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8SlaveAddr))ROM_I2CTABLE[2])
X#define ROM_I2CSlaveInit                                                              ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8SlaveAddr))ROM_I2CTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterEnable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[3])
X#define ROM_I2CMasterEnable                                                           ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveEnable                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[4])
X#define ROM_I2CSlaveEnable                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDisable                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[5])
X#define ROM_I2CMasterDisable                                                          ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveDisable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[6])
X#define ROM_I2CSlaveDisable                                                           ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntEnable                                                \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[7])
X#define ROM_I2CMasterIntEnable                                                        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntEnable                                                 \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[8])
X#define ROM_I2CSlaveIntEnable                                                         ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntDisable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[9])
X#define ROM_I2CMasterIntDisable                                                       ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntDisable                                                \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[10])
X#define ROM_I2CSlaveIntDisable                                                        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntStatus                                                \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   bool bMasked))ROM_I2CTABLE[11])
X#define ROM_I2CMasterIntStatus                                                        ((bool (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntStatus                                                 \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   bool bMasked))ROM_I2CTABLE[12])
X#define ROM_I2CSlaveIntStatus                                                         ((bool (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntClear                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[13])
X#define ROM_I2CMasterIntClear                                                         ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntClear                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[14])
X#define ROM_I2CSlaveIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterSlaveAddrSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8SlaveAddr,                                      \
N                   bool bReceive))ROM_I2CTABLE[15])
X#define ROM_I2CMasterSlaveAddrSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8SlaveAddr,                                                         bool bReceive))ROM_I2CTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterBusy                                                     \
N        ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[16])
X#define ROM_I2CMasterBusy                                                             ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterBusBusy                                                  \
N        ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[17])
X#define ROM_I2CMasterBusBusy                                                          ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterControl                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Cmd))ROM_I2CTABLE[18])
X#define ROM_I2CMasterControl                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Cmd))ROM_I2CTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterErr                                                      \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[19])
X#define ROM_I2CMasterErr                                                              ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDataGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[20])
X#define ROM_I2CMasterDataGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveStatus                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[21])
X#define ROM_I2CSlaveStatus                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveDataPut                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Data))ROM_I2CTABLE[22])
X#define ROM_I2CSlaveDataPut                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveDataGet                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[23])
X#define ROM_I2CSlaveDataGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateI2C                                                         \
N        ((void (*)(void))ROM_I2CTABLE[24])
X#define ROM_UpdateI2C                                                                 ((void (*)(void))ROM_I2CTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntEnableEx                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[25])
X#define ROM_I2CSlaveIntEnableEx                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntDisableEx                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[26])
X#define ROM_I2CSlaveIntDisableEx                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntStatusEx                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_I2CTABLE[27])
X#define ROM_I2CSlaveIntStatusEx                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveIntClearEx                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[28])
X#define ROM_I2CSlaveIntClearEx                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntEnableEx                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[29])
X#define ROM_I2CMasterIntEnableEx                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntDisableEx                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[30])
X#define ROM_I2CMasterIntDisableEx                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntStatusEx                                              \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_I2CTABLE[31])
X#define ROM_I2CMasterIntStatusEx                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntClearEx                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[32])
X#define ROM_I2CMasterIntClearEx                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterTimeoutSet                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Value))ROM_I2CTABLE[33])
X#define ROM_I2CMasterTimeoutSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Value))ROM_I2CTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveACKOverride                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bEnable))ROM_I2CTABLE[34])
X#define ROM_I2CSlaveACKOverride                                                       ((void (*)(uint32_t ui32Base,                                                            bool bEnable))ROM_I2CTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveACKValueSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bACK))ROM_I2CTABLE[35])
X#define ROM_I2CSlaveACKValueSet                                                       ((void (*)(uint32_t ui32Base,                                                            bool bACK))ROM_I2CTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveAddressSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8AddrNum,                                        \
S                   uint8_t ui8SlaveAddr))ROM_I2CTABLE[37])
X#define ROM_I2CSlaveAddressSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8AddrNum,                                                           uint8_t ui8SlaveAddr))ROM_I2CTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterLineStateGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[38])
X#define ROM_I2CMasterLineStateGet                                                     ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CTxFIFOConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[39])
X#define ROM_I2CTxFIFOConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CTxFIFOFlush                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[40])
X#define ROM_I2CTxFIFOFlush                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CRxFIFOConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[41])
X#define ROM_I2CRxFIFOConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CRxFIFOFlush                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[42])
X#define ROM_I2CRxFIFOFlush                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CFIFOStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[43])
X#define ROM_I2CFIFOStatus                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CFIFODataPut                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Data))ROM_I2CTABLE[44])
X#define ROM_I2CFIFODataPut                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CFIFODataPutNonBlocking                                         \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8Data))ROM_I2CTABLE[45])
X#define ROM_I2CFIFODataPutNonBlocking                                                 ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CFIFODataGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[46])
X#define ROM_I2CFIFODataGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CFIFODataGetNonBlocking                                         \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t *pui8Data))ROM_I2CTABLE[47])
X#define ROM_I2CFIFODataGetNonBlocking                                                 ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t *pui8Data))ROM_I2CTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CMasterBurstLengthSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Length))ROM_I2CTABLE[48])
X#define ROM_I2CMasterBurstLengthSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Length))ROM_I2CTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CMasterBurstCountGet                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[49])
X#define ROM_I2CMasterBurstCountGet                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveFIFODisable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[50])
X#define ROM_I2CSlaveFIFODisable                                                       ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_I2CSlaveFIFOEnable                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[51])
X#define ROM_I2CSlaveFIFOEnable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_I2CMasterGlitchFilterConfigSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[54])
X#define ROM_I2CMasterGlitchFilterConfigSet                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[54])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Interrupt API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntEnable                                                         \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[0])
X#define ROM_IntEnable                                                                 ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntMasterEnable                                                   \
N        ((bool (*)(void))ROM_INTERRUPTTABLE[1])
X#define ROM_IntMasterEnable                                                           ((bool (*)(void))ROM_INTERRUPTTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntMasterDisable                                                  \
N        ((bool (*)(void))ROM_INTERRUPTTABLE[2])
X#define ROM_IntMasterDisable                                                          ((bool (*)(void))ROM_INTERRUPTTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntDisable                                                        \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[3])
X#define ROM_IntDisable                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGroupingSet                                            \
N        ((void (*)(uint32_t ui32Bits))ROM_INTERRUPTTABLE[4])
X#define ROM_IntPriorityGroupingSet                                                    ((void (*)(uint32_t ui32Bits))ROM_INTERRUPTTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGroupingGet                                            \
N        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[5])
X#define ROM_IntPriorityGroupingGet                                                    ((uint32_t (*)(void))ROM_INTERRUPTTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPrioritySet                                                    \
N        ((void (*)(uint32_t ui32Interrupt,                                    \
N                   uint8_t ui8Priority))ROM_INTERRUPTTABLE[6])
X#define ROM_IntPrioritySet                                                            ((void (*)(uint32_t ui32Interrupt,                                                       uint8_t ui8Priority))ROM_INTERRUPTTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGet                                                    \
N        ((int32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[7])
X#define ROM_IntPriorityGet                                                            ((int32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPendSet                                                        \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[8])
X#define ROM_IntPendSet                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPendClear                                                      \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[9])
X#define ROM_IntPendClear                                                              ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityMaskSet                                                \
N        ((void (*)(uint32_t ui32PriorityMask))ROM_INTERRUPTTABLE[10])
X#define ROM_IntPriorityMaskSet                                                        ((void (*)(uint32_t ui32PriorityMask))ROM_INTERRUPTTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityMaskGet                                                \
N        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[11])
X#define ROM_IntPriorityMaskGet                                                        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntIsEnabled                                                      \
N        ((uint32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[12])
X#define ROM_IntIsEnabled                                                              ((uint32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_IntTrigger                                                        \
S        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[13])
X#define ROM_IntTrigger                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the LCD API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_LCDTABLE[0])
X#define ROM_LCDIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_LCDTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDClockReset                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Clocks))ROM_LCDTABLE[1])
X#define ROM_LCDClockReset                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Clocks))ROM_LCDTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDDMAConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_LCDTABLE[2])
X#define ROM_LCDDMAConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_LCDTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDCommandWrite                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Cmd))ROM_LCDTABLE[3])
X#define ROM_LCDIDDCommandWrite                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Cmd))ROM_LCDTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_LCDTABLE[4])
X#define ROM_LCDIDDConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_LCDTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDDataRead                                                    \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_LCDTABLE[5])
X#define ROM_LCDIDDDataRead                                                            ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_LCDTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDDataWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Data))ROM_LCDTABLE[6])
X#define ROM_LCDIDDDataWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Data))ROM_LCDTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDDMADisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[7])
X#define ROM_LCDIDDDMADisable                                                          ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDDMAWrite                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   const uint32_t *pui32Data,                                 \
S                   uint32_t ui32Count))ROM_LCDTABLE[8])
X#define ROM_LCDIDDDMAWrite                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              const uint32_t *pui32Data,                                                    uint32_t ui32Count))ROM_LCDTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDIndexedRead                                                 \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS,                                       \
S                       uint16_t ui16Addr))ROM_LCDTABLE[9])
X#define ROM_LCDIDDIndexedRead                                                         ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Addr))ROM_LCDTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDIndexedWrite                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Addr,                                         \
S                   uint16_t ui16Data))ROM_LCDTABLE[10])
X#define ROM_LCDIDDIndexedWrite                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Addr,                                                            uint16_t ui16Data))ROM_LCDTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDStatusRead                                                  \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_LCDTABLE[11])
X#define ROM_LCDIDDStatusRead                                                          ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_LCDTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIDDTimingSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   const tLCDIDDTiming *pTiming))ROM_LCDTABLE[12])
X#define ROM_LCDIDDTimingSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              const tLCDIDDTiming *pTiming))ROM_LCDTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[13])
X#define ROM_LCDIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[14])
X#define ROM_LCDIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[15])
X#define ROM_LCDIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDModeSet                                                        \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8Mode,                                       \
S                       uint32_t ui32PixClk,                                   \
S                       uint32_t ui32SysClk))ROM_LCDTABLE[16])
X#define ROM_LCDModeSet                                                                ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Mode,                                                              uint32_t ui32PixClk,                                                          uint32_t ui32SysClk))ROM_LCDTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterACBiasIntCountSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Count))ROM_LCDTABLE[17])
X#define ROM_LCDRasterACBiasIntCountSet                                                ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Count))ROM_LCDTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint8_t ui8PalLoadDelay))ROM_LCDTABLE[18])
X#define ROM_LCDRasterConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint8_t ui8PalLoadDelay))ROM_LCDTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterDisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[19])
X#define ROM_LCDRasterDisable                                                          ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterEnable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[20])
X#define ROM_LCDRasterEnable                                                           ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterFrameBufferSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Buffer,                                         \
S                   uint32_t *pui32Addr,                                       \
S                   uint32_t ui32NumBytes))ROM_LCDTABLE[21])
X#define ROM_LCDRasterFrameBufferSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Buffer,                                                            uint32_t *pui32Addr,                                                          uint32_t ui32NumBytes))ROM_LCDTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterPaletteSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Type,                                         \
S                   uint32_t *pui32PalAddr,                                    \
S                   const uint32_t *pui32SrcColors,                            \
S                   uint32_t ui32Start,                                        \
S                   uint32_t ui32Count))ROM_LCDTABLE[22])
X#define ROM_LCDRasterPaletteSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Type,                                                            uint32_t *pui32PalAddr,                                                       const uint32_t *pui32SrcColors,                                               uint32_t ui32Start,                                                           uint32_t ui32Count))ROM_LCDTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterSubPanelConfigSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags,                                        \
S                   uint32_t ui32BottomLines,                                  \
S                   uint32_t ui32DefaultPixel))ROM_LCDTABLE[23])
X#define ROM_LCDRasterSubPanelConfigSet                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags,                                                           uint32_t ui32BottomLines,                                                     uint32_t ui32DefaultPixel))ROM_LCDTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterSubPanelDisable                                          \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[24])
X#define ROM_LCDRasterSubPanelDisable                                                  ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterSubPanelEnable                                           \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[25])
X#define ROM_LCDRasterSubPanelEnable                                                   ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_LCDRasterTimingSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   const tLCDRasterTiming *pTiming))ROM_LCDTABLE[26])
X#define ROM_LCDRasterTimingSet                                                        ((void (*)(uint32_t ui32Base,                                                            const tLCDRasterTiming *pTiming))ROM_LCDTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_LCDRasterEnabled                                                  \
S        ((bool (*)(uint32_t ui32Base))ROM_LCDTABLE[27])
X#define ROM_LCDRasterEnabled                                                          ((bool (*)(uint32_t ui32Base))ROM_LCDTABLE[27])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the MPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPUEnable                                                         \
N        ((void (*)(uint32_t ui32MPUConfig))ROM_MPUTABLE[0])
X#define ROM_MPUEnable                                                                 ((void (*)(uint32_t ui32MPUConfig))ROM_MPUTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPUDisable                                                        \
N        ((void (*)(void))ROM_MPUTABLE[1])
X#define ROM_MPUDisable                                                                ((void (*)(void))ROM_MPUTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionCountGet                                                 \
N        ((uint32_t (*)(void))ROM_MPUTABLE[2])
X#define ROM_MPURegionCountGet                                                         ((uint32_t (*)(void))ROM_MPUTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionEnable                                                   \
N        ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[3])
X#define ROM_MPURegionEnable                                                           ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionDisable                                                  \
N        ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[4])
X#define ROM_MPURegionDisable                                                          ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionSet                                                      \
N        ((void (*)(uint32_t ui32Region,                                       \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_MPUTABLE[5])
X#define ROM_MPURegionSet                                                              ((void (*)(uint32_t ui32Region,                                                          uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_MPUTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionGet                                                      \
N        ((void (*)(uint32_t ui32Region,                                       \
N                   uint32_t *pui32Addr,                                       \
N                   uint32_t *pui32Flags))ROM_MPUTABLE[6])
X#define ROM_MPURegionGet                                                              ((void (*)(uint32_t ui32Region,                                                          uint32_t *pui32Addr,                                                          uint32_t *pui32Flags))ROM_MPUTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the OneWire API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireIntStatus                                                  \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_ONEWIRETABLE[0])
X#define ROM_OneWireIntStatus                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_ONEWIRETABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireBusReset                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[1])
X#define ROM_OneWireBusReset                                                           ((void (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireBusStatus                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[2])
X#define ROM_OneWireBusStatus                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireDataGet                                                    \
S        ((void (*)(uint32_t u3i2Base,                                         \
S                   uint32_t *pui32Data))ROM_ONEWIRETABLE[3])
X#define ROM_OneWireDataGet                                                            ((void (*)(uint32_t u3i2Base,                                                            uint32_t *pui32Data))ROM_ONEWIRETABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireDataGetNonBlocking                                         \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Data))ROM_ONEWIRETABLE[4])
X#define ROM_OneWireDataGetNonBlocking                                                 ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_ONEWIRETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireInit                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32InitFlags))ROM_ONEWIRETABLE[5])
X#define ROM_OneWireInit                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32InitFlags))ROM_ONEWIRETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireIntClear                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[6])
X#define ROM_OneWireIntClear                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireIntDisable                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[7])
X#define ROM_OneWireIntDisable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireIntEnable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[8])
X#define ROM_OneWireIntEnable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireTransaction                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32OpFlags,                                      \
S                   uint32_t ui32Data,                                         \
S                   uint32_t ui32BitCnt))ROM_ONEWIRETABLE[9])
X#define ROM_OneWireTransaction                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32OpFlags,                                                         uint32_t ui32Data,                                                            uint32_t ui32BitCnt))ROM_ONEWIRETABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireDMADisable                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[10])
X#define ROM_OneWireDMADisable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_OneWireDMAEnable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[11])
X#define ROM_OneWireDMAEnable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[11])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the PWM API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMPulseWidthSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOut,                                       \
N                   uint32_t ui32Width))ROM_PWMTABLE[0])
X#define ROM_PWMPulseWidthSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOut,                                                          uint32_t ui32Width))ROM_PWMTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenConfigure                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Config))ROM_PWMTABLE[1])
X#define ROM_PWMGenConfigure                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Config))ROM_PWMTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenPeriodSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Period))ROM_PWMTABLE[2])
X#define ROM_PWMGenPeriodSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Period))ROM_PWMTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenPeriodGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen))ROM_PWMTABLE[3])
X#define ROM_PWMGenPeriodGet                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[4])
X#define ROM_PWMGenEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[5])
X#define ROM_PWMGenDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMPulseWidthGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32PWMOut))ROM_PWMTABLE[6])
X#define ROM_PWMPulseWidthGet                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOut))ROM_PWMTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMDeadBandEnable                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint16_t ui16Rise,                                         \
N                   uint16_t ui16Fall))ROM_PWMTABLE[7])
X#define ROM_PWMDeadBandEnable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint16_t ui16Rise,                                                            uint16_t ui16Fall))ROM_PWMTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMDeadBandDisable                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[8])
X#define ROM_PWMDeadBandDisable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMSyncUpdate                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenBits))ROM_PWMTABLE[9])
X#define ROM_PWMSyncUpdate                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenBits))ROM_PWMTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMSyncTimeBase                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenBits))ROM_PWMTABLE[10])
X#define ROM_PWMSyncTimeBase                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenBits))ROM_PWMTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputState                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bEnable))ROM_PWMTABLE[11])
X#define ROM_PWMOutputState                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bEnable))ROM_PWMTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputInvert                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bInvert))ROM_PWMTABLE[12])
X#define ROM_PWMOutputInvert                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bInvert))ROM_PWMTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputFault                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bFaultSuppress))ROM_PWMTABLE[13])
X#define ROM_PWMOutputFault                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bFaultSuppress))ROM_PWMTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntTrigEnable                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32IntTrig))ROM_PWMTABLE[14])
X#define ROM_PWMGenIntTrigEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32IntTrig))ROM_PWMTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntTrigDisable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32IntTrig))ROM_PWMTABLE[15])
X#define ROM_PWMGenIntTrigDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32IntTrig))ROM_PWMTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntStatus                                                   \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       bool bMasked))ROM_PWMTABLE[16])
X#define ROM_PWMGenIntStatus                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             bool bMasked))ROM_PWMTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntClear                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Ints))ROM_PWMTABLE[17])
X#define ROM_PWMGenIntClear                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Ints))ROM_PWMTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenFault))ROM_PWMTABLE[18])
X#define ROM_PWMIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenFault))ROM_PWMTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenFault))ROM_PWMTABLE[19])
X#define ROM_PWMIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenFault))ROM_PWMTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMFaultIntClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_PWMTABLE[20])
X#define ROM_PWMFaultIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_PWMTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_PWMTABLE[21])
X#define ROM_PWMIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_PWMTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputFaultLevel                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bDriveHigh))ROM_PWMTABLE[22])
X#define ROM_PWMOutputFaultLevel                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bDriveHigh))ROM_PWMTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMFaultIntClearExt                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32FaultInts))ROM_PWMTABLE[23])
X#define ROM_PWMFaultIntClearExt                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FaultInts))ROM_PWMTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultConfigure                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32MinFaultPeriod,                               \
N                   uint32_t ui32FaultSenses))ROM_PWMTABLE[24])
X#define ROM_PWMGenFaultConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32MinFaultPeriod,                                                  uint32_t ui32FaultSenses))ROM_PWMTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultTriggerSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Group,                                        \
N                   uint32_t ui32FaultTriggers))ROM_PWMTABLE[25])
X#define ROM_PWMGenFaultTriggerSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group,                                                           uint32_t ui32FaultTriggers))ROM_PWMTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultTriggerGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       uint32_t ui32Group))ROM_PWMTABLE[26])
X#define ROM_PWMGenFaultTriggerGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group))ROM_PWMTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       uint32_t ui32Group))ROM_PWMTABLE[27])
X#define ROM_PWMGenFaultStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group))ROM_PWMTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultClear                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Group,                                        \
N                   uint32_t ui32FaultTriggers))ROM_PWMTABLE[28])
X#define ROM_PWMGenFaultClear                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group,                                                           uint32_t ui32FaultTriggers))ROM_PWMTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_PWMClockSet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_PWMTABLE[29])
X#define ROM_PWMClockSet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_PWMTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_PWMClockGet                                                       \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_PWMTABLE[30])
X#define ROM_PWMClockGet                                                               ((uint32_t (*)(uint32_t ui32Base))ROM_PWMTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputUpdateMode                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   uint32_t ui32Mode))ROM_PWMTABLE[31])
X#define ROM_PWMOutputUpdateMode                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      uint32_t ui32Mode))ROM_PWMTABLE[31])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the QEI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIPositionGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[0])
X#define ROM_QEIPositionGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[1])
X#define ROM_QEIEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_QEITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[2])
X#define ROM_QEIDisable                                                                ((void (*)(uint32_t ui32Base))ROM_QEITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIConfigure                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Config,                                       \
N                   uint32_t ui32MaxPosition))ROM_QEITABLE[3])
X#define ROM_QEIConfigure                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxPosition))ROM_QEITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIPositionSet                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Position))ROM_QEITABLE[4])
X#define ROM_QEIPositionSet                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Position))ROM_QEITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIDirectionGet                                                   \
N        ((int32_t (*)(uint32_t ui32Base))ROM_QEITABLE[5])
X#define ROM_QEIDirectionGet                                                           ((int32_t (*)(uint32_t ui32Base))ROM_QEITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIErrorGet                                                       \
N        ((bool (*)(uint32_t ui32Base))ROM_QEITABLE[6])
X#define ROM_QEIErrorGet                                                               ((bool (*)(uint32_t ui32Base))ROM_QEITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityEnable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[7])
X#define ROM_QEIVelocityEnable                                                         ((void (*)(uint32_t ui32Base))ROM_QEITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityDisable                                                \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[8])
X#define ROM_QEIVelocityDisable                                                        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityConfigure                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PreDiv,                                       \
N                   uint32_t ui32Period))ROM_QEITABLE[9])
X#define ROM_QEIVelocityConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PreDiv,                                                          uint32_t ui32Period))ROM_QEITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[10])
X#define ROM_QEIVelocityGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[11])
X#define ROM_QEIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[12])
X#define ROM_QEIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_QEITABLE[13])
X#define ROM_QEIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_QEITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[14])
X#define ROM_QEIIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[14])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SHAMD5 API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5IntStatus                                                   \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_SHAMD5TABLE[0])
X#define ROM_SHAMD5IntStatus                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_SHAMD5TABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5ConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_SHAMD5TABLE[1])
X#define ROM_SHAMD5ConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_SHAMD5TABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5DataProcess                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32DataSrc,                                    \
S                   uint32_t ui32DataLength,                                   \
S                   uint32_t *pui32HashResult))ROM_SHAMD5TABLE[2])
X#define ROM_SHAMD5DataProcess                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataSrc,                                                       uint32_t ui32DataLength,                                                      uint32_t *pui32HashResult))ROM_SHAMD5TABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5DataWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[3])
X#define ROM_SHAMD5DataWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5DataWriteNonBlocking                                        \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[4])
X#define ROM_SHAMD5DataWriteNonBlocking                                                ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5DMADisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[5])
X#define ROM_SHAMD5DMADisable                                                          ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5DMAEnable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[6])
X#define ROM_SHAMD5DMAEnable                                                           ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5HashLengthSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_SHAMD5TABLE[7])
X#define ROM_SHAMD5HashLengthSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_SHAMD5TABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5HMACKeySet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[8])
X#define ROM_SHAMD5HMACKeySet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5HMACPPKeyGenerate                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t *pui32PPKey))ROM_SHAMD5TABLE[9])
X#define ROM_SHAMD5HMACPPKeyGenerate                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t *pui32PPKey))ROM_SHAMD5TABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5HMACPPKeySet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[10])
X#define ROM_SHAMD5HMACPPKeySet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5HMACProcess                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32DataSrc,                                    \
S                   uint32_t ui32DataLength,                                   \
S                   uint32_t *pui32HashResult))ROM_SHAMD5TABLE[11])
X#define ROM_SHAMD5HMACProcess                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataSrc,                                                       uint32_t ui32DataLength,                                                      uint32_t *pui32HashResult))ROM_SHAMD5TABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5IntClear                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[12])
X#define ROM_SHAMD5IntClear                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5IntDisable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[13])
X#define ROM_SHAMD5IntDisable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5IntEnable                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[14])
X#define ROM_SHAMD5IntEnable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5Reset                                                       \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[15])
X#define ROM_SHAMD5Reset                                                               ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SHAMD5ResultRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_SHAMD5TABLE[16])
X#define ROM_SHAMD5ResultRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_SHAMD5TABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SMBus API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterIntProcess                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[0])
X#define ROM_SMBusMasterIntProcess                                                     ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPDisable                                                   \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[1])
X#define ROM_SMBusARPDisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPEnable                                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[2])
X#define ROM_SMBusARPEnable                                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPUDIDPacketDecode                                          \
N        ((void (*)(tSMBusUDID *pUDID,                                         \
N                   uint8_t *pui8Address,                                      \
N                   uint8_t *pui8Data))ROM_SMBUSTABLE[3])
X#define ROM_SMBusARPUDIDPacketDecode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            uint8_t *pui8Address,                                                         uint8_t *pui8Data))ROM_SMBUSTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPUDIDPacketEncode                                          \
N        ((void (*)(tSMBusUDID *pUDID,                                         \
N                   uint8_t ui8Address,                                        \
N                   uint8_t *pui8Data))ROM_SMBUSTABLE[4])
X#define ROM_SMBusARPUDIDPacketEncode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            uint8_t ui8Address,                                                           uint8_t *pui8Data))ROM_SMBUSTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPAssignAddress                                       \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[5])
X#define ROM_SMBusMasterARPAssignAddress                                               ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPGetUDIDDir                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[6])
X#define ROM_SMBusMasterARPGetUDIDDir                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data))ROM_SMBUSTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPGetUDIDGen                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[7])
X#define ROM_SMBusMasterARPGetUDIDGen                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPNotifyMaster                                        \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[8])
X#define ROM_SMBusMasterARPNotifyMaster                                                ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPPrepareToARP                                        \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[9])
X#define ROM_SMBusMasterARPPrepareToARP                                                ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPResetDeviceDir                                      \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress))ROM_SMBUSTABLE[10])
X#define ROM_SMBusMasterARPResetDeviceDir                                              ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress))ROM_SMBUSTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPResetDeviceGen                                      \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[11])
X#define ROM_SMBusMasterARPResetDeviceGen                                              ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockProcessCall                                       \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t ui8TxSize,                                 \
N                           uint8_t *pui8RxData))ROM_SMBUSTABLE[12])
X#define ROM_SMBusMasterBlockProcessCall                                               ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8TxData,                                                          uint8_t ui8TxSize,                                                            uint8_t *pui8RxData))ROM_SMBUSTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockRead                                              \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[13])
X#define ROM_SMBusMasterBlockRead                                                      ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data))ROM_SMBUSTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockWrite                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[14])
X#define ROM_SMBusMasterBlockWrite                                                     ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteReceive                                            \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[15])
X#define ROM_SMBusMasterByteReceive                                                    ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data))ROM_SMBUSTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteSend                                               \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Data))ROM_SMBUSTABLE[16])
X#define ROM_SMBusMasterByteSend                                                       ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Data))ROM_SMBUSTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteWordRead                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[17])
X#define ROM_SMBusMasterByteWordRead                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteWordWrite                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[18])
X#define ROM_SMBusMasterByteWordWrite                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterHostNotify                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8OwnSlaveAddress,                        \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[19])
X#define ROM_SMBusMasterHostNotify                                                     ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8OwnSlaveAddress,                                                   uint8_t *pui8Data))ROM_SMBUSTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CRead                                                \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[20])
X#define ROM_SMBusMasterI2CRead                                                        ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CWrite                                               \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[21])
X#define ROM_SMBusMasterI2CWrite                                                       ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CWriteRead                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t ui8TxSize,                                 \
N                           uint8_t *pui8RxData,                               \
N                           uint8_t ui8RxSize))ROM_SMBUSTABLE[22])
X#define ROM_SMBusMasterI2CWriteRead                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8TxData,                                                          uint8_t ui8TxSize,                                                            uint8_t *pui8RxData,                                                          uint8_t ui8RxSize))ROM_SMBUSTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterInit                                                   \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint32_t ui32I2CBase,                                      \
N                   uint32_t ui32SMBusClock))ROM_SMBUSTABLE[23])
X#define ROM_SMBusMasterInit                                                           ((void (*)(tSMBus *psSMBus,                                                              uint32_t ui32I2CBase,                                                         uint32_t ui32SMBusClock))ROM_SMBUSTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterIntEnable                                              \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[24])
X#define ROM_SMBusMasterIntEnable                                                      ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterProcessCall                                            \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t *pui8RxData))ROM_SMBUSTABLE[25])
X#define ROM_SMBusMasterProcessCall                                                    ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8TxData,                                                          uint8_t *pui8RxData))ROM_SMBUSTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterQuickCommand                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           bool bData))ROM_SMBUSTABLE[26])
X#define ROM_SMBusMasterQuickCommand                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     bool bData))ROM_SMBUSTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusPECDisable                                                   \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[27])
X#define ROM_SMBusPECDisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusPECEnable                                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[28])
X#define ROM_SMBusPECEnable                                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusRxPacketSizeGet                                              \
N        ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[29])
X#define ROM_SMBusRxPacketSizeGet                                                      ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveACKSend                                                 \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bACK))ROM_SMBUSTABLE[30])
X#define ROM_SMBusSlaveACKSend                                                         ((void (*)(tSMBus *psSMBus,                                                              bool bACK))ROM_SMBUSTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveAddressSet                                              \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t ui8AddressNum,                                     \
N                   uint8_t ui8SlaveAddress))ROM_SMBUSTABLE[31])
X#define ROM_SMBusSlaveAddressSet                                                      ((void (*)(tSMBus *psSMBus,                                                              uint8_t ui8AddressNum,                                                        uint8_t ui8SlaveAddress))ROM_SMBUSTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagARGet                                            \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[32])
X#define ROM_SMBusSlaveARPFlagARGet                                                    ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagARSet                                            \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bValue))ROM_SMBUSTABLE[33])
X#define ROM_SMBusSlaveARPFlagARSet                                                    ((void (*)(tSMBus *psSMBus,                                                              bool bValue))ROM_SMBUSTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagAVGet                                            \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[34])
X#define ROM_SMBusSlaveARPFlagAVGet                                                    ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagAVSet                                            \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bValue))ROM_SMBUSTABLE[35])
X#define ROM_SMBusSlaveARPFlagAVSet                                                    ((void (*)(tSMBus *psSMBus,                                                              bool bValue))ROM_SMBUSTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveBlockTransferDisable                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[36])
X#define ROM_SMBusSlaveBlockTransferDisable                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveBlockTransferEnable                                     \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[37])
X#define ROM_SMBusSlaveBlockTransferEnable                                             ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveCommandGet                                              \
N        ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[38])
X#define ROM_SMBusSlaveCommandGet                                                      ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveI2CDisable                                              \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[39])
X#define ROM_SMBusSlaveI2CDisable                                                      ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveI2CEnable                                               \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[40])
X#define ROM_SMBusSlaveI2CEnable                                                       ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveInit                                                    \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint32_t ui32I2CBase))ROM_SMBUSTABLE[41])
X#define ROM_SMBusSlaveInit                                                            ((void (*)(tSMBus *psSMBus,                                                              uint32_t ui32I2CBase))ROM_SMBUSTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntAddressGet                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[42])
X#define ROM_SMBusSlaveIntAddressGet                                                   ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntEnable                                               \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[43])
X#define ROM_SMBusSlaveIntEnable                                                       ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntProcess                                              \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[44])
X#define ROM_SMBusSlaveIntProcess                                                      ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKDisable                                        \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[45])
X#define ROM_SMBusSlaveManualACKDisable                                                ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKEnable                                         \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[46])
X#define ROM_SMBusSlaveManualACKEnable                                                 ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKStatusGet                                      \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[47])
X#define ROM_SMBusSlaveManualACKStatusGet                                              ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveProcessCallDisable                                      \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[48])
X#define ROM_SMBusSlaveProcessCallDisable                                              ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveProcessCallEnable                                       \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[49])
X#define ROM_SMBusSlaveProcessCallEnable                                               ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveRxBufferSet                                             \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t *pui8Data,                                         \
N                   uint8_t ui8Size))ROM_SMBUSTABLE[50])
X#define ROM_SMBusSlaveRxBufferSet                                                     ((void (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveTransferInit                                            \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[51])
X#define ROM_SMBusSlaveTransferInit                                                    ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveTxBufferSet                                             \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t *pui8Data,                                         \
N                   uint8_t ui8Size))ROM_SMBUSTABLE[52])
X#define ROM_SMBusSlaveTxBufferSet                                                     ((void (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveUDIDSet                                                 \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
X#define ROM_SMBusSlaveUDIDSet                                                         ((void (*)(tSMBus *psSMBus,                                                              tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusStatusGet                                                    \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[54])
X#define ROM_SMBusStatusGet                                                            ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveDataSend                                                \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[55])
X#define ROM_SMBusSlaveDataSend                                                        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SMBusFIFOEnable                                                   \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[56])
X#define ROM_SMBusFIFOEnable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SMBusFIFODisable                                                  \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[57])
X#define ROM_SMBusFIFODisable                                                          ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SMBusDMAEnable                                                    \
S        ((void (*)(tSMBus *psSMBus,                                           \
S                   uint8_t ui8TxChannel,                                      \
S                   uint8_t ui8RxChannel))ROM_SMBUSTABLE[58])
X#define ROM_SMBusDMAEnable                                                            ((void (*)(tSMBus *psSMBus,                                                              uint8_t ui8TxChannel,                                                         uint8_t ui8RxChannel))ROM_SMBUSTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SMBusDMADisable                                                   \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[59])
X#define ROM_SMBusDMADisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[59])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SPIFlash API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashIntHandler                                                \
S        ((uint32_t (*)(tSPIFlashState *pState))ROM_SPIFLASHTABLE[0])
X#define ROM_SPIFlashIntHandler                                                        ((uint32_t (*)(tSPIFlashState *pState))ROM_SPIFLASHTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashInit                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Clock,                                        \
S                   uint32_t ui32BitRate))ROM_SPIFLASHTABLE[1])
X#define ROM_SPIFlashInit                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Clock,                                                           uint32_t ui32BitRate))ROM_SPIFLASHTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashWriteStatus                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Status))ROM_SPIFLASHTABLE[2])
X#define ROM_SPIFlashWriteStatus                                                       ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Status))ROM_SPIFLASHTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashPageProgram                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   const uint8_t *pui8Data,                                   \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[3])
X#define ROM_SPIFlashPageProgram                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SPIFLASHTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashPageProgramNonBlocking                                    \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   const uint8_t *pui8Data,                                   \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel))ROM_SPIFLASHTABLE[4])
X#define ROM_SPIFlashPageProgramNonBlocking                                            ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            const uint8_t *pui8Data,                                                      uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel))ROM_SPIFLASHTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashRead                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[5])
X#define ROM_SPIFlashRead                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashReadNonBlocking                                           \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[6])
X#define ROM_SPIFlashReadNonBlocking                                                   ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashWriteDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[7])
X#define ROM_SPIFlashWriteDisable                                                      ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashReadStatus                                                \
S        ((uint8_t (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[8])
X#define ROM_SPIFlashReadStatus                                                        ((uint8_t (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashWriteEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[9])
X#define ROM_SPIFlashWriteEnable                                                       ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashFastRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[10])
X#define ROM_SPIFlashFastRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashFastReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[11])
X#define ROM_SPIFlashFastReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashSectorErase                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[12])
X#define ROM_SPIFlashSectorErase                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashDualRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[13])
X#define ROM_SPIFlashDualRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashDualReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[14])
X#define ROM_SPIFlashDualReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashBlockErase32                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[15])
X#define ROM_SPIFlashBlockErase32                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashQuadRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[16])
X#define ROM_SPIFlashQuadRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashQuadReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[17])
X#define ROM_SPIFlashQuadReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashReadID                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t *pui8ManufacturerID,                               \
S                   uint16_t *pui16DeviceID))ROM_SPIFLASHTABLE[18])
X#define ROM_SPIFlashReadID                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t *pui8ManufacturerID,                                                  uint16_t *pui16DeviceID))ROM_SPIFLASHTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashChipErase                                                 \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[19])
X#define ROM_SPIFlashChipErase                                                         ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SPIFlashBlockErase64                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[20])
X#define ROM_SPIFlashBlockErase64                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[20])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SSI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataPut                                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Data))ROM_SSITABLE[0])
X#define ROM_SSIDataPut                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIConfigSetExpClk                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SSIClk,                                       \
N                   uint32_t ui32Protocol,                                     \
N                   uint32_t ui32Mode,                                         \
N                   uint32_t ui32BitRate,                                      \
N                   uint32_t ui32DataWidth))ROM_SSITABLE[1])
X#define ROM_SSIConfigSetExpClk                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SSIClk,                                                          uint32_t ui32Protocol,                                                        uint32_t ui32Mode,                                                            uint32_t ui32BitRate,                                                         uint32_t ui32DataWidth))ROM_SSITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[2])
X#define ROM_SSIEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_SSITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[3])
X#define ROM_SSIDisable                                                                ((void (*)(uint32_t ui32Base))ROM_SSITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[4])
X#define ROM_SSIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[5])
X#define ROM_SSIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_SSITABLE[6])
X#define ROM_SSIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_SSITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[7])
X#define ROM_SSIIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataPutNonBlocking                                             \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Data))ROM_SSITABLE[8])
X#define ROM_SSIDataPutNonBlocking                                                     ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataGet                                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32Data))ROM_SSITABLE[9])
X#define ROM_SSIDataGet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_SSITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataGetNonBlocking                                             \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t *pui32Data))ROM_SSITABLE[10])
X#define ROM_SSIDataGetNonBlocking                                                     ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_SSITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateSSI                                                         \
N        ((void (*)(void))ROM_SSITABLE[11])
X#define ROM_UpdateSSI                                                                 ((void (*)(void))ROM_SSITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDMAEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_SSITABLE[12])
X#define ROM_SSIDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_SSITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDMADisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_SSITABLE[13])
X#define ROM_SSIDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_SSITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIBusy                                                           \
N        ((bool (*)(uint32_t ui32Base))ROM_SSITABLE[14])
X#define ROM_SSIBusy                                                                   ((bool (*)(uint32_t ui32Base))ROM_SSITABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIClockSourceGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_SSITABLE[15])
X#define ROM_SSIClockSourceGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_SSITABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIClockSourceSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Source))ROM_SSITABLE[16])
X#define ROM_SSIClockSourceSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_SSITABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SSIAdvModeSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_SSITABLE[17])
X#define ROM_SSIAdvModeSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_SSITABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SSIAdvDataPutFrameEnd                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Data))ROM_SSITABLE[18])
X#define ROM_SSIAdvDataPutFrameEnd                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SSIAdvDataPutFrameEndNonBlocking                                  \
S        ((int32_t (*)(uint32_t ui32Base,                                      \
S                      uint32_t ui32Data))ROM_SSITABLE[19])
X#define ROM_SSIAdvDataPutFrameEndNonBlocking                                          ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SSIAdvFrameHoldEnable                                             \
S        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[20])
X#define ROM_SSIAdvFrameHoldEnable                                                     ((void (*)(uint32_t ui32Base))ROM_SSITABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SSIAdvFrameHoldDisable                                            \
S        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[21])
X#define ROM_SSIAdvFrameHoldDisable                                                    ((void (*)(uint32_t ui32Base))ROM_SSITABLE[21])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysCtl API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlSleep                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[0])
X#define ROM_SysCtlSleep                                                               ((void (*)(void))ROM_SYSCTLTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlSRAMSizeGet                                                 \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[1])
X#define ROM_SysCtlSRAMSizeGet                                                         ((uint32_t (*)(void))ROM_SYSCTLTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlFlashSizeGet                                                \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[2])
X#define ROM_SysCtlFlashSizeGet                                                        ((uint32_t (*)(void))ROM_SYSCTLTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPresent                                           \
N        ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[4])
X#define ROM_SysCtlPeripheralPresent                                                   ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralReset                                             \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[5])
X#define ROM_SysCtlPeripheralReset                                                     ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralEnable                                            \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[6])
X#define ROM_SysCtlPeripheralEnable                                                    ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDisable                                           \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[7])
X#define ROM_SysCtlPeripheralDisable                                                   ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralSleepEnable                                       \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[8])
X#define ROM_SysCtlPeripheralSleepEnable                                               ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralSleepDisable                                      \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[9])
X#define ROM_SysCtlPeripheralSleepDisable                                              ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDeepSleepEnable                                   \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[10])
X#define ROM_SysCtlPeripheralDeepSleepEnable                                           ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDeepSleepDisable                                  \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[11])
X#define ROM_SysCtlPeripheralDeepSleepDisable                                          ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralClockGating                                       \
N        ((void (*)(bool bEnable))ROM_SYSCTLTABLE[12])
X#define ROM_SysCtlPeripheralClockGating                                               ((void (*)(bool bEnable))ROM_SYSCTLTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntEnable                                                   \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[13])
X#define ROM_SysCtlIntEnable                                                           ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntDisable                                                  \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[14])
X#define ROM_SysCtlIntDisable                                                          ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntClear                                                    \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[15])
X#define ROM_SysCtlIntClear                                                            ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_SYSCTLTABLE[16])
X#define ROM_SysCtlIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_SYSCTLTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlReset                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[19])
X#define ROM_SysCtlReset                                                               ((void (*)(void))ROM_SYSCTLTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlDeepSleep                                                   \
N        ((void (*)(void))ROM_SYSCTLTABLE[20])
X#define ROM_SysCtlDeepSleep                                                           ((void (*)(void))ROM_SYSCTLTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlResetCauseGet                                               \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[21])
X#define ROM_SysCtlResetCauseGet                                                       ((uint32_t (*)(void))ROM_SYSCTLTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlResetCauseClear                                             \
N        ((void (*)(uint32_t ui32Causes))ROM_SYSCTLTABLE[22])
X#define ROM_SysCtlResetCauseClear                                                     ((void (*)(uint32_t ui32Causes))ROM_SYSCTLTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlClockSet                                                    \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[23])
X#define ROM_SysCtlClockSet                                                            ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlClockGet                                                    \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[24])
X#define ROM_SysCtlClockGet                                                            ((uint32_t (*)(void))ROM_SYSCTLTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlPWMClockSet                                                 \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[25])
X#define ROM_SysCtlPWMClockSet                                                         ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlPWMClockGet                                                 \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[26])
X#define ROM_SysCtlPWMClockGet                                                         ((uint32_t (*)(void))ROM_SYSCTLTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlUSBPLLEnable                                                \
N        ((void (*)(void))ROM_SYSCTLTABLE[31])
X#define ROM_SysCtlUSBPLLEnable                                                        ((void (*)(void))ROM_SYSCTLTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlUSBPLLDisable                                               \
N        ((void (*)(void))ROM_SYSCTLTABLE[32])
X#define ROM_SysCtlUSBPLLDisable                                                       ((void (*)(void))ROM_SYSCTLTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlDelay                                                       \
N        ((void (*)(uint32_t ui32Count))ROM_SYSCTLTABLE[34])
X#define ROM_SysCtlDelay                                                               ((void (*)(uint32_t ui32Count))ROM_SYSCTLTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralReady                                             \
N        ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[35])
X#define ROM_SysCtlPeripheralReady                                                     ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPowerOn                                           \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[36])
X#define ROM_SysCtlPeripheralPowerOn                                                   ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPowerOff                                          \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[37])
X#define ROM_SysCtlPeripheralPowerOff                                                  ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlMOSCConfigSet                                               \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[44])
X#define ROM_SysCtlMOSCConfigSet                                                       ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPIOSCCalibrate                                              \
N        ((uint32_t (*)(uint32_t ui32Type))ROM_SYSCTLTABLE[45])
X#define ROM_SysCtlPIOSCCalibrate                                                      ((uint32_t (*)(uint32_t ui32Type))ROM_SYSCTLTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_SysCtlDeepSleepClockSet                                           \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[46])
X#define ROM_SysCtlDeepSleepClockSet                                                   ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlDeepSleepClockConfigSet                                     \
S        ((void (*)(uint32_t ui32Div,                                          \
S                   uint32_t ui32Config))ROM_SYSCTLTABLE[47])
X#define ROM_SysCtlDeepSleepClockConfigSet                                             ((void (*)(uint32_t ui32Div,                                                             uint32_t ui32Config))ROM_SYSCTLTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlResetBehaviorSet                                            \
S        ((void (*)(uint32_t ui32Behavior))ROM_SYSCTLTABLE[51])
X#define ROM_SysCtlResetBehaviorSet                                                    ((void (*)(uint32_t ui32Behavior))ROM_SYSCTLTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlResetBehaviorGet                                            \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[52])
X#define ROM_SysCtlResetBehaviorGet                                                    ((uint32_t (*)(void))ROM_SYSCTLTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlFlashSectorSizeGet                                          \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[54])
X#define ROM_SysCtlFlashSectorSizeGet                                                  ((uint32_t (*)(void))ROM_SYSCTLTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlVoltageEventConfig                                          \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[55])
X#define ROM_SysCtlVoltageEventConfig                                                  ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlVoltageEventStatus                                          \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[56])
X#define ROM_SysCtlVoltageEventStatus                                                  ((uint32_t (*)(void))ROM_SYSCTLTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlVoltageEventClear                                           \
S        ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[57])
X#define ROM_SysCtlVoltageEventClear                                                   ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlNMIStatus                                                   \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[58])
X#define ROM_SysCtlNMIStatus                                                           ((uint32_t (*)(void))ROM_SYSCTLTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlNMIClear                                                    \
S        ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[59])
X#define ROM_SysCtlNMIClear                                                            ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlClockOutConfig                                              \
S        ((void (*)(uint32_t ui32Config,                                       \
S                   uint32_t ui32Div))ROM_SYSCTLTABLE[60])
X#define ROM_SysCtlClockOutConfig                                                      ((void (*)(uint32_t ui32Config,                                                          uint32_t ui32Div))ROM_SYSCTLTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlAltClkConfig                                                \
S        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[61])
X#define ROM_SysCtlAltClkConfig                                                        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[61])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysExc API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_SYSEXCTABLE[0])
X#define ROM_SysExcIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_SYSEXCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntClear                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[1])
X#define ROM_SysExcIntClear                                                            ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntDisable                                                  \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[2])
X#define ROM_SysExcIntDisable                                                          ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntEnable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[3])
X#define ROM_SysExcIntEnable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[3])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysTick API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickValueGet                                                   \
N        ((uint32_t (*)(void))ROM_SYSTICKTABLE[0])
X#define ROM_SysTickValueGet                                                           ((uint32_t (*)(void))ROM_SYSTICKTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickEnable                                                     \
N        ((void (*)(void))ROM_SYSTICKTABLE[1])
X#define ROM_SysTickEnable                                                             ((void (*)(void))ROM_SYSTICKTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickDisable                                                    \
N        ((void (*)(void))ROM_SYSTICKTABLE[2])
X#define ROM_SysTickDisable                                                            ((void (*)(void))ROM_SYSTICKTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickIntEnable                                                  \
N        ((void (*)(void))ROM_SYSTICKTABLE[3])
X#define ROM_SysTickIntEnable                                                          ((void (*)(void))ROM_SYSTICKTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickIntDisable                                                 \
N        ((void (*)(void))ROM_SYSTICKTABLE[4])
X#define ROM_SysTickIntDisable                                                         ((void (*)(void))ROM_SYSTICKTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickPeriodSet                                                  \
N        ((void (*)(uint32_t ui32Period))ROM_SYSTICKTABLE[5])
X#define ROM_SysTickPeriodSet                                                          ((void (*)(uint32_t ui32Period))ROM_SYSTICKTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickPeriodGet                                                  \
N        ((uint32_t (*)(void))ROM_SYSTICKTABLE[6])
X#define ROM_SysTickPeriodGet                                                          ((uint32_t (*)(void))ROM_SYSTICKTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Timer API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntClear                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[0])
X#define ROM_TimerIntClear                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerEnable                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer))ROM_TIMERTABLE[1])
X#define ROM_TimerEnable                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerDisable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer))ROM_TIMERTABLE[2])
X#define ROM_TimerDisable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerConfigure                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Config))ROM_TIMERTABLE[3])
X#define ROM_TimerConfigure                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_TIMERTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlLevel                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bInvert))ROM_TIMERTABLE[4])
X#define ROM_TimerControlLevel                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bInvert))ROM_TIMERTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L
N#define ROM_TimerControlTrigger                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bEnable))ROM_TIMERTABLE[5])
X#define ROM_TimerControlTrigger                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bEnable))ROM_TIMERTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlEvent                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Event))ROM_TIMERTABLE[6])
X#define ROM_TimerControlEvent                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Event))ROM_TIMERTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlStall                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bStall))ROM_TIMERTABLE[7])
X#define ROM_TimerControlStall                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bStall))ROM_TIMERTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerRTCEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[8])
X#define ROM_TimerRTCEnable                                                            ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerRTCDisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[9])
X#define ROM_TimerRTCDisable                                                           ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[10])
X#define ROM_TimerPrescaleSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[11])
X#define ROM_TimerPrescaleGet                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleMatchSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[12])
X#define ROM_TimerPrescaleMatchSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleMatchGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[13])
X#define ROM_TimerPrescaleMatchGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerLoadSet                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[14])
X#define ROM_TimerLoadSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerLoadGet                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[15])
X#define ROM_TimerLoadGet                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerValueGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[16])
X#define ROM_TimerValueGet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerMatchSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[17])
X#define ROM_TimerMatchSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerMatchGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[18])
X#define ROM_TimerMatchGet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntEnable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[19])
X#define ROM_TimerIntEnable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntDisable                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[20])
X#define ROM_TimerIntDisable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntStatus                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_TIMERTABLE[21])
X#define ROM_TimerIntStatus                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_TIMERTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlWaitOnTrigger                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bWait))ROM_TIMERTABLE[22])
X#define ROM_TimerControlWaitOnTrigger                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bWait))ROM_TIMERTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_TimerLoadSet64                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint64_t ui64Value))ROM_TIMERTABLE[23])
X#define ROM_TimerLoadSet64                                                            ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Value))ROM_TIMERTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_TimerLoadGet64                                                    \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[24])
X#define ROM_TimerLoadGet64                                                            ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_TimerValueGet64                                                   \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[25])
X#define ROM_TimerValueGet64                                                           ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_TimerMatchSet64                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint64_t ui64Value))ROM_TIMERTABLE[26])
X#define ROM_TimerMatchSet64                                                           ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Value))ROM_TIMERTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L
N#define ROM_TimerMatchGet64                                                   \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[27])
X#define ROM_TimerMatchGet64                                                           ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerClockSourceGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[28])
X#define ROM_TimerClockSourceGet                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerClockSourceSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Source))ROM_TIMERTABLE[29])
X#define ROM_TimerClockSourceSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_TIMERTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerADCEventGet                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[30])
X#define ROM_TimerADCEventGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerADCEventSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ADCEvent))ROM_TIMERTABLE[31])
X#define ROM_TimerADCEventSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ADCEvent))ROM_TIMERTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerDMAEventGet                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[32])
X#define ROM_TimerDMAEventGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerDMAEventSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAEvent))ROM_TIMERTABLE[33])
X#define ROM_TimerDMAEventSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAEvent))ROM_TIMERTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_TimerSynchronize                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Timers))ROM_TIMERTABLE[34])
X#define ROM_TimerSynchronize                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timers))ROM_TIMERTABLE[34])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the UART API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharPut                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   unsigned char ucData))ROM_UARTTABLE[0])
X#define ROM_UARTCharPut                                                               ((void (*)(uint32_t ui32Base,                                                            unsigned char ucData))ROM_UARTTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTParityModeSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Parity))ROM_UARTTABLE[1])
X#define ROM_UARTParityModeSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Parity))ROM_UARTTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTParityModeGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[2])
X#define ROM_UARTParityModeGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOLevelSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32TxLevel,                                      \
N                   uint32_t ui32RxLevel))ROM_UARTTABLE[3])
X#define ROM_UARTFIFOLevelSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32TxLevel,                                                         uint32_t ui32RxLevel))ROM_UARTTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOLevelGet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32TxLevel,                                    \
N                   uint32_t *pui32RxLevel))ROM_UARTTABLE[4])
X#define ROM_UARTFIFOLevelGet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32TxLevel,                                                       uint32_t *pui32RxLevel))ROM_UARTTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTConfigSetExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32UARTClk,                                      \
N                   uint32_t ui32Baud,                                         \
N                   uint32_t ui32Config))ROM_UARTTABLE[5])
X#define ROM_UARTConfigSetExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32UARTClk,                                                         uint32_t ui32Baud,                                                            uint32_t ui32Config))ROM_UARTTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTConfigGetExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32UARTClk,                                      \
N                   uint32_t *pui32Baud,                                       \
N                   uint32_t *pui32Config))ROM_UARTTABLE[6])
X#define ROM_UARTConfigGetExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32UARTClk,                                                         uint32_t *pui32Baud,                                                          uint32_t *pui32Config))ROM_UARTTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTEnable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[7])
X#define ROM_UARTEnable                                                                ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDisable                                                       \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[8])
X#define ROM_UARTDisable                                                               ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTEnableSIR                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bLowPower))ROM_UARTTABLE[9])
X#define ROM_UARTEnableSIR                                                             ((void (*)(uint32_t ui32Base,                                                            bool bLowPower))ROM_UARTTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDisableSIR                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[10])
X#define ROM_UARTDisableSIR                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharsAvail                                                    \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[11])
X#define ROM_UARTCharsAvail                                                            ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTSpaceAvail                                                    \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[12])
X#define ROM_UARTSpaceAvail                                                            ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharGetNonBlocking                                            \
N        ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[13])
X#define ROM_UARTCharGetNonBlocking                                                    ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharGet                                                       \
N        ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[14])
X#define ROM_UARTCharGet                                                               ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharPutNonBlocking                                            \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   unsigned char ucData))ROM_UARTTABLE[15])
X#define ROM_UARTCharPutNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            unsigned char ucData))ROM_UARTTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTBreakCtl                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bBreakState))ROM_UARTTABLE[16])
X#define ROM_UARTBreakCtl                                                              ((void (*)(uint32_t ui32Base,                                                            bool bBreakState))ROM_UARTTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntEnable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[17])
X#define ROM_UARTIntEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntDisable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[18])
X#define ROM_UARTIntDisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntStatus                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_UARTTABLE[19])
X#define ROM_UARTIntStatus                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_UARTTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntClear                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[20])
X#define ROM_UARTIntClear                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateUART                                                        \
N        ((void (*)(void))ROM_UARTTABLE[21])
X#define ROM_UpdateUART                                                                ((void (*)(void))ROM_UARTTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDMAEnable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_UARTTABLE[22])
X#define ROM_UARTDMAEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_UARTTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDMADisable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_UARTTABLE[23])
X#define ROM_UARTDMADisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_UARTTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[24])
X#define ROM_UARTFIFOEnable                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFODisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[25])
X#define ROM_UARTFIFODisable                                                           ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTBusy                                                          \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[26])
X#define ROM_UARTBusy                                                                  ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTTxIntModeSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Mode))ROM_UARTTABLE[27])
X#define ROM_UARTTxIntModeSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_UARTTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTTxIntModeGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[28])
X#define ROM_UARTTxIntModeGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTRxErrorGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[29])
X#define ROM_UARTRxErrorGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTRxErrorClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[30])
X#define ROM_UARTRxErrorClear                                                          ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTClockSourceSet                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Source))ROM_UARTTABLE[31])
X#define ROM_UARTClockSourceSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_UARTTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTClockSourceGet                                                \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[32])
X#define ROM_UARTClockSourceGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[33])
X#define ROM_UART9BitEnable                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitDisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[34])
X#define ROM_UART9BitDisable                                                           ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitAddrSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Addr,                                           \
N                   uint8_t ui8Mask))ROM_UARTTABLE[35])
X#define ROM_UART9BitAddrSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Addr,                                                              uint8_t ui8Mask))ROM_UARTTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitAddrSend                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Addr))ROM_UARTTABLE[36])
X#define ROM_UART9BitAddrSend                                                          ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Addr))ROM_UARTTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTSmartCardDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[37])
X#define ROM_UARTSmartCardDisable                                                      ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTSmartCardEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[38])
X#define ROM_UARTSmartCardEnable                                                       ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTModemControlClear                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Control))ROM_UARTTABLE[39])
X#define ROM_UARTModemControlClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Control))ROM_UARTTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTModemControlGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[40])
X#define ROM_UARTModemControlGet                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTModemControlSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Control))ROM_UARTTABLE[41])
X#define ROM_UARTModemControlSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Control))ROM_UARTTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTModemStatusGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[42])
X#define ROM_UARTModemStatusGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTFlowControlGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[43])
X#define ROM_UARTFlowControlGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTFlowControlSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_UARTTABLE[44])
X#define ROM_UARTFlowControlSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_UARTTABLE[44])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the uDMA API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelTransferSet                                            \
N        ((void (*)(uint32_t ui32ChannelStructIndex,                           \
N                   uint32_t ui32Mode,                                         \
N                   void *pvSrcAddr,                                           \
N                   void *pvDstAddr,                                           \
N                   uint32_t ui32TransferSize))ROM_UDMATABLE[0])
X#define ROM_uDMAChannelTransferSet                                                    ((void (*)(uint32_t ui32ChannelStructIndex,                                              uint32_t ui32Mode,                                                            void *pvSrcAddr,                                                              void *pvDstAddr,                                                              uint32_t ui32TransferSize))ROM_UDMATABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAEnable                                                        \
N        ((void (*)(void))ROM_UDMATABLE[1])
X#define ROM_uDMAEnable                                                                ((void (*)(void))ROM_UDMATABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMADisable                                                       \
N        ((void (*)(void))ROM_UDMATABLE[2])
X#define ROM_uDMADisable                                                               ((void (*)(void))ROM_UDMATABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAErrorStatusGet                                                \
N        ((uint32_t (*)(void))ROM_UDMATABLE[3])
X#define ROM_uDMAErrorStatusGet                                                        ((uint32_t (*)(void))ROM_UDMATABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAErrorStatusClear                                              \
N        ((void (*)(void))ROM_UDMATABLE[4])
X#define ROM_uDMAErrorStatusClear                                                      ((void (*)(void))ROM_UDMATABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelEnable                                                 \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[5])
X#define ROM_uDMAChannelEnable                                                         ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelDisable                                                \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[6])
X#define ROM_uDMAChannelDisable                                                        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelIsEnabled                                              \
N        ((bool (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[7])
X#define ROM_uDMAChannelIsEnabled                                                      ((bool (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlBaseSet                                                \
N        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
X#define ROM_uDMAControlBaseSet                                                        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlBaseGet                                                \
N        ((void * (*)(void))ROM_UDMATABLE[9])
X#define ROM_uDMAControlBaseGet                                                        ((void * (*)(void))ROM_UDMATABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelRequest                                                \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[10])
X#define ROM_uDMAChannelRequest                                                        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeEnable                                        \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32Attr))ROM_UDMATABLE[11])
X#define ROM_uDMAChannelAttributeEnable                                                ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32Attr))ROM_UDMATABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeDisable                                       \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32Attr))ROM_UDMATABLE[12])
X#define ROM_uDMAChannelAttributeDisable                                               ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32Attr))ROM_UDMATABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeGet                                           \
N        ((uint32_t (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[13])
X#define ROM_uDMAChannelAttributeGet                                                   ((uint32_t (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelControlSet                                             \
N        ((void (*)(uint32_t ui32ChannelStructIndex,                           \
N                   uint32_t ui32Control))ROM_UDMATABLE[14])
X#define ROM_uDMAChannelControlSet                                                     ((void (*)(uint32_t ui32ChannelStructIndex,                                              uint32_t ui32Control))ROM_UDMATABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSizeGet                                                \
N        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[15])
X#define ROM_uDMAChannelSizeGet                                                        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelModeGet                                                \
N        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[16])
X#define ROM_uDMAChannelModeGet                                                        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSelectSecondary                                        \
N        ((void (*)(uint32_t ui32SecPeriphs))ROM_UDMATABLE[17])
X#define ROM_uDMAChannelSelectSecondary                                                ((void (*)(uint32_t ui32SecPeriphs))ROM_UDMATABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSelectDefault                                          \
N        ((void (*)(uint32_t ui32DefPeriphs))ROM_UDMATABLE[18])
X#define ROM_uDMAChannelSelectDefault                                                  ((void (*)(uint32_t ui32DefPeriphs))ROM_UDMATABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAIntStatus                                                     \
N        ((uint32_t (*)(void))ROM_UDMATABLE[19])
X#define ROM_uDMAIntStatus                                                             ((uint32_t (*)(void))ROM_UDMATABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAIntClear                                                      \
N        ((void (*)(uint32_t ui32ChanMask))ROM_UDMATABLE[20])
X#define ROM_uDMAIntClear                                                              ((void (*)(uint32_t ui32ChanMask))ROM_UDMATABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlAlternateBaseGet                                       \
N        ((void * (*)(void))ROM_UDMATABLE[21])
X#define ROM_uDMAControlAlternateBaseGet                                               ((void * (*)(void))ROM_UDMATABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelScatterGatherSet                                       \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32TaskCount,                                    \
N                   void *pvTaskList,                                          \
N                   uint32_t ui32IsPeriphSG))ROM_UDMATABLE[22])
X#define ROM_uDMAChannelScatterGatherSet                                               ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32TaskCount,                                                       void *pvTaskList,                                                             uint32_t ui32IsPeriphSG))ROM_UDMATABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAssign                                                 \
N        ((void (*)(uint32_t ui32Mapping))ROM_UDMATABLE[23])
X#define ROM_uDMAChannelAssign                                                         ((void (*)(uint32_t ui32Mapping))ROM_UDMATABLE[23])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the USB API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevAddrGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[1])
X#define ROM_USBDevAddrGet                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevAddrSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Address))ROM_USBTABLE[2])
X#define ROM_USBDevAddrSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Address))ROM_USBTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevConnect                                                     \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[3])
X#define ROM_USBDevConnect                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevDisconnect                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[4])
X#define ROM_USBDevDisconnect                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointConfigSet                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32MaxPacketSize,                                \
N                   uint32_t ui32Flags))ROM_USBTABLE[5])
X#define ROM_USBDevEndpointConfigSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32MaxPacketSize,                                                   uint32_t ui32Flags))ROM_USBTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointDataAck                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   bool bIsLastPacket))ROM_USBTABLE[6])
X#define ROM_USBDevEndpointDataAck                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bIsLastPacket))ROM_USBTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStall                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[7])
X#define ROM_USBDevEndpointStall                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStallClear                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[8])
X#define ROM_USBDevEndpointStallClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStatusClear                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[9])
X#define ROM_USBDevEndpointStatusClear                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataGet                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint8_t *pui8Data,                                      \
N                      uint32_t *pui32Size))ROM_USBTABLE[10])
X#define ROM_USBEndpointDataGet                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint8_t *pui8Data,                                                            uint32_t *pui32Size))ROM_USBTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataPut                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint8_t *pui8Data,                                      \
N                      uint32_t ui32Size))ROM_USBTABLE[11])
X#define ROM_USBEndpointDataPut                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint8_t *pui8Data,                                                            uint32_t ui32Size))ROM_USBTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataSend                                               \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint32_t ui32TransType))ROM_USBTABLE[12])
X#define ROM_USBEndpointDataSend                                                       ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32TransType))ROM_USBTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataToggleClear                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[13])
X#define ROM_USBEndpointDataToggleClear                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[14])
X#define ROM_USBEndpointStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOAddrGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[15])
X#define ROM_USBFIFOAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOConfigGet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t *pui32FIFOAddress,                                \
N                   uint32_t *pui32FIFOSize,                                   \
N                   uint32_t ui32Flags))ROM_USBTABLE[16])
X#define ROM_USBFIFOConfigGet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t *pui32FIFOAddress,                                                   uint32_t *pui32FIFOSize,                                                      uint32_t ui32Flags))ROM_USBTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOConfigSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32FIFOAddress,                                  \
N                   uint32_t ui32FIFOSize,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[17])
X#define ROM_USBFIFOConfigSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32FIFOAddress,                                                     uint32_t ui32FIFOSize,                                                        uint32_t ui32Flags))ROM_USBTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOFlush                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[18])
X#define ROM_USBFIFOFlush                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFrameNumberGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[19])
X#define ROM_USBFrameNumberGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostAddrGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint,                                 \
N                       uint32_t ui32Flags))ROM_USBTABLE[20])
X#define ROM_USBHostAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostAddrSet                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[21])
X#define ROM_USBHostAddrSet                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_USBTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointConfig                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32MaxPacketSize,                                \
N                   uint32_t ui32NAKPollInterval,                              \
N                   uint32_t ui32TargetEndpoint,                               \
N                   uint32_t ui32Flags))ROM_USBTABLE[22])
X#define ROM_USBHostEndpointConfig                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32MaxPacketSize,                                                   uint32_t ui32NAKPollInterval,                                                 uint32_t ui32TargetEndpoint,                                                  uint32_t ui32Flags))ROM_USBTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointDataAck                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint))ROM_USBTABLE[23])
X#define ROM_USBHostEndpointDataAck                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointDataToggle                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   bool bDataToggle,                                          \
N                   uint32_t ui32Flags))ROM_USBTABLE[24])
X#define ROM_USBHostEndpointDataToggle                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bDataToggle,                                                             uint32_t ui32Flags))ROM_USBTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointStatusClear                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[25])
X#define ROM_USBHostEndpointStatusClear                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostHubAddrGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint,                                 \
N                       uint32_t ui32Flags))ROM_USBTABLE[26])
X#define ROM_USBHostHubAddrGet                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostHubAddrSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[27])
X#define ROM_USBHostHubAddrSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_USBTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrDisable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[28])
X#define ROM_USBHostPwrDisable                                                         ((void (*)(uint32_t ui32Base))ROM_USBTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrEnable                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[29])
X#define ROM_USBHostPwrEnable                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrConfig                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[30])
X#define ROM_USBHostPwrConfig                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_USBTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrFaultDisable                                            \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[31])
X#define ROM_USBHostPwrFaultDisable                                                    ((void (*)(uint32_t ui32Base))ROM_USBTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrFaultEnable                                             \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[32])
X#define ROM_USBHostPwrFaultEnable                                                     ((void (*)(uint32_t ui32Base))ROM_USBTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostRequestIN                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint))ROM_USBTABLE[33])
X#define ROM_USBHostRequestIN                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostRequestStatus                                              \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[34])
X#define ROM_USBHostRequestStatus                                                      ((void (*)(uint32_t ui32Base))ROM_USBTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostReset                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bStart))ROM_USBTABLE[35])
X#define ROM_USBHostReset                                                              ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostResume                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bStart))ROM_USBTABLE[36])
X#define ROM_USBHostResume                                                             ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostSpeedGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[37])
X#define ROM_USBHostSpeedGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostSuspend                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[38])
X#define ROM_USBHostSuspend                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointConfigGet                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t *pui32MaxPacketSize,                              \
N                   uint32_t *pui32Flags))ROM_USBTABLE[41])
X#define ROM_USBDevEndpointConfigGet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t *pui32MaxPacketSize,                                                 uint32_t *pui32Flags))ROM_USBTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMAEnable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[42])
X#define ROM_USBEndpointDMAEnable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMADisable                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[43])
X#define ROM_USBEndpointDMADisable                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataAvail                                              \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[44])
X#define ROM_USBEndpointDataAvail                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBModeGet                                                        \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[46])
X#define ROM_USBModeGet                                                                ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMAChannel                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Channel))ROM_USBTABLE[47])
X#define ROM_USBEndpointDMAChannel                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Channel))ROM_USBTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntDisableControl                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[48])
X#define ROM_USBIntDisableControl                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntEnableControl                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[49])
X#define ROM_USBIntEnableControl                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntStatusControl                                               \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[50])
X#define ROM_USBIntStatusControl                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntDisableEndpoint                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[51])
X#define ROM_USBIntDisableEndpoint                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntEnableEndpoint                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[52])
X#define ROM_USBIntEnableEndpoint                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntStatusEndpoint                                              \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[53])
X#define ROM_USBIntStatusEndpoint                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostMode                                                       \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[54])
X#define ROM_USBHostMode                                                               ((void (*)(uint32_t ui32Base))ROM_USBTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevMode                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[55])
X#define ROM_USBDevMode                                                                ((void (*)(uint32_t ui32Base))ROM_USBTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBPHYPowerOff                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[56])
X#define ROM_USBPHYPowerOff                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBPHYPowerOn                                                     \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[57])
X#define ROM_USBPHYPowerOn                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateUSB                                                         \
N        ((void (*)(uint8_t *pui8DescriptorInfo))ROM_USBTABLE[58])
X#define ROM_UpdateUSB                                                                 ((void (*)(uint8_t *pui8DescriptorInfo))ROM_USBTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBOTGMode                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[59])
X#define ROM_USBOTGMode                                                                ((void (*)(uint32_t ui32Base))ROM_USBTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostRequestINClear                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint))ROM_USBTABLE[60])
X#define ROM_USBHostRequestINClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBNumEndpointsGet                                                \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[61])
X#define ROM_USBNumEndpointsGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[61])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBClockDisable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[62])
X#define ROM_USBClockDisable                                                           ((void (*)(uint32_t ui32Base))ROM_USBTABLE[62])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBClockEnable                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Div,                                          \
S                   uint32_t ui32Flags))ROM_USBTABLE[63])
X#define ROM_USBClockEnable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Div,                                                             uint32_t ui32Flags))ROM_USBTABLE[63])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBControllerVersion                                              \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[64])
X#define ROM_USBControllerVersion                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[64])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDevLPMConfig                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_USBTABLE[65])
X#define ROM_USBDevLPMConfig                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_USBTABLE[65])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDevLPMDisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[66])
X#define ROM_USBDevLPMDisable                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[66])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevLPMEnable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[67])
X#define ROM_USBDevLPMEnable                                                           ((void (*)(uint32_t ui32Base))ROM_USBTABLE[67])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDevLPMRemoteWake                                               \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[68])
X#define ROM_USBDevLPMRemoteWake                                                       ((void (*)(uint32_t ui32Base))ROM_USBTABLE[68])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDevSpeedGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[69])
X#define ROM_USBDevSpeedGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[69])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelAddressGet                                           \
S        ((void * (*)(uint32_t ui32Base,                                       \
S                     uint32_t ui32Channel))ROM_USBTABLE[70])
X#define ROM_USBDMAChannelAddressGet                                                   ((void * (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[70])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelAddressSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   void *pvAddress))ROM_USBTABLE[71])
X#define ROM_USBDMAChannelAddressSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         void *pvAddress))ROM_USBTABLE[71])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelConfigSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Config))ROM_USBTABLE[72])
X#define ROM_USBDMAChannelConfigSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Endpoint,                                                        uint32_t ui32Config))ROM_USBTABLE[72])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelDisable                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[73])
X#define ROM_USBDMAChannelDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[73])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelEnable                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[74])
X#define ROM_USBDMAChannelEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[74])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelIntDisable                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[75])
X#define ROM_USBDMAChannelIntDisable                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[75])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelIntEnable                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[76])
X#define ROM_USBDMAChannelIntEnable                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[76])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelCountGet                                             \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_USBTABLE[77])
X#define ROM_USBDMAChannelCountGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[77])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelCountSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Count,                                        \
S                   uint32_t ui32Channel))ROM_USBTABLE[78])
X#define ROM_USBDMAChannelCountSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint32_t ui32Channel))ROM_USBTABLE[78])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelIntStatus                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[79])
X#define ROM_USBDMAChannelIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[79])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelStatus                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_USBTABLE[80])
X#define ROM_USBDMAChannelStatus                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[80])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDMAChannelStatusClear                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Status))ROM_USBTABLE[81])
X#define ROM_USBDMAChannelStatusClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Status))ROM_USBTABLE[81])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHighSpeed                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bEnable))ROM_USBTABLE[82])
X#define ROM_USBHighSpeed                                                              ((void (*)(uint32_t ui32Base,                                                            bool bEnable))ROM_USBTABLE[82])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostEndpointPing                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   bool bEnable))ROM_USBTABLE[83])
X#define ROM_USBHostEndpointPing                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bEnable))ROM_USBTABLE[83])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostEndpointSpeed                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Flags))ROM_USBTABLE[84])
X#define ROM_USBHostEndpointSpeed                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[84])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostLPMConfig                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ResumeTime,                                   \
S                   uint32_t ui32Config))ROM_USBTABLE[85])
X#define ROM_USBHostLPMConfig                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ResumeTime,                                                      uint32_t ui32Config))ROM_USBTABLE[85])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostLPMResume                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[86])
X#define ROM_USBHostLPMResume                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[86])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostLPMSend                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Address,                                      \
S                   uint32_t uiEndpoint))ROM_USBTABLE[87])
X#define ROM_USBHostLPMSend                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Address,                                                         uint32_t uiEndpoint))ROM_USBTABLE[87])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBLPMIntDisable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Ints))ROM_USBTABLE[88])
X#define ROM_USBLPMIntDisable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ints))ROM_USBTABLE[88])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBLPMIntEnable                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Ints))ROM_USBTABLE[89])
X#define ROM_USBLPMIntEnable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ints))ROM_USBTABLE[89])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBLPMIntStatus                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[90])
X#define ROM_USBLPMIntStatus                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[90])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBLPMLinkStateGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[91])
X#define ROM_USBLPMLinkStateGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[91])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBEndpointPacketCountSet                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Count))ROM_USBTABLE[92])
X#define ROM_USBEndpointPacketCountSet                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Count))ROM_USBTABLE[92])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBULPIConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_USBTABLE[93])
X#define ROM_USBULPIConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_USBTABLE[93])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBULPIDisable                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[94])
X#define ROM_USBULPIDisable                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[94])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBULPIEnable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[95])
X#define ROM_USBULPIEnable                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[95])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBULPIRegRead                                                    \
S        ((uint8_t (*)(uint32_t ui32Base,                                      \
S                      uint8_t ui8Reg))ROM_USBTABLE[96])
X#define ROM_USBULPIRegRead                                                            ((uint8_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Reg))ROM_USBTABLE[96])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBULPIRegWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Reg,                                            \
S                   uint8_t ui8Data))ROM_USBTABLE[97])
X#define ROM_USBULPIRegWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Reg,                                                               uint8_t ui8Data))ROM_USBTABLE[97])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBOTGSessionRequest                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bStart))ROM_USBTABLE[98])
X#define ROM_USBOTGSessionRequest                                                      ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[98])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_USBDMANumChannels                                                 \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[99])
X#define ROM_USBDMANumChannels                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[99])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_USBEndpointDMAConfigSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Config))ROM_USBTABLE[100])
X#define ROM_USBEndpointDMAConfigSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Config))ROM_USBTABLE[100])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L
S#define ROM_USBLPMRemoteWakeEnabled                                           \
S        ((bool (*)(uint32_t ui32Base))ROM_USBTABLE[102])
X#define ROM_USBLPMRemoteWakeEnabled                                                   ((bool (*)(uint32_t ui32Base))ROM_USBTABLE[102])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBModeConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_USBTABLE[103])
X#define ROM_USBModeConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_USBTABLE[103])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Watchdog API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[0])
X#define ROM_WatchdogIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogRunning                                                   \
N        ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[1])
X#define ROM_WatchdogRunning                                                           ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[2])
X#define ROM_WatchdogEnable                                                            ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogResetEnable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[3])
X#define ROM_WatchdogResetEnable                                                       ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogResetDisable                                              \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[4])
X#define ROM_WatchdogResetDisable                                                      ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogLock                                                      \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[5])
X#define ROM_WatchdogLock                                                              ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogUnlock                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[6])
X#define ROM_WatchdogUnlock                                                            ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogLockState                                                 \
N        ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[7])
X#define ROM_WatchdogLockState                                                         ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogReloadSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32LoadVal))ROM_WATCHDOGTABLE[8])
X#define ROM_WatchdogReloadSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32LoadVal))ROM_WATCHDOGTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogReloadGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[9])
X#define ROM_WatchdogReloadGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogValueGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[10])
X#define ROM_WatchdogValueGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntEnable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[11])
X#define ROM_WatchdogIntEnable                                                         ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_WATCHDOGTABLE[12])
X#define ROM_WatchdogIntStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_WATCHDOGTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogStallEnable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[13])
X#define ROM_WatchdogStallEnable                                                       ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogStallDisable                                              \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[14])
X#define ROM_WatchdogStallDisable                                                      ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntTypeSet                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Type))ROM_WATCHDOGTABLE[15])
X#define ROM_WatchdogIntTypeSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Type))ROM_WATCHDOGTABLE[15])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Software API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16Array                                                        \
N        ((uint16_t (*)(uint32_t ui32WordLen,                                  \
N                       const uint32_t *pui32Data))ROM_SOFTWARETABLE[1])
X#define ROM_Crc16Array                                                                ((uint16_t (*)(uint32_t ui32WordLen,                                                         const uint32_t *pui32Data))ROM_SOFTWARETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16Array3                                                       \
N        ((void (*)(uint32_t ui32WordLen,                                      \
N                   const uint32_t *pui32Data,                                 \
N                   uint16_t *pui16Crc3))ROM_SOFTWARETABLE[2])
X#define ROM_Crc16Array3                                                               ((void (*)(uint32_t ui32WordLen,                                                         const uint32_t *pui32Data,                                                    uint16_t *pui16Crc3))ROM_SOFTWARETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16                                                             \
N        ((uint16_t (*)(uint16_t ui16Crc,                                      \
N                       const uint8_t *pui8Data,                               \
N                       uint32_t ui32Count))ROM_SOFTWARETABLE[3])
X#define ROM_Crc16                                                                     ((uint16_t (*)(uint16_t ui16Crc,                                                             const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc8CCITT                                                         \
N        ((uint8_t (*)(uint8_t ui8Crc,                                         \
N                      const uint8_t *pui8Data,                                \
N                      uint32_t ui32Count))ROM_SOFTWARETABLE[4])
X#define ROM_Crc8CCITT                                                                 ((uint8_t (*)(uint8_t ui8Crc,                                                               const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_Crc32                                                             \
S        ((uint32_t (*)(uint32_t ui32Crc,                                      \
S                       const uint8_t *pui8Data,                               \
S                       uint32_t ui32Count))ROM_SOFTWARETABLE[5])
X#define ROM_Crc32                                                                     ((uint32_t (*)(uint32_t ui32Crc,                                                             const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C123_RB2) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA2)
X#if 0L ||                                             0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_pvAESTable                                                        \
N        ((void *)&(ROM_SOFTWARETABLE[7]))
X#define ROM_pvAESTable                                                                ((void *)&(ROM_SOFTWARETABLE[7]))
N#endif
N
N#endif // __DRIVERLIB_ROM_H__
L 33 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/rom_map.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/rom_map.h" 1
N//*****************************************************************************
N//
N// rom_map.h - Macros to facilitate calling functions in the ROM when they are
N//             available and in flash otherwise.
N//
N// Copyright (c) 2008-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_ROM_MAP_H__
N#define __DRIVERLIB_ROM_MAP_H__
N
N//*****************************************************************************
N//
N// Macros for the ADC API.
N//
N//*****************************************************************************
N#ifdef ROM_ADCSequenceDataGet
N#define MAP_ADCSequenceDataGet                                                \
N        ROM_ADCSequenceDataGet
X#define MAP_ADCSequenceDataGet                                                        ROM_ADCSequenceDataGet
N#else
S#define MAP_ADCSequenceDataGet                                                \
S        ADCSequenceDataGet
X#define MAP_ADCSequenceDataGet                                                        ADCSequenceDataGet
N#endif
N#ifdef ROM_ADCIntDisable
N#define MAP_ADCIntDisable                                                     \
N        ROM_ADCIntDisable
X#define MAP_ADCIntDisable                                                             ROM_ADCIntDisable
N#else
S#define MAP_ADCIntDisable                                                     \
S        ADCIntDisable
X#define MAP_ADCIntDisable                                                             ADCIntDisable
N#endif
N#ifdef ROM_ADCIntEnable
N#define MAP_ADCIntEnable                                                      \
N        ROM_ADCIntEnable
X#define MAP_ADCIntEnable                                                              ROM_ADCIntEnable
N#else
S#define MAP_ADCIntEnable                                                      \
S        ADCIntEnable
X#define MAP_ADCIntEnable                                                              ADCIntEnable
N#endif
N#ifdef ROM_ADCIntStatus
N#define MAP_ADCIntStatus                                                      \
N        ROM_ADCIntStatus
X#define MAP_ADCIntStatus                                                              ROM_ADCIntStatus
N#else
S#define MAP_ADCIntStatus                                                      \
S        ADCIntStatus
X#define MAP_ADCIntStatus                                                              ADCIntStatus
N#endif
N#ifdef ROM_ADCIntClear
N#define MAP_ADCIntClear                                                       \
N        ROM_ADCIntClear
X#define MAP_ADCIntClear                                                               ROM_ADCIntClear
N#else
S#define MAP_ADCIntClear                                                       \
S        ADCIntClear
X#define MAP_ADCIntClear                                                               ADCIntClear
N#endif
N#ifdef ROM_ADCSequenceEnable
N#define MAP_ADCSequenceEnable                                                 \
N        ROM_ADCSequenceEnable
X#define MAP_ADCSequenceEnable                                                         ROM_ADCSequenceEnable
N#else
S#define MAP_ADCSequenceEnable                                                 \
S        ADCSequenceEnable
X#define MAP_ADCSequenceEnable                                                         ADCSequenceEnable
N#endif
N#ifdef ROM_ADCSequenceDisable
N#define MAP_ADCSequenceDisable                                                \
N        ROM_ADCSequenceDisable
X#define MAP_ADCSequenceDisable                                                        ROM_ADCSequenceDisable
N#else
S#define MAP_ADCSequenceDisable                                                \
S        ADCSequenceDisable
X#define MAP_ADCSequenceDisable                                                        ADCSequenceDisable
N#endif
N#ifdef ROM_ADCSequenceConfigure
S#define MAP_ADCSequenceConfigure                                              \
S        ROM_ADCSequenceConfigure
X#define MAP_ADCSequenceConfigure                                                      ROM_ADCSequenceConfigure
N#else
N#define MAP_ADCSequenceConfigure                                              \
N        ADCSequenceConfigure
X#define MAP_ADCSequenceConfigure                                                      ADCSequenceConfigure
N#endif
N#ifdef ROM_ADCSequenceStepConfigure
N#define MAP_ADCSequenceStepConfigure                                          \
N        ROM_ADCSequenceStepConfigure
X#define MAP_ADCSequenceStepConfigure                                                  ROM_ADCSequenceStepConfigure
N#else
S#define MAP_ADCSequenceStepConfigure                                          \
S        ADCSequenceStepConfigure
X#define MAP_ADCSequenceStepConfigure                                                  ADCSequenceStepConfigure
N#endif
N#ifdef ROM_ADCSequenceOverflow
N#define MAP_ADCSequenceOverflow                                               \
N        ROM_ADCSequenceOverflow
X#define MAP_ADCSequenceOverflow                                                       ROM_ADCSequenceOverflow
N#else
S#define MAP_ADCSequenceOverflow                                               \
S        ADCSequenceOverflow
X#define MAP_ADCSequenceOverflow                                                       ADCSequenceOverflow
N#endif
N#ifdef ROM_ADCSequenceOverflowClear
N#define MAP_ADCSequenceOverflowClear                                          \
N        ROM_ADCSequenceOverflowClear
X#define MAP_ADCSequenceOverflowClear                                                  ROM_ADCSequenceOverflowClear
N#else
S#define MAP_ADCSequenceOverflowClear                                          \
S        ADCSequenceOverflowClear
X#define MAP_ADCSequenceOverflowClear                                                  ADCSequenceOverflowClear
N#endif
N#ifdef ROM_ADCSequenceUnderflow
N#define MAP_ADCSequenceUnderflow                                              \
N        ROM_ADCSequenceUnderflow
X#define MAP_ADCSequenceUnderflow                                                      ROM_ADCSequenceUnderflow
N#else
S#define MAP_ADCSequenceUnderflow                                              \
S        ADCSequenceUnderflow
X#define MAP_ADCSequenceUnderflow                                                      ADCSequenceUnderflow
N#endif
N#ifdef ROM_ADCSequenceUnderflowClear
N#define MAP_ADCSequenceUnderflowClear                                         \
N        ROM_ADCSequenceUnderflowClear
X#define MAP_ADCSequenceUnderflowClear                                                 ROM_ADCSequenceUnderflowClear
N#else
S#define MAP_ADCSequenceUnderflowClear                                         \
S        ADCSequenceUnderflowClear
X#define MAP_ADCSequenceUnderflowClear                                                 ADCSequenceUnderflowClear
N#endif
N#ifdef ROM_ADCProcessorTrigger
N#define MAP_ADCProcessorTrigger                                               \
N        ROM_ADCProcessorTrigger
X#define MAP_ADCProcessorTrigger                                                       ROM_ADCProcessorTrigger
N#else
S#define MAP_ADCProcessorTrigger                                               \
S        ADCProcessorTrigger
X#define MAP_ADCProcessorTrigger                                                       ADCProcessorTrigger
N#endif
N#ifdef ROM_ADCHardwareOversampleConfigure
N#define MAP_ADCHardwareOversampleConfigure                                    \
N        ROM_ADCHardwareOversampleConfigure
X#define MAP_ADCHardwareOversampleConfigure                                            ROM_ADCHardwareOversampleConfigure
N#else
S#define MAP_ADCHardwareOversampleConfigure                                    \
S        ADCHardwareOversampleConfigure
X#define MAP_ADCHardwareOversampleConfigure                                            ADCHardwareOversampleConfigure
N#endif
N#ifdef ROM_ADCComparatorConfigure
N#define MAP_ADCComparatorConfigure                                            \
N        ROM_ADCComparatorConfigure
X#define MAP_ADCComparatorConfigure                                                    ROM_ADCComparatorConfigure
N#else
S#define MAP_ADCComparatorConfigure                                            \
S        ADCComparatorConfigure
X#define MAP_ADCComparatorConfigure                                                    ADCComparatorConfigure
N#endif
N#ifdef ROM_ADCComparatorRegionSet
N#define MAP_ADCComparatorRegionSet                                            \
N        ROM_ADCComparatorRegionSet
X#define MAP_ADCComparatorRegionSet                                                    ROM_ADCComparatorRegionSet
N#else
S#define MAP_ADCComparatorRegionSet                                            \
S        ADCComparatorRegionSet
X#define MAP_ADCComparatorRegionSet                                                    ADCComparatorRegionSet
N#endif
N#ifdef ROM_ADCComparatorReset
N#define MAP_ADCComparatorReset                                                \
N        ROM_ADCComparatorReset
X#define MAP_ADCComparatorReset                                                        ROM_ADCComparatorReset
N#else
S#define MAP_ADCComparatorReset                                                \
S        ADCComparatorReset
X#define MAP_ADCComparatorReset                                                        ADCComparatorReset
N#endif
N#ifdef ROM_ADCComparatorIntDisable
N#define MAP_ADCComparatorIntDisable                                           \
N        ROM_ADCComparatorIntDisable
X#define MAP_ADCComparatorIntDisable                                                   ROM_ADCComparatorIntDisable
N#else
S#define MAP_ADCComparatorIntDisable                                           \
S        ADCComparatorIntDisable
X#define MAP_ADCComparatorIntDisable                                                   ADCComparatorIntDisable
N#endif
N#ifdef ROM_ADCComparatorIntEnable
N#define MAP_ADCComparatorIntEnable                                            \
N        ROM_ADCComparatorIntEnable
X#define MAP_ADCComparatorIntEnable                                                    ROM_ADCComparatorIntEnable
N#else
S#define MAP_ADCComparatorIntEnable                                            \
S        ADCComparatorIntEnable
X#define MAP_ADCComparatorIntEnable                                                    ADCComparatorIntEnable
N#endif
N#ifdef ROM_ADCComparatorIntStatus
N#define MAP_ADCComparatorIntStatus                                            \
N        ROM_ADCComparatorIntStatus
X#define MAP_ADCComparatorIntStatus                                                    ROM_ADCComparatorIntStatus
N#else
S#define MAP_ADCComparatorIntStatus                                            \
S        ADCComparatorIntStatus
X#define MAP_ADCComparatorIntStatus                                                    ADCComparatorIntStatus
N#endif
N#ifdef ROM_ADCComparatorIntClear
N#define MAP_ADCComparatorIntClear                                             \
N        ROM_ADCComparatorIntClear
X#define MAP_ADCComparatorIntClear                                                     ROM_ADCComparatorIntClear
N#else
S#define MAP_ADCComparatorIntClear                                             \
S        ADCComparatorIntClear
X#define MAP_ADCComparatorIntClear                                                     ADCComparatorIntClear
N#endif
N#ifdef ROM_ADCReferenceSet
N#define MAP_ADCReferenceSet                                                   \
N        ROM_ADCReferenceSet
X#define MAP_ADCReferenceSet                                                           ROM_ADCReferenceSet
N#else
S#define MAP_ADCReferenceSet                                                   \
S        ADCReferenceSet
X#define MAP_ADCReferenceSet                                                           ADCReferenceSet
N#endif
N#ifdef ROM_ADCReferenceGet
N#define MAP_ADCReferenceGet                                                   \
N        ROM_ADCReferenceGet
X#define MAP_ADCReferenceGet                                                           ROM_ADCReferenceGet
N#else
S#define MAP_ADCReferenceGet                                                   \
S        ADCReferenceGet
X#define MAP_ADCReferenceGet                                                           ADCReferenceGet
N#endif
N#ifdef ROM_ADCPhaseDelaySet
N#define MAP_ADCPhaseDelaySet                                                  \
N        ROM_ADCPhaseDelaySet
X#define MAP_ADCPhaseDelaySet                                                          ROM_ADCPhaseDelaySet
N#else
S#define MAP_ADCPhaseDelaySet                                                  \
S        ADCPhaseDelaySet
X#define MAP_ADCPhaseDelaySet                                                          ADCPhaseDelaySet
N#endif
N#ifdef ROM_ADCPhaseDelayGet
N#define MAP_ADCPhaseDelayGet                                                  \
N        ROM_ADCPhaseDelayGet
X#define MAP_ADCPhaseDelayGet                                                          ROM_ADCPhaseDelayGet
N#else
S#define MAP_ADCPhaseDelayGet                                                  \
S        ADCPhaseDelayGet
X#define MAP_ADCPhaseDelayGet                                                          ADCPhaseDelayGet
N#endif
N#ifdef ROM_ADCIntClearEx
S#define MAP_ADCIntClearEx                                                     \
S        ROM_ADCIntClearEx
X#define MAP_ADCIntClearEx                                                             ROM_ADCIntClearEx
N#else
N#define MAP_ADCIntClearEx                                                     \
N        ADCIntClearEx
X#define MAP_ADCIntClearEx                                                             ADCIntClearEx
N#endif
N#ifdef ROM_ADCIntDisableEx
S#define MAP_ADCIntDisableEx                                                   \
S        ROM_ADCIntDisableEx
X#define MAP_ADCIntDisableEx                                                           ROM_ADCIntDisableEx
N#else
N#define MAP_ADCIntDisableEx                                                   \
N        ADCIntDisableEx
X#define MAP_ADCIntDisableEx                                                           ADCIntDisableEx
N#endif
N#ifdef ROM_ADCIntEnableEx
S#define MAP_ADCIntEnableEx                                                    \
S        ROM_ADCIntEnableEx
X#define MAP_ADCIntEnableEx                                                            ROM_ADCIntEnableEx
N#else
N#define MAP_ADCIntEnableEx                                                    \
N        ADCIntEnableEx
X#define MAP_ADCIntEnableEx                                                            ADCIntEnableEx
N#endif
N#ifdef ROM_ADCIntStatusEx
S#define MAP_ADCIntStatusEx                                                    \
S        ROM_ADCIntStatusEx
X#define MAP_ADCIntStatusEx                                                            ROM_ADCIntStatusEx
N#else
N#define MAP_ADCIntStatusEx                                                    \
N        ADCIntStatusEx
X#define MAP_ADCIntStatusEx                                                            ADCIntStatusEx
N#endif
N#ifdef ROM_ADCSequenceDMAEnable
S#define MAP_ADCSequenceDMAEnable                                              \
S        ROM_ADCSequenceDMAEnable
X#define MAP_ADCSequenceDMAEnable                                                      ROM_ADCSequenceDMAEnable
N#else
N#define MAP_ADCSequenceDMAEnable                                              \
N        ADCSequenceDMAEnable
X#define MAP_ADCSequenceDMAEnable                                                      ADCSequenceDMAEnable
N#endif
N#ifdef ROM_ADCSequenceDMADisable
S#define MAP_ADCSequenceDMADisable                                             \
S        ROM_ADCSequenceDMADisable
X#define MAP_ADCSequenceDMADisable                                                     ROM_ADCSequenceDMADisable
N#else
N#define MAP_ADCSequenceDMADisable                                             \
N        ADCSequenceDMADisable
X#define MAP_ADCSequenceDMADisable                                                     ADCSequenceDMADisable
N#endif
N#ifdef ROM_ADCBusy
S#define MAP_ADCBusy                                                           \
S        ROM_ADCBusy
X#define MAP_ADCBusy                                                                   ROM_ADCBusy
N#else
N#define MAP_ADCBusy                                                           \
N        ADCBusy
X#define MAP_ADCBusy                                                                   ADCBusy
N#endif
N
N//*****************************************************************************
N//
N// Macros for the AES API.
N//
N//*****************************************************************************
N#ifdef ROM_AESIntStatus
S#define MAP_AESIntStatus                                                      \
S        ROM_AESIntStatus
X#define MAP_AESIntStatus                                                              ROM_AESIntStatus
N#else
N#define MAP_AESIntStatus                                                      \
N        AESIntStatus
X#define MAP_AESIntStatus                                                              AESIntStatus
N#endif
N#ifdef ROM_AESAuthLengthSet
S#define MAP_AESAuthLengthSet                                                  \
S        ROM_AESAuthLengthSet
X#define MAP_AESAuthLengthSet                                                          ROM_AESAuthLengthSet
N#else
N#define MAP_AESAuthLengthSet                                                  \
N        AESAuthLengthSet
X#define MAP_AESAuthLengthSet                                                          AESAuthLengthSet
N#endif
N#ifdef ROM_AESConfigSet
S#define MAP_AESConfigSet                                                      \
S        ROM_AESConfigSet
X#define MAP_AESConfigSet                                                              ROM_AESConfigSet
N#else
N#define MAP_AESConfigSet                                                      \
N        AESConfigSet
X#define MAP_AESConfigSet                                                              AESConfigSet
N#endif
N#ifdef ROM_AESDataAuth
S#define MAP_AESDataAuth                                                       \
S        ROM_AESDataAuth
X#define MAP_AESDataAuth                                                               ROM_AESDataAuth
N#else
N#define MAP_AESDataAuth                                                       \
N        AESDataAuth
X#define MAP_AESDataAuth                                                               AESDataAuth
N#endif
N#ifdef ROM_AESDataProcess
S#define MAP_AESDataProcess                                                    \
S        ROM_AESDataProcess
X#define MAP_AESDataProcess                                                            ROM_AESDataProcess
N#else
N#define MAP_AESDataProcess                                                    \
N        AESDataProcess
X#define MAP_AESDataProcess                                                            AESDataProcess
N#endif
N#ifdef ROM_AESDataProcessAuth
S#define MAP_AESDataProcessAuth                                                \
S        ROM_AESDataProcessAuth
X#define MAP_AESDataProcessAuth                                                        ROM_AESDataProcessAuth
N#else
N#define MAP_AESDataProcessAuth                                                \
N        AESDataProcessAuth
X#define MAP_AESDataProcessAuth                                                        AESDataProcessAuth
N#endif
N#ifdef ROM_AESDataRead
S#define MAP_AESDataRead                                                       \
S        ROM_AESDataRead
X#define MAP_AESDataRead                                                               ROM_AESDataRead
N#else
N#define MAP_AESDataRead                                                       \
N        AESDataRead
X#define MAP_AESDataRead                                                               AESDataRead
N#endif
N#ifdef ROM_AESDataReadNonBlocking
S#define MAP_AESDataReadNonBlocking                                            \
S        ROM_AESDataReadNonBlocking
X#define MAP_AESDataReadNonBlocking                                                    ROM_AESDataReadNonBlocking
N#else
N#define MAP_AESDataReadNonBlocking                                            \
N        AESDataReadNonBlocking
X#define MAP_AESDataReadNonBlocking                                                    AESDataReadNonBlocking
N#endif
N#ifdef ROM_AESDataWrite
S#define MAP_AESDataWrite                                                      \
S        ROM_AESDataWrite
X#define MAP_AESDataWrite                                                              ROM_AESDataWrite
N#else
N#define MAP_AESDataWrite                                                      \
N        AESDataWrite
X#define MAP_AESDataWrite                                                              AESDataWrite
N#endif
N#ifdef ROM_AESDataWriteNonBlocking
S#define MAP_AESDataWriteNonBlocking                                           \
S        ROM_AESDataWriteNonBlocking
X#define MAP_AESDataWriteNonBlocking                                                   ROM_AESDataWriteNonBlocking
N#else
N#define MAP_AESDataWriteNonBlocking                                           \
N        AESDataWriteNonBlocking
X#define MAP_AESDataWriteNonBlocking                                                   AESDataWriteNonBlocking
N#endif
N#ifdef ROM_AESDMADisable
S#define MAP_AESDMADisable                                                     \
S        ROM_AESDMADisable
X#define MAP_AESDMADisable                                                             ROM_AESDMADisable
N#else
N#define MAP_AESDMADisable                                                     \
N        AESDMADisable
X#define MAP_AESDMADisable                                                             AESDMADisable
N#endif
N#ifdef ROM_AESDMAEnable
S#define MAP_AESDMAEnable                                                      \
S        ROM_AESDMAEnable
X#define MAP_AESDMAEnable                                                              ROM_AESDMAEnable
N#else
N#define MAP_AESDMAEnable                                                      \
N        AESDMAEnable
X#define MAP_AESDMAEnable                                                              AESDMAEnable
N#endif
N#ifdef ROM_AESIntClear
S#define MAP_AESIntClear                                                       \
S        ROM_AESIntClear
X#define MAP_AESIntClear                                                               ROM_AESIntClear
N#else
N#define MAP_AESIntClear                                                       \
N        AESIntClear
X#define MAP_AESIntClear                                                               AESIntClear
N#endif
N#ifdef ROM_AESIntDisable
S#define MAP_AESIntDisable                                                     \
S        ROM_AESIntDisable
X#define MAP_AESIntDisable                                                             ROM_AESIntDisable
N#else
N#define MAP_AESIntDisable                                                     \
N        AESIntDisable
X#define MAP_AESIntDisable                                                             AESIntDisable
N#endif
N#ifdef ROM_AESIntEnable
S#define MAP_AESIntEnable                                                      \
S        ROM_AESIntEnable
X#define MAP_AESIntEnable                                                              ROM_AESIntEnable
N#else
N#define MAP_AESIntEnable                                                      \
N        AESIntEnable
X#define MAP_AESIntEnable                                                              AESIntEnable
N#endif
N#ifdef ROM_AESIVSet
S#define MAP_AESIVSet                                                          \
S        ROM_AESIVSet
X#define MAP_AESIVSet                                                                  ROM_AESIVSet
N#else
N#define MAP_AESIVSet                                                          \
N        AESIVSet
X#define MAP_AESIVSet                                                                  AESIVSet
N#endif
N#ifdef ROM_AESKey1Set
S#define MAP_AESKey1Set                                                        \
S        ROM_AESKey1Set
X#define MAP_AESKey1Set                                                                ROM_AESKey1Set
N#else
N#define MAP_AESKey1Set                                                        \
N        AESKey1Set
X#define MAP_AESKey1Set                                                                AESKey1Set
N#endif
N#ifdef ROM_AESKey2Set
S#define MAP_AESKey2Set                                                        \
S        ROM_AESKey2Set
X#define MAP_AESKey2Set                                                                ROM_AESKey2Set
N#else
N#define MAP_AESKey2Set                                                        \
N        AESKey2Set
X#define MAP_AESKey2Set                                                                AESKey2Set
N#endif
N#ifdef ROM_AESKey3Set
S#define MAP_AESKey3Set                                                        \
S        ROM_AESKey3Set
X#define MAP_AESKey3Set                                                                ROM_AESKey3Set
N#else
N#define MAP_AESKey3Set                                                        \
N        AESKey3Set
X#define MAP_AESKey3Set                                                                AESKey3Set
N#endif
N#ifdef ROM_AESLengthSet
S#define MAP_AESLengthSet                                                      \
S        ROM_AESLengthSet
X#define MAP_AESLengthSet                                                              ROM_AESLengthSet
N#else
N#define MAP_AESLengthSet                                                      \
N        AESLengthSet
X#define MAP_AESLengthSet                                                              AESLengthSet
N#endif
N#ifdef ROM_AESReset
S#define MAP_AESReset                                                          \
S        ROM_AESReset
X#define MAP_AESReset                                                                  ROM_AESReset
N#else
N#define MAP_AESReset                                                          \
N        AESReset
X#define MAP_AESReset                                                                  AESReset
N#endif
N#ifdef ROM_AESTagRead
S#define MAP_AESTagRead                                                        \
S        ROM_AESTagRead
X#define MAP_AESTagRead                                                                ROM_AESTagRead
N#else
N#define MAP_AESTagRead                                                        \
N        AESTagRead
X#define MAP_AESTagRead                                                                AESTagRead
N#endif
N#ifdef ROM_AESIVRead
S#define MAP_AESIVRead                                                         \
S        ROM_AESIVRead
X#define MAP_AESIVRead                                                                 ROM_AESIVRead
N#else
N#define MAP_AESIVRead                                                         \
N        AESIVRead
X#define MAP_AESIVRead                                                                 AESIVRead
N#endif
N
N//*****************************************************************************
N//
N// Macros for the CAN API.
N//
N//*****************************************************************************
N#ifdef ROM_CANIntClear
S#define MAP_CANIntClear                                                       \
S        ROM_CANIntClear
X#define MAP_CANIntClear                                                               ROM_CANIntClear
N#else
N#define MAP_CANIntClear                                                       \
N        CANIntClear
X#define MAP_CANIntClear                                                               CANIntClear
N#endif
N#ifdef ROM_CANInit
N#define MAP_CANInit                                                           \
N        ROM_CANInit
X#define MAP_CANInit                                                                   ROM_CANInit
N#else
S#define MAP_CANInit                                                           \
S        CANInit
X#define MAP_CANInit                                                                   CANInit
N#endif
N#ifdef ROM_CANEnable
N#define MAP_CANEnable                                                         \
N        ROM_CANEnable
X#define MAP_CANEnable                                                                 ROM_CANEnable
N#else
S#define MAP_CANEnable                                                         \
S        CANEnable
X#define MAP_CANEnable                                                                 CANEnable
N#endif
N#ifdef ROM_CANDisable
N#define MAP_CANDisable                                                        \
N        ROM_CANDisable
X#define MAP_CANDisable                                                                ROM_CANDisable
N#else
S#define MAP_CANDisable                                                        \
S        CANDisable
X#define MAP_CANDisable                                                                CANDisable
N#endif
N#ifdef ROM_CANBitTimingSet
N#define MAP_CANBitTimingSet                                                   \
N        ROM_CANBitTimingSet
X#define MAP_CANBitTimingSet                                                           ROM_CANBitTimingSet
N#else
S#define MAP_CANBitTimingSet                                                   \
S        CANBitTimingSet
X#define MAP_CANBitTimingSet                                                           CANBitTimingSet
N#endif
N#ifdef ROM_CANBitTimingGet
N#define MAP_CANBitTimingGet                                                   \
N        ROM_CANBitTimingGet
X#define MAP_CANBitTimingGet                                                           ROM_CANBitTimingGet
N#else
S#define MAP_CANBitTimingGet                                                   \
S        CANBitTimingGet
X#define MAP_CANBitTimingGet                                                           CANBitTimingGet
N#endif
N#ifdef ROM_CANMessageSet
N#define MAP_CANMessageSet                                                     \
N        ROM_CANMessageSet
X#define MAP_CANMessageSet                                                             ROM_CANMessageSet
N#else
S#define MAP_CANMessageSet                                                     \
S        CANMessageSet
X#define MAP_CANMessageSet                                                             CANMessageSet
N#endif
N#ifdef ROM_CANMessageGet
N#define MAP_CANMessageGet                                                     \
N        ROM_CANMessageGet
X#define MAP_CANMessageGet                                                             ROM_CANMessageGet
N#else
S#define MAP_CANMessageGet                                                     \
S        CANMessageGet
X#define MAP_CANMessageGet                                                             CANMessageGet
N#endif
N#ifdef ROM_CANStatusGet
N#define MAP_CANStatusGet                                                      \
N        ROM_CANStatusGet
X#define MAP_CANStatusGet                                                              ROM_CANStatusGet
N#else
S#define MAP_CANStatusGet                                                      \
S        CANStatusGet
X#define MAP_CANStatusGet                                                              CANStatusGet
N#endif
N#ifdef ROM_CANMessageClear
N#define MAP_CANMessageClear                                                   \
N        ROM_CANMessageClear
X#define MAP_CANMessageClear                                                           ROM_CANMessageClear
N#else
S#define MAP_CANMessageClear                                                   \
S        CANMessageClear
X#define MAP_CANMessageClear                                                           CANMessageClear
N#endif
N#ifdef ROM_CANIntEnable
N#define MAP_CANIntEnable                                                      \
N        ROM_CANIntEnable
X#define MAP_CANIntEnable                                                              ROM_CANIntEnable
N#else
S#define MAP_CANIntEnable                                                      \
S        CANIntEnable
X#define MAP_CANIntEnable                                                              CANIntEnable
N#endif
N#ifdef ROM_CANIntDisable
N#define MAP_CANIntDisable                                                     \
N        ROM_CANIntDisable
X#define MAP_CANIntDisable                                                             ROM_CANIntDisable
N#else
S#define MAP_CANIntDisable                                                     \
S        CANIntDisable
X#define MAP_CANIntDisable                                                             CANIntDisable
N#endif
N#ifdef ROM_CANIntStatus
N#define MAP_CANIntStatus                                                      \
N        ROM_CANIntStatus
X#define MAP_CANIntStatus                                                              ROM_CANIntStatus
N#else
S#define MAP_CANIntStatus                                                      \
S        CANIntStatus
X#define MAP_CANIntStatus                                                              CANIntStatus
N#endif
N#ifdef ROM_CANRetryGet
N#define MAP_CANRetryGet                                                       \
N        ROM_CANRetryGet
X#define MAP_CANRetryGet                                                               ROM_CANRetryGet
N#else
S#define MAP_CANRetryGet                                                       \
S        CANRetryGet
X#define MAP_CANRetryGet                                                               CANRetryGet
N#endif
N#ifdef ROM_CANRetrySet
N#define MAP_CANRetrySet                                                       \
N        ROM_CANRetrySet
X#define MAP_CANRetrySet                                                               ROM_CANRetrySet
N#else
S#define MAP_CANRetrySet                                                       \
S        CANRetrySet
X#define MAP_CANRetrySet                                                               CANRetrySet
N#endif
N#ifdef ROM_CANErrCntrGet
N#define MAP_CANErrCntrGet                                                     \
N        ROM_CANErrCntrGet
X#define MAP_CANErrCntrGet                                                             ROM_CANErrCntrGet
N#else
S#define MAP_CANErrCntrGet                                                     \
S        CANErrCntrGet
X#define MAP_CANErrCntrGet                                                             CANErrCntrGet
N#endif
N#ifdef ROM_CANBitRateSet
N#define MAP_CANBitRateSet                                                     \
N        ROM_CANBitRateSet
X#define MAP_CANBitRateSet                                                             ROM_CANBitRateSet
N#else
S#define MAP_CANBitRateSet                                                     \
S        CANBitRateSet
X#define MAP_CANBitRateSet                                                             CANBitRateSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Comparator API.
N//
N//*****************************************************************************
N#ifdef ROM_ComparatorIntClear
N#define MAP_ComparatorIntClear                                                \
N        ROM_ComparatorIntClear
X#define MAP_ComparatorIntClear                                                        ROM_ComparatorIntClear
N#else
S#define MAP_ComparatorIntClear                                                \
S        ComparatorIntClear
X#define MAP_ComparatorIntClear                                                        ComparatorIntClear
N#endif
N#ifdef ROM_ComparatorConfigure
N#define MAP_ComparatorConfigure                                               \
N        ROM_ComparatorConfigure
X#define MAP_ComparatorConfigure                                                       ROM_ComparatorConfigure
N#else
S#define MAP_ComparatorConfigure                                               \
S        ComparatorConfigure
X#define MAP_ComparatorConfigure                                                       ComparatorConfigure
N#endif
N#ifdef ROM_ComparatorRefSet
N#define MAP_ComparatorRefSet                                                  \
N        ROM_ComparatorRefSet
X#define MAP_ComparatorRefSet                                                          ROM_ComparatorRefSet
N#else
S#define MAP_ComparatorRefSet                                                  \
S        ComparatorRefSet
X#define MAP_ComparatorRefSet                                                          ComparatorRefSet
N#endif
N#ifdef ROM_ComparatorValueGet
N#define MAP_ComparatorValueGet                                                \
N        ROM_ComparatorValueGet
X#define MAP_ComparatorValueGet                                                        ROM_ComparatorValueGet
N#else
S#define MAP_ComparatorValueGet                                                \
S        ComparatorValueGet
X#define MAP_ComparatorValueGet                                                        ComparatorValueGet
N#endif
N#ifdef ROM_ComparatorIntEnable
N#define MAP_ComparatorIntEnable                                               \
N        ROM_ComparatorIntEnable
X#define MAP_ComparatorIntEnable                                                       ROM_ComparatorIntEnable
N#else
S#define MAP_ComparatorIntEnable                                               \
S        ComparatorIntEnable
X#define MAP_ComparatorIntEnable                                                       ComparatorIntEnable
N#endif
N#ifdef ROM_ComparatorIntDisable
N#define MAP_ComparatorIntDisable                                              \
N        ROM_ComparatorIntDisable
X#define MAP_ComparatorIntDisable                                                      ROM_ComparatorIntDisable
N#else
S#define MAP_ComparatorIntDisable                                              \
S        ComparatorIntDisable
X#define MAP_ComparatorIntDisable                                                      ComparatorIntDisable
N#endif
N#ifdef ROM_ComparatorIntStatus
N#define MAP_ComparatorIntStatus                                               \
N        ROM_ComparatorIntStatus
X#define MAP_ComparatorIntStatus                                                       ROM_ComparatorIntStatus
N#else
S#define MAP_ComparatorIntStatus                                               \
S        ComparatorIntStatus
X#define MAP_ComparatorIntStatus                                                       ComparatorIntStatus
N#endif
N
N//*****************************************************************************
N//
N// Macros for the CRC API.
N//
N//*****************************************************************************
N#ifdef ROM_CRCConfigSet
S#define MAP_CRCConfigSet                                                      \
S        ROM_CRCConfigSet
X#define MAP_CRCConfigSet                                                              ROM_CRCConfigSet
N#else
N#define MAP_CRCConfigSet                                                      \
N        CRCConfigSet
X#define MAP_CRCConfigSet                                                              CRCConfigSet
N#endif
N#ifdef ROM_CRCDataProcess
S#define MAP_CRCDataProcess                                                    \
S        ROM_CRCDataProcess
X#define MAP_CRCDataProcess                                                            ROM_CRCDataProcess
N#else
N#define MAP_CRCDataProcess                                                    \
N        CRCDataProcess
X#define MAP_CRCDataProcess                                                            CRCDataProcess
N#endif
N#ifdef ROM_CRCDataWrite
S#define MAP_CRCDataWrite                                                      \
S        ROM_CRCDataWrite
X#define MAP_CRCDataWrite                                                              ROM_CRCDataWrite
N#else
N#define MAP_CRCDataWrite                                                      \
N        CRCDataWrite
X#define MAP_CRCDataWrite                                                              CRCDataWrite
N#endif
N#ifdef ROM_CRCResultRead
S#define MAP_CRCResultRead                                                     \
S        ROM_CRCResultRead
X#define MAP_CRCResultRead                                                             ROM_CRCResultRead
N#else
N#define MAP_CRCResultRead                                                     \
N        CRCResultRead
X#define MAP_CRCResultRead                                                             CRCResultRead
N#endif
N#ifdef ROM_CRCSeedSet
S#define MAP_CRCSeedSet                                                        \
S        ROM_CRCSeedSet
X#define MAP_CRCSeedSet                                                                ROM_CRCSeedSet
N#else
N#define MAP_CRCSeedSet                                                        \
N        CRCSeedSet
X#define MAP_CRCSeedSet                                                                CRCSeedSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the DES API.
N//
N//*****************************************************************************
N#ifdef ROM_DESIntStatus
S#define MAP_DESIntStatus                                                      \
S        ROM_DESIntStatus
X#define MAP_DESIntStatus                                                              ROM_DESIntStatus
N#else
N#define MAP_DESIntStatus                                                      \
N        DESIntStatus
X#define MAP_DESIntStatus                                                              DESIntStatus
N#endif
N#ifdef ROM_DESConfigSet
S#define MAP_DESConfigSet                                                      \
S        ROM_DESConfigSet
X#define MAP_DESConfigSet                                                              ROM_DESConfigSet
N#else
N#define MAP_DESConfigSet                                                      \
N        DESConfigSet
X#define MAP_DESConfigSet                                                              DESConfigSet
N#endif
N#ifdef ROM_DESDataRead
S#define MAP_DESDataRead                                                       \
S        ROM_DESDataRead
X#define MAP_DESDataRead                                                               ROM_DESDataRead
N#else
N#define MAP_DESDataRead                                                       \
N        DESDataRead
X#define MAP_DESDataRead                                                               DESDataRead
N#endif
N#ifdef ROM_DESDataReadNonBlocking
S#define MAP_DESDataReadNonBlocking                                            \
S        ROM_DESDataReadNonBlocking
X#define MAP_DESDataReadNonBlocking                                                    ROM_DESDataReadNonBlocking
N#else
N#define MAP_DESDataReadNonBlocking                                            \
N        DESDataReadNonBlocking
X#define MAP_DESDataReadNonBlocking                                                    DESDataReadNonBlocking
N#endif
N#ifdef ROM_DESDataProcess
S#define MAP_DESDataProcess                                                    \
S        ROM_DESDataProcess
X#define MAP_DESDataProcess                                                            ROM_DESDataProcess
N#else
N#define MAP_DESDataProcess                                                    \
N        DESDataProcess
X#define MAP_DESDataProcess                                                            DESDataProcess
N#endif
N#ifdef ROM_DESDataWrite
S#define MAP_DESDataWrite                                                      \
S        ROM_DESDataWrite
X#define MAP_DESDataWrite                                                              ROM_DESDataWrite
N#else
N#define MAP_DESDataWrite                                                      \
N        DESDataWrite
X#define MAP_DESDataWrite                                                              DESDataWrite
N#endif
N#ifdef ROM_DESDataWriteNonBlocking
S#define MAP_DESDataWriteNonBlocking                                           \
S        ROM_DESDataWriteNonBlocking
X#define MAP_DESDataWriteNonBlocking                                                   ROM_DESDataWriteNonBlocking
N#else
N#define MAP_DESDataWriteNonBlocking                                           \
N        DESDataWriteNonBlocking
X#define MAP_DESDataWriteNonBlocking                                                   DESDataWriteNonBlocking
N#endif
N#ifdef ROM_DESDMADisable
S#define MAP_DESDMADisable                                                     \
S        ROM_DESDMADisable
X#define MAP_DESDMADisable                                                             ROM_DESDMADisable
N#else
N#define MAP_DESDMADisable                                                     \
N        DESDMADisable
X#define MAP_DESDMADisable                                                             DESDMADisable
N#endif
N#ifdef ROM_DESDMAEnable
S#define MAP_DESDMAEnable                                                      \
S        ROM_DESDMAEnable
X#define MAP_DESDMAEnable                                                              ROM_DESDMAEnable
N#else
N#define MAP_DESDMAEnable                                                      \
N        DESDMAEnable
X#define MAP_DESDMAEnable                                                              DESDMAEnable
N#endif
N#ifdef ROM_DESIntClear
S#define MAP_DESIntClear                                                       \
S        ROM_DESIntClear
X#define MAP_DESIntClear                                                               ROM_DESIntClear
N#else
N#define MAP_DESIntClear                                                       \
N        DESIntClear
X#define MAP_DESIntClear                                                               DESIntClear
N#endif
N#ifdef ROM_DESIntDisable
S#define MAP_DESIntDisable                                                     \
S        ROM_DESIntDisable
X#define MAP_DESIntDisable                                                             ROM_DESIntDisable
N#else
N#define MAP_DESIntDisable                                                     \
N        DESIntDisable
X#define MAP_DESIntDisable                                                             DESIntDisable
N#endif
N#ifdef ROM_DESIntEnable
S#define MAP_DESIntEnable                                                      \
S        ROM_DESIntEnable
X#define MAP_DESIntEnable                                                              ROM_DESIntEnable
N#else
N#define MAP_DESIntEnable                                                      \
N        DESIntEnable
X#define MAP_DESIntEnable                                                              DESIntEnable
N#endif
N#ifdef ROM_DESIVSet
S#define MAP_DESIVSet                                                          \
S        ROM_DESIVSet
X#define MAP_DESIVSet                                                                  ROM_DESIVSet
N#else
N#define MAP_DESIVSet                                                          \
N        DESIVSet
X#define MAP_DESIVSet                                                                  DESIVSet
N#endif
N#ifdef ROM_DESKeySet
S#define MAP_DESKeySet                                                         \
S        ROM_DESKeySet
X#define MAP_DESKeySet                                                                 ROM_DESKeySet
N#else
N#define MAP_DESKeySet                                                         \
N        DESKeySet
X#define MAP_DESKeySet                                                                 DESKeySet
N#endif
N#ifdef ROM_DESLengthSet
S#define MAP_DESLengthSet                                                      \
S        ROM_DESLengthSet
X#define MAP_DESLengthSet                                                              ROM_DESLengthSet
N#else
N#define MAP_DESLengthSet                                                      \
N        DESLengthSet
X#define MAP_DESLengthSet                                                              DESLengthSet
N#endif
N#ifdef ROM_DESReset
S#define MAP_DESReset                                                          \
S        ROM_DESReset
X#define MAP_DESReset                                                                  ROM_DESReset
N#else
N#define MAP_DESReset                                                          \
N        DESReset
X#define MAP_DESReset                                                                  DESReset
N#endif
N
N//*****************************************************************************
N//
N// Macros for the EEPROM API.
N//
N//*****************************************************************************
N#ifdef ROM_EEPROMRead
N#define MAP_EEPROMRead                                                        \
N        ROM_EEPROMRead
X#define MAP_EEPROMRead                                                                ROM_EEPROMRead
N#else
S#define MAP_EEPROMRead                                                        \
S        EEPROMRead
X#define MAP_EEPROMRead                                                                EEPROMRead
N#endif
N#ifdef ROM_EEPROMBlockCountGet
N#define MAP_EEPROMBlockCountGet                                               \
N        ROM_EEPROMBlockCountGet
X#define MAP_EEPROMBlockCountGet                                                       ROM_EEPROMBlockCountGet
N#else
S#define MAP_EEPROMBlockCountGet                                               \
S        EEPROMBlockCountGet
X#define MAP_EEPROMBlockCountGet                                                       EEPROMBlockCountGet
N#endif
N#ifdef ROM_EEPROMBlockHide
N#define MAP_EEPROMBlockHide                                                   \
N        ROM_EEPROMBlockHide
X#define MAP_EEPROMBlockHide                                                           ROM_EEPROMBlockHide
N#else
S#define MAP_EEPROMBlockHide                                                   \
S        EEPROMBlockHide
X#define MAP_EEPROMBlockHide                                                           EEPROMBlockHide
N#endif
N#ifdef ROM_EEPROMBlockLock
N#define MAP_EEPROMBlockLock                                                   \
N        ROM_EEPROMBlockLock
X#define MAP_EEPROMBlockLock                                                           ROM_EEPROMBlockLock
N#else
S#define MAP_EEPROMBlockLock                                                   \
S        EEPROMBlockLock
X#define MAP_EEPROMBlockLock                                                           EEPROMBlockLock
N#endif
N#ifdef ROM_EEPROMBlockPasswordSet
N#define MAP_EEPROMBlockPasswordSet                                            \
N        ROM_EEPROMBlockPasswordSet
X#define MAP_EEPROMBlockPasswordSet                                                    ROM_EEPROMBlockPasswordSet
N#else
S#define MAP_EEPROMBlockPasswordSet                                            \
S        EEPROMBlockPasswordSet
X#define MAP_EEPROMBlockPasswordSet                                                    EEPROMBlockPasswordSet
N#endif
N#ifdef ROM_EEPROMBlockProtectGet
N#define MAP_EEPROMBlockProtectGet                                             \
N        ROM_EEPROMBlockProtectGet
X#define MAP_EEPROMBlockProtectGet                                                     ROM_EEPROMBlockProtectGet
N#else
S#define MAP_EEPROMBlockProtectGet                                             \
S        EEPROMBlockProtectGet
X#define MAP_EEPROMBlockProtectGet                                                     EEPROMBlockProtectGet
N#endif
N#ifdef ROM_EEPROMBlockProtectSet
N#define MAP_EEPROMBlockProtectSet                                             \
N        ROM_EEPROMBlockProtectSet
X#define MAP_EEPROMBlockProtectSet                                                     ROM_EEPROMBlockProtectSet
N#else
S#define MAP_EEPROMBlockProtectSet                                             \
S        EEPROMBlockProtectSet
X#define MAP_EEPROMBlockProtectSet                                                     EEPROMBlockProtectSet
N#endif
N#ifdef ROM_EEPROMBlockUnlock
N#define MAP_EEPROMBlockUnlock                                                 \
N        ROM_EEPROMBlockUnlock
X#define MAP_EEPROMBlockUnlock                                                         ROM_EEPROMBlockUnlock
N#else
S#define MAP_EEPROMBlockUnlock                                                 \
S        EEPROMBlockUnlock
X#define MAP_EEPROMBlockUnlock                                                         EEPROMBlockUnlock
N#endif
N#ifdef ROM_EEPROMIntClear
N#define MAP_EEPROMIntClear                                                    \
N        ROM_EEPROMIntClear
X#define MAP_EEPROMIntClear                                                            ROM_EEPROMIntClear
N#else
S#define MAP_EEPROMIntClear                                                    \
S        EEPROMIntClear
X#define MAP_EEPROMIntClear                                                            EEPROMIntClear
N#endif
N#ifdef ROM_EEPROMIntDisable
N#define MAP_EEPROMIntDisable                                                  \
N        ROM_EEPROMIntDisable
X#define MAP_EEPROMIntDisable                                                          ROM_EEPROMIntDisable
N#else
S#define MAP_EEPROMIntDisable                                                  \
S        EEPROMIntDisable
X#define MAP_EEPROMIntDisable                                                          EEPROMIntDisable
N#endif
N#ifdef ROM_EEPROMIntEnable
N#define MAP_EEPROMIntEnable                                                   \
N        ROM_EEPROMIntEnable
X#define MAP_EEPROMIntEnable                                                           ROM_EEPROMIntEnable
N#else
S#define MAP_EEPROMIntEnable                                                   \
S        EEPROMIntEnable
X#define MAP_EEPROMIntEnable                                                           EEPROMIntEnable
N#endif
N#ifdef ROM_EEPROMIntStatus
N#define MAP_EEPROMIntStatus                                                   \
N        ROM_EEPROMIntStatus
X#define MAP_EEPROMIntStatus                                                           ROM_EEPROMIntStatus
N#else
S#define MAP_EEPROMIntStatus                                                   \
S        EEPROMIntStatus
X#define MAP_EEPROMIntStatus                                                           EEPROMIntStatus
N#endif
N#ifdef ROM_EEPROMMassErase
N#define MAP_EEPROMMassErase                                                   \
N        ROM_EEPROMMassErase
X#define MAP_EEPROMMassErase                                                           ROM_EEPROMMassErase
N#else
S#define MAP_EEPROMMassErase                                                   \
S        EEPROMMassErase
X#define MAP_EEPROMMassErase                                                           EEPROMMassErase
N#endif
N#ifdef ROM_EEPROMProgram
N#define MAP_EEPROMProgram                                                     \
N        ROM_EEPROMProgram
X#define MAP_EEPROMProgram                                                             ROM_EEPROMProgram
N#else
S#define MAP_EEPROMProgram                                                     \
S        EEPROMProgram
X#define MAP_EEPROMProgram                                                             EEPROMProgram
N#endif
N#ifdef ROM_EEPROMProgramNonBlocking
N#define MAP_EEPROMProgramNonBlocking                                          \
N        ROM_EEPROMProgramNonBlocking
X#define MAP_EEPROMProgramNonBlocking                                                  ROM_EEPROMProgramNonBlocking
N#else
S#define MAP_EEPROMProgramNonBlocking                                          \
S        EEPROMProgramNonBlocking
X#define MAP_EEPROMProgramNonBlocking                                                  EEPROMProgramNonBlocking
N#endif
N#ifdef ROM_EEPROMSizeGet
N#define MAP_EEPROMSizeGet                                                     \
N        ROM_EEPROMSizeGet
X#define MAP_EEPROMSizeGet                                                             ROM_EEPROMSizeGet
N#else
S#define MAP_EEPROMSizeGet                                                     \
S        EEPROMSizeGet
X#define MAP_EEPROMSizeGet                                                             EEPROMSizeGet
N#endif
N#ifdef ROM_EEPROMStatusGet
N#define MAP_EEPROMStatusGet                                                   \
N        ROM_EEPROMStatusGet
X#define MAP_EEPROMStatusGet                                                           ROM_EEPROMStatusGet
N#else
S#define MAP_EEPROMStatusGet                                                   \
S        EEPROMStatusGet
X#define MAP_EEPROMStatusGet                                                           EEPROMStatusGet
N#endif
N#ifdef ROM_EEPROMInit
N#define MAP_EEPROMInit                                                        \
N        ROM_EEPROMInit
X#define MAP_EEPROMInit                                                                ROM_EEPROMInit
N#else
S#define MAP_EEPROMInit                                                        \
S        EEPROMInit
X#define MAP_EEPROMInit                                                                EEPROMInit
N#endif
N
N//*****************************************************************************
N//
N// Macros for the EPI API.
N//
N//*****************************************************************************
N#ifdef ROM_EPIIntStatus
S#define MAP_EPIIntStatus                                                      \
S        ROM_EPIIntStatus
X#define MAP_EPIIntStatus                                                              ROM_EPIIntStatus
N#else
N#define MAP_EPIIntStatus                                                      \
N        EPIIntStatus
X#define MAP_EPIIntStatus                                                              EPIIntStatus
N#endif
N#ifdef ROM_EPIModeSet
S#define MAP_EPIModeSet                                                        \
S        ROM_EPIModeSet
X#define MAP_EPIModeSet                                                                ROM_EPIModeSet
N#else
N#define MAP_EPIModeSet                                                        \
N        EPIModeSet
X#define MAP_EPIModeSet                                                                EPIModeSet
N#endif
N#ifdef ROM_EPIDividerSet
S#define MAP_EPIDividerSet                                                     \
S        ROM_EPIDividerSet
X#define MAP_EPIDividerSet                                                             ROM_EPIDividerSet
N#else
N#define MAP_EPIDividerSet                                                     \
N        EPIDividerSet
X#define MAP_EPIDividerSet                                                             EPIDividerSet
N#endif
N#ifdef ROM_EPIConfigSDRAMSet
S#define MAP_EPIConfigSDRAMSet                                                 \
S        ROM_EPIConfigSDRAMSet
X#define MAP_EPIConfigSDRAMSet                                                         ROM_EPIConfigSDRAMSet
N#else
N#define MAP_EPIConfigSDRAMSet                                                 \
N        EPIConfigSDRAMSet
X#define MAP_EPIConfigSDRAMSet                                                         EPIConfigSDRAMSet
N#endif
N#ifdef ROM_EPIConfigGPModeSet
S#define MAP_EPIConfigGPModeSet                                                \
S        ROM_EPIConfigGPModeSet
X#define MAP_EPIConfigGPModeSet                                                        ROM_EPIConfigGPModeSet
N#else
N#define MAP_EPIConfigGPModeSet                                                \
N        EPIConfigGPModeSet
X#define MAP_EPIConfigGPModeSet                                                        EPIConfigGPModeSet
N#endif
N#ifdef ROM_EPIConfigHB8Set
S#define MAP_EPIConfigHB8Set                                                   \
S        ROM_EPIConfigHB8Set
X#define MAP_EPIConfigHB8Set                                                           ROM_EPIConfigHB8Set
N#else
N#define MAP_EPIConfigHB8Set                                                   \
N        EPIConfigHB8Set
X#define MAP_EPIConfigHB8Set                                                           EPIConfigHB8Set
N#endif
N#ifdef ROM_EPIConfigHB16Set
S#define MAP_EPIConfigHB16Set                                                  \
S        ROM_EPIConfigHB16Set
X#define MAP_EPIConfigHB16Set                                                          ROM_EPIConfigHB16Set
N#else
N#define MAP_EPIConfigHB16Set                                                  \
N        EPIConfigHB16Set
X#define MAP_EPIConfigHB16Set                                                          EPIConfigHB16Set
N#endif
N#ifdef ROM_EPIAddressMapSet
S#define MAP_EPIAddressMapSet                                                  \
S        ROM_EPIAddressMapSet
X#define MAP_EPIAddressMapSet                                                          ROM_EPIAddressMapSet
N#else
N#define MAP_EPIAddressMapSet                                                  \
N        EPIAddressMapSet
X#define MAP_EPIAddressMapSet                                                          EPIAddressMapSet
N#endif
N#ifdef ROM_EPINonBlockingReadConfigure
S#define MAP_EPINonBlockingReadConfigure                                       \
S        ROM_EPINonBlockingReadConfigure
X#define MAP_EPINonBlockingReadConfigure                                               ROM_EPINonBlockingReadConfigure
N#else
N#define MAP_EPINonBlockingReadConfigure                                       \
N        EPINonBlockingReadConfigure
X#define MAP_EPINonBlockingReadConfigure                                               EPINonBlockingReadConfigure
N#endif
N#ifdef ROM_EPINonBlockingReadStart
S#define MAP_EPINonBlockingReadStart                                           \
S        ROM_EPINonBlockingReadStart
X#define MAP_EPINonBlockingReadStart                                                   ROM_EPINonBlockingReadStart
N#else
N#define MAP_EPINonBlockingReadStart                                           \
N        EPINonBlockingReadStart
X#define MAP_EPINonBlockingReadStart                                                   EPINonBlockingReadStart
N#endif
N#ifdef ROM_EPINonBlockingReadStop
S#define MAP_EPINonBlockingReadStop                                            \
S        ROM_EPINonBlockingReadStop
X#define MAP_EPINonBlockingReadStop                                                    ROM_EPINonBlockingReadStop
N#else
N#define MAP_EPINonBlockingReadStop                                            \
N        EPINonBlockingReadStop
X#define MAP_EPINonBlockingReadStop                                                    EPINonBlockingReadStop
N#endif
N#ifdef ROM_EPINonBlockingReadCount
S#define MAP_EPINonBlockingReadCount                                           \
S        ROM_EPINonBlockingReadCount
X#define MAP_EPINonBlockingReadCount                                                   ROM_EPINonBlockingReadCount
N#else
N#define MAP_EPINonBlockingReadCount                                           \
N        EPINonBlockingReadCount
X#define MAP_EPINonBlockingReadCount                                                   EPINonBlockingReadCount
N#endif
N#ifdef ROM_EPINonBlockingReadAvail
S#define MAP_EPINonBlockingReadAvail                                           \
S        ROM_EPINonBlockingReadAvail
X#define MAP_EPINonBlockingReadAvail                                                   ROM_EPINonBlockingReadAvail
N#else
N#define MAP_EPINonBlockingReadAvail                                           \
N        EPINonBlockingReadAvail
X#define MAP_EPINonBlockingReadAvail                                                   EPINonBlockingReadAvail
N#endif
N#ifdef ROM_EPINonBlockingReadGet32
S#define MAP_EPINonBlockingReadGet32                                           \
S        ROM_EPINonBlockingReadGet32
X#define MAP_EPINonBlockingReadGet32                                                   ROM_EPINonBlockingReadGet32
N#else
N#define MAP_EPINonBlockingReadGet32                                           \
N        EPINonBlockingReadGet32
X#define MAP_EPINonBlockingReadGet32                                                   EPINonBlockingReadGet32
N#endif
N#ifdef ROM_EPINonBlockingReadGet16
S#define MAP_EPINonBlockingReadGet16                                           \
S        ROM_EPINonBlockingReadGet16
X#define MAP_EPINonBlockingReadGet16                                                   ROM_EPINonBlockingReadGet16
N#else
N#define MAP_EPINonBlockingReadGet16                                           \
N        EPINonBlockingReadGet16
X#define MAP_EPINonBlockingReadGet16                                                   EPINonBlockingReadGet16
N#endif
N#ifdef ROM_EPINonBlockingReadGet8
S#define MAP_EPINonBlockingReadGet8                                            \
S        ROM_EPINonBlockingReadGet8
X#define MAP_EPINonBlockingReadGet8                                                    ROM_EPINonBlockingReadGet8
N#else
N#define MAP_EPINonBlockingReadGet8                                            \
N        EPINonBlockingReadGet8
X#define MAP_EPINonBlockingReadGet8                                                    EPINonBlockingReadGet8
N#endif
N#ifdef ROM_EPIFIFOConfig
S#define MAP_EPIFIFOConfig                                                     \
S        ROM_EPIFIFOConfig
X#define MAP_EPIFIFOConfig                                                             ROM_EPIFIFOConfig
N#else
N#define MAP_EPIFIFOConfig                                                     \
N        EPIFIFOConfig
X#define MAP_EPIFIFOConfig                                                             EPIFIFOConfig
N#endif
N#ifdef ROM_EPIWriteFIFOCountGet
S#define MAP_EPIWriteFIFOCountGet                                              \
S        ROM_EPIWriteFIFOCountGet
X#define MAP_EPIWriteFIFOCountGet                                                      ROM_EPIWriteFIFOCountGet
N#else
N#define MAP_EPIWriteFIFOCountGet                                              \
N        EPIWriteFIFOCountGet
X#define MAP_EPIWriteFIFOCountGet                                                      EPIWriteFIFOCountGet
N#endif
N#ifdef ROM_EPIIntEnable
S#define MAP_EPIIntEnable                                                      \
S        ROM_EPIIntEnable
X#define MAP_EPIIntEnable                                                              ROM_EPIIntEnable
N#else
N#define MAP_EPIIntEnable                                                      \
N        EPIIntEnable
X#define MAP_EPIIntEnable                                                              EPIIntEnable
N#endif
N#ifdef ROM_EPIIntDisable
S#define MAP_EPIIntDisable                                                     \
S        ROM_EPIIntDisable
X#define MAP_EPIIntDisable                                                             ROM_EPIIntDisable
N#else
N#define MAP_EPIIntDisable                                                     \
N        EPIIntDisable
X#define MAP_EPIIntDisable                                                             EPIIntDisable
N#endif
N#ifdef ROM_EPIIntErrorStatus
S#define MAP_EPIIntErrorStatus                                                 \
S        ROM_EPIIntErrorStatus
X#define MAP_EPIIntErrorStatus                                                         ROM_EPIIntErrorStatus
N#else
N#define MAP_EPIIntErrorStatus                                                 \
N        EPIIntErrorStatus
X#define MAP_EPIIntErrorStatus                                                         EPIIntErrorStatus
N#endif
N#ifdef ROM_EPIIntErrorClear
S#define MAP_EPIIntErrorClear                                                  \
S        ROM_EPIIntErrorClear
X#define MAP_EPIIntErrorClear                                                          ROM_EPIIntErrorClear
N#else
N#define MAP_EPIIntErrorClear                                                  \
N        EPIIntErrorClear
X#define MAP_EPIIntErrorClear                                                          EPIIntErrorClear
N#endif
N#ifdef ROM_EPIDividerCSSet
S#define MAP_EPIDividerCSSet                                                   \
S        ROM_EPIDividerCSSet
X#define MAP_EPIDividerCSSet                                                           ROM_EPIDividerCSSet
N#else
N#define MAP_EPIDividerCSSet                                                   \
N        EPIDividerCSSet
X#define MAP_EPIDividerCSSet                                                           EPIDividerCSSet
N#endif
N#ifdef ROM_EPIDMATxCount
S#define MAP_EPIDMATxCount                                                     \
S        ROM_EPIDMATxCount
X#define MAP_EPIDMATxCount                                                             ROM_EPIDMATxCount
N#else
N#define MAP_EPIDMATxCount                                                     \
N        EPIDMATxCount
X#define MAP_EPIDMATxCount                                                             EPIDMATxCount
N#endif
N#ifdef ROM_EPIConfigHB8CSSet
S#define MAP_EPIConfigHB8CSSet                                                 \
S        ROM_EPIConfigHB8CSSet
X#define MAP_EPIConfigHB8CSSet                                                         ROM_EPIConfigHB8CSSet
N#else
N#define MAP_EPIConfigHB8CSSet                                                 \
N        EPIConfigHB8CSSet
X#define MAP_EPIConfigHB8CSSet                                                         EPIConfigHB8CSSet
N#endif
N#ifdef ROM_EPIConfigHB16CSSet
S#define MAP_EPIConfigHB16CSSet                                                \
S        ROM_EPIConfigHB16CSSet
X#define MAP_EPIConfigHB16CSSet                                                        ROM_EPIConfigHB16CSSet
N#else
N#define MAP_EPIConfigHB16CSSet                                                \
N        EPIConfigHB16CSSet
X#define MAP_EPIConfigHB16CSSet                                                        EPIConfigHB16CSSet
N#endif
N#ifdef ROM_EPIConfigHB8TimingSet
S#define MAP_EPIConfigHB8TimingSet                                             \
S        ROM_EPIConfigHB8TimingSet
X#define MAP_EPIConfigHB8TimingSet                                                     ROM_EPIConfigHB8TimingSet
N#else
N#define MAP_EPIConfigHB8TimingSet                                             \
N        EPIConfigHB8TimingSet
X#define MAP_EPIConfigHB8TimingSet                                                     EPIConfigHB8TimingSet
N#endif
N#ifdef ROM_EPIConfigHB16TimingSet
S#define MAP_EPIConfigHB16TimingSet                                            \
S        ROM_EPIConfigHB16TimingSet
X#define MAP_EPIConfigHB16TimingSet                                                    ROM_EPIConfigHB16TimingSet
N#else
N#define MAP_EPIConfigHB16TimingSet                                            \
N        EPIConfigHB16TimingSet
X#define MAP_EPIConfigHB16TimingSet                                                    EPIConfigHB16TimingSet
N#endif
N#ifdef ROM_EPIPSRAMConfigRegSet
S#define MAP_EPIPSRAMConfigRegSet                                              \
S        ROM_EPIPSRAMConfigRegSet
X#define MAP_EPIPSRAMConfigRegSet                                                      ROM_EPIPSRAMConfigRegSet
N#else
N#define MAP_EPIPSRAMConfigRegSet                                              \
N        EPIPSRAMConfigRegSet
X#define MAP_EPIPSRAMConfigRegSet                                                      EPIPSRAMConfigRegSet
N#endif
N#ifdef ROM_EPIPSRAMConfigRegRead
S#define MAP_EPIPSRAMConfigRegRead                                             \
S        ROM_EPIPSRAMConfigRegRead
X#define MAP_EPIPSRAMConfigRegRead                                                     ROM_EPIPSRAMConfigRegRead
N#else
N#define MAP_EPIPSRAMConfigRegRead                                             \
N        EPIPSRAMConfigRegRead
X#define MAP_EPIPSRAMConfigRegRead                                                     EPIPSRAMConfigRegRead
N#endif
N#ifdef ROM_EPIPSRAMConfigRegGetNonBlocking
S#define MAP_EPIPSRAMConfigRegGetNonBlocking                                   \
S        ROM_EPIPSRAMConfigRegGetNonBlocking
X#define MAP_EPIPSRAMConfigRegGetNonBlocking                                           ROM_EPIPSRAMConfigRegGetNonBlocking
N#else
N#define MAP_EPIPSRAMConfigRegGetNonBlocking                                   \
N        EPIPSRAMConfigRegGetNonBlocking
X#define MAP_EPIPSRAMConfigRegGetNonBlocking                                           EPIPSRAMConfigRegGetNonBlocking
N#endif
N#ifdef ROM_EPIPSRAMConfigRegGet
S#define MAP_EPIPSRAMConfigRegGet                                              \
S        ROM_EPIPSRAMConfigRegGet
X#define MAP_EPIPSRAMConfigRegGet                                                      ROM_EPIPSRAMConfigRegGet
N#else
N#define MAP_EPIPSRAMConfigRegGet                                              \
N        EPIPSRAMConfigRegGet
X#define MAP_EPIPSRAMConfigRegGet                                                      EPIPSRAMConfigRegGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the EMAC API.
N//
N//*****************************************************************************
N#ifdef ROM_EMACIntStatus
S#define MAP_EMACIntStatus                                                     \
S        ROM_EMACIntStatus
X#define MAP_EMACIntStatus                                                             ROM_EMACIntStatus
N#else
N#define MAP_EMACIntStatus                                                     \
N        EMACIntStatus
X#define MAP_EMACIntStatus                                                             EMACIntStatus
N#endif
N#ifdef ROM_EMACAddrGet
S#define MAP_EMACAddrGet                                                       \
S        ROM_EMACAddrGet
X#define MAP_EMACAddrGet                                                               ROM_EMACAddrGet
N#else
N#define MAP_EMACAddrGet                                                       \
N        EMACAddrGet
X#define MAP_EMACAddrGet                                                               EMACAddrGet
N#endif
N#ifdef ROM_EMACAddrSet
S#define MAP_EMACAddrSet                                                       \
S        ROM_EMACAddrSet
X#define MAP_EMACAddrSet                                                               ROM_EMACAddrSet
N#else
N#define MAP_EMACAddrSet                                                       \
N        EMACAddrSet
X#define MAP_EMACAddrSet                                                               EMACAddrSet
N#endif
N#ifdef ROM_EMACConfigGet
S#define MAP_EMACConfigGet                                                     \
S        ROM_EMACConfigGet
X#define MAP_EMACConfigGet                                                             ROM_EMACConfigGet
N#else
N#define MAP_EMACConfigGet                                                     \
N        EMACConfigGet
X#define MAP_EMACConfigGet                                                             EMACConfigGet
N#endif
N#ifdef ROM_EMACConfigSet
S#define MAP_EMACConfigSet                                                     \
S        ROM_EMACConfigSet
X#define MAP_EMACConfigSet                                                             ROM_EMACConfigSet
N#else
N#define MAP_EMACConfigSet                                                     \
N        EMACConfigSet
X#define MAP_EMACConfigSet                                                             EMACConfigSet
N#endif
N#ifdef ROM_EMACDMAStateGet
S#define MAP_EMACDMAStateGet                                                   \
S        ROM_EMACDMAStateGet
X#define MAP_EMACDMAStateGet                                                           ROM_EMACDMAStateGet
N#else
N#define MAP_EMACDMAStateGet                                                   \
N        EMACDMAStateGet
X#define MAP_EMACDMAStateGet                                                           EMACDMAStateGet
N#endif
N#ifdef ROM_EMACFrameFilterGet
S#define MAP_EMACFrameFilterGet                                                \
S        ROM_EMACFrameFilterGet
X#define MAP_EMACFrameFilterGet                                                        ROM_EMACFrameFilterGet
N#else
N#define MAP_EMACFrameFilterGet                                                \
N        EMACFrameFilterGet
X#define MAP_EMACFrameFilterGet                                                        EMACFrameFilterGet
N#endif
N#ifdef ROM_EMACFrameFilterSet
S#define MAP_EMACFrameFilterSet                                                \
S        ROM_EMACFrameFilterSet
X#define MAP_EMACFrameFilterSet                                                        ROM_EMACFrameFilterSet
N#else
N#define MAP_EMACFrameFilterSet                                                \
N        EMACFrameFilterSet
X#define MAP_EMACFrameFilterSet                                                        EMACFrameFilterSet
N#endif
N#ifdef ROM_EMACInit
S#define MAP_EMACInit                                                          \
S        ROM_EMACInit
X#define MAP_EMACInit                                                                  ROM_EMACInit
N#else
N#define MAP_EMACInit                                                          \
N        EMACInit
X#define MAP_EMACInit                                                                  EMACInit
N#endif
N#ifdef ROM_EMACIntClear
S#define MAP_EMACIntClear                                                      \
S        ROM_EMACIntClear
X#define MAP_EMACIntClear                                                              ROM_EMACIntClear
N#else
N#define MAP_EMACIntClear                                                      \
N        EMACIntClear
X#define MAP_EMACIntClear                                                              EMACIntClear
N#endif
N#ifdef ROM_EMACIntDisable
S#define MAP_EMACIntDisable                                                    \
S        ROM_EMACIntDisable
X#define MAP_EMACIntDisable                                                            ROM_EMACIntDisable
N#else
N#define MAP_EMACIntDisable                                                    \
N        EMACIntDisable
X#define MAP_EMACIntDisable                                                            EMACIntDisable
N#endif
N#ifdef ROM_EMACIntEnable
S#define MAP_EMACIntEnable                                                     \
S        ROM_EMACIntEnable
X#define MAP_EMACIntEnable                                                             ROM_EMACIntEnable
N#else
N#define MAP_EMACIntEnable                                                     \
N        EMACIntEnable
X#define MAP_EMACIntEnable                                                             EMACIntEnable
N#endif
N#ifdef ROM_EMACPHYConfigSet
S#define MAP_EMACPHYConfigSet                                                  \
S        ROM_EMACPHYConfigSet
X#define MAP_EMACPHYConfigSet                                                          ROM_EMACPHYConfigSet
N#else
N#define MAP_EMACPHYConfigSet                                                  \
N        EMACPHYConfigSet
X#define MAP_EMACPHYConfigSet                                                          EMACPHYConfigSet
N#endif
N#ifdef ROM_EMACPHYPowerOff
S#define MAP_EMACPHYPowerOff                                                   \
S        ROM_EMACPHYPowerOff
X#define MAP_EMACPHYPowerOff                                                           ROM_EMACPHYPowerOff
N#else
N#define MAP_EMACPHYPowerOff                                                   \
N        EMACPHYPowerOff
X#define MAP_EMACPHYPowerOff                                                           EMACPHYPowerOff
N#endif
N#ifdef ROM_EMACPHYPowerOn
S#define MAP_EMACPHYPowerOn                                                    \
S        ROM_EMACPHYPowerOn
X#define MAP_EMACPHYPowerOn                                                            ROM_EMACPHYPowerOn
N#else
N#define MAP_EMACPHYPowerOn                                                    \
N        EMACPHYPowerOn
X#define MAP_EMACPHYPowerOn                                                            EMACPHYPowerOn
N#endif
N#ifdef ROM_EMACPHYRead
S#define MAP_EMACPHYRead                                                       \
S        ROM_EMACPHYRead
X#define MAP_EMACPHYRead                                                               ROM_EMACPHYRead
N#else
N#define MAP_EMACPHYRead                                                       \
N        EMACPHYRead
X#define MAP_EMACPHYRead                                                               EMACPHYRead
N#endif
N#ifdef ROM_EMACPHYWrite
S#define MAP_EMACPHYWrite                                                      \
S        ROM_EMACPHYWrite
X#define MAP_EMACPHYWrite                                                              ROM_EMACPHYWrite
N#else
N#define MAP_EMACPHYWrite                                                      \
N        EMACPHYWrite
X#define MAP_EMACPHYWrite                                                              EMACPHYWrite
N#endif
N#ifdef ROM_EMACReset
S#define MAP_EMACReset                                                         \
S        ROM_EMACReset
X#define MAP_EMACReset                                                                 ROM_EMACReset
N#else
N#define MAP_EMACReset                                                         \
N        EMACReset
X#define MAP_EMACReset                                                                 EMACReset
N#endif
N#ifdef ROM_EMACRxDisable
S#define MAP_EMACRxDisable                                                     \
S        ROM_EMACRxDisable
X#define MAP_EMACRxDisable                                                             ROM_EMACRxDisable
N#else
N#define MAP_EMACRxDisable                                                     \
N        EMACRxDisable
X#define MAP_EMACRxDisable                                                             EMACRxDisable
N#endif
N#ifdef ROM_EMACRxDMACurrentBufferGet
S#define MAP_EMACRxDMACurrentBufferGet                                         \
S        ROM_EMACRxDMACurrentBufferGet
X#define MAP_EMACRxDMACurrentBufferGet                                                 ROM_EMACRxDMACurrentBufferGet
N#else
N#define MAP_EMACRxDMACurrentBufferGet                                         \
N        EMACRxDMACurrentBufferGet
X#define MAP_EMACRxDMACurrentBufferGet                                                 EMACRxDMACurrentBufferGet
N#endif
N#ifdef ROM_EMACRxDMACurrentDescriptorGet
S#define MAP_EMACRxDMACurrentDescriptorGet                                     \
S        ROM_EMACRxDMACurrentDescriptorGet
X#define MAP_EMACRxDMACurrentDescriptorGet                                             ROM_EMACRxDMACurrentDescriptorGet
N#else
N#define MAP_EMACRxDMACurrentDescriptorGet                                     \
N        EMACRxDMACurrentDescriptorGet
X#define MAP_EMACRxDMACurrentDescriptorGet                                             EMACRxDMACurrentDescriptorGet
N#endif
N#ifdef ROM_EMACRxDMADescriptorListGet
S#define MAP_EMACRxDMADescriptorListGet                                        \
S        ROM_EMACRxDMADescriptorListGet
X#define MAP_EMACRxDMADescriptorListGet                                                ROM_EMACRxDMADescriptorListGet
N#else
N#define MAP_EMACRxDMADescriptorListGet                                        \
N        EMACRxDMADescriptorListGet
X#define MAP_EMACRxDMADescriptorListGet                                                EMACRxDMADescriptorListGet
N#endif
N#ifdef ROM_EMACRxDMADescriptorListSet
S#define MAP_EMACRxDMADescriptorListSet                                        \
S        ROM_EMACRxDMADescriptorListSet
X#define MAP_EMACRxDMADescriptorListSet                                                ROM_EMACRxDMADescriptorListSet
N#else
N#define MAP_EMACRxDMADescriptorListSet                                        \
N        EMACRxDMADescriptorListSet
X#define MAP_EMACRxDMADescriptorListSet                                                EMACRxDMADescriptorListSet
N#endif
N#ifdef ROM_EMACRxDMAPollDemand
S#define MAP_EMACRxDMAPollDemand                                               \
S        ROM_EMACRxDMAPollDemand
X#define MAP_EMACRxDMAPollDemand                                                       ROM_EMACRxDMAPollDemand
N#else
N#define MAP_EMACRxDMAPollDemand                                               \
N        EMACRxDMAPollDemand
X#define MAP_EMACRxDMAPollDemand                                                       EMACRxDMAPollDemand
N#endif
N#ifdef ROM_EMACRxEnable
S#define MAP_EMACRxEnable                                                      \
S        ROM_EMACRxEnable
X#define MAP_EMACRxEnable                                                              ROM_EMACRxEnable
N#else
N#define MAP_EMACRxEnable                                                      \
N        EMACRxEnable
X#define MAP_EMACRxEnable                                                              EMACRxEnable
N#endif
N#ifdef ROM_EMACRxWatchdogTimerSet
S#define MAP_EMACRxWatchdogTimerSet                                            \
S        ROM_EMACRxWatchdogTimerSet
X#define MAP_EMACRxWatchdogTimerSet                                                    ROM_EMACRxWatchdogTimerSet
N#else
N#define MAP_EMACRxWatchdogTimerSet                                            \
N        EMACRxWatchdogTimerSet
X#define MAP_EMACRxWatchdogTimerSet                                                    EMACRxWatchdogTimerSet
N#endif
N#ifdef ROM_EMACStatusGet
S#define MAP_EMACStatusGet                                                     \
S        ROM_EMACStatusGet
X#define MAP_EMACStatusGet                                                             ROM_EMACStatusGet
N#else
N#define MAP_EMACStatusGet                                                     \
N        EMACStatusGet
X#define MAP_EMACStatusGet                                                             EMACStatusGet
N#endif
N#ifdef ROM_EMACTxDisable
S#define MAP_EMACTxDisable                                                     \
S        ROM_EMACTxDisable
X#define MAP_EMACTxDisable                                                             ROM_EMACTxDisable
N#else
N#define MAP_EMACTxDisable                                                     \
N        EMACTxDisable
X#define MAP_EMACTxDisable                                                             EMACTxDisable
N#endif
N#ifdef ROM_EMACTxDMACurrentBufferGet
S#define MAP_EMACTxDMACurrentBufferGet                                         \
S        ROM_EMACTxDMACurrentBufferGet
X#define MAP_EMACTxDMACurrentBufferGet                                                 ROM_EMACTxDMACurrentBufferGet
N#else
N#define MAP_EMACTxDMACurrentBufferGet                                         \
N        EMACTxDMACurrentBufferGet
X#define MAP_EMACTxDMACurrentBufferGet                                                 EMACTxDMACurrentBufferGet
N#endif
N#ifdef ROM_EMACTxDMACurrentDescriptorGet
S#define MAP_EMACTxDMACurrentDescriptorGet                                     \
S        ROM_EMACTxDMACurrentDescriptorGet
X#define MAP_EMACTxDMACurrentDescriptorGet                                             ROM_EMACTxDMACurrentDescriptorGet
N#else
N#define MAP_EMACTxDMACurrentDescriptorGet                                     \
N        EMACTxDMACurrentDescriptorGet
X#define MAP_EMACTxDMACurrentDescriptorGet                                             EMACTxDMACurrentDescriptorGet
N#endif
N#ifdef ROM_EMACTxDMADescriptorListGet
S#define MAP_EMACTxDMADescriptorListGet                                        \
S        ROM_EMACTxDMADescriptorListGet
X#define MAP_EMACTxDMADescriptorListGet                                                ROM_EMACTxDMADescriptorListGet
N#else
N#define MAP_EMACTxDMADescriptorListGet                                        \
N        EMACTxDMADescriptorListGet
X#define MAP_EMACTxDMADescriptorListGet                                                EMACTxDMADescriptorListGet
N#endif
N#ifdef ROM_EMACTxDMADescriptorListSet
S#define MAP_EMACTxDMADescriptorListSet                                        \
S        ROM_EMACTxDMADescriptorListSet
X#define MAP_EMACTxDMADescriptorListSet                                                ROM_EMACTxDMADescriptorListSet
N#else
N#define MAP_EMACTxDMADescriptorListSet                                        \
N        EMACTxDMADescriptorListSet
X#define MAP_EMACTxDMADescriptorListSet                                                EMACTxDMADescriptorListSet
N#endif
N#ifdef ROM_EMACTxDMAPollDemand
S#define MAP_EMACTxDMAPollDemand                                               \
S        ROM_EMACTxDMAPollDemand
X#define MAP_EMACTxDMAPollDemand                                                       ROM_EMACTxDMAPollDemand
N#else
N#define MAP_EMACTxDMAPollDemand                                               \
N        EMACTxDMAPollDemand
X#define MAP_EMACTxDMAPollDemand                                                       EMACTxDMAPollDemand
N#endif
N#ifdef ROM_EMACTxEnable
S#define MAP_EMACTxEnable                                                      \
S        ROM_EMACTxEnable
X#define MAP_EMACTxEnable                                                              ROM_EMACTxEnable
N#else
N#define MAP_EMACTxEnable                                                      \
N        EMACTxEnable
X#define MAP_EMACTxEnable                                                              EMACTxEnable
N#endif
N#ifdef ROM_EMACTxFlush
S#define MAP_EMACTxFlush                                                       \
S        ROM_EMACTxFlush
X#define MAP_EMACTxFlush                                                               ROM_EMACTxFlush
N#else
N#define MAP_EMACTxFlush                                                       \
N        EMACTxFlush
X#define MAP_EMACTxFlush                                                               EMACTxFlush
N#endif
N#ifdef ROM_EMACAddrFilterGet
S#define MAP_EMACAddrFilterGet                                                 \
S        ROM_EMACAddrFilterGet
X#define MAP_EMACAddrFilterGet                                                         ROM_EMACAddrFilterGet
N#else
N#define MAP_EMACAddrFilterGet                                                 \
N        EMACAddrFilterGet
X#define MAP_EMACAddrFilterGet                                                         EMACAddrFilterGet
N#endif
N#ifdef ROM_EMACAddrFilterSet
S#define MAP_EMACAddrFilterSet                                                 \
S        ROM_EMACAddrFilterSet
X#define MAP_EMACAddrFilterSet                                                         ROM_EMACAddrFilterSet
N#else
N#define MAP_EMACAddrFilterSet                                                 \
N        EMACAddrFilterSet
X#define MAP_EMACAddrFilterSet                                                         EMACAddrFilterSet
N#endif
N#ifdef ROM_EMACHashFilterBitCalculate
S#define MAP_EMACHashFilterBitCalculate                                        \
S        ROM_EMACHashFilterBitCalculate
X#define MAP_EMACHashFilterBitCalculate                                                ROM_EMACHashFilterBitCalculate
N#else
N#define MAP_EMACHashFilterBitCalculate                                        \
N        EMACHashFilterBitCalculate
X#define MAP_EMACHashFilterBitCalculate                                                EMACHashFilterBitCalculate
N#endif
N#ifdef ROM_EMACHashFilterGet
S#define MAP_EMACHashFilterGet                                                 \
S        ROM_EMACHashFilterGet
X#define MAP_EMACHashFilterGet                                                         ROM_EMACHashFilterGet
N#else
N#define MAP_EMACHashFilterGet                                                 \
N        EMACHashFilterGet
X#define MAP_EMACHashFilterGet                                                         EMACHashFilterGet
N#endif
N#ifdef ROM_EMACHashFilterSet
S#define MAP_EMACHashFilterSet                                                 \
S        ROM_EMACHashFilterSet
X#define MAP_EMACHashFilterSet                                                         ROM_EMACHashFilterSet
N#else
N#define MAP_EMACHashFilterSet                                                 \
N        EMACHashFilterSet
X#define MAP_EMACHashFilterSet                                                         EMACHashFilterSet
N#endif
N#ifdef ROM_EMACNumAddrGet
S#define MAP_EMACNumAddrGet                                                    \
S        ROM_EMACNumAddrGet
X#define MAP_EMACNumAddrGet                                                            ROM_EMACNumAddrGet
N#else
N#define MAP_EMACNumAddrGet                                                    \
N        EMACNumAddrGet
X#define MAP_EMACNumAddrGet                                                            EMACNumAddrGet
N#endif
N#ifdef ROM_EMACPHYExtendedRead
S#define MAP_EMACPHYExtendedRead                                               \
S        ROM_EMACPHYExtendedRead
X#define MAP_EMACPHYExtendedRead                                                       ROM_EMACPHYExtendedRead
N#else
N#define MAP_EMACPHYExtendedRead                                               \
N        EMACPHYExtendedRead
X#define MAP_EMACPHYExtendedRead                                                       EMACPHYExtendedRead
N#endif
N#ifdef ROM_EMACPHYExtendedWrite
S#define MAP_EMACPHYExtendedWrite                                              \
S        ROM_EMACPHYExtendedWrite
X#define MAP_EMACPHYExtendedWrite                                                      ROM_EMACPHYExtendedWrite
N#else
N#define MAP_EMACPHYExtendedWrite                                              \
N        EMACPHYExtendedWrite
X#define MAP_EMACPHYExtendedWrite                                                      EMACPHYExtendedWrite
N#endif
N#ifdef ROM_EMACPowerManagementControlGet
S#define MAP_EMACPowerManagementControlGet                                     \
S        ROM_EMACPowerManagementControlGet
X#define MAP_EMACPowerManagementControlGet                                             ROM_EMACPowerManagementControlGet
N#else
N#define MAP_EMACPowerManagementControlGet                                     \
N        EMACPowerManagementControlGet
X#define MAP_EMACPowerManagementControlGet                                             EMACPowerManagementControlGet
N#endif
N#ifdef ROM_EMACPowerManagementControlSet
S#define MAP_EMACPowerManagementControlSet                                     \
S        ROM_EMACPowerManagementControlSet
X#define MAP_EMACPowerManagementControlSet                                             ROM_EMACPowerManagementControlSet
N#else
N#define MAP_EMACPowerManagementControlSet                                     \
N        EMACPowerManagementControlSet
X#define MAP_EMACPowerManagementControlSet                                             EMACPowerManagementControlSet
N#endif
N#ifdef ROM_EMACPowerManagementStatusGet
S#define MAP_EMACPowerManagementStatusGet                                      \
S        ROM_EMACPowerManagementStatusGet
X#define MAP_EMACPowerManagementStatusGet                                              ROM_EMACPowerManagementStatusGet
N#else
N#define MAP_EMACPowerManagementStatusGet                                      \
N        EMACPowerManagementStatusGet
X#define MAP_EMACPowerManagementStatusGet                                              EMACPowerManagementStatusGet
N#endif
N#ifdef ROM_EMACRemoteWakeUpFrameFilterGet
S#define MAP_EMACRemoteWakeUpFrameFilterGet                                    \
S        ROM_EMACRemoteWakeUpFrameFilterGet
X#define MAP_EMACRemoteWakeUpFrameFilterGet                                            ROM_EMACRemoteWakeUpFrameFilterGet
N#else
N#define MAP_EMACRemoteWakeUpFrameFilterGet                                    \
N        EMACRemoteWakeUpFrameFilterGet
X#define MAP_EMACRemoteWakeUpFrameFilterGet                                            EMACRemoteWakeUpFrameFilterGet
N#endif
N#ifdef ROM_EMACRemoteWakeUpFrameFilterSet
S#define MAP_EMACRemoteWakeUpFrameFilterSet                                    \
S        ROM_EMACRemoteWakeUpFrameFilterSet
X#define MAP_EMACRemoteWakeUpFrameFilterSet                                            ROM_EMACRemoteWakeUpFrameFilterSet
N#else
N#define MAP_EMACRemoteWakeUpFrameFilterSet                                    \
N        EMACRemoteWakeUpFrameFilterSet
X#define MAP_EMACRemoteWakeUpFrameFilterSet                                            EMACRemoteWakeUpFrameFilterSet
N#endif
N#ifdef ROM_EMACTimestampAddendSet
S#define MAP_EMACTimestampAddendSet                                            \
S        ROM_EMACTimestampAddendSet
X#define MAP_EMACTimestampAddendSet                                                    ROM_EMACTimestampAddendSet
N#else
N#define MAP_EMACTimestampAddendSet                                            \
N        EMACTimestampAddendSet
X#define MAP_EMACTimestampAddendSet                                                    EMACTimestampAddendSet
N#endif
N#ifdef ROM_EMACTimestampConfigGet
S#define MAP_EMACTimestampConfigGet                                            \
S        ROM_EMACTimestampConfigGet
X#define MAP_EMACTimestampConfigGet                                                    ROM_EMACTimestampConfigGet
N#else
N#define MAP_EMACTimestampConfigGet                                            \
N        EMACTimestampConfigGet
X#define MAP_EMACTimestampConfigGet                                                    EMACTimestampConfigGet
N#endif
N#ifdef ROM_EMACTimestampConfigSet
S#define MAP_EMACTimestampConfigSet                                            \
S        ROM_EMACTimestampConfigSet
X#define MAP_EMACTimestampConfigSet                                                    ROM_EMACTimestampConfigSet
N#else
N#define MAP_EMACTimestampConfigSet                                            \
N        EMACTimestampConfigSet
X#define MAP_EMACTimestampConfigSet                                                    EMACTimestampConfigSet
N#endif
N#ifdef ROM_EMACTimestampDisable
S#define MAP_EMACTimestampDisable                                              \
S        ROM_EMACTimestampDisable
X#define MAP_EMACTimestampDisable                                                      ROM_EMACTimestampDisable
N#else
N#define MAP_EMACTimestampDisable                                              \
N        EMACTimestampDisable
X#define MAP_EMACTimestampDisable                                                      EMACTimestampDisable
N#endif
N#ifdef ROM_EMACTimestampEnable
S#define MAP_EMACTimestampEnable                                               \
S        ROM_EMACTimestampEnable
X#define MAP_EMACTimestampEnable                                                       ROM_EMACTimestampEnable
N#else
N#define MAP_EMACTimestampEnable                                               \
N        EMACTimestampEnable
X#define MAP_EMACTimestampEnable                                                       EMACTimestampEnable
N#endif
N#ifdef ROM_EMACTimestampIntStatus
S#define MAP_EMACTimestampIntStatus                                            \
S        ROM_EMACTimestampIntStatus
X#define MAP_EMACTimestampIntStatus                                                    ROM_EMACTimestampIntStatus
N#else
N#define MAP_EMACTimestampIntStatus                                            \
N        EMACTimestampIntStatus
X#define MAP_EMACTimestampIntStatus                                                    EMACTimestampIntStatus
N#endif
N#ifdef ROM_EMACTimestampPPSCommand
S#define MAP_EMACTimestampPPSCommand                                           \
S        ROM_EMACTimestampPPSCommand
X#define MAP_EMACTimestampPPSCommand                                                   ROM_EMACTimestampPPSCommand
N#else
N#define MAP_EMACTimestampPPSCommand                                           \
N        EMACTimestampPPSCommand
X#define MAP_EMACTimestampPPSCommand                                                   EMACTimestampPPSCommand
N#endif
N#ifdef ROM_EMACTimestampPPSCommandModeSet
S#define MAP_EMACTimestampPPSCommandModeSet                                    \
S        ROM_EMACTimestampPPSCommandModeSet
X#define MAP_EMACTimestampPPSCommandModeSet                                            ROM_EMACTimestampPPSCommandModeSet
N#else
N#define MAP_EMACTimestampPPSCommandModeSet                                    \
N        EMACTimestampPPSCommandModeSet
X#define MAP_EMACTimestampPPSCommandModeSet                                            EMACTimestampPPSCommandModeSet
N#endif
N#ifdef ROM_EMACTimestampPPSPeriodSet
S#define MAP_EMACTimestampPPSPeriodSet                                         \
S        ROM_EMACTimestampPPSPeriodSet
X#define MAP_EMACTimestampPPSPeriodSet                                                 ROM_EMACTimestampPPSPeriodSet
N#else
N#define MAP_EMACTimestampPPSPeriodSet                                         \
N        EMACTimestampPPSPeriodSet
X#define MAP_EMACTimestampPPSPeriodSet                                                 EMACTimestampPPSPeriodSet
N#endif
N#ifdef ROM_EMACTimestampPPSSimpleModeSet
S#define MAP_EMACTimestampPPSSimpleModeSet                                     \
S        ROM_EMACTimestampPPSSimpleModeSet
X#define MAP_EMACTimestampPPSSimpleModeSet                                             ROM_EMACTimestampPPSSimpleModeSet
N#else
N#define MAP_EMACTimestampPPSSimpleModeSet                                     \
N        EMACTimestampPPSSimpleModeSet
X#define MAP_EMACTimestampPPSSimpleModeSet                                             EMACTimestampPPSSimpleModeSet
N#endif
N#ifdef ROM_EMACTimestampSysTimeGet
S#define MAP_EMACTimestampSysTimeGet                                           \
S        ROM_EMACTimestampSysTimeGet
X#define MAP_EMACTimestampSysTimeGet                                                   ROM_EMACTimestampSysTimeGet
N#else
N#define MAP_EMACTimestampSysTimeGet                                           \
N        EMACTimestampSysTimeGet
X#define MAP_EMACTimestampSysTimeGet                                                   EMACTimestampSysTimeGet
N#endif
N#ifdef ROM_EMACTimestampSysTimeSet
S#define MAP_EMACTimestampSysTimeSet                                           \
S        ROM_EMACTimestampSysTimeSet
X#define MAP_EMACTimestampSysTimeSet                                                   ROM_EMACTimestampSysTimeSet
N#else
N#define MAP_EMACTimestampSysTimeSet                                           \
N        EMACTimestampSysTimeSet
X#define MAP_EMACTimestampSysTimeSet                                                   EMACTimestampSysTimeSet
N#endif
N#ifdef ROM_EMACTimestampSysTimeUpdate
S#define MAP_EMACTimestampSysTimeUpdate                                        \
S        ROM_EMACTimestampSysTimeUpdate
X#define MAP_EMACTimestampSysTimeUpdate                                                ROM_EMACTimestampSysTimeUpdate
N#else
N#define MAP_EMACTimestampSysTimeUpdate                                        \
N        EMACTimestampSysTimeUpdate
X#define MAP_EMACTimestampSysTimeUpdate                                                EMACTimestampSysTimeUpdate
N#endif
N#ifdef ROM_EMACTimestampTargetIntDisable
S#define MAP_EMACTimestampTargetIntDisable                                     \
S        ROM_EMACTimestampTargetIntDisable
X#define MAP_EMACTimestampTargetIntDisable                                             ROM_EMACTimestampTargetIntDisable
N#else
N#define MAP_EMACTimestampTargetIntDisable                                     \
N        EMACTimestampTargetIntDisable
X#define MAP_EMACTimestampTargetIntDisable                                             EMACTimestampTargetIntDisable
N#endif
N#ifdef ROM_EMACTimestampTargetIntEnable
S#define MAP_EMACTimestampTargetIntEnable                                      \
S        ROM_EMACTimestampTargetIntEnable
X#define MAP_EMACTimestampTargetIntEnable                                              ROM_EMACTimestampTargetIntEnable
N#else
N#define MAP_EMACTimestampTargetIntEnable                                      \
N        EMACTimestampTargetIntEnable
X#define MAP_EMACTimestampTargetIntEnable                                              EMACTimestampTargetIntEnable
N#endif
N#ifdef ROM_EMACTimestampTargetSet
S#define MAP_EMACTimestampTargetSet                                            \
S        ROM_EMACTimestampTargetSet
X#define MAP_EMACTimestampTargetSet                                                    ROM_EMACTimestampTargetSet
N#else
N#define MAP_EMACTimestampTargetSet                                            \
N        EMACTimestampTargetSet
X#define MAP_EMACTimestampTargetSet                                                    EMACTimestampTargetSet
N#endif
N#ifdef ROM_EMACVLANHashFilterBitCalculate
S#define MAP_EMACVLANHashFilterBitCalculate                                    \
S        ROM_EMACVLANHashFilterBitCalculate
X#define MAP_EMACVLANHashFilterBitCalculate                                            ROM_EMACVLANHashFilterBitCalculate
N#else
N#define MAP_EMACVLANHashFilterBitCalculate                                    \
N        EMACVLANHashFilterBitCalculate
X#define MAP_EMACVLANHashFilterBitCalculate                                            EMACVLANHashFilterBitCalculate
N#endif
N#ifdef ROM_EMACVLANHashFilterGet
S#define MAP_EMACVLANHashFilterGet                                             \
S        ROM_EMACVLANHashFilterGet
X#define MAP_EMACVLANHashFilterGet                                                     ROM_EMACVLANHashFilterGet
N#else
N#define MAP_EMACVLANHashFilterGet                                             \
N        EMACVLANHashFilterGet
X#define MAP_EMACVLANHashFilterGet                                                     EMACVLANHashFilterGet
N#endif
N#ifdef ROM_EMACVLANHashFilterSet
S#define MAP_EMACVLANHashFilterSet                                             \
S        ROM_EMACVLANHashFilterSet
X#define MAP_EMACVLANHashFilterSet                                                     ROM_EMACVLANHashFilterSet
N#else
N#define MAP_EMACVLANHashFilterSet                                             \
N        EMACVLANHashFilterSet
X#define MAP_EMACVLANHashFilterSet                                                     EMACVLANHashFilterSet
N#endif
N#ifdef ROM_EMACVLANRxConfigGet
S#define MAP_EMACVLANRxConfigGet                                               \
S        ROM_EMACVLANRxConfigGet
X#define MAP_EMACVLANRxConfigGet                                                       ROM_EMACVLANRxConfigGet
N#else
N#define MAP_EMACVLANRxConfigGet                                               \
N        EMACVLANRxConfigGet
X#define MAP_EMACVLANRxConfigGet                                                       EMACVLANRxConfigGet
N#endif
N#ifdef ROM_EMACVLANRxConfigSet
S#define MAP_EMACVLANRxConfigSet                                               \
S        ROM_EMACVLANRxConfigSet
X#define MAP_EMACVLANRxConfigSet                                                       ROM_EMACVLANRxConfigSet
N#else
N#define MAP_EMACVLANRxConfigSet                                               \
N        EMACVLANRxConfigSet
X#define MAP_EMACVLANRxConfigSet                                                       EMACVLANRxConfigSet
N#endif
N#ifdef ROM_EMACVLANTxConfigGet
S#define MAP_EMACVLANTxConfigGet                                               \
S        ROM_EMACVLANTxConfigGet
X#define MAP_EMACVLANTxConfigGet                                                       ROM_EMACVLANTxConfigGet
N#else
N#define MAP_EMACVLANTxConfigGet                                               \
N        EMACVLANTxConfigGet
X#define MAP_EMACVLANTxConfigGet                                                       EMACVLANTxConfigGet
N#endif
N#ifdef ROM_EMACVLANTxConfigSet
S#define MAP_EMACVLANTxConfigSet                                               \
S        ROM_EMACVLANTxConfigSet
X#define MAP_EMACVLANTxConfigSet                                                       ROM_EMACVLANTxConfigSet
N#else
N#define MAP_EMACVLANTxConfigSet                                               \
N        EMACVLANTxConfigSet
X#define MAP_EMACVLANTxConfigSet                                                       EMACVLANTxConfigSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Flash API.
N//
N//*****************************************************************************
N#ifdef ROM_FlashProgram
N#define MAP_FlashProgram                                                      \
N        ROM_FlashProgram
X#define MAP_FlashProgram                                                              ROM_FlashProgram
N#else
S#define MAP_FlashProgram                                                      \
S        FlashProgram
X#define MAP_FlashProgram                                                              FlashProgram
N#endif
N#ifdef ROM_FlashErase
N#define MAP_FlashErase                                                        \
N        ROM_FlashErase
X#define MAP_FlashErase                                                                ROM_FlashErase
N#else
S#define MAP_FlashErase                                                        \
S        FlashErase
X#define MAP_FlashErase                                                                FlashErase
N#endif
N#ifdef ROM_FlashProtectGet
N#define MAP_FlashProtectGet                                                   \
N        ROM_FlashProtectGet
X#define MAP_FlashProtectGet                                                           ROM_FlashProtectGet
N#else
S#define MAP_FlashProtectGet                                                   \
S        FlashProtectGet
X#define MAP_FlashProtectGet                                                           FlashProtectGet
N#endif
N#ifdef ROM_FlashProtectSet
N#define MAP_FlashProtectSet                                                   \
N        ROM_FlashProtectSet
X#define MAP_FlashProtectSet                                                           ROM_FlashProtectSet
N#else
S#define MAP_FlashProtectSet                                                   \
S        FlashProtectSet
X#define MAP_FlashProtectSet                                                           FlashProtectSet
N#endif
N#ifdef ROM_FlashProtectSave
N#define MAP_FlashProtectSave                                                  \
N        ROM_FlashProtectSave
X#define MAP_FlashProtectSave                                                          ROM_FlashProtectSave
N#else
S#define MAP_FlashProtectSave                                                  \
S        FlashProtectSave
X#define MAP_FlashProtectSave                                                          FlashProtectSave
N#endif
N#ifdef ROM_FlashUserGet
N#define MAP_FlashUserGet                                                      \
N        ROM_FlashUserGet
X#define MAP_FlashUserGet                                                              ROM_FlashUserGet
N#else
S#define MAP_FlashUserGet                                                      \
S        FlashUserGet
X#define MAP_FlashUserGet                                                              FlashUserGet
N#endif
N#ifdef ROM_FlashUserSet
N#define MAP_FlashUserSet                                                      \
N        ROM_FlashUserSet
X#define MAP_FlashUserSet                                                              ROM_FlashUserSet
N#else
S#define MAP_FlashUserSet                                                      \
S        FlashUserSet
X#define MAP_FlashUserSet                                                              FlashUserSet
N#endif
N#ifdef ROM_FlashUserSave
N#define MAP_FlashUserSave                                                     \
N        ROM_FlashUserSave
X#define MAP_FlashUserSave                                                             ROM_FlashUserSave
N#else
S#define MAP_FlashUserSave                                                     \
S        FlashUserSave
X#define MAP_FlashUserSave                                                             FlashUserSave
N#endif
N#ifdef ROM_FlashIntEnable
N#define MAP_FlashIntEnable                                                    \
N        ROM_FlashIntEnable
X#define MAP_FlashIntEnable                                                            ROM_FlashIntEnable
N#else
S#define MAP_FlashIntEnable                                                    \
S        FlashIntEnable
X#define MAP_FlashIntEnable                                                            FlashIntEnable
N#endif
N#ifdef ROM_FlashIntDisable
N#define MAP_FlashIntDisable                                                   \
N        ROM_FlashIntDisable
X#define MAP_FlashIntDisable                                                           ROM_FlashIntDisable
N#else
S#define MAP_FlashIntDisable                                                   \
S        FlashIntDisable
X#define MAP_FlashIntDisable                                                           FlashIntDisable
N#endif
N#ifdef ROM_FlashIntStatus
N#define MAP_FlashIntStatus                                                    \
N        ROM_FlashIntStatus
X#define MAP_FlashIntStatus                                                            ROM_FlashIntStatus
N#else
S#define MAP_FlashIntStatus                                                    \
S        FlashIntStatus
X#define MAP_FlashIntStatus                                                            FlashIntStatus
N#endif
N#ifdef ROM_FlashIntClear
N#define MAP_FlashIntClear                                                     \
N        ROM_FlashIntClear
X#define MAP_FlashIntClear                                                             ROM_FlashIntClear
N#else
S#define MAP_FlashIntClear                                                     \
S        FlashIntClear
X#define MAP_FlashIntClear                                                             FlashIntClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the FPU API.
N//
N//*****************************************************************************
N#ifdef ROM_FPUEnable
N#define MAP_FPUEnable                                                         \
N        ROM_FPUEnable
X#define MAP_FPUEnable                                                                 ROM_FPUEnable
N#else
S#define MAP_FPUEnable                                                         \
S        FPUEnable
X#define MAP_FPUEnable                                                                 FPUEnable
N#endif
N#ifdef ROM_FPUDisable
N#define MAP_FPUDisable                                                        \
N        ROM_FPUDisable
X#define MAP_FPUDisable                                                                ROM_FPUDisable
N#else
S#define MAP_FPUDisable                                                        \
S        FPUDisable
X#define MAP_FPUDisable                                                                FPUDisable
N#endif
N#ifdef ROM_FPUFlushToZeroModeSet
N#define MAP_FPUFlushToZeroModeSet                                             \
N        ROM_FPUFlushToZeroModeSet
X#define MAP_FPUFlushToZeroModeSet                                                     ROM_FPUFlushToZeroModeSet
N#else
S#define MAP_FPUFlushToZeroModeSet                                             \
S        FPUFlushToZeroModeSet
X#define MAP_FPUFlushToZeroModeSet                                                     FPUFlushToZeroModeSet
N#endif
N#ifdef ROM_FPUHalfPrecisionModeSet
N#define MAP_FPUHalfPrecisionModeSet                                           \
N        ROM_FPUHalfPrecisionModeSet
X#define MAP_FPUHalfPrecisionModeSet                                                   ROM_FPUHalfPrecisionModeSet
N#else
S#define MAP_FPUHalfPrecisionModeSet                                           \
S        FPUHalfPrecisionModeSet
X#define MAP_FPUHalfPrecisionModeSet                                                   FPUHalfPrecisionModeSet
N#endif
N#ifdef ROM_FPULazyStackingEnable
N#define MAP_FPULazyStackingEnable                                             \
N        ROM_FPULazyStackingEnable
X#define MAP_FPULazyStackingEnable                                                     ROM_FPULazyStackingEnable
N#else
S#define MAP_FPULazyStackingEnable                                             \
S        FPULazyStackingEnable
X#define MAP_FPULazyStackingEnable                                                     FPULazyStackingEnable
N#endif
N#ifdef ROM_FPUNaNModeSet
N#define MAP_FPUNaNModeSet                                                     \
N        ROM_FPUNaNModeSet
X#define MAP_FPUNaNModeSet                                                             ROM_FPUNaNModeSet
N#else
S#define MAP_FPUNaNModeSet                                                     \
S        FPUNaNModeSet
X#define MAP_FPUNaNModeSet                                                             FPUNaNModeSet
N#endif
N#ifdef ROM_FPURoundingModeSet
N#define MAP_FPURoundingModeSet                                                \
N        ROM_FPURoundingModeSet
X#define MAP_FPURoundingModeSet                                                        ROM_FPURoundingModeSet
N#else
S#define MAP_FPURoundingModeSet                                                \
S        FPURoundingModeSet
X#define MAP_FPURoundingModeSet                                                        FPURoundingModeSet
N#endif
N#ifdef ROM_FPUStackingDisable
N#define MAP_FPUStackingDisable                                                \
N        ROM_FPUStackingDisable
X#define MAP_FPUStackingDisable                                                        ROM_FPUStackingDisable
N#else
S#define MAP_FPUStackingDisable                                                \
S        FPUStackingDisable
X#define MAP_FPUStackingDisable                                                        FPUStackingDisable
N#endif
N#ifdef ROM_FPUStackingEnable
N#define MAP_FPUStackingEnable                                                 \
N        ROM_FPUStackingEnable
X#define MAP_FPUStackingEnable                                                         ROM_FPUStackingEnable
N#else
S#define MAP_FPUStackingEnable                                                 \
S        FPUStackingEnable
X#define MAP_FPUStackingEnable                                                         FPUStackingEnable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the GPIO API.
N//
N//*****************************************************************************
N#ifdef ROM_GPIOPinWrite
N#define MAP_GPIOPinWrite                                                      \
N        ROM_GPIOPinWrite
X#define MAP_GPIOPinWrite                                                              ROM_GPIOPinWrite
N#else
S#define MAP_GPIOPinWrite                                                      \
S        GPIOPinWrite
X#define MAP_GPIOPinWrite                                                              GPIOPinWrite
N#endif
N#ifdef ROM_GPIODirModeSet
N#define MAP_GPIODirModeSet                                                    \
N        ROM_GPIODirModeSet
X#define MAP_GPIODirModeSet                                                            ROM_GPIODirModeSet
N#else
S#define MAP_GPIODirModeSet                                                    \
S        GPIODirModeSet
X#define MAP_GPIODirModeSet                                                            GPIODirModeSet
N#endif
N#ifdef ROM_GPIODirModeGet
N#define MAP_GPIODirModeGet                                                    \
N        ROM_GPIODirModeGet
X#define MAP_GPIODirModeGet                                                            ROM_GPIODirModeGet
N#else
S#define MAP_GPIODirModeGet                                                    \
S        GPIODirModeGet
X#define MAP_GPIODirModeGet                                                            GPIODirModeGet
N#endif
N#ifdef ROM_GPIOIntTypeSet
N#define MAP_GPIOIntTypeSet                                                    \
N        ROM_GPIOIntTypeSet
X#define MAP_GPIOIntTypeSet                                                            ROM_GPIOIntTypeSet
N#else
S#define MAP_GPIOIntTypeSet                                                    \
S        GPIOIntTypeSet
X#define MAP_GPIOIntTypeSet                                                            GPIOIntTypeSet
N#endif
N#ifdef ROM_GPIOIntTypeGet
N#define MAP_GPIOIntTypeGet                                                    \
N        ROM_GPIOIntTypeGet
X#define MAP_GPIOIntTypeGet                                                            ROM_GPIOIntTypeGet
N#else
S#define MAP_GPIOIntTypeGet                                                    \
S        GPIOIntTypeGet
X#define MAP_GPIOIntTypeGet                                                            GPIOIntTypeGet
N#endif
N#ifdef ROM_GPIOPadConfigSet
N#define MAP_GPIOPadConfigSet                                                  \
N        ROM_GPIOPadConfigSet
X#define MAP_GPIOPadConfigSet                                                          ROM_GPIOPadConfigSet
N#else
S#define MAP_GPIOPadConfigSet                                                  \
S        GPIOPadConfigSet
X#define MAP_GPIOPadConfigSet                                                          GPIOPadConfigSet
N#endif
N#ifdef ROM_GPIOPadConfigGet
N#define MAP_GPIOPadConfigGet                                                  \
N        ROM_GPIOPadConfigGet
X#define MAP_GPIOPadConfigGet                                                          ROM_GPIOPadConfigGet
N#else
S#define MAP_GPIOPadConfigGet                                                  \
S        GPIOPadConfigGet
X#define MAP_GPIOPadConfigGet                                                          GPIOPadConfigGet
N#endif
N#ifdef ROM_GPIOPinRead
N#define MAP_GPIOPinRead                                                       \
N        ROM_GPIOPinRead
X#define MAP_GPIOPinRead                                                               ROM_GPIOPinRead
N#else
S#define MAP_GPIOPinRead                                                       \
S        GPIOPinRead
X#define MAP_GPIOPinRead                                                               GPIOPinRead
N#endif
N#ifdef ROM_GPIOPinTypeCAN
N#define MAP_GPIOPinTypeCAN                                                    \
N        ROM_GPIOPinTypeCAN
X#define MAP_GPIOPinTypeCAN                                                            ROM_GPIOPinTypeCAN
N#else
S#define MAP_GPIOPinTypeCAN                                                    \
S        GPIOPinTypeCAN
X#define MAP_GPIOPinTypeCAN                                                            GPIOPinTypeCAN
N#endif
N#ifdef ROM_GPIOPinTypeComparator
N#define MAP_GPIOPinTypeComparator                                             \
N        ROM_GPIOPinTypeComparator
X#define MAP_GPIOPinTypeComparator                                                     ROM_GPIOPinTypeComparator
N#else
S#define MAP_GPIOPinTypeComparator                                             \
S        GPIOPinTypeComparator
X#define MAP_GPIOPinTypeComparator                                                     GPIOPinTypeComparator
N#endif
N#ifdef ROM_GPIOPinTypeGPIOInput
N#define MAP_GPIOPinTypeGPIOInput                                              \
N        ROM_GPIOPinTypeGPIOInput
X#define MAP_GPIOPinTypeGPIOInput                                                      ROM_GPIOPinTypeGPIOInput
N#else
S#define MAP_GPIOPinTypeGPIOInput                                              \
S        GPIOPinTypeGPIOInput
X#define MAP_GPIOPinTypeGPIOInput                                                      GPIOPinTypeGPIOInput
N#endif
N#ifdef ROM_GPIOPinTypeGPIOOutput
N#define MAP_GPIOPinTypeGPIOOutput                                             \
N        ROM_GPIOPinTypeGPIOOutput
X#define MAP_GPIOPinTypeGPIOOutput                                                     ROM_GPIOPinTypeGPIOOutput
N#else
S#define MAP_GPIOPinTypeGPIOOutput                                             \
S        GPIOPinTypeGPIOOutput
X#define MAP_GPIOPinTypeGPIOOutput                                                     GPIOPinTypeGPIOOutput
N#endif
N#ifdef ROM_GPIOPinTypeI2C
N#define MAP_GPIOPinTypeI2C                                                    \
N        ROM_GPIOPinTypeI2C
X#define MAP_GPIOPinTypeI2C                                                            ROM_GPIOPinTypeI2C
N#else
S#define MAP_GPIOPinTypeI2C                                                    \
S        GPIOPinTypeI2C
X#define MAP_GPIOPinTypeI2C                                                            GPIOPinTypeI2C
N#endif
N#ifdef ROM_GPIOPinTypePWM
N#define MAP_GPIOPinTypePWM                                                    \
N        ROM_GPIOPinTypePWM
X#define MAP_GPIOPinTypePWM                                                            ROM_GPIOPinTypePWM
N#else
S#define MAP_GPIOPinTypePWM                                                    \
S        GPIOPinTypePWM
X#define MAP_GPIOPinTypePWM                                                            GPIOPinTypePWM
N#endif
N#ifdef ROM_GPIOPinTypeQEI
N#define MAP_GPIOPinTypeQEI                                                    \
N        ROM_GPIOPinTypeQEI
X#define MAP_GPIOPinTypeQEI                                                            ROM_GPIOPinTypeQEI
N#else
S#define MAP_GPIOPinTypeQEI                                                    \
S        GPIOPinTypeQEI
X#define MAP_GPIOPinTypeQEI                                                            GPIOPinTypeQEI
N#endif
N#ifdef ROM_GPIOPinTypeSSI
N#define MAP_GPIOPinTypeSSI                                                    \
N        ROM_GPIOPinTypeSSI
X#define MAP_GPIOPinTypeSSI                                                            ROM_GPIOPinTypeSSI
N#else
S#define MAP_GPIOPinTypeSSI                                                    \
S        GPIOPinTypeSSI
X#define MAP_GPIOPinTypeSSI                                                            GPIOPinTypeSSI
N#endif
N#ifdef ROM_GPIOPinTypeTimer
N#define MAP_GPIOPinTypeTimer                                                  \
N        ROM_GPIOPinTypeTimer
X#define MAP_GPIOPinTypeTimer                                                          ROM_GPIOPinTypeTimer
N#else
S#define MAP_GPIOPinTypeTimer                                                  \
S        GPIOPinTypeTimer
X#define MAP_GPIOPinTypeTimer                                                          GPIOPinTypeTimer
N#endif
N#ifdef ROM_GPIOPinTypeUART
N#define MAP_GPIOPinTypeUART                                                   \
N        ROM_GPIOPinTypeUART
X#define MAP_GPIOPinTypeUART                                                           ROM_GPIOPinTypeUART
N#else
S#define MAP_GPIOPinTypeUART                                                   \
S        GPIOPinTypeUART
X#define MAP_GPIOPinTypeUART                                                           GPIOPinTypeUART
N#endif
N#ifdef ROM_GPIOPinTypeGPIOOutputOD
N#define MAP_GPIOPinTypeGPIOOutputOD                                           \
N        ROM_GPIOPinTypeGPIOOutputOD
X#define MAP_GPIOPinTypeGPIOOutputOD                                                   ROM_GPIOPinTypeGPIOOutputOD
N#else
S#define MAP_GPIOPinTypeGPIOOutputOD                                           \
S        GPIOPinTypeGPIOOutputOD
X#define MAP_GPIOPinTypeGPIOOutputOD                                                   GPIOPinTypeGPIOOutputOD
N#endif
N#ifdef ROM_GPIOPinTypeADC
N#define MAP_GPIOPinTypeADC                                                    \
N        ROM_GPIOPinTypeADC
X#define MAP_GPIOPinTypeADC                                                            ROM_GPIOPinTypeADC
N#else
S#define MAP_GPIOPinTypeADC                                                    \
S        GPIOPinTypeADC
X#define MAP_GPIOPinTypeADC                                                            GPIOPinTypeADC
N#endif
N#ifdef ROM_GPIOPinTypeUSBDigital
N#define MAP_GPIOPinTypeUSBDigital                                             \
N        ROM_GPIOPinTypeUSBDigital
X#define MAP_GPIOPinTypeUSBDigital                                                     ROM_GPIOPinTypeUSBDigital
N#else
S#define MAP_GPIOPinTypeUSBDigital                                             \
S        GPIOPinTypeUSBDigital
X#define MAP_GPIOPinTypeUSBDigital                                                     GPIOPinTypeUSBDigital
N#endif
N#ifdef ROM_GPIOPinConfigure
N#define MAP_GPIOPinConfigure                                                  \
N        ROM_GPIOPinConfigure
X#define MAP_GPIOPinConfigure                                                          ROM_GPIOPinConfigure
N#else
S#define MAP_GPIOPinConfigure                                                  \
S        GPIOPinConfigure
X#define MAP_GPIOPinConfigure                                                          GPIOPinConfigure
N#endif
N#ifdef ROM_GPIOPinTypeUSBAnalog
N#define MAP_GPIOPinTypeUSBAnalog                                              \
N        ROM_GPIOPinTypeUSBAnalog
X#define MAP_GPIOPinTypeUSBAnalog                                                      ROM_GPIOPinTypeUSBAnalog
N#else
S#define MAP_GPIOPinTypeUSBAnalog                                              \
S        GPIOPinTypeUSBAnalog
X#define MAP_GPIOPinTypeUSBAnalog                                                      GPIOPinTypeUSBAnalog
N#endif
N#ifdef ROM_GPIODMATriggerEnable
N#define MAP_GPIODMATriggerEnable                                              \
N        ROM_GPIODMATriggerEnable
X#define MAP_GPIODMATriggerEnable                                                      ROM_GPIODMATriggerEnable
N#else
S#define MAP_GPIODMATriggerEnable                                              \
S        GPIODMATriggerEnable
X#define MAP_GPIODMATriggerEnable                                                      GPIODMATriggerEnable
N#endif
N#ifdef ROM_GPIODMATriggerDisable
N#define MAP_GPIODMATriggerDisable                                             \
N        ROM_GPIODMATriggerDisable
X#define MAP_GPIODMATriggerDisable                                                     ROM_GPIODMATriggerDisable
N#else
S#define MAP_GPIODMATriggerDisable                                             \
S        GPIODMATriggerDisable
X#define MAP_GPIODMATriggerDisable                                                     GPIODMATriggerDisable
N#endif
N#ifdef ROM_GPIOADCTriggerEnable
N#define MAP_GPIOADCTriggerEnable                                              \
N        ROM_GPIOADCTriggerEnable
X#define MAP_GPIOADCTriggerEnable                                                      ROM_GPIOADCTriggerEnable
N#else
S#define MAP_GPIOADCTriggerEnable                                              \
S        GPIOADCTriggerEnable
X#define MAP_GPIOADCTriggerEnable                                                      GPIOADCTriggerEnable
N#endif
N#ifdef ROM_GPIOADCTriggerDisable
N#define MAP_GPIOADCTriggerDisable                                             \
N        ROM_GPIOADCTriggerDisable
X#define MAP_GPIOADCTriggerDisable                                                     ROM_GPIOADCTriggerDisable
N#else
S#define MAP_GPIOADCTriggerDisable                                             \
S        GPIOADCTriggerDisable
X#define MAP_GPIOADCTriggerDisable                                                     GPIOADCTriggerDisable
N#endif
N#ifdef ROM_GPIOPinTypeI2CSCL
N#define MAP_GPIOPinTypeI2CSCL                                                 \
N        ROM_GPIOPinTypeI2CSCL
X#define MAP_GPIOPinTypeI2CSCL                                                         ROM_GPIOPinTypeI2CSCL
N#else
S#define MAP_GPIOPinTypeI2CSCL                                                 \
S        GPIOPinTypeI2CSCL
X#define MAP_GPIOPinTypeI2CSCL                                                         GPIOPinTypeI2CSCL
N#endif
N#ifdef ROM_GPIOPinTypeOneWire
S#define MAP_GPIOPinTypeOneWire                                                \
S        ROM_GPIOPinTypeOneWire
X#define MAP_GPIOPinTypeOneWire                                                        ROM_GPIOPinTypeOneWire
N#else
N#define MAP_GPIOPinTypeOneWire                                                \
N        GPIOPinTypeOneWire
X#define MAP_GPIOPinTypeOneWire                                                        GPIOPinTypeOneWire
N#endif
N#ifdef ROM_GPIOPinTypeWakeHigh
S#define MAP_GPIOPinTypeWakeHigh                                               \
S        ROM_GPIOPinTypeWakeHigh
X#define MAP_GPIOPinTypeWakeHigh                                                       ROM_GPIOPinTypeWakeHigh
N#else
N#define MAP_GPIOPinTypeWakeHigh                                               \
N        GPIOPinTypeWakeHigh
X#define MAP_GPIOPinTypeWakeHigh                                                       GPIOPinTypeWakeHigh
N#endif
N#ifdef ROM_GPIOPinTypeWakeLow
S#define MAP_GPIOPinTypeWakeLow                                                \
S        ROM_GPIOPinTypeWakeLow
X#define MAP_GPIOPinTypeWakeLow                                                        ROM_GPIOPinTypeWakeLow
N#else
N#define MAP_GPIOPinTypeWakeLow                                                \
N        GPIOPinTypeWakeLow
X#define MAP_GPIOPinTypeWakeLow                                                        GPIOPinTypeWakeLow
N#endif
N#ifdef ROM_GPIOIntClear
S#define MAP_GPIOIntClear                                                      \
S        ROM_GPIOIntClear
X#define MAP_GPIOIntClear                                                              ROM_GPIOIntClear
N#else
N#define MAP_GPIOIntClear                                                      \
N        GPIOIntClear
X#define MAP_GPIOIntClear                                                              GPIOIntClear
N#endif
N#ifdef ROM_GPIOIntDisable
S#define MAP_GPIOIntDisable                                                    \
S        ROM_GPIOIntDisable
X#define MAP_GPIOIntDisable                                                            ROM_GPIOIntDisable
N#else
N#define MAP_GPIOIntDisable                                                    \
N        GPIOIntDisable
X#define MAP_GPIOIntDisable                                                            GPIOIntDisable
N#endif
N#ifdef ROM_GPIOIntEnable
S#define MAP_GPIOIntEnable                                                     \
S        ROM_GPIOIntEnable
X#define MAP_GPIOIntEnable                                                             ROM_GPIOIntEnable
N#else
N#define MAP_GPIOIntEnable                                                     \
N        GPIOIntEnable
X#define MAP_GPIOIntEnable                                                             GPIOIntEnable
N#endif
N#ifdef ROM_GPIOIntStatus
S#define MAP_GPIOIntStatus                                                     \
S        ROM_GPIOIntStatus
X#define MAP_GPIOIntStatus                                                             ROM_GPIOIntStatus
N#else
N#define MAP_GPIOIntStatus                                                     \
N        GPIOIntStatus
X#define MAP_GPIOIntStatus                                                             GPIOIntStatus
N#endif
N#ifdef ROM_GPIOPinWakeStatus
S#define MAP_GPIOPinWakeStatus                                                 \
S        ROM_GPIOPinWakeStatus
X#define MAP_GPIOPinWakeStatus                                                         ROM_GPIOPinWakeStatus
N#else
N#define MAP_GPIOPinWakeStatus                                                 \
N        GPIOPinWakeStatus
X#define MAP_GPIOPinWakeStatus                                                         GPIOPinWakeStatus
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Hibernate API.
N//
N//*****************************************************************************
N#ifdef ROM_HibernateIntClear
N#define MAP_HibernateIntClear                                                 \
N        ROM_HibernateIntClear
X#define MAP_HibernateIntClear                                                         ROM_HibernateIntClear
N#else
S#define MAP_HibernateIntClear                                                 \
S        HibernateIntClear
X#define MAP_HibernateIntClear                                                         HibernateIntClear
N#endif
N#ifdef ROM_HibernateEnableExpClk
N#define MAP_HibernateEnableExpClk                                             \
N        ROM_HibernateEnableExpClk
X#define MAP_HibernateEnableExpClk                                                     ROM_HibernateEnableExpClk
N#else
S#define MAP_HibernateEnableExpClk                                             \
S        HibernateEnableExpClk
X#define MAP_HibernateEnableExpClk                                                     HibernateEnableExpClk
N#endif
N#ifdef ROM_HibernateDisable
N#define MAP_HibernateDisable                                                  \
N        ROM_HibernateDisable
X#define MAP_HibernateDisable                                                          ROM_HibernateDisable
N#else
S#define MAP_HibernateDisable                                                  \
S        HibernateDisable
X#define MAP_HibernateDisable                                                          HibernateDisable
N#endif
N#ifdef ROM_HibernateRTCEnable
N#define MAP_HibernateRTCEnable                                                \
N        ROM_HibernateRTCEnable
X#define MAP_HibernateRTCEnable                                                        ROM_HibernateRTCEnable
N#else
S#define MAP_HibernateRTCEnable                                                \
S        HibernateRTCEnable
X#define MAP_HibernateRTCEnable                                                        HibernateRTCEnable
N#endif
N#ifdef ROM_HibernateRTCDisable
N#define MAP_HibernateRTCDisable                                               \
N        ROM_HibernateRTCDisable
X#define MAP_HibernateRTCDisable                                                       ROM_HibernateRTCDisable
N#else
S#define MAP_HibernateRTCDisable                                               \
S        HibernateRTCDisable
X#define MAP_HibernateRTCDisable                                                       HibernateRTCDisable
N#endif
N#ifdef ROM_HibernateWakeSet
N#define MAP_HibernateWakeSet                                                  \
N        ROM_HibernateWakeSet
X#define MAP_HibernateWakeSet                                                          ROM_HibernateWakeSet
N#else
S#define MAP_HibernateWakeSet                                                  \
S        HibernateWakeSet
X#define MAP_HibernateWakeSet                                                          HibernateWakeSet
N#endif
N#ifdef ROM_HibernateWakeGet
N#define MAP_HibernateWakeGet                                                  \
N        ROM_HibernateWakeGet
X#define MAP_HibernateWakeGet                                                          ROM_HibernateWakeGet
N#else
S#define MAP_HibernateWakeGet                                                  \
S        HibernateWakeGet
X#define MAP_HibernateWakeGet                                                          HibernateWakeGet
N#endif
N#ifdef ROM_HibernateLowBatSet
N#define MAP_HibernateLowBatSet                                                \
N        ROM_HibernateLowBatSet
X#define MAP_HibernateLowBatSet                                                        ROM_HibernateLowBatSet
N#else
S#define MAP_HibernateLowBatSet                                                \
S        HibernateLowBatSet
X#define MAP_HibernateLowBatSet                                                        HibernateLowBatSet
N#endif
N#ifdef ROM_HibernateLowBatGet
N#define MAP_HibernateLowBatGet                                                \
N        ROM_HibernateLowBatGet
X#define MAP_HibernateLowBatGet                                                        ROM_HibernateLowBatGet
N#else
S#define MAP_HibernateLowBatGet                                                \
S        HibernateLowBatGet
X#define MAP_HibernateLowBatGet                                                        HibernateLowBatGet
N#endif
N#ifdef ROM_HibernateRTCSet
N#define MAP_HibernateRTCSet                                                   \
N        ROM_HibernateRTCSet
X#define MAP_HibernateRTCSet                                                           ROM_HibernateRTCSet
N#else
S#define MAP_HibernateRTCSet                                                   \
S        HibernateRTCSet
X#define MAP_HibernateRTCSet                                                           HibernateRTCSet
N#endif
N#ifdef ROM_HibernateRTCGet
N#define MAP_HibernateRTCGet                                                   \
N        ROM_HibernateRTCGet
X#define MAP_HibernateRTCGet                                                           ROM_HibernateRTCGet
N#else
S#define MAP_HibernateRTCGet                                                   \
S        HibernateRTCGet
X#define MAP_HibernateRTCGet                                                           HibernateRTCGet
N#endif
N#ifdef ROM_HibernateRTCTrimSet
N#define MAP_HibernateRTCTrimSet                                               \
N        ROM_HibernateRTCTrimSet
X#define MAP_HibernateRTCTrimSet                                                       ROM_HibernateRTCTrimSet
N#else
S#define MAP_HibernateRTCTrimSet                                               \
S        HibernateRTCTrimSet
X#define MAP_HibernateRTCTrimSet                                                       HibernateRTCTrimSet
N#endif
N#ifdef ROM_HibernateRTCTrimGet
N#define MAP_HibernateRTCTrimGet                                               \
N        ROM_HibernateRTCTrimGet
X#define MAP_HibernateRTCTrimGet                                                       ROM_HibernateRTCTrimGet
N#else
S#define MAP_HibernateRTCTrimGet                                               \
S        HibernateRTCTrimGet
X#define MAP_HibernateRTCTrimGet                                                       HibernateRTCTrimGet
N#endif
N#ifdef ROM_HibernateDataSet
N#define MAP_HibernateDataSet                                                  \
N        ROM_HibernateDataSet
X#define MAP_HibernateDataSet                                                          ROM_HibernateDataSet
N#else
S#define MAP_HibernateDataSet                                                  \
S        HibernateDataSet
X#define MAP_HibernateDataSet                                                          HibernateDataSet
N#endif
N#ifdef ROM_HibernateDataGet
N#define MAP_HibernateDataGet                                                  \
N        ROM_HibernateDataGet
X#define MAP_HibernateDataGet                                                          ROM_HibernateDataGet
N#else
S#define MAP_HibernateDataGet                                                  \
S        HibernateDataGet
X#define MAP_HibernateDataGet                                                          HibernateDataGet
N#endif
N#ifdef ROM_HibernateRequest
N#define MAP_HibernateRequest                                                  \
N        ROM_HibernateRequest
X#define MAP_HibernateRequest                                                          ROM_HibernateRequest
N#else
S#define MAP_HibernateRequest                                                  \
S        HibernateRequest
X#define MAP_HibernateRequest                                                          HibernateRequest
N#endif
N#ifdef ROM_HibernateIntEnable
N#define MAP_HibernateIntEnable                                                \
N        ROM_HibernateIntEnable
X#define MAP_HibernateIntEnable                                                        ROM_HibernateIntEnable
N#else
S#define MAP_HibernateIntEnable                                                \
S        HibernateIntEnable
X#define MAP_HibernateIntEnable                                                        HibernateIntEnable
N#endif
N#ifdef ROM_HibernateIntDisable
N#define MAP_HibernateIntDisable                                               \
N        ROM_HibernateIntDisable
X#define MAP_HibernateIntDisable                                                       ROM_HibernateIntDisable
N#else
S#define MAP_HibernateIntDisable                                               \
S        HibernateIntDisable
X#define MAP_HibernateIntDisable                                                       HibernateIntDisable
N#endif
N#ifdef ROM_HibernateIntStatus
N#define MAP_HibernateIntStatus                                                \
N        ROM_HibernateIntStatus
X#define MAP_HibernateIntStatus                                                        ROM_HibernateIntStatus
N#else
S#define MAP_HibernateIntStatus                                                \
S        HibernateIntStatus
X#define MAP_HibernateIntStatus                                                        HibernateIntStatus
N#endif
N#ifdef ROM_HibernateIsActive
N#define MAP_HibernateIsActive                                                 \
N        ROM_HibernateIsActive
X#define MAP_HibernateIsActive                                                         ROM_HibernateIsActive
N#else
S#define MAP_HibernateIsActive                                                 \
S        HibernateIsActive
X#define MAP_HibernateIsActive                                                         HibernateIsActive
N#endif
N#ifdef ROM_HibernateRTCSSGet
N#define MAP_HibernateRTCSSGet                                                 \
N        ROM_HibernateRTCSSGet
X#define MAP_HibernateRTCSSGet                                                         ROM_HibernateRTCSSGet
N#else
S#define MAP_HibernateRTCSSGet                                                 \
S        HibernateRTCSSGet
X#define MAP_HibernateRTCSSGet                                                         HibernateRTCSSGet
N#endif
N#ifdef ROM_HibernateClockConfig
N#define MAP_HibernateClockConfig                                              \
N        ROM_HibernateClockConfig
X#define MAP_HibernateClockConfig                                                      ROM_HibernateClockConfig
N#else
S#define MAP_HibernateClockConfig                                              \
S        HibernateClockConfig
X#define MAP_HibernateClockConfig                                                      HibernateClockConfig
N#endif
N#ifdef ROM_HibernateBatCheckStart
N#define MAP_HibernateBatCheckStart                                            \
N        ROM_HibernateBatCheckStart
X#define MAP_HibernateBatCheckStart                                                    ROM_HibernateBatCheckStart
N#else
S#define MAP_HibernateBatCheckStart                                            \
S        HibernateBatCheckStart
X#define MAP_HibernateBatCheckStart                                                    HibernateBatCheckStart
N#endif
N#ifdef ROM_HibernateBatCheckDone
N#define MAP_HibernateBatCheckDone                                             \
N        ROM_HibernateBatCheckDone
X#define MAP_HibernateBatCheckDone                                                     ROM_HibernateBatCheckDone
N#else
S#define MAP_HibernateBatCheckDone                                             \
S        HibernateBatCheckDone
X#define MAP_HibernateBatCheckDone                                                     HibernateBatCheckDone
N#endif
N#ifdef ROM_HibernateGPIORetentionEnable
S#define MAP_HibernateGPIORetentionEnable                                      \
S        ROM_HibernateGPIORetentionEnable
X#define MAP_HibernateGPIORetentionEnable                                              ROM_HibernateGPIORetentionEnable
N#else
N#define MAP_HibernateGPIORetentionEnable                                      \
N        HibernateGPIORetentionEnable
X#define MAP_HibernateGPIORetentionEnable                                              HibernateGPIORetentionEnable
N#endif
N#ifdef ROM_HibernateGPIORetentionDisable
S#define MAP_HibernateGPIORetentionDisable                                     \
S        ROM_HibernateGPIORetentionDisable
X#define MAP_HibernateGPIORetentionDisable                                             ROM_HibernateGPIORetentionDisable
N#else
N#define MAP_HibernateGPIORetentionDisable                                     \
N        HibernateGPIORetentionDisable
X#define MAP_HibernateGPIORetentionDisable                                             HibernateGPIORetentionDisable
N#endif
N#ifdef ROM_HibernateGPIORetentionGet
S#define MAP_HibernateGPIORetentionGet                                         \
S        ROM_HibernateGPIORetentionGet
X#define MAP_HibernateGPIORetentionGet                                                 ROM_HibernateGPIORetentionGet
N#else
N#define MAP_HibernateGPIORetentionGet                                         \
N        HibernateGPIORetentionGet
X#define MAP_HibernateGPIORetentionGet                                                 HibernateGPIORetentionGet
N#endif
N#ifdef ROM_HibernateCounterMode
S#define MAP_HibernateCounterMode                                              \
S        ROM_HibernateCounterMode
X#define MAP_HibernateCounterMode                                                      ROM_HibernateCounterMode
N#else
N#define MAP_HibernateCounterMode                                              \
N        HibernateCounterMode
X#define MAP_HibernateCounterMode                                                      HibernateCounterMode
N#endif
N#ifdef ROM_HibernateCalendarSet
N#define MAP_HibernateCalendarSet                                              \
N        ROM_HibernateCalendarSet
X#define MAP_HibernateCalendarSet                                                      ROM_HibernateCalendarSet
N#else
S#define MAP_HibernateCalendarSet                                              \
S        HibernateCalendarSet
X#define MAP_HibernateCalendarSet                                                      HibernateCalendarSet
N#endif
N#ifdef ROM_HibernateCalendarGet
S#define MAP_HibernateCalendarGet                                              \
S        ROM_HibernateCalendarGet
X#define MAP_HibernateCalendarGet                                                      ROM_HibernateCalendarGet
N#else
N#define MAP_HibernateCalendarGet                                              \
N        HibernateCalendarGet
X#define MAP_HibernateCalendarGet                                                      HibernateCalendarGet
N#endif
N#ifdef ROM_HibernateCalendarMatchSet
S#define MAP_HibernateCalendarMatchSet                                         \
S        ROM_HibernateCalendarMatchSet
X#define MAP_HibernateCalendarMatchSet                                                 ROM_HibernateCalendarMatchSet
N#else
N#define MAP_HibernateCalendarMatchSet                                         \
N        HibernateCalendarMatchSet
X#define MAP_HibernateCalendarMatchSet                                                 HibernateCalendarMatchSet
N#endif
N#ifdef ROM_HibernateCalendarMatchGet
S#define MAP_HibernateCalendarMatchGet                                         \
S        ROM_HibernateCalendarMatchGet
X#define MAP_HibernateCalendarMatchGet                                                 ROM_HibernateCalendarMatchGet
N#else
N#define MAP_HibernateCalendarMatchGet                                         \
N        HibernateCalendarMatchGet
X#define MAP_HibernateCalendarMatchGet                                                 HibernateCalendarMatchGet
N#endif
N#ifdef ROM_HibernateTamperDisable
S#define MAP_HibernateTamperDisable                                            \
S        ROM_HibernateTamperDisable
X#define MAP_HibernateTamperDisable                                                    ROM_HibernateTamperDisable
N#else
N#define MAP_HibernateTamperDisable                                            \
N        HibernateTamperDisable
X#define MAP_HibernateTamperDisable                                                    HibernateTamperDisable
N#endif
N#ifdef ROM_HibernateTamperEnable
S#define MAP_HibernateTamperEnable                                             \
S        ROM_HibernateTamperEnable
X#define MAP_HibernateTamperEnable                                                     ROM_HibernateTamperEnable
N#else
N#define MAP_HibernateTamperEnable                                             \
N        HibernateTamperEnable
X#define MAP_HibernateTamperEnable                                                     HibernateTamperEnable
N#endif
N#ifdef ROM_HibernateTamperEventsClear
S#define MAP_HibernateTamperEventsClear                                        \
S        ROM_HibernateTamperEventsClear
X#define MAP_HibernateTamperEventsClear                                                ROM_HibernateTamperEventsClear
N#else
N#define MAP_HibernateTamperEventsClear                                        \
N        HibernateTamperEventsClear
X#define MAP_HibernateTamperEventsClear                                                HibernateTamperEventsClear
N#endif
N#ifdef ROM_HibernateTamperEventsConfig
S#define MAP_HibernateTamperEventsConfig                                       \
S        ROM_HibernateTamperEventsConfig
X#define MAP_HibernateTamperEventsConfig                                               ROM_HibernateTamperEventsConfig
N#else
N#define MAP_HibernateTamperEventsConfig                                       \
N        HibernateTamperEventsConfig
X#define MAP_HibernateTamperEventsConfig                                               HibernateTamperEventsConfig
N#endif
N#ifdef ROM_HibernateTamperEventsGet
S#define MAP_HibernateTamperEventsGet                                          \
S        ROM_HibernateTamperEventsGet
X#define MAP_HibernateTamperEventsGet                                                  ROM_HibernateTamperEventsGet
N#else
N#define MAP_HibernateTamperEventsGet                                          \
N        HibernateTamperEventsGet
X#define MAP_HibernateTamperEventsGet                                                  HibernateTamperEventsGet
N#endif
N#ifdef ROM_HibernateTamperExtOscValid
S#define MAP_HibernateTamperExtOscValid                                        \
S        ROM_HibernateTamperExtOscValid
X#define MAP_HibernateTamperExtOscValid                                                ROM_HibernateTamperExtOscValid
N#else
N#define MAP_HibernateTamperExtOscValid                                        \
N        HibernateTamperExtOscValid
X#define MAP_HibernateTamperExtOscValid                                                HibernateTamperExtOscValid
N#endif
N#ifdef ROM_HibernateTamperExtOscRecover
S#define MAP_HibernateTamperExtOscRecover                                      \
S        ROM_HibernateTamperExtOscRecover
X#define MAP_HibernateTamperExtOscRecover                                              ROM_HibernateTamperExtOscRecover
N#else
N#define MAP_HibernateTamperExtOscRecover                                      \
N        HibernateTamperExtOscRecover
X#define MAP_HibernateTamperExtOscRecover                                              HibernateTamperExtOscRecover
N#endif
N#ifdef ROM_HibernateTamperIODisable
S#define MAP_HibernateTamperIODisable                                          \
S        ROM_HibernateTamperIODisable
X#define MAP_HibernateTamperIODisable                                                  ROM_HibernateTamperIODisable
N#else
N#define MAP_HibernateTamperIODisable                                          \
N        HibernateTamperIODisable
X#define MAP_HibernateTamperIODisable                                                  HibernateTamperIODisable
N#endif
N#ifdef ROM_HibernateTamperIOEnable
S#define MAP_HibernateTamperIOEnable                                           \
S        ROM_HibernateTamperIOEnable
X#define MAP_HibernateTamperIOEnable                                                   ROM_HibernateTamperIOEnable
N#else
N#define MAP_HibernateTamperIOEnable                                           \
N        HibernateTamperIOEnable
X#define MAP_HibernateTamperIOEnable                                                   HibernateTamperIOEnable
N#endif
N#ifdef ROM_HibernateTamperStatusGet
S#define MAP_HibernateTamperStatusGet                                          \
S        ROM_HibernateTamperStatusGet
X#define MAP_HibernateTamperStatusGet                                                  ROM_HibernateTamperStatusGet
N#else
N#define MAP_HibernateTamperStatusGet                                          \
N        HibernateTamperStatusGet
X#define MAP_HibernateTamperStatusGet                                                  HibernateTamperStatusGet
N#endif
N#ifdef ROM_HibernateRTCMatchGet
S#define MAP_HibernateRTCMatchGet                                              \
S        ROM_HibernateRTCMatchGet
X#define MAP_HibernateRTCMatchGet                                                      ROM_HibernateRTCMatchGet
N#else
N#define MAP_HibernateRTCMatchGet                                              \
N        HibernateRTCMatchGet
X#define MAP_HibernateRTCMatchGet                                                      HibernateRTCMatchGet
N#endif
N#ifdef ROM_HibernateRTCMatchSet
S#define MAP_HibernateRTCMatchSet                                              \
S        ROM_HibernateRTCMatchSet
X#define MAP_HibernateRTCMatchSet                                                      ROM_HibernateRTCMatchSet
N#else
N#define MAP_HibernateRTCMatchSet                                              \
N        HibernateRTCMatchSet
X#define MAP_HibernateRTCMatchSet                                                      HibernateRTCMatchSet
N#endif
N#ifdef ROM_HibernateRTCSSMatchGet
S#define MAP_HibernateRTCSSMatchGet                                            \
S        ROM_HibernateRTCSSMatchGet
X#define MAP_HibernateRTCSSMatchGet                                                    ROM_HibernateRTCSSMatchGet
N#else
N#define MAP_HibernateRTCSSMatchGet                                            \
N        HibernateRTCSSMatchGet
X#define MAP_HibernateRTCSSMatchGet                                                    HibernateRTCSSMatchGet
N#endif
N#ifdef ROM_HibernateRTCSSMatchSet
S#define MAP_HibernateRTCSSMatchSet                                            \
S        ROM_HibernateRTCSSMatchSet
X#define MAP_HibernateRTCSSMatchSet                                                    ROM_HibernateRTCSSMatchSet
N#else
N#define MAP_HibernateRTCSSMatchSet                                            \
N        HibernateRTCSSMatchSet
X#define MAP_HibernateRTCSSMatchSet                                                    HibernateRTCSSMatchSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the I2C API.
N//
N//*****************************************************************************
N#ifdef ROM_I2CMasterDataPut
N#define MAP_I2CMasterDataPut                                                  \
N        ROM_I2CMasterDataPut
X#define MAP_I2CMasterDataPut                                                          ROM_I2CMasterDataPut
N#else
S#define MAP_I2CMasterDataPut                                                  \
S        I2CMasterDataPut
X#define MAP_I2CMasterDataPut                                                          I2CMasterDataPut
N#endif
N#ifdef ROM_I2CMasterInitExpClk
N#define MAP_I2CMasterInitExpClk                                               \
N        ROM_I2CMasterInitExpClk
X#define MAP_I2CMasterInitExpClk                                                       ROM_I2CMasterInitExpClk
N#else
S#define MAP_I2CMasterInitExpClk                                               \
S        I2CMasterInitExpClk
X#define MAP_I2CMasterInitExpClk                                                       I2CMasterInitExpClk
N#endif
N#ifdef ROM_I2CSlaveInit
S#define MAP_I2CSlaveInit                                                      \
S        ROM_I2CSlaveInit
X#define MAP_I2CSlaveInit                                                              ROM_I2CSlaveInit
N#else
N#define MAP_I2CSlaveInit                                                      \
N        I2CSlaveInit
X#define MAP_I2CSlaveInit                                                              I2CSlaveInit
N#endif
N#ifdef ROM_I2CMasterEnable
N#define MAP_I2CMasterEnable                                                   \
N        ROM_I2CMasterEnable
X#define MAP_I2CMasterEnable                                                           ROM_I2CMasterEnable
N#else
S#define MAP_I2CMasterEnable                                                   \
S        I2CMasterEnable
X#define MAP_I2CMasterEnable                                                           I2CMasterEnable
N#endif
N#ifdef ROM_I2CSlaveEnable
S#define MAP_I2CSlaveEnable                                                    \
S        ROM_I2CSlaveEnable
X#define MAP_I2CSlaveEnable                                                            ROM_I2CSlaveEnable
N#else
N#define MAP_I2CSlaveEnable                                                    \
N        I2CSlaveEnable
X#define MAP_I2CSlaveEnable                                                            I2CSlaveEnable
N#endif
N#ifdef ROM_I2CMasterDisable
N#define MAP_I2CMasterDisable                                                  \
N        ROM_I2CMasterDisable
X#define MAP_I2CMasterDisable                                                          ROM_I2CMasterDisable
N#else
S#define MAP_I2CMasterDisable                                                  \
S        I2CMasterDisable
X#define MAP_I2CMasterDisable                                                          I2CMasterDisable
N#endif
N#ifdef ROM_I2CSlaveDisable
S#define MAP_I2CSlaveDisable                                                   \
S        ROM_I2CSlaveDisable
X#define MAP_I2CSlaveDisable                                                           ROM_I2CSlaveDisable
N#else
N#define MAP_I2CSlaveDisable                                                   \
N        I2CSlaveDisable
X#define MAP_I2CSlaveDisable                                                           I2CSlaveDisable
N#endif
N#ifdef ROM_I2CMasterIntEnable
N#define MAP_I2CMasterIntEnable                                                \
N        ROM_I2CMasterIntEnable
X#define MAP_I2CMasterIntEnable                                                        ROM_I2CMasterIntEnable
N#else
S#define MAP_I2CMasterIntEnable                                                \
S        I2CMasterIntEnable
X#define MAP_I2CMasterIntEnable                                                        I2CMasterIntEnable
N#endif
N#ifdef ROM_I2CSlaveIntEnable
S#define MAP_I2CSlaveIntEnable                                                 \
S        ROM_I2CSlaveIntEnable
X#define MAP_I2CSlaveIntEnable                                                         ROM_I2CSlaveIntEnable
N#else
N#define MAP_I2CSlaveIntEnable                                                 \
N        I2CSlaveIntEnable
X#define MAP_I2CSlaveIntEnable                                                         I2CSlaveIntEnable
N#endif
N#ifdef ROM_I2CMasterIntDisable
N#define MAP_I2CMasterIntDisable                                               \
N        ROM_I2CMasterIntDisable
X#define MAP_I2CMasterIntDisable                                                       ROM_I2CMasterIntDisable
N#else
S#define MAP_I2CMasterIntDisable                                               \
S        I2CMasterIntDisable
X#define MAP_I2CMasterIntDisable                                                       I2CMasterIntDisable
N#endif
N#ifdef ROM_I2CSlaveIntDisable
S#define MAP_I2CSlaveIntDisable                                                \
S        ROM_I2CSlaveIntDisable
X#define MAP_I2CSlaveIntDisable                                                        ROM_I2CSlaveIntDisable
N#else
N#define MAP_I2CSlaveIntDisable                                                \
N        I2CSlaveIntDisable
X#define MAP_I2CSlaveIntDisable                                                        I2CSlaveIntDisable
N#endif
N#ifdef ROM_I2CMasterIntStatus
N#define MAP_I2CMasterIntStatus                                                \
N        ROM_I2CMasterIntStatus
X#define MAP_I2CMasterIntStatus                                                        ROM_I2CMasterIntStatus
N#else
S#define MAP_I2CMasterIntStatus                                                \
S        I2CMasterIntStatus
X#define MAP_I2CMasterIntStatus                                                        I2CMasterIntStatus
N#endif
N#ifdef ROM_I2CSlaveIntStatus
S#define MAP_I2CSlaveIntStatus                                                 \
S        ROM_I2CSlaveIntStatus
X#define MAP_I2CSlaveIntStatus                                                         ROM_I2CSlaveIntStatus
N#else
N#define MAP_I2CSlaveIntStatus                                                 \
N        I2CSlaveIntStatus
X#define MAP_I2CSlaveIntStatus                                                         I2CSlaveIntStatus
N#endif
N#ifdef ROM_I2CMasterIntClear
N#define MAP_I2CMasterIntClear                                                 \
N        ROM_I2CMasterIntClear
X#define MAP_I2CMasterIntClear                                                         ROM_I2CMasterIntClear
N#else
S#define MAP_I2CMasterIntClear                                                 \
S        I2CMasterIntClear
X#define MAP_I2CMasterIntClear                                                         I2CMasterIntClear
N#endif
N#ifdef ROM_I2CSlaveIntClear
S#define MAP_I2CSlaveIntClear                                                  \
S        ROM_I2CSlaveIntClear
X#define MAP_I2CSlaveIntClear                                                          ROM_I2CSlaveIntClear
N#else
N#define MAP_I2CSlaveIntClear                                                  \
N        I2CSlaveIntClear
X#define MAP_I2CSlaveIntClear                                                          I2CSlaveIntClear
N#endif
N#ifdef ROM_I2CMasterSlaveAddrSet
N#define MAP_I2CMasterSlaveAddrSet                                             \
N        ROM_I2CMasterSlaveAddrSet
X#define MAP_I2CMasterSlaveAddrSet                                                     ROM_I2CMasterSlaveAddrSet
N#else
S#define MAP_I2CMasterSlaveAddrSet                                             \
S        I2CMasterSlaveAddrSet
X#define MAP_I2CMasterSlaveAddrSet                                                     I2CMasterSlaveAddrSet
N#endif
N#ifdef ROM_I2CMasterBusy
N#define MAP_I2CMasterBusy                                                     \
N        ROM_I2CMasterBusy
X#define MAP_I2CMasterBusy                                                             ROM_I2CMasterBusy
N#else
S#define MAP_I2CMasterBusy                                                     \
S        I2CMasterBusy
X#define MAP_I2CMasterBusy                                                             I2CMasterBusy
N#endif
N#ifdef ROM_I2CMasterBusBusy
N#define MAP_I2CMasterBusBusy                                                  \
N        ROM_I2CMasterBusBusy
X#define MAP_I2CMasterBusBusy                                                          ROM_I2CMasterBusBusy
N#else
S#define MAP_I2CMasterBusBusy                                                  \
S        I2CMasterBusBusy
X#define MAP_I2CMasterBusBusy                                                          I2CMasterBusBusy
N#endif
N#ifdef ROM_I2CMasterControl
N#define MAP_I2CMasterControl                                                  \
N        ROM_I2CMasterControl
X#define MAP_I2CMasterControl                                                          ROM_I2CMasterControl
N#else
S#define MAP_I2CMasterControl                                                  \
S        I2CMasterControl
X#define MAP_I2CMasterControl                                                          I2CMasterControl
N#endif
N#ifdef ROM_I2CMasterErr
N#define MAP_I2CMasterErr                                                      \
N        ROM_I2CMasterErr
X#define MAP_I2CMasterErr                                                              ROM_I2CMasterErr
N#else
S#define MAP_I2CMasterErr                                                      \
S        I2CMasterErr
X#define MAP_I2CMasterErr                                                              I2CMasterErr
N#endif
N#ifdef ROM_I2CMasterDataGet
N#define MAP_I2CMasterDataGet                                                  \
N        ROM_I2CMasterDataGet
X#define MAP_I2CMasterDataGet                                                          ROM_I2CMasterDataGet
N#else
S#define MAP_I2CMasterDataGet                                                  \
S        I2CMasterDataGet
X#define MAP_I2CMasterDataGet                                                          I2CMasterDataGet
N#endif
N#ifdef ROM_I2CSlaveStatus
S#define MAP_I2CSlaveStatus                                                    \
S        ROM_I2CSlaveStatus
X#define MAP_I2CSlaveStatus                                                            ROM_I2CSlaveStatus
N#else
N#define MAP_I2CSlaveStatus                                                    \
N        I2CSlaveStatus
X#define MAP_I2CSlaveStatus                                                            I2CSlaveStatus
N#endif
N#ifdef ROM_I2CSlaveDataPut
S#define MAP_I2CSlaveDataPut                                                   \
S        ROM_I2CSlaveDataPut
X#define MAP_I2CSlaveDataPut                                                           ROM_I2CSlaveDataPut
N#else
N#define MAP_I2CSlaveDataPut                                                   \
N        I2CSlaveDataPut
X#define MAP_I2CSlaveDataPut                                                           I2CSlaveDataPut
N#endif
N#ifdef ROM_I2CSlaveDataGet
S#define MAP_I2CSlaveDataGet                                                   \
S        ROM_I2CSlaveDataGet
X#define MAP_I2CSlaveDataGet                                                           ROM_I2CSlaveDataGet
N#else
N#define MAP_I2CSlaveDataGet                                                   \
N        I2CSlaveDataGet
X#define MAP_I2CSlaveDataGet                                                           I2CSlaveDataGet
N#endif
N#ifdef ROM_I2CSlaveIntEnableEx
S#define MAP_I2CSlaveIntEnableEx                                               \
S        ROM_I2CSlaveIntEnableEx
X#define MAP_I2CSlaveIntEnableEx                                                       ROM_I2CSlaveIntEnableEx
N#else
N#define MAP_I2CSlaveIntEnableEx                                               \
N        I2CSlaveIntEnableEx
X#define MAP_I2CSlaveIntEnableEx                                                       I2CSlaveIntEnableEx
N#endif
N#ifdef ROM_I2CSlaveIntDisableEx
S#define MAP_I2CSlaveIntDisableEx                                              \
S        ROM_I2CSlaveIntDisableEx
X#define MAP_I2CSlaveIntDisableEx                                                      ROM_I2CSlaveIntDisableEx
N#else
N#define MAP_I2CSlaveIntDisableEx                                              \
N        I2CSlaveIntDisableEx
X#define MAP_I2CSlaveIntDisableEx                                                      I2CSlaveIntDisableEx
N#endif
N#ifdef ROM_I2CSlaveIntStatusEx
S#define MAP_I2CSlaveIntStatusEx                                               \
S        ROM_I2CSlaveIntStatusEx
X#define MAP_I2CSlaveIntStatusEx                                                       ROM_I2CSlaveIntStatusEx
N#else
N#define MAP_I2CSlaveIntStatusEx                                               \
N        I2CSlaveIntStatusEx
X#define MAP_I2CSlaveIntStatusEx                                                       I2CSlaveIntStatusEx
N#endif
N#ifdef ROM_I2CSlaveIntClearEx
S#define MAP_I2CSlaveIntClearEx                                                \
S        ROM_I2CSlaveIntClearEx
X#define MAP_I2CSlaveIntClearEx                                                        ROM_I2CSlaveIntClearEx
N#else
N#define MAP_I2CSlaveIntClearEx                                                \
N        I2CSlaveIntClearEx
X#define MAP_I2CSlaveIntClearEx                                                        I2CSlaveIntClearEx
N#endif
N#ifdef ROM_I2CMasterIntEnableEx
N#define MAP_I2CMasterIntEnableEx                                              \
N        ROM_I2CMasterIntEnableEx
X#define MAP_I2CMasterIntEnableEx                                                      ROM_I2CMasterIntEnableEx
N#else
S#define MAP_I2CMasterIntEnableEx                                              \
S        I2CMasterIntEnableEx
X#define MAP_I2CMasterIntEnableEx                                                      I2CMasterIntEnableEx
N#endif
N#ifdef ROM_I2CMasterIntDisableEx
N#define MAP_I2CMasterIntDisableEx                                             \
N        ROM_I2CMasterIntDisableEx
X#define MAP_I2CMasterIntDisableEx                                                     ROM_I2CMasterIntDisableEx
N#else
S#define MAP_I2CMasterIntDisableEx                                             \
S        I2CMasterIntDisableEx
X#define MAP_I2CMasterIntDisableEx                                                     I2CMasterIntDisableEx
N#endif
N#ifdef ROM_I2CMasterIntStatusEx
N#define MAP_I2CMasterIntStatusEx                                              \
N        ROM_I2CMasterIntStatusEx
X#define MAP_I2CMasterIntStatusEx                                                      ROM_I2CMasterIntStatusEx
N#else
S#define MAP_I2CMasterIntStatusEx                                              \
S        I2CMasterIntStatusEx
X#define MAP_I2CMasterIntStatusEx                                                      I2CMasterIntStatusEx
N#endif
N#ifdef ROM_I2CMasterIntClearEx
N#define MAP_I2CMasterIntClearEx                                               \
N        ROM_I2CMasterIntClearEx
X#define MAP_I2CMasterIntClearEx                                                       ROM_I2CMasterIntClearEx
N#else
S#define MAP_I2CMasterIntClearEx                                               \
S        I2CMasterIntClearEx
X#define MAP_I2CMasterIntClearEx                                                       I2CMasterIntClearEx
N#endif
N#ifdef ROM_I2CMasterTimeoutSet
N#define MAP_I2CMasterTimeoutSet                                               \
N        ROM_I2CMasterTimeoutSet
X#define MAP_I2CMasterTimeoutSet                                                       ROM_I2CMasterTimeoutSet
N#else
S#define MAP_I2CMasterTimeoutSet                                               \
S        I2CMasterTimeoutSet
X#define MAP_I2CMasterTimeoutSet                                                       I2CMasterTimeoutSet
N#endif
N#ifdef ROM_I2CSlaveACKOverride
S#define MAP_I2CSlaveACKOverride                                               \
S        ROM_I2CSlaveACKOverride
X#define MAP_I2CSlaveACKOverride                                                       ROM_I2CSlaveACKOverride
N#else
N#define MAP_I2CSlaveACKOverride                                               \
N        I2CSlaveACKOverride
X#define MAP_I2CSlaveACKOverride                                                       I2CSlaveACKOverride
N#endif
N#ifdef ROM_I2CSlaveACKValueSet
S#define MAP_I2CSlaveACKValueSet                                               \
S        ROM_I2CSlaveACKValueSet
X#define MAP_I2CSlaveACKValueSet                                                       ROM_I2CSlaveACKValueSet
N#else
N#define MAP_I2CSlaveACKValueSet                                               \
N        I2CSlaveACKValueSet
X#define MAP_I2CSlaveACKValueSet                                                       I2CSlaveACKValueSet
N#endif
N#ifdef ROM_I2CSlaveAddressSet
S#define MAP_I2CSlaveAddressSet                                                \
S        ROM_I2CSlaveAddressSet
X#define MAP_I2CSlaveAddressSet                                                        ROM_I2CSlaveAddressSet
N#else
N#define MAP_I2CSlaveAddressSet                                                \
N        I2CSlaveAddressSet
X#define MAP_I2CSlaveAddressSet                                                        I2CSlaveAddressSet
N#endif
N#ifdef ROM_I2CMasterLineStateGet
N#define MAP_I2CMasterLineStateGet                                             \
N        ROM_I2CMasterLineStateGet
X#define MAP_I2CMasterLineStateGet                                                     ROM_I2CMasterLineStateGet
N#else
S#define MAP_I2CMasterLineStateGet                                             \
S        I2CMasterLineStateGet
X#define MAP_I2CMasterLineStateGet                                                     I2CMasterLineStateGet
N#endif
N#ifdef ROM_I2CTxFIFOConfigSet
S#define MAP_I2CTxFIFOConfigSet                                                \
S        ROM_I2CTxFIFOConfigSet
X#define MAP_I2CTxFIFOConfigSet                                                        ROM_I2CTxFIFOConfigSet
N#else
N#define MAP_I2CTxFIFOConfigSet                                                \
N        I2CTxFIFOConfigSet
X#define MAP_I2CTxFIFOConfigSet                                                        I2CTxFIFOConfigSet
N#endif
N#ifdef ROM_I2CTxFIFOFlush
S#define MAP_I2CTxFIFOFlush                                                    \
S        ROM_I2CTxFIFOFlush
X#define MAP_I2CTxFIFOFlush                                                            ROM_I2CTxFIFOFlush
N#else
N#define MAP_I2CTxFIFOFlush                                                    \
N        I2CTxFIFOFlush
X#define MAP_I2CTxFIFOFlush                                                            I2CTxFIFOFlush
N#endif
N#ifdef ROM_I2CRxFIFOConfigSet
S#define MAP_I2CRxFIFOConfigSet                                                \
S        ROM_I2CRxFIFOConfigSet
X#define MAP_I2CRxFIFOConfigSet                                                        ROM_I2CRxFIFOConfigSet
N#else
N#define MAP_I2CRxFIFOConfigSet                                                \
N        I2CRxFIFOConfigSet
X#define MAP_I2CRxFIFOConfigSet                                                        I2CRxFIFOConfigSet
N#endif
N#ifdef ROM_I2CRxFIFOFlush
S#define MAP_I2CRxFIFOFlush                                                    \
S        ROM_I2CRxFIFOFlush
X#define MAP_I2CRxFIFOFlush                                                            ROM_I2CRxFIFOFlush
N#else
N#define MAP_I2CRxFIFOFlush                                                    \
N        I2CRxFIFOFlush
X#define MAP_I2CRxFIFOFlush                                                            I2CRxFIFOFlush
N#endif
N#ifdef ROM_I2CFIFOStatus
S#define MAP_I2CFIFOStatus                                                     \
S        ROM_I2CFIFOStatus
X#define MAP_I2CFIFOStatus                                                             ROM_I2CFIFOStatus
N#else
N#define MAP_I2CFIFOStatus                                                     \
N        I2CFIFOStatus
X#define MAP_I2CFIFOStatus                                                             I2CFIFOStatus
N#endif
N#ifdef ROM_I2CFIFODataPut
S#define MAP_I2CFIFODataPut                                                    \
S        ROM_I2CFIFODataPut
X#define MAP_I2CFIFODataPut                                                            ROM_I2CFIFODataPut
N#else
N#define MAP_I2CFIFODataPut                                                    \
N        I2CFIFODataPut
X#define MAP_I2CFIFODataPut                                                            I2CFIFODataPut
N#endif
N#ifdef ROM_I2CFIFODataPutNonBlocking
S#define MAP_I2CFIFODataPutNonBlocking                                         \
S        ROM_I2CFIFODataPutNonBlocking
X#define MAP_I2CFIFODataPutNonBlocking                                                 ROM_I2CFIFODataPutNonBlocking
N#else
N#define MAP_I2CFIFODataPutNonBlocking                                         \
N        I2CFIFODataPutNonBlocking
X#define MAP_I2CFIFODataPutNonBlocking                                                 I2CFIFODataPutNonBlocking
N#endif
N#ifdef ROM_I2CFIFODataGet
S#define MAP_I2CFIFODataGet                                                    \
S        ROM_I2CFIFODataGet
X#define MAP_I2CFIFODataGet                                                            ROM_I2CFIFODataGet
N#else
N#define MAP_I2CFIFODataGet                                                    \
N        I2CFIFODataGet
X#define MAP_I2CFIFODataGet                                                            I2CFIFODataGet
N#endif
N#ifdef ROM_I2CFIFODataGetNonBlocking
S#define MAP_I2CFIFODataGetNonBlocking                                         \
S        ROM_I2CFIFODataGetNonBlocking
X#define MAP_I2CFIFODataGetNonBlocking                                                 ROM_I2CFIFODataGetNonBlocking
N#else
N#define MAP_I2CFIFODataGetNonBlocking                                         \
N        I2CFIFODataGetNonBlocking
X#define MAP_I2CFIFODataGetNonBlocking                                                 I2CFIFODataGetNonBlocking
N#endif
N#ifdef ROM_I2CMasterBurstLengthSet
S#define MAP_I2CMasterBurstLengthSet                                           \
S        ROM_I2CMasterBurstLengthSet
X#define MAP_I2CMasterBurstLengthSet                                                   ROM_I2CMasterBurstLengthSet
N#else
N#define MAP_I2CMasterBurstLengthSet                                           \
N        I2CMasterBurstLengthSet
X#define MAP_I2CMasterBurstLengthSet                                                   I2CMasterBurstLengthSet
N#endif
N#ifdef ROM_I2CMasterBurstCountGet
S#define MAP_I2CMasterBurstCountGet                                            \
S        ROM_I2CMasterBurstCountGet
X#define MAP_I2CMasterBurstCountGet                                                    ROM_I2CMasterBurstCountGet
N#else
N#define MAP_I2CMasterBurstCountGet                                            \
N        I2CMasterBurstCountGet
X#define MAP_I2CMasterBurstCountGet                                                    I2CMasterBurstCountGet
N#endif
N#ifdef ROM_I2CSlaveFIFODisable
S#define MAP_I2CSlaveFIFODisable                                               \
S        ROM_I2CSlaveFIFODisable
X#define MAP_I2CSlaveFIFODisable                                                       ROM_I2CSlaveFIFODisable
N#else
N#define MAP_I2CSlaveFIFODisable                                               \
N        I2CSlaveFIFODisable
X#define MAP_I2CSlaveFIFODisable                                                       I2CSlaveFIFODisable
N#endif
N#ifdef ROM_I2CSlaveFIFOEnable
S#define MAP_I2CSlaveFIFOEnable                                                \
S        ROM_I2CSlaveFIFOEnable
X#define MAP_I2CSlaveFIFOEnable                                                        ROM_I2CSlaveFIFOEnable
N#else
N#define MAP_I2CSlaveFIFOEnable                                                \
N        I2CSlaveFIFOEnable
X#define MAP_I2CSlaveFIFOEnable                                                        I2CSlaveFIFOEnable
N#endif
N#ifdef ROM_I2CMasterGlitchFilterConfigSet
S#define MAP_I2CMasterGlitchFilterConfigSet                                    \
S        ROM_I2CMasterGlitchFilterConfigSet
X#define MAP_I2CMasterGlitchFilterConfigSet                                            ROM_I2CMasterGlitchFilterConfigSet
N#else
N#define MAP_I2CMasterGlitchFilterConfigSet                                    \
N        I2CMasterGlitchFilterConfigSet
X#define MAP_I2CMasterGlitchFilterConfigSet                                            I2CMasterGlitchFilterConfigSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Interrupt API.
N//
N//*****************************************************************************
N#ifdef ROM_IntEnable
N#define MAP_IntEnable                                                         \
N        ROM_IntEnable
X#define MAP_IntEnable                                                                 ROM_IntEnable
N#else
S#define MAP_IntEnable                                                         \
S        IntEnable
X#define MAP_IntEnable                                                                 IntEnable
N#endif
N#ifdef ROM_IntMasterEnable
N#define MAP_IntMasterEnable                                                   \
N        ROM_IntMasterEnable
X#define MAP_IntMasterEnable                                                           ROM_IntMasterEnable
N#else
S#define MAP_IntMasterEnable                                                   \
S        IntMasterEnable
X#define MAP_IntMasterEnable                                                           IntMasterEnable
N#endif
N#ifdef ROM_IntMasterDisable
N#define MAP_IntMasterDisable                                                  \
N        ROM_IntMasterDisable
X#define MAP_IntMasterDisable                                                          ROM_IntMasterDisable
N#else
S#define MAP_IntMasterDisable                                                  \
S        IntMasterDisable
X#define MAP_IntMasterDisable                                                          IntMasterDisable
N#endif
N#ifdef ROM_IntDisable
N#define MAP_IntDisable                                                        \
N        ROM_IntDisable
X#define MAP_IntDisable                                                                ROM_IntDisable
N#else
S#define MAP_IntDisable                                                        \
S        IntDisable
X#define MAP_IntDisable                                                                IntDisable
N#endif
N#ifdef ROM_IntPriorityGroupingSet
N#define MAP_IntPriorityGroupingSet                                            \
N        ROM_IntPriorityGroupingSet
X#define MAP_IntPriorityGroupingSet                                                    ROM_IntPriorityGroupingSet
N#else
S#define MAP_IntPriorityGroupingSet                                            \
S        IntPriorityGroupingSet
X#define MAP_IntPriorityGroupingSet                                                    IntPriorityGroupingSet
N#endif
N#ifdef ROM_IntPriorityGroupingGet
N#define MAP_IntPriorityGroupingGet                                            \
N        ROM_IntPriorityGroupingGet
X#define MAP_IntPriorityGroupingGet                                                    ROM_IntPriorityGroupingGet
N#else
S#define MAP_IntPriorityGroupingGet                                            \
S        IntPriorityGroupingGet
X#define MAP_IntPriorityGroupingGet                                                    IntPriorityGroupingGet
N#endif
N#ifdef ROM_IntPrioritySet
N#define MAP_IntPrioritySet                                                    \
N        ROM_IntPrioritySet
X#define MAP_IntPrioritySet                                                            ROM_IntPrioritySet
N#else
S#define MAP_IntPrioritySet                                                    \
S        IntPrioritySet
X#define MAP_IntPrioritySet                                                            IntPrioritySet
N#endif
N#ifdef ROM_IntPriorityGet
N#define MAP_IntPriorityGet                                                    \
N        ROM_IntPriorityGet
X#define MAP_IntPriorityGet                                                            ROM_IntPriorityGet
N#else
S#define MAP_IntPriorityGet                                                    \
S        IntPriorityGet
X#define MAP_IntPriorityGet                                                            IntPriorityGet
N#endif
N#ifdef ROM_IntPendSet
N#define MAP_IntPendSet                                                        \
N        ROM_IntPendSet
X#define MAP_IntPendSet                                                                ROM_IntPendSet
N#else
S#define MAP_IntPendSet                                                        \
S        IntPendSet
X#define MAP_IntPendSet                                                                IntPendSet
N#endif
N#ifdef ROM_IntPendClear
N#define MAP_IntPendClear                                                      \
N        ROM_IntPendClear
X#define MAP_IntPendClear                                                              ROM_IntPendClear
N#else
S#define MAP_IntPendClear                                                      \
S        IntPendClear
X#define MAP_IntPendClear                                                              IntPendClear
N#endif
N#ifdef ROM_IntPriorityMaskSet
N#define MAP_IntPriorityMaskSet                                                \
N        ROM_IntPriorityMaskSet
X#define MAP_IntPriorityMaskSet                                                        ROM_IntPriorityMaskSet
N#else
S#define MAP_IntPriorityMaskSet                                                \
S        IntPriorityMaskSet
X#define MAP_IntPriorityMaskSet                                                        IntPriorityMaskSet
N#endif
N#ifdef ROM_IntPriorityMaskGet
N#define MAP_IntPriorityMaskGet                                                \
N        ROM_IntPriorityMaskGet
X#define MAP_IntPriorityMaskGet                                                        ROM_IntPriorityMaskGet
N#else
S#define MAP_IntPriorityMaskGet                                                \
S        IntPriorityMaskGet
X#define MAP_IntPriorityMaskGet                                                        IntPriorityMaskGet
N#endif
N#ifdef ROM_IntIsEnabled
N#define MAP_IntIsEnabled                                                      \
N        ROM_IntIsEnabled
X#define MAP_IntIsEnabled                                                              ROM_IntIsEnabled
N#else
S#define MAP_IntIsEnabled                                                      \
S        IntIsEnabled
X#define MAP_IntIsEnabled                                                              IntIsEnabled
N#endif
N#ifdef ROM_IntTrigger
S#define MAP_IntTrigger                                                        \
S        ROM_IntTrigger
X#define MAP_IntTrigger                                                                ROM_IntTrigger
N#else
N#define MAP_IntTrigger                                                        \
N        IntTrigger
X#define MAP_IntTrigger                                                                IntTrigger
N#endif
N
N//*****************************************************************************
N//
N// Macros for the LCD API.
N//
N//*****************************************************************************
N#ifdef ROM_LCDIntStatus
S#define MAP_LCDIntStatus                                                      \
S        ROM_LCDIntStatus
X#define MAP_LCDIntStatus                                                              ROM_LCDIntStatus
N#else
N#define MAP_LCDIntStatus                                                      \
N        LCDIntStatus
X#define MAP_LCDIntStatus                                                              LCDIntStatus
N#endif
N#ifdef ROM_LCDClockReset
S#define MAP_LCDClockReset                                                     \
S        ROM_LCDClockReset
X#define MAP_LCDClockReset                                                             ROM_LCDClockReset
N#else
N#define MAP_LCDClockReset                                                     \
N        LCDClockReset
X#define MAP_LCDClockReset                                                             LCDClockReset
N#endif
N#ifdef ROM_LCDDMAConfigSet
S#define MAP_LCDDMAConfigSet                                                   \
S        ROM_LCDDMAConfigSet
X#define MAP_LCDDMAConfigSet                                                           ROM_LCDDMAConfigSet
N#else
N#define MAP_LCDDMAConfigSet                                                   \
N        LCDDMAConfigSet
X#define MAP_LCDDMAConfigSet                                                           LCDDMAConfigSet
N#endif
N#ifdef ROM_LCDIDDCommandWrite
S#define MAP_LCDIDDCommandWrite                                                \
S        ROM_LCDIDDCommandWrite
X#define MAP_LCDIDDCommandWrite                                                        ROM_LCDIDDCommandWrite
N#else
N#define MAP_LCDIDDCommandWrite                                                \
N        LCDIDDCommandWrite
X#define MAP_LCDIDDCommandWrite                                                        LCDIDDCommandWrite
N#endif
N#ifdef ROM_LCDIDDConfigSet
S#define MAP_LCDIDDConfigSet                                                   \
S        ROM_LCDIDDConfigSet
X#define MAP_LCDIDDConfigSet                                                           ROM_LCDIDDConfigSet
N#else
N#define MAP_LCDIDDConfigSet                                                   \
N        LCDIDDConfigSet
X#define MAP_LCDIDDConfigSet                                                           LCDIDDConfigSet
N#endif
N#ifdef ROM_LCDIDDDataRead
S#define MAP_LCDIDDDataRead                                                    \
S        ROM_LCDIDDDataRead
X#define MAP_LCDIDDDataRead                                                            ROM_LCDIDDDataRead
N#else
N#define MAP_LCDIDDDataRead                                                    \
N        LCDIDDDataRead
X#define MAP_LCDIDDDataRead                                                            LCDIDDDataRead
N#endif
N#ifdef ROM_LCDIDDDataWrite
S#define MAP_LCDIDDDataWrite                                                   \
S        ROM_LCDIDDDataWrite
X#define MAP_LCDIDDDataWrite                                                           ROM_LCDIDDDataWrite
N#else
N#define MAP_LCDIDDDataWrite                                                   \
N        LCDIDDDataWrite
X#define MAP_LCDIDDDataWrite                                                           LCDIDDDataWrite
N#endif
N#ifdef ROM_LCDIDDDMADisable
S#define MAP_LCDIDDDMADisable                                                  \
S        ROM_LCDIDDDMADisable
X#define MAP_LCDIDDDMADisable                                                          ROM_LCDIDDDMADisable
N#else
N#define MAP_LCDIDDDMADisable                                                  \
N        LCDIDDDMADisable
X#define MAP_LCDIDDDMADisable                                                          LCDIDDDMADisable
N#endif
N#ifdef ROM_LCDIDDDMAWrite
S#define MAP_LCDIDDDMAWrite                                                    \
S        ROM_LCDIDDDMAWrite
X#define MAP_LCDIDDDMAWrite                                                            ROM_LCDIDDDMAWrite
N#else
N#define MAP_LCDIDDDMAWrite                                                    \
N        LCDIDDDMAWrite
X#define MAP_LCDIDDDMAWrite                                                            LCDIDDDMAWrite
N#endif
N#ifdef ROM_LCDIDDIndexedRead
S#define MAP_LCDIDDIndexedRead                                                 \
S        ROM_LCDIDDIndexedRead
X#define MAP_LCDIDDIndexedRead                                                         ROM_LCDIDDIndexedRead
N#else
N#define MAP_LCDIDDIndexedRead                                                 \
N        LCDIDDIndexedRead
X#define MAP_LCDIDDIndexedRead                                                         LCDIDDIndexedRead
N#endif
N#ifdef ROM_LCDIDDIndexedWrite
S#define MAP_LCDIDDIndexedWrite                                                \
S        ROM_LCDIDDIndexedWrite
X#define MAP_LCDIDDIndexedWrite                                                        ROM_LCDIDDIndexedWrite
N#else
N#define MAP_LCDIDDIndexedWrite                                                \
N        LCDIDDIndexedWrite
X#define MAP_LCDIDDIndexedWrite                                                        LCDIDDIndexedWrite
N#endif
N#ifdef ROM_LCDIDDStatusRead
S#define MAP_LCDIDDStatusRead                                                  \
S        ROM_LCDIDDStatusRead
X#define MAP_LCDIDDStatusRead                                                          ROM_LCDIDDStatusRead
N#else
N#define MAP_LCDIDDStatusRead                                                  \
N        LCDIDDStatusRead
X#define MAP_LCDIDDStatusRead                                                          LCDIDDStatusRead
N#endif
N#ifdef ROM_LCDIDDTimingSet
S#define MAP_LCDIDDTimingSet                                                   \
S        ROM_LCDIDDTimingSet
X#define MAP_LCDIDDTimingSet                                                           ROM_LCDIDDTimingSet
N#else
N#define MAP_LCDIDDTimingSet                                                   \
N        LCDIDDTimingSet
X#define MAP_LCDIDDTimingSet                                                           LCDIDDTimingSet
N#endif
N#ifdef ROM_LCDIntClear
S#define MAP_LCDIntClear                                                       \
S        ROM_LCDIntClear
X#define MAP_LCDIntClear                                                               ROM_LCDIntClear
N#else
N#define MAP_LCDIntClear                                                       \
N        LCDIntClear
X#define MAP_LCDIntClear                                                               LCDIntClear
N#endif
N#ifdef ROM_LCDIntDisable
S#define MAP_LCDIntDisable                                                     \
S        ROM_LCDIntDisable
X#define MAP_LCDIntDisable                                                             ROM_LCDIntDisable
N#else
N#define MAP_LCDIntDisable                                                     \
N        LCDIntDisable
X#define MAP_LCDIntDisable                                                             LCDIntDisable
N#endif
N#ifdef ROM_LCDIntEnable
S#define MAP_LCDIntEnable                                                      \
S        ROM_LCDIntEnable
X#define MAP_LCDIntEnable                                                              ROM_LCDIntEnable
N#else
N#define MAP_LCDIntEnable                                                      \
N        LCDIntEnable
X#define MAP_LCDIntEnable                                                              LCDIntEnable
N#endif
N#ifdef ROM_LCDModeSet
S#define MAP_LCDModeSet                                                        \
S        ROM_LCDModeSet
X#define MAP_LCDModeSet                                                                ROM_LCDModeSet
N#else
N#define MAP_LCDModeSet                                                        \
N        LCDModeSet
X#define MAP_LCDModeSet                                                                LCDModeSet
N#endif
N#ifdef ROM_LCDRasterACBiasIntCountSet
S#define MAP_LCDRasterACBiasIntCountSet                                        \
S        ROM_LCDRasterACBiasIntCountSet
X#define MAP_LCDRasterACBiasIntCountSet                                                ROM_LCDRasterACBiasIntCountSet
N#else
N#define MAP_LCDRasterACBiasIntCountSet                                        \
N        LCDRasterACBiasIntCountSet
X#define MAP_LCDRasterACBiasIntCountSet                                                LCDRasterACBiasIntCountSet
N#endif
N#ifdef ROM_LCDRasterConfigSet
S#define MAP_LCDRasterConfigSet                                                \
S        ROM_LCDRasterConfigSet
X#define MAP_LCDRasterConfigSet                                                        ROM_LCDRasterConfigSet
N#else
N#define MAP_LCDRasterConfigSet                                                \
N        LCDRasterConfigSet
X#define MAP_LCDRasterConfigSet                                                        LCDRasterConfigSet
N#endif
N#ifdef ROM_LCDRasterDisable
S#define MAP_LCDRasterDisable                                                  \
S        ROM_LCDRasterDisable
X#define MAP_LCDRasterDisable                                                          ROM_LCDRasterDisable
N#else
N#define MAP_LCDRasterDisable                                                  \
N        LCDRasterDisable
X#define MAP_LCDRasterDisable                                                          LCDRasterDisable
N#endif
N#ifdef ROM_LCDRasterEnable
S#define MAP_LCDRasterEnable                                                   \
S        ROM_LCDRasterEnable
X#define MAP_LCDRasterEnable                                                           ROM_LCDRasterEnable
N#else
N#define MAP_LCDRasterEnable                                                   \
N        LCDRasterEnable
X#define MAP_LCDRasterEnable                                                           LCDRasterEnable
N#endif
N#ifdef ROM_LCDRasterFrameBufferSet
S#define MAP_LCDRasterFrameBufferSet                                           \
S        ROM_LCDRasterFrameBufferSet
X#define MAP_LCDRasterFrameBufferSet                                                   ROM_LCDRasterFrameBufferSet
N#else
N#define MAP_LCDRasterFrameBufferSet                                           \
N        LCDRasterFrameBufferSet
X#define MAP_LCDRasterFrameBufferSet                                                   LCDRasterFrameBufferSet
N#endif
N#ifdef ROM_LCDRasterPaletteSet
S#define MAP_LCDRasterPaletteSet                                               \
S        ROM_LCDRasterPaletteSet
X#define MAP_LCDRasterPaletteSet                                                       ROM_LCDRasterPaletteSet
N#else
N#define MAP_LCDRasterPaletteSet                                               \
N        LCDRasterPaletteSet
X#define MAP_LCDRasterPaletteSet                                                       LCDRasterPaletteSet
N#endif
N#ifdef ROM_LCDRasterSubPanelConfigSet
S#define MAP_LCDRasterSubPanelConfigSet                                        \
S        ROM_LCDRasterSubPanelConfigSet
X#define MAP_LCDRasterSubPanelConfigSet                                                ROM_LCDRasterSubPanelConfigSet
N#else
N#define MAP_LCDRasterSubPanelConfigSet                                        \
N        LCDRasterSubPanelConfigSet
X#define MAP_LCDRasterSubPanelConfigSet                                                LCDRasterSubPanelConfigSet
N#endif
N#ifdef ROM_LCDRasterSubPanelDisable
S#define MAP_LCDRasterSubPanelDisable                                          \
S        ROM_LCDRasterSubPanelDisable
X#define MAP_LCDRasterSubPanelDisable                                                  ROM_LCDRasterSubPanelDisable
N#else
N#define MAP_LCDRasterSubPanelDisable                                          \
N        LCDRasterSubPanelDisable
X#define MAP_LCDRasterSubPanelDisable                                                  LCDRasterSubPanelDisable
N#endif
N#ifdef ROM_LCDRasterSubPanelEnable
S#define MAP_LCDRasterSubPanelEnable                                           \
S        ROM_LCDRasterSubPanelEnable
X#define MAP_LCDRasterSubPanelEnable                                                   ROM_LCDRasterSubPanelEnable
N#else
N#define MAP_LCDRasterSubPanelEnable                                           \
N        LCDRasterSubPanelEnable
X#define MAP_LCDRasterSubPanelEnable                                                   LCDRasterSubPanelEnable
N#endif
N#ifdef ROM_LCDRasterTimingSet
S#define MAP_LCDRasterTimingSet                                                \
S        ROM_LCDRasterTimingSet
X#define MAP_LCDRasterTimingSet                                                        ROM_LCDRasterTimingSet
N#else
N#define MAP_LCDRasterTimingSet                                                \
N        LCDRasterTimingSet
X#define MAP_LCDRasterTimingSet                                                        LCDRasterTimingSet
N#endif
N#ifdef ROM_LCDRasterEnabled
S#define MAP_LCDRasterEnabled                                                  \
S        ROM_LCDRasterEnabled
X#define MAP_LCDRasterEnabled                                                          ROM_LCDRasterEnabled
N#else
N#define MAP_LCDRasterEnabled                                                  \
N        LCDRasterEnabled
X#define MAP_LCDRasterEnabled                                                          LCDRasterEnabled
N#endif
N
N//*****************************************************************************
N//
N// Macros for the MPU API.
N//
N//*****************************************************************************
N#ifdef ROM_MPUEnable
N#define MAP_MPUEnable                                                         \
N        ROM_MPUEnable
X#define MAP_MPUEnable                                                                 ROM_MPUEnable
N#else
S#define MAP_MPUEnable                                                         \
S        MPUEnable
X#define MAP_MPUEnable                                                                 MPUEnable
N#endif
N#ifdef ROM_MPUDisable
N#define MAP_MPUDisable                                                        \
N        ROM_MPUDisable
X#define MAP_MPUDisable                                                                ROM_MPUDisable
N#else
S#define MAP_MPUDisable                                                        \
S        MPUDisable
X#define MAP_MPUDisable                                                                MPUDisable
N#endif
N#ifdef ROM_MPURegionCountGet
N#define MAP_MPURegionCountGet                                                 \
N        ROM_MPURegionCountGet
X#define MAP_MPURegionCountGet                                                         ROM_MPURegionCountGet
N#else
S#define MAP_MPURegionCountGet                                                 \
S        MPURegionCountGet
X#define MAP_MPURegionCountGet                                                         MPURegionCountGet
N#endif
N#ifdef ROM_MPURegionEnable
N#define MAP_MPURegionEnable                                                   \
N        ROM_MPURegionEnable
X#define MAP_MPURegionEnable                                                           ROM_MPURegionEnable
N#else
S#define MAP_MPURegionEnable                                                   \
S        MPURegionEnable
X#define MAP_MPURegionEnable                                                           MPURegionEnable
N#endif
N#ifdef ROM_MPURegionDisable
N#define MAP_MPURegionDisable                                                  \
N        ROM_MPURegionDisable
X#define MAP_MPURegionDisable                                                          ROM_MPURegionDisable
N#else
S#define MAP_MPURegionDisable                                                  \
S        MPURegionDisable
X#define MAP_MPURegionDisable                                                          MPURegionDisable
N#endif
N#ifdef ROM_MPURegionSet
N#define MAP_MPURegionSet                                                      \
N        ROM_MPURegionSet
X#define MAP_MPURegionSet                                                              ROM_MPURegionSet
N#else
S#define MAP_MPURegionSet                                                      \
S        MPURegionSet
X#define MAP_MPURegionSet                                                              MPURegionSet
N#endif
N#ifdef ROM_MPURegionGet
N#define MAP_MPURegionGet                                                      \
N        ROM_MPURegionGet
X#define MAP_MPURegionGet                                                              ROM_MPURegionGet
N#else
S#define MAP_MPURegionGet                                                      \
S        MPURegionGet
X#define MAP_MPURegionGet                                                              MPURegionGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the OneWire API.
N//
N//*****************************************************************************
N#ifdef ROM_OneWireIntStatus
S#define MAP_OneWireIntStatus                                                  \
S        ROM_OneWireIntStatus
X#define MAP_OneWireIntStatus                                                          ROM_OneWireIntStatus
N#else
N#define MAP_OneWireIntStatus                                                  \
N        OneWireIntStatus
X#define MAP_OneWireIntStatus                                                          OneWireIntStatus
N#endif
N#ifdef ROM_OneWireBusReset
S#define MAP_OneWireBusReset                                                   \
S        ROM_OneWireBusReset
X#define MAP_OneWireBusReset                                                           ROM_OneWireBusReset
N#else
N#define MAP_OneWireBusReset                                                   \
N        OneWireBusReset
X#define MAP_OneWireBusReset                                                           OneWireBusReset
N#endif
N#ifdef ROM_OneWireBusStatus
S#define MAP_OneWireBusStatus                                                  \
S        ROM_OneWireBusStatus
X#define MAP_OneWireBusStatus                                                          ROM_OneWireBusStatus
N#else
N#define MAP_OneWireBusStatus                                                  \
N        OneWireBusStatus
X#define MAP_OneWireBusStatus                                                          OneWireBusStatus
N#endif
N#ifdef ROM_OneWireDataGet
S#define MAP_OneWireDataGet                                                    \
S        ROM_OneWireDataGet
X#define MAP_OneWireDataGet                                                            ROM_OneWireDataGet
N#else
N#define MAP_OneWireDataGet                                                    \
N        OneWireDataGet
X#define MAP_OneWireDataGet                                                            OneWireDataGet
N#endif
N#ifdef ROM_OneWireDataGetNonBlocking
S#define MAP_OneWireDataGetNonBlocking                                         \
S        ROM_OneWireDataGetNonBlocking
X#define MAP_OneWireDataGetNonBlocking                                                 ROM_OneWireDataGetNonBlocking
N#else
N#define MAP_OneWireDataGetNonBlocking                                         \
N        OneWireDataGetNonBlocking
X#define MAP_OneWireDataGetNonBlocking                                                 OneWireDataGetNonBlocking
N#endif
N#ifdef ROM_OneWireInit
S#define MAP_OneWireInit                                                       \
S        ROM_OneWireInit
X#define MAP_OneWireInit                                                               ROM_OneWireInit
N#else
N#define MAP_OneWireInit                                                       \
N        OneWireInit
X#define MAP_OneWireInit                                                               OneWireInit
N#endif
N#ifdef ROM_OneWireIntClear
S#define MAP_OneWireIntClear                                                   \
S        ROM_OneWireIntClear
X#define MAP_OneWireIntClear                                                           ROM_OneWireIntClear
N#else
N#define MAP_OneWireIntClear                                                   \
N        OneWireIntClear
X#define MAP_OneWireIntClear                                                           OneWireIntClear
N#endif
N#ifdef ROM_OneWireIntDisable
S#define MAP_OneWireIntDisable                                                 \
S        ROM_OneWireIntDisable
X#define MAP_OneWireIntDisable                                                         ROM_OneWireIntDisable
N#else
N#define MAP_OneWireIntDisable                                                 \
N        OneWireIntDisable
X#define MAP_OneWireIntDisable                                                         OneWireIntDisable
N#endif
N#ifdef ROM_OneWireIntEnable
S#define MAP_OneWireIntEnable                                                  \
S        ROM_OneWireIntEnable
X#define MAP_OneWireIntEnable                                                          ROM_OneWireIntEnable
N#else
N#define MAP_OneWireIntEnable                                                  \
N        OneWireIntEnable
X#define MAP_OneWireIntEnable                                                          OneWireIntEnable
N#endif
N#ifdef ROM_OneWireTransaction
S#define MAP_OneWireTransaction                                                \
S        ROM_OneWireTransaction
X#define MAP_OneWireTransaction                                                        ROM_OneWireTransaction
N#else
N#define MAP_OneWireTransaction                                                \
N        OneWireTransaction
X#define MAP_OneWireTransaction                                                        OneWireTransaction
N#endif
N#ifdef ROM_OneWireDMADisable
S#define MAP_OneWireDMADisable                                                 \
S        ROM_OneWireDMADisable
X#define MAP_OneWireDMADisable                                                         ROM_OneWireDMADisable
N#else
N#define MAP_OneWireDMADisable                                                 \
N        OneWireDMADisable
X#define MAP_OneWireDMADisable                                                         OneWireDMADisable
N#endif
N#ifdef ROM_OneWireDMAEnable
S#define MAP_OneWireDMAEnable                                                  \
S        ROM_OneWireDMAEnable
X#define MAP_OneWireDMAEnable                                                          ROM_OneWireDMAEnable
N#else
N#define MAP_OneWireDMAEnable                                                  \
N        OneWireDMAEnable
X#define MAP_OneWireDMAEnable                                                          OneWireDMAEnable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the PWM API.
N//
N//*****************************************************************************
N#ifdef ROM_PWMPulseWidthSet
N#define MAP_PWMPulseWidthSet                                                  \
N        ROM_PWMPulseWidthSet
X#define MAP_PWMPulseWidthSet                                                          ROM_PWMPulseWidthSet
N#else
S#define MAP_PWMPulseWidthSet                                                  \
S        PWMPulseWidthSet
X#define MAP_PWMPulseWidthSet                                                          PWMPulseWidthSet
N#endif
N#ifdef ROM_PWMGenConfigure
N#define MAP_PWMGenConfigure                                                   \
N        ROM_PWMGenConfigure
X#define MAP_PWMGenConfigure                                                           ROM_PWMGenConfigure
N#else
S#define MAP_PWMGenConfigure                                                   \
S        PWMGenConfigure
X#define MAP_PWMGenConfigure                                                           PWMGenConfigure
N#endif
N#ifdef ROM_PWMGenPeriodSet
N#define MAP_PWMGenPeriodSet                                                   \
N        ROM_PWMGenPeriodSet
X#define MAP_PWMGenPeriodSet                                                           ROM_PWMGenPeriodSet
N#else
S#define MAP_PWMGenPeriodSet                                                   \
S        PWMGenPeriodSet
X#define MAP_PWMGenPeriodSet                                                           PWMGenPeriodSet
N#endif
N#ifdef ROM_PWMGenPeriodGet
N#define MAP_PWMGenPeriodGet                                                   \
N        ROM_PWMGenPeriodGet
X#define MAP_PWMGenPeriodGet                                                           ROM_PWMGenPeriodGet
N#else
S#define MAP_PWMGenPeriodGet                                                   \
S        PWMGenPeriodGet
X#define MAP_PWMGenPeriodGet                                                           PWMGenPeriodGet
N#endif
N#ifdef ROM_PWMGenEnable
N#define MAP_PWMGenEnable                                                      \
N        ROM_PWMGenEnable
X#define MAP_PWMGenEnable                                                              ROM_PWMGenEnable
N#else
S#define MAP_PWMGenEnable                                                      \
S        PWMGenEnable
X#define MAP_PWMGenEnable                                                              PWMGenEnable
N#endif
N#ifdef ROM_PWMGenDisable
N#define MAP_PWMGenDisable                                                     \
N        ROM_PWMGenDisable
X#define MAP_PWMGenDisable                                                             ROM_PWMGenDisable
N#else
S#define MAP_PWMGenDisable                                                     \
S        PWMGenDisable
X#define MAP_PWMGenDisable                                                             PWMGenDisable
N#endif
N#ifdef ROM_PWMPulseWidthGet
N#define MAP_PWMPulseWidthGet                                                  \
N        ROM_PWMPulseWidthGet
X#define MAP_PWMPulseWidthGet                                                          ROM_PWMPulseWidthGet
N#else
S#define MAP_PWMPulseWidthGet                                                  \
S        PWMPulseWidthGet
X#define MAP_PWMPulseWidthGet                                                          PWMPulseWidthGet
N#endif
N#ifdef ROM_PWMDeadBandEnable
N#define MAP_PWMDeadBandEnable                                                 \
N        ROM_PWMDeadBandEnable
X#define MAP_PWMDeadBandEnable                                                         ROM_PWMDeadBandEnable
N#else
S#define MAP_PWMDeadBandEnable                                                 \
S        PWMDeadBandEnable
X#define MAP_PWMDeadBandEnable                                                         PWMDeadBandEnable
N#endif
N#ifdef ROM_PWMDeadBandDisable
N#define MAP_PWMDeadBandDisable                                                \
N        ROM_PWMDeadBandDisable
X#define MAP_PWMDeadBandDisable                                                        ROM_PWMDeadBandDisable
N#else
S#define MAP_PWMDeadBandDisable                                                \
S        PWMDeadBandDisable
X#define MAP_PWMDeadBandDisable                                                        PWMDeadBandDisable
N#endif
N#ifdef ROM_PWMSyncUpdate
N#define MAP_PWMSyncUpdate                                                     \
N        ROM_PWMSyncUpdate
X#define MAP_PWMSyncUpdate                                                             ROM_PWMSyncUpdate
N#else
S#define MAP_PWMSyncUpdate                                                     \
S        PWMSyncUpdate
X#define MAP_PWMSyncUpdate                                                             PWMSyncUpdate
N#endif
N#ifdef ROM_PWMSyncTimeBase
N#define MAP_PWMSyncTimeBase                                                   \
N        ROM_PWMSyncTimeBase
X#define MAP_PWMSyncTimeBase                                                           ROM_PWMSyncTimeBase
N#else
S#define MAP_PWMSyncTimeBase                                                   \
S        PWMSyncTimeBase
X#define MAP_PWMSyncTimeBase                                                           PWMSyncTimeBase
N#endif
N#ifdef ROM_PWMOutputState
N#define MAP_PWMOutputState                                                    \
N        ROM_PWMOutputState
X#define MAP_PWMOutputState                                                            ROM_PWMOutputState
N#else
S#define MAP_PWMOutputState                                                    \
S        PWMOutputState
X#define MAP_PWMOutputState                                                            PWMOutputState
N#endif
N#ifdef ROM_PWMOutputInvert
N#define MAP_PWMOutputInvert                                                   \
N        ROM_PWMOutputInvert
X#define MAP_PWMOutputInvert                                                           ROM_PWMOutputInvert
N#else
S#define MAP_PWMOutputInvert                                                   \
S        PWMOutputInvert
X#define MAP_PWMOutputInvert                                                           PWMOutputInvert
N#endif
N#ifdef ROM_PWMOutputFault
N#define MAP_PWMOutputFault                                                    \
N        ROM_PWMOutputFault
X#define MAP_PWMOutputFault                                                            ROM_PWMOutputFault
N#else
S#define MAP_PWMOutputFault                                                    \
S        PWMOutputFault
X#define MAP_PWMOutputFault                                                            PWMOutputFault
N#endif
N#ifdef ROM_PWMGenIntTrigEnable
N#define MAP_PWMGenIntTrigEnable                                               \
N        ROM_PWMGenIntTrigEnable
X#define MAP_PWMGenIntTrigEnable                                                       ROM_PWMGenIntTrigEnable
N#else
S#define MAP_PWMGenIntTrigEnable                                               \
S        PWMGenIntTrigEnable
X#define MAP_PWMGenIntTrigEnable                                                       PWMGenIntTrigEnable
N#endif
N#ifdef ROM_PWMGenIntTrigDisable
N#define MAP_PWMGenIntTrigDisable                                              \
N        ROM_PWMGenIntTrigDisable
X#define MAP_PWMGenIntTrigDisable                                                      ROM_PWMGenIntTrigDisable
N#else
S#define MAP_PWMGenIntTrigDisable                                              \
S        PWMGenIntTrigDisable
X#define MAP_PWMGenIntTrigDisable                                                      PWMGenIntTrigDisable
N#endif
N#ifdef ROM_PWMGenIntStatus
N#define MAP_PWMGenIntStatus                                                   \
N        ROM_PWMGenIntStatus
X#define MAP_PWMGenIntStatus                                                           ROM_PWMGenIntStatus
N#else
S#define MAP_PWMGenIntStatus                                                   \
S        PWMGenIntStatus
X#define MAP_PWMGenIntStatus                                                           PWMGenIntStatus
N#endif
N#ifdef ROM_PWMGenIntClear
N#define MAP_PWMGenIntClear                                                    \
N        ROM_PWMGenIntClear
X#define MAP_PWMGenIntClear                                                            ROM_PWMGenIntClear
N#else
S#define MAP_PWMGenIntClear                                                    \
S        PWMGenIntClear
X#define MAP_PWMGenIntClear                                                            PWMGenIntClear
N#endif
N#ifdef ROM_PWMIntEnable
N#define MAP_PWMIntEnable                                                      \
N        ROM_PWMIntEnable
X#define MAP_PWMIntEnable                                                              ROM_PWMIntEnable
N#else
S#define MAP_PWMIntEnable                                                      \
S        PWMIntEnable
X#define MAP_PWMIntEnable                                                              PWMIntEnable
N#endif
N#ifdef ROM_PWMIntDisable
N#define MAP_PWMIntDisable                                                     \
N        ROM_PWMIntDisable
X#define MAP_PWMIntDisable                                                             ROM_PWMIntDisable
N#else
S#define MAP_PWMIntDisable                                                     \
S        PWMIntDisable
X#define MAP_PWMIntDisable                                                             PWMIntDisable
N#endif
N#ifdef ROM_PWMFaultIntClear
N#define MAP_PWMFaultIntClear                                                  \
N        ROM_PWMFaultIntClear
X#define MAP_PWMFaultIntClear                                                          ROM_PWMFaultIntClear
N#else
S#define MAP_PWMFaultIntClear                                                  \
S        PWMFaultIntClear
X#define MAP_PWMFaultIntClear                                                          PWMFaultIntClear
N#endif
N#ifdef ROM_PWMIntStatus
N#define MAP_PWMIntStatus                                                      \
N        ROM_PWMIntStatus
X#define MAP_PWMIntStatus                                                              ROM_PWMIntStatus
N#else
S#define MAP_PWMIntStatus                                                      \
S        PWMIntStatus
X#define MAP_PWMIntStatus                                                              PWMIntStatus
N#endif
N#ifdef ROM_PWMOutputFaultLevel
N#define MAP_PWMOutputFaultLevel                                               \
N        ROM_PWMOutputFaultLevel
X#define MAP_PWMOutputFaultLevel                                                       ROM_PWMOutputFaultLevel
N#else
S#define MAP_PWMOutputFaultLevel                                               \
S        PWMOutputFaultLevel
X#define MAP_PWMOutputFaultLevel                                                       PWMOutputFaultLevel
N#endif
N#ifdef ROM_PWMFaultIntClearExt
N#define MAP_PWMFaultIntClearExt                                               \
N        ROM_PWMFaultIntClearExt
X#define MAP_PWMFaultIntClearExt                                                       ROM_PWMFaultIntClearExt
N#else
S#define MAP_PWMFaultIntClearExt                                               \
S        PWMFaultIntClearExt
X#define MAP_PWMFaultIntClearExt                                                       PWMFaultIntClearExt
N#endif
N#ifdef ROM_PWMGenFaultConfigure
N#define MAP_PWMGenFaultConfigure                                              \
N        ROM_PWMGenFaultConfigure
X#define MAP_PWMGenFaultConfigure                                                      ROM_PWMGenFaultConfigure
N#else
S#define MAP_PWMGenFaultConfigure                                              \
S        PWMGenFaultConfigure
X#define MAP_PWMGenFaultConfigure                                                      PWMGenFaultConfigure
N#endif
N#ifdef ROM_PWMGenFaultTriggerSet
N#define MAP_PWMGenFaultTriggerSet                                             \
N        ROM_PWMGenFaultTriggerSet
X#define MAP_PWMGenFaultTriggerSet                                                     ROM_PWMGenFaultTriggerSet
N#else
S#define MAP_PWMGenFaultTriggerSet                                             \
S        PWMGenFaultTriggerSet
X#define MAP_PWMGenFaultTriggerSet                                                     PWMGenFaultTriggerSet
N#endif
N#ifdef ROM_PWMGenFaultTriggerGet
N#define MAP_PWMGenFaultTriggerGet                                             \
N        ROM_PWMGenFaultTriggerGet
X#define MAP_PWMGenFaultTriggerGet                                                     ROM_PWMGenFaultTriggerGet
N#else
S#define MAP_PWMGenFaultTriggerGet                                             \
S        PWMGenFaultTriggerGet
X#define MAP_PWMGenFaultTriggerGet                                                     PWMGenFaultTriggerGet
N#endif
N#ifdef ROM_PWMGenFaultStatus
N#define MAP_PWMGenFaultStatus                                                 \
N        ROM_PWMGenFaultStatus
X#define MAP_PWMGenFaultStatus                                                         ROM_PWMGenFaultStatus
N#else
S#define MAP_PWMGenFaultStatus                                                 \
S        PWMGenFaultStatus
X#define MAP_PWMGenFaultStatus                                                         PWMGenFaultStatus
N#endif
N#ifdef ROM_PWMGenFaultClear
N#define MAP_PWMGenFaultClear                                                  \
N        ROM_PWMGenFaultClear
X#define MAP_PWMGenFaultClear                                                          ROM_PWMGenFaultClear
N#else
S#define MAP_PWMGenFaultClear                                                  \
S        PWMGenFaultClear
X#define MAP_PWMGenFaultClear                                                          PWMGenFaultClear
N#endif
N#ifdef ROM_PWMClockSet
S#define MAP_PWMClockSet                                                       \
S        ROM_PWMClockSet
X#define MAP_PWMClockSet                                                               ROM_PWMClockSet
N#else
N#define MAP_PWMClockSet                                                       \
N        PWMClockSet
X#define MAP_PWMClockSet                                                               PWMClockSet
N#endif
N#ifdef ROM_PWMClockGet
S#define MAP_PWMClockGet                                                       \
S        ROM_PWMClockGet
X#define MAP_PWMClockGet                                                               ROM_PWMClockGet
N#else
N#define MAP_PWMClockGet                                                       \
N        PWMClockGet
X#define MAP_PWMClockGet                                                               PWMClockGet
N#endif
N#ifdef ROM_PWMOutputUpdateMode
N#define MAP_PWMOutputUpdateMode                                               \
N        ROM_PWMOutputUpdateMode
X#define MAP_PWMOutputUpdateMode                                                       ROM_PWMOutputUpdateMode
N#else
S#define MAP_PWMOutputUpdateMode                                               \
S        PWMOutputUpdateMode
X#define MAP_PWMOutputUpdateMode                                                       PWMOutputUpdateMode
N#endif
N
N//*****************************************************************************
N//
N// Macros for the QEI API.
N//
N//*****************************************************************************
N#ifdef ROM_QEIPositionGet
N#define MAP_QEIPositionGet                                                    \
N        ROM_QEIPositionGet
X#define MAP_QEIPositionGet                                                            ROM_QEIPositionGet
N#else
S#define MAP_QEIPositionGet                                                    \
S        QEIPositionGet
X#define MAP_QEIPositionGet                                                            QEIPositionGet
N#endif
N#ifdef ROM_QEIEnable
N#define MAP_QEIEnable                                                         \
N        ROM_QEIEnable
X#define MAP_QEIEnable                                                                 ROM_QEIEnable
N#else
S#define MAP_QEIEnable                                                         \
S        QEIEnable
X#define MAP_QEIEnable                                                                 QEIEnable
N#endif
N#ifdef ROM_QEIDisable
N#define MAP_QEIDisable                                                        \
N        ROM_QEIDisable
X#define MAP_QEIDisable                                                                ROM_QEIDisable
N#else
S#define MAP_QEIDisable                                                        \
S        QEIDisable
X#define MAP_QEIDisable                                                                QEIDisable
N#endif
N#ifdef ROM_QEIConfigure
N#define MAP_QEIConfigure                                                      \
N        ROM_QEIConfigure
X#define MAP_QEIConfigure                                                              ROM_QEIConfigure
N#else
S#define MAP_QEIConfigure                                                      \
S        QEIConfigure
X#define MAP_QEIConfigure                                                              QEIConfigure
N#endif
N#ifdef ROM_QEIPositionSet
N#define MAP_QEIPositionSet                                                    \
N        ROM_QEIPositionSet
X#define MAP_QEIPositionSet                                                            ROM_QEIPositionSet
N#else
S#define MAP_QEIPositionSet                                                    \
S        QEIPositionSet
X#define MAP_QEIPositionSet                                                            QEIPositionSet
N#endif
N#ifdef ROM_QEIDirectionGet
N#define MAP_QEIDirectionGet                                                   \
N        ROM_QEIDirectionGet
X#define MAP_QEIDirectionGet                                                           ROM_QEIDirectionGet
N#else
S#define MAP_QEIDirectionGet                                                   \
S        QEIDirectionGet
X#define MAP_QEIDirectionGet                                                           QEIDirectionGet
N#endif
N#ifdef ROM_QEIErrorGet
N#define MAP_QEIErrorGet                                                       \
N        ROM_QEIErrorGet
X#define MAP_QEIErrorGet                                                               ROM_QEIErrorGet
N#else
S#define MAP_QEIErrorGet                                                       \
S        QEIErrorGet
X#define MAP_QEIErrorGet                                                               QEIErrorGet
N#endif
N#ifdef ROM_QEIVelocityEnable
N#define MAP_QEIVelocityEnable                                                 \
N        ROM_QEIVelocityEnable
X#define MAP_QEIVelocityEnable                                                         ROM_QEIVelocityEnable
N#else
S#define MAP_QEIVelocityEnable                                                 \
S        QEIVelocityEnable
X#define MAP_QEIVelocityEnable                                                         QEIVelocityEnable
N#endif
N#ifdef ROM_QEIVelocityDisable
N#define MAP_QEIVelocityDisable                                                \
N        ROM_QEIVelocityDisable
X#define MAP_QEIVelocityDisable                                                        ROM_QEIVelocityDisable
N#else
S#define MAP_QEIVelocityDisable                                                \
S        QEIVelocityDisable
X#define MAP_QEIVelocityDisable                                                        QEIVelocityDisable
N#endif
N#ifdef ROM_QEIVelocityConfigure
N#define MAP_QEIVelocityConfigure                                              \
N        ROM_QEIVelocityConfigure
X#define MAP_QEIVelocityConfigure                                                      ROM_QEIVelocityConfigure
N#else
S#define MAP_QEIVelocityConfigure                                              \
S        QEIVelocityConfigure
X#define MAP_QEIVelocityConfigure                                                      QEIVelocityConfigure
N#endif
N#ifdef ROM_QEIVelocityGet
N#define MAP_QEIVelocityGet                                                    \
N        ROM_QEIVelocityGet
X#define MAP_QEIVelocityGet                                                            ROM_QEIVelocityGet
N#else
S#define MAP_QEIVelocityGet                                                    \
S        QEIVelocityGet
X#define MAP_QEIVelocityGet                                                            QEIVelocityGet
N#endif
N#ifdef ROM_QEIIntEnable
N#define MAP_QEIIntEnable                                                      \
N        ROM_QEIIntEnable
X#define MAP_QEIIntEnable                                                              ROM_QEIIntEnable
N#else
S#define MAP_QEIIntEnable                                                      \
S        QEIIntEnable
X#define MAP_QEIIntEnable                                                              QEIIntEnable
N#endif
N#ifdef ROM_QEIIntDisable
N#define MAP_QEIIntDisable                                                     \
N        ROM_QEIIntDisable
X#define MAP_QEIIntDisable                                                             ROM_QEIIntDisable
N#else
S#define MAP_QEIIntDisable                                                     \
S        QEIIntDisable
X#define MAP_QEIIntDisable                                                             QEIIntDisable
N#endif
N#ifdef ROM_QEIIntStatus
N#define MAP_QEIIntStatus                                                      \
N        ROM_QEIIntStatus
X#define MAP_QEIIntStatus                                                              ROM_QEIIntStatus
N#else
S#define MAP_QEIIntStatus                                                      \
S        QEIIntStatus
X#define MAP_QEIIntStatus                                                              QEIIntStatus
N#endif
N#ifdef ROM_QEIIntClear
N#define MAP_QEIIntClear                                                       \
N        ROM_QEIIntClear
X#define MAP_QEIIntClear                                                               ROM_QEIIntClear
N#else
S#define MAP_QEIIntClear                                                       \
S        QEIIntClear
X#define MAP_QEIIntClear                                                               QEIIntClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SHAMD5 API.
N//
N//*****************************************************************************
N#ifdef ROM_SHAMD5IntStatus
S#define MAP_SHAMD5IntStatus                                                   \
S        ROM_SHAMD5IntStatus
X#define MAP_SHAMD5IntStatus                                                           ROM_SHAMD5IntStatus
N#else
N#define MAP_SHAMD5IntStatus                                                   \
N        SHAMD5IntStatus
X#define MAP_SHAMD5IntStatus                                                           SHAMD5IntStatus
N#endif
N#ifdef ROM_SHAMD5ConfigSet
S#define MAP_SHAMD5ConfigSet                                                   \
S        ROM_SHAMD5ConfigSet
X#define MAP_SHAMD5ConfigSet                                                           ROM_SHAMD5ConfigSet
N#else
N#define MAP_SHAMD5ConfigSet                                                   \
N        SHAMD5ConfigSet
X#define MAP_SHAMD5ConfigSet                                                           SHAMD5ConfigSet
N#endif
N#ifdef ROM_SHAMD5DataProcess
S#define MAP_SHAMD5DataProcess                                                 \
S        ROM_SHAMD5DataProcess
X#define MAP_SHAMD5DataProcess                                                         ROM_SHAMD5DataProcess
N#else
N#define MAP_SHAMD5DataProcess                                                 \
N        SHAMD5DataProcess
X#define MAP_SHAMD5DataProcess                                                         SHAMD5DataProcess
N#endif
N#ifdef ROM_SHAMD5DataWrite
S#define MAP_SHAMD5DataWrite                                                   \
S        ROM_SHAMD5DataWrite
X#define MAP_SHAMD5DataWrite                                                           ROM_SHAMD5DataWrite
N#else
N#define MAP_SHAMD5DataWrite                                                   \
N        SHAMD5DataWrite
X#define MAP_SHAMD5DataWrite                                                           SHAMD5DataWrite
N#endif
N#ifdef ROM_SHAMD5DataWriteNonBlocking
S#define MAP_SHAMD5DataWriteNonBlocking                                        \
S        ROM_SHAMD5DataWriteNonBlocking
X#define MAP_SHAMD5DataWriteNonBlocking                                                ROM_SHAMD5DataWriteNonBlocking
N#else
N#define MAP_SHAMD5DataWriteNonBlocking                                        \
N        SHAMD5DataWriteNonBlocking
X#define MAP_SHAMD5DataWriteNonBlocking                                                SHAMD5DataWriteNonBlocking
N#endif
N#ifdef ROM_SHAMD5DMADisable
S#define MAP_SHAMD5DMADisable                                                  \
S        ROM_SHAMD5DMADisable
X#define MAP_SHAMD5DMADisable                                                          ROM_SHAMD5DMADisable
N#else
N#define MAP_SHAMD5DMADisable                                                  \
N        SHAMD5DMADisable
X#define MAP_SHAMD5DMADisable                                                          SHAMD5DMADisable
N#endif
N#ifdef ROM_SHAMD5DMAEnable
S#define MAP_SHAMD5DMAEnable                                                   \
S        ROM_SHAMD5DMAEnable
X#define MAP_SHAMD5DMAEnable                                                           ROM_SHAMD5DMAEnable
N#else
N#define MAP_SHAMD5DMAEnable                                                   \
N        SHAMD5DMAEnable
X#define MAP_SHAMD5DMAEnable                                                           SHAMD5DMAEnable
N#endif
N#ifdef ROM_SHAMD5HashLengthSet
S#define MAP_SHAMD5HashLengthSet                                               \
S        ROM_SHAMD5HashLengthSet
X#define MAP_SHAMD5HashLengthSet                                                       ROM_SHAMD5HashLengthSet
N#else
N#define MAP_SHAMD5HashLengthSet                                               \
N        SHAMD5HashLengthSet
X#define MAP_SHAMD5HashLengthSet                                                       SHAMD5HashLengthSet
N#endif
N#ifdef ROM_SHAMD5HMACKeySet
S#define MAP_SHAMD5HMACKeySet                                                  \
S        ROM_SHAMD5HMACKeySet
X#define MAP_SHAMD5HMACKeySet                                                          ROM_SHAMD5HMACKeySet
N#else
N#define MAP_SHAMD5HMACKeySet                                                  \
N        SHAMD5HMACKeySet
X#define MAP_SHAMD5HMACKeySet                                                          SHAMD5HMACKeySet
N#endif
N#ifdef ROM_SHAMD5HMACPPKeyGenerate
S#define MAP_SHAMD5HMACPPKeyGenerate                                           \
S        ROM_SHAMD5HMACPPKeyGenerate
X#define MAP_SHAMD5HMACPPKeyGenerate                                                   ROM_SHAMD5HMACPPKeyGenerate
N#else
N#define MAP_SHAMD5HMACPPKeyGenerate                                           \
N        SHAMD5HMACPPKeyGenerate
X#define MAP_SHAMD5HMACPPKeyGenerate                                                   SHAMD5HMACPPKeyGenerate
N#endif
N#ifdef ROM_SHAMD5HMACPPKeySet
S#define MAP_SHAMD5HMACPPKeySet                                                \
S        ROM_SHAMD5HMACPPKeySet
X#define MAP_SHAMD5HMACPPKeySet                                                        ROM_SHAMD5HMACPPKeySet
N#else
N#define MAP_SHAMD5HMACPPKeySet                                                \
N        SHAMD5HMACPPKeySet
X#define MAP_SHAMD5HMACPPKeySet                                                        SHAMD5HMACPPKeySet
N#endif
N#ifdef ROM_SHAMD5HMACProcess
S#define MAP_SHAMD5HMACProcess                                                 \
S        ROM_SHAMD5HMACProcess
X#define MAP_SHAMD5HMACProcess                                                         ROM_SHAMD5HMACProcess
N#else
N#define MAP_SHAMD5HMACProcess                                                 \
N        SHAMD5HMACProcess
X#define MAP_SHAMD5HMACProcess                                                         SHAMD5HMACProcess
N#endif
N#ifdef ROM_SHAMD5IntClear
S#define MAP_SHAMD5IntClear                                                    \
S        ROM_SHAMD5IntClear
X#define MAP_SHAMD5IntClear                                                            ROM_SHAMD5IntClear
N#else
N#define MAP_SHAMD5IntClear                                                    \
N        SHAMD5IntClear
X#define MAP_SHAMD5IntClear                                                            SHAMD5IntClear
N#endif
N#ifdef ROM_SHAMD5IntDisable
S#define MAP_SHAMD5IntDisable                                                  \
S        ROM_SHAMD5IntDisable
X#define MAP_SHAMD5IntDisable                                                          ROM_SHAMD5IntDisable
N#else
N#define MAP_SHAMD5IntDisable                                                  \
N        SHAMD5IntDisable
X#define MAP_SHAMD5IntDisable                                                          SHAMD5IntDisable
N#endif
N#ifdef ROM_SHAMD5IntEnable
S#define MAP_SHAMD5IntEnable                                                   \
S        ROM_SHAMD5IntEnable
X#define MAP_SHAMD5IntEnable                                                           ROM_SHAMD5IntEnable
N#else
N#define MAP_SHAMD5IntEnable                                                   \
N        SHAMD5IntEnable
X#define MAP_SHAMD5IntEnable                                                           SHAMD5IntEnable
N#endif
N#ifdef ROM_SHAMD5Reset
S#define MAP_SHAMD5Reset                                                       \
S        ROM_SHAMD5Reset
X#define MAP_SHAMD5Reset                                                               ROM_SHAMD5Reset
N#else
N#define MAP_SHAMD5Reset                                                       \
N        SHAMD5Reset
X#define MAP_SHAMD5Reset                                                               SHAMD5Reset
N#endif
N#ifdef ROM_SHAMD5ResultRead
S#define MAP_SHAMD5ResultRead                                                  \
S        ROM_SHAMD5ResultRead
X#define MAP_SHAMD5ResultRead                                                          ROM_SHAMD5ResultRead
N#else
N#define MAP_SHAMD5ResultRead                                                  \
N        SHAMD5ResultRead
X#define MAP_SHAMD5ResultRead                                                          SHAMD5ResultRead
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SMBus API.
N//
N//*****************************************************************************
N#ifdef ROM_SMBusMasterIntProcess
N#define MAP_SMBusMasterIntProcess                                             \
N        ROM_SMBusMasterIntProcess
X#define MAP_SMBusMasterIntProcess                                                     ROM_SMBusMasterIntProcess
N#else
S#define MAP_SMBusMasterIntProcess                                             \
S        SMBusMasterIntProcess
X#define MAP_SMBusMasterIntProcess                                                     SMBusMasterIntProcess
N#endif
N#ifdef ROM_SMBusARPDisable
N#define MAP_SMBusARPDisable                                                   \
N        ROM_SMBusARPDisable
X#define MAP_SMBusARPDisable                                                           ROM_SMBusARPDisable
N#else
S#define MAP_SMBusARPDisable                                                   \
S        SMBusARPDisable
X#define MAP_SMBusARPDisable                                                           SMBusARPDisable
N#endif
N#ifdef ROM_SMBusARPEnable
N#define MAP_SMBusARPEnable                                                    \
N        ROM_SMBusARPEnable
X#define MAP_SMBusARPEnable                                                            ROM_SMBusARPEnable
N#else
S#define MAP_SMBusARPEnable                                                    \
S        SMBusARPEnable
X#define MAP_SMBusARPEnable                                                            SMBusARPEnable
N#endif
N#ifdef ROM_SMBusARPUDIDPacketDecode
N#define MAP_SMBusARPUDIDPacketDecode                                          \
N        ROM_SMBusARPUDIDPacketDecode
X#define MAP_SMBusARPUDIDPacketDecode                                                  ROM_SMBusARPUDIDPacketDecode
N#else
S#define MAP_SMBusARPUDIDPacketDecode                                          \
S        SMBusARPUDIDPacketDecode
X#define MAP_SMBusARPUDIDPacketDecode                                                  SMBusARPUDIDPacketDecode
N#endif
N#ifdef ROM_SMBusARPUDIDPacketEncode
N#define MAP_SMBusARPUDIDPacketEncode                                          \
N        ROM_SMBusARPUDIDPacketEncode
X#define MAP_SMBusARPUDIDPacketEncode                                                  ROM_SMBusARPUDIDPacketEncode
N#else
S#define MAP_SMBusARPUDIDPacketEncode                                          \
S        SMBusARPUDIDPacketEncode
X#define MAP_SMBusARPUDIDPacketEncode                                                  SMBusARPUDIDPacketEncode
N#endif
N#ifdef ROM_SMBusMasterARPAssignAddress
N#define MAP_SMBusMasterARPAssignAddress                                       \
N        ROM_SMBusMasterARPAssignAddress
X#define MAP_SMBusMasterARPAssignAddress                                               ROM_SMBusMasterARPAssignAddress
N#else
S#define MAP_SMBusMasterARPAssignAddress                                       \
S        SMBusMasterARPAssignAddress
X#define MAP_SMBusMasterARPAssignAddress                                               SMBusMasterARPAssignAddress
N#endif
N#ifdef ROM_SMBusMasterARPGetUDIDDir
N#define MAP_SMBusMasterARPGetUDIDDir                                          \
N        ROM_SMBusMasterARPGetUDIDDir
X#define MAP_SMBusMasterARPGetUDIDDir                                                  ROM_SMBusMasterARPGetUDIDDir
N#else
S#define MAP_SMBusMasterARPGetUDIDDir                                          \
S        SMBusMasterARPGetUDIDDir
X#define MAP_SMBusMasterARPGetUDIDDir                                                  SMBusMasterARPGetUDIDDir
N#endif
N#ifdef ROM_SMBusMasterARPGetUDIDGen
N#define MAP_SMBusMasterARPGetUDIDGen                                          \
N        ROM_SMBusMasterARPGetUDIDGen
X#define MAP_SMBusMasterARPGetUDIDGen                                                  ROM_SMBusMasterARPGetUDIDGen
N#else
S#define MAP_SMBusMasterARPGetUDIDGen                                          \
S        SMBusMasterARPGetUDIDGen
X#define MAP_SMBusMasterARPGetUDIDGen                                                  SMBusMasterARPGetUDIDGen
N#endif
N#ifdef ROM_SMBusMasterARPNotifyMaster
N#define MAP_SMBusMasterARPNotifyMaster                                        \
N        ROM_SMBusMasterARPNotifyMaster
X#define MAP_SMBusMasterARPNotifyMaster                                                ROM_SMBusMasterARPNotifyMaster
N#else
S#define MAP_SMBusMasterARPNotifyMaster                                        \
S        SMBusMasterARPNotifyMaster
X#define MAP_SMBusMasterARPNotifyMaster                                                SMBusMasterARPNotifyMaster
N#endif
N#ifdef ROM_SMBusMasterARPPrepareToARP
N#define MAP_SMBusMasterARPPrepareToARP                                        \
N        ROM_SMBusMasterARPPrepareToARP
X#define MAP_SMBusMasterARPPrepareToARP                                                ROM_SMBusMasterARPPrepareToARP
N#else
S#define MAP_SMBusMasterARPPrepareToARP                                        \
S        SMBusMasterARPPrepareToARP
X#define MAP_SMBusMasterARPPrepareToARP                                                SMBusMasterARPPrepareToARP
N#endif
N#ifdef ROM_SMBusMasterARPResetDeviceDir
N#define MAP_SMBusMasterARPResetDeviceDir                                      \
N        ROM_SMBusMasterARPResetDeviceDir
X#define MAP_SMBusMasterARPResetDeviceDir                                              ROM_SMBusMasterARPResetDeviceDir
N#else
S#define MAP_SMBusMasterARPResetDeviceDir                                      \
S        SMBusMasterARPResetDeviceDir
X#define MAP_SMBusMasterARPResetDeviceDir                                              SMBusMasterARPResetDeviceDir
N#endif
N#ifdef ROM_SMBusMasterARPResetDeviceGen
N#define MAP_SMBusMasterARPResetDeviceGen                                      \
N        ROM_SMBusMasterARPResetDeviceGen
X#define MAP_SMBusMasterARPResetDeviceGen                                              ROM_SMBusMasterARPResetDeviceGen
N#else
S#define MAP_SMBusMasterARPResetDeviceGen                                      \
S        SMBusMasterARPResetDeviceGen
X#define MAP_SMBusMasterARPResetDeviceGen                                              SMBusMasterARPResetDeviceGen
N#endif
N#ifdef ROM_SMBusMasterBlockProcessCall
N#define MAP_SMBusMasterBlockProcessCall                                       \
N        ROM_SMBusMasterBlockProcessCall
X#define MAP_SMBusMasterBlockProcessCall                                               ROM_SMBusMasterBlockProcessCall
N#else
S#define MAP_SMBusMasterBlockProcessCall                                       \
S        SMBusMasterBlockProcessCall
X#define MAP_SMBusMasterBlockProcessCall                                               SMBusMasterBlockProcessCall
N#endif
N#ifdef ROM_SMBusMasterBlockRead
N#define MAP_SMBusMasterBlockRead                                              \
N        ROM_SMBusMasterBlockRead
X#define MAP_SMBusMasterBlockRead                                                      ROM_SMBusMasterBlockRead
N#else
S#define MAP_SMBusMasterBlockRead                                              \
S        SMBusMasterBlockRead
X#define MAP_SMBusMasterBlockRead                                                      SMBusMasterBlockRead
N#endif
N#ifdef ROM_SMBusMasterBlockWrite
N#define MAP_SMBusMasterBlockWrite                                             \
N        ROM_SMBusMasterBlockWrite
X#define MAP_SMBusMasterBlockWrite                                                     ROM_SMBusMasterBlockWrite
N#else
S#define MAP_SMBusMasterBlockWrite                                             \
S        SMBusMasterBlockWrite
X#define MAP_SMBusMasterBlockWrite                                                     SMBusMasterBlockWrite
N#endif
N#ifdef ROM_SMBusMasterByteReceive
N#define MAP_SMBusMasterByteReceive                                            \
N        ROM_SMBusMasterByteReceive
X#define MAP_SMBusMasterByteReceive                                                    ROM_SMBusMasterByteReceive
N#else
S#define MAP_SMBusMasterByteReceive                                            \
S        SMBusMasterByteReceive
X#define MAP_SMBusMasterByteReceive                                                    SMBusMasterByteReceive
N#endif
N#ifdef ROM_SMBusMasterByteSend
N#define MAP_SMBusMasterByteSend                                               \
N        ROM_SMBusMasterByteSend
X#define MAP_SMBusMasterByteSend                                                       ROM_SMBusMasterByteSend
N#else
S#define MAP_SMBusMasterByteSend                                               \
S        SMBusMasterByteSend
X#define MAP_SMBusMasterByteSend                                                       SMBusMasterByteSend
N#endif
N#ifdef ROM_SMBusMasterByteWordRead
N#define MAP_SMBusMasterByteWordRead                                           \
N        ROM_SMBusMasterByteWordRead
X#define MAP_SMBusMasterByteWordRead                                                   ROM_SMBusMasterByteWordRead
N#else
S#define MAP_SMBusMasterByteWordRead                                           \
S        SMBusMasterByteWordRead
X#define MAP_SMBusMasterByteWordRead                                                   SMBusMasterByteWordRead
N#endif
N#ifdef ROM_SMBusMasterByteWordWrite
N#define MAP_SMBusMasterByteWordWrite                                          \
N        ROM_SMBusMasterByteWordWrite
X#define MAP_SMBusMasterByteWordWrite                                                  ROM_SMBusMasterByteWordWrite
N#else
S#define MAP_SMBusMasterByteWordWrite                                          \
S        SMBusMasterByteWordWrite
X#define MAP_SMBusMasterByteWordWrite                                                  SMBusMasterByteWordWrite
N#endif
N#ifdef ROM_SMBusMasterHostNotify
N#define MAP_SMBusMasterHostNotify                                             \
N        ROM_SMBusMasterHostNotify
X#define MAP_SMBusMasterHostNotify                                                     ROM_SMBusMasterHostNotify
N#else
S#define MAP_SMBusMasterHostNotify                                             \
S        SMBusMasterHostNotify
X#define MAP_SMBusMasterHostNotify                                                     SMBusMasterHostNotify
N#endif
N#ifdef ROM_SMBusMasterI2CRead
N#define MAP_SMBusMasterI2CRead                                                \
N        ROM_SMBusMasterI2CRead
X#define MAP_SMBusMasterI2CRead                                                        ROM_SMBusMasterI2CRead
N#else
S#define MAP_SMBusMasterI2CRead                                                \
S        SMBusMasterI2CRead
X#define MAP_SMBusMasterI2CRead                                                        SMBusMasterI2CRead
N#endif
N#ifdef ROM_SMBusMasterI2CWrite
N#define MAP_SMBusMasterI2CWrite                                               \
N        ROM_SMBusMasterI2CWrite
X#define MAP_SMBusMasterI2CWrite                                                       ROM_SMBusMasterI2CWrite
N#else
S#define MAP_SMBusMasterI2CWrite                                               \
S        SMBusMasterI2CWrite
X#define MAP_SMBusMasterI2CWrite                                                       SMBusMasterI2CWrite
N#endif
N#ifdef ROM_SMBusMasterI2CWriteRead
N#define MAP_SMBusMasterI2CWriteRead                                           \
N        ROM_SMBusMasterI2CWriteRead
X#define MAP_SMBusMasterI2CWriteRead                                                   ROM_SMBusMasterI2CWriteRead
N#else
S#define MAP_SMBusMasterI2CWriteRead                                           \
S        SMBusMasterI2CWriteRead
X#define MAP_SMBusMasterI2CWriteRead                                                   SMBusMasterI2CWriteRead
N#endif
N#ifdef ROM_SMBusMasterInit
N#define MAP_SMBusMasterInit                                                   \
N        ROM_SMBusMasterInit
X#define MAP_SMBusMasterInit                                                           ROM_SMBusMasterInit
N#else
S#define MAP_SMBusMasterInit                                                   \
S        SMBusMasterInit
X#define MAP_SMBusMasterInit                                                           SMBusMasterInit
N#endif
N#ifdef ROM_SMBusMasterIntEnable
N#define MAP_SMBusMasterIntEnable                                              \
N        ROM_SMBusMasterIntEnable
X#define MAP_SMBusMasterIntEnable                                                      ROM_SMBusMasterIntEnable
N#else
S#define MAP_SMBusMasterIntEnable                                              \
S        SMBusMasterIntEnable
X#define MAP_SMBusMasterIntEnable                                                      SMBusMasterIntEnable
N#endif
N#ifdef ROM_SMBusMasterProcessCall
N#define MAP_SMBusMasterProcessCall                                            \
N        ROM_SMBusMasterProcessCall
X#define MAP_SMBusMasterProcessCall                                                    ROM_SMBusMasterProcessCall
N#else
S#define MAP_SMBusMasterProcessCall                                            \
S        SMBusMasterProcessCall
X#define MAP_SMBusMasterProcessCall                                                    SMBusMasterProcessCall
N#endif
N#ifdef ROM_SMBusMasterQuickCommand
N#define MAP_SMBusMasterQuickCommand                                           \
N        ROM_SMBusMasterQuickCommand
X#define MAP_SMBusMasterQuickCommand                                                   ROM_SMBusMasterQuickCommand
N#else
S#define MAP_SMBusMasterQuickCommand                                           \
S        SMBusMasterQuickCommand
X#define MAP_SMBusMasterQuickCommand                                                   SMBusMasterQuickCommand
N#endif
N#ifdef ROM_SMBusPECDisable
N#define MAP_SMBusPECDisable                                                   \
N        ROM_SMBusPECDisable
X#define MAP_SMBusPECDisable                                                           ROM_SMBusPECDisable
N#else
S#define MAP_SMBusPECDisable                                                   \
S        SMBusPECDisable
X#define MAP_SMBusPECDisable                                                           SMBusPECDisable
N#endif
N#ifdef ROM_SMBusPECEnable
N#define MAP_SMBusPECEnable                                                    \
N        ROM_SMBusPECEnable
X#define MAP_SMBusPECEnable                                                            ROM_SMBusPECEnable
N#else
S#define MAP_SMBusPECEnable                                                    \
S        SMBusPECEnable
X#define MAP_SMBusPECEnable                                                            SMBusPECEnable
N#endif
N#ifdef ROM_SMBusRxPacketSizeGet
N#define MAP_SMBusRxPacketSizeGet                                              \
N        ROM_SMBusRxPacketSizeGet
X#define MAP_SMBusRxPacketSizeGet                                                      ROM_SMBusRxPacketSizeGet
N#else
S#define MAP_SMBusRxPacketSizeGet                                              \
S        SMBusRxPacketSizeGet
X#define MAP_SMBusRxPacketSizeGet                                                      SMBusRxPacketSizeGet
N#endif
N#ifdef ROM_SMBusSlaveACKSend
N#define MAP_SMBusSlaveACKSend                                                 \
N        ROM_SMBusSlaveACKSend
X#define MAP_SMBusSlaveACKSend                                                         ROM_SMBusSlaveACKSend
N#else
S#define MAP_SMBusSlaveACKSend                                                 \
S        SMBusSlaveACKSend
X#define MAP_SMBusSlaveACKSend                                                         SMBusSlaveACKSend
N#endif
N#ifdef ROM_SMBusSlaveAddressSet
N#define MAP_SMBusSlaveAddressSet                                              \
N        ROM_SMBusSlaveAddressSet
X#define MAP_SMBusSlaveAddressSet                                                      ROM_SMBusSlaveAddressSet
N#else
S#define MAP_SMBusSlaveAddressSet                                              \
S        SMBusSlaveAddressSet
X#define MAP_SMBusSlaveAddressSet                                                      SMBusSlaveAddressSet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagARGet
N#define MAP_SMBusSlaveARPFlagARGet                                            \
N        ROM_SMBusSlaveARPFlagARGet
X#define MAP_SMBusSlaveARPFlagARGet                                                    ROM_SMBusSlaveARPFlagARGet
N#else
S#define MAP_SMBusSlaveARPFlagARGet                                            \
S        SMBusSlaveARPFlagARGet
X#define MAP_SMBusSlaveARPFlagARGet                                                    SMBusSlaveARPFlagARGet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagARSet
N#define MAP_SMBusSlaveARPFlagARSet                                            \
N        ROM_SMBusSlaveARPFlagARSet
X#define MAP_SMBusSlaveARPFlagARSet                                                    ROM_SMBusSlaveARPFlagARSet
N#else
S#define MAP_SMBusSlaveARPFlagARSet                                            \
S        SMBusSlaveARPFlagARSet
X#define MAP_SMBusSlaveARPFlagARSet                                                    SMBusSlaveARPFlagARSet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagAVGet
N#define MAP_SMBusSlaveARPFlagAVGet                                            \
N        ROM_SMBusSlaveARPFlagAVGet
X#define MAP_SMBusSlaveARPFlagAVGet                                                    ROM_SMBusSlaveARPFlagAVGet
N#else
S#define MAP_SMBusSlaveARPFlagAVGet                                            \
S        SMBusSlaveARPFlagAVGet
X#define MAP_SMBusSlaveARPFlagAVGet                                                    SMBusSlaveARPFlagAVGet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagAVSet
N#define MAP_SMBusSlaveARPFlagAVSet                                            \
N        ROM_SMBusSlaveARPFlagAVSet
X#define MAP_SMBusSlaveARPFlagAVSet                                                    ROM_SMBusSlaveARPFlagAVSet
N#else
S#define MAP_SMBusSlaveARPFlagAVSet                                            \
S        SMBusSlaveARPFlagAVSet
X#define MAP_SMBusSlaveARPFlagAVSet                                                    SMBusSlaveARPFlagAVSet
N#endif
N#ifdef ROM_SMBusSlaveBlockTransferDisable
N#define MAP_SMBusSlaveBlockTransferDisable                                    \
N        ROM_SMBusSlaveBlockTransferDisable
X#define MAP_SMBusSlaveBlockTransferDisable                                            ROM_SMBusSlaveBlockTransferDisable
N#else
S#define MAP_SMBusSlaveBlockTransferDisable                                    \
S        SMBusSlaveBlockTransferDisable
X#define MAP_SMBusSlaveBlockTransferDisable                                            SMBusSlaveBlockTransferDisable
N#endif
N#ifdef ROM_SMBusSlaveBlockTransferEnable
N#define MAP_SMBusSlaveBlockTransferEnable                                     \
N        ROM_SMBusSlaveBlockTransferEnable
X#define MAP_SMBusSlaveBlockTransferEnable                                             ROM_SMBusSlaveBlockTransferEnable
N#else
S#define MAP_SMBusSlaveBlockTransferEnable                                     \
S        SMBusSlaveBlockTransferEnable
X#define MAP_SMBusSlaveBlockTransferEnable                                             SMBusSlaveBlockTransferEnable
N#endif
N#ifdef ROM_SMBusSlaveCommandGet
N#define MAP_SMBusSlaveCommandGet                                              \
N        ROM_SMBusSlaveCommandGet
X#define MAP_SMBusSlaveCommandGet                                                      ROM_SMBusSlaveCommandGet
N#else
S#define MAP_SMBusSlaveCommandGet                                              \
S        SMBusSlaveCommandGet
X#define MAP_SMBusSlaveCommandGet                                                      SMBusSlaveCommandGet
N#endif
N#ifdef ROM_SMBusSlaveI2CDisable
N#define MAP_SMBusSlaveI2CDisable                                              \
N        ROM_SMBusSlaveI2CDisable
X#define MAP_SMBusSlaveI2CDisable                                                      ROM_SMBusSlaveI2CDisable
N#else
S#define MAP_SMBusSlaveI2CDisable                                              \
S        SMBusSlaveI2CDisable
X#define MAP_SMBusSlaveI2CDisable                                                      SMBusSlaveI2CDisable
N#endif
N#ifdef ROM_SMBusSlaveI2CEnable
N#define MAP_SMBusSlaveI2CEnable                                               \
N        ROM_SMBusSlaveI2CEnable
X#define MAP_SMBusSlaveI2CEnable                                                       ROM_SMBusSlaveI2CEnable
N#else
S#define MAP_SMBusSlaveI2CEnable                                               \
S        SMBusSlaveI2CEnable
X#define MAP_SMBusSlaveI2CEnable                                                       SMBusSlaveI2CEnable
N#endif
N#ifdef ROM_SMBusSlaveInit
N#define MAP_SMBusSlaveInit                                                    \
N        ROM_SMBusSlaveInit
X#define MAP_SMBusSlaveInit                                                            ROM_SMBusSlaveInit
N#else
S#define MAP_SMBusSlaveInit                                                    \
S        SMBusSlaveInit
X#define MAP_SMBusSlaveInit                                                            SMBusSlaveInit
N#endif
N#ifdef ROM_SMBusSlaveIntAddressGet
N#define MAP_SMBusSlaveIntAddressGet                                           \
N        ROM_SMBusSlaveIntAddressGet
X#define MAP_SMBusSlaveIntAddressGet                                                   ROM_SMBusSlaveIntAddressGet
N#else
S#define MAP_SMBusSlaveIntAddressGet                                           \
S        SMBusSlaveIntAddressGet
X#define MAP_SMBusSlaveIntAddressGet                                                   SMBusSlaveIntAddressGet
N#endif
N#ifdef ROM_SMBusSlaveIntEnable
N#define MAP_SMBusSlaveIntEnable                                               \
N        ROM_SMBusSlaveIntEnable
X#define MAP_SMBusSlaveIntEnable                                                       ROM_SMBusSlaveIntEnable
N#else
S#define MAP_SMBusSlaveIntEnable                                               \
S        SMBusSlaveIntEnable
X#define MAP_SMBusSlaveIntEnable                                                       SMBusSlaveIntEnable
N#endif
N#ifdef ROM_SMBusSlaveIntProcess
N#define MAP_SMBusSlaveIntProcess                                              \
N        ROM_SMBusSlaveIntProcess
X#define MAP_SMBusSlaveIntProcess                                                      ROM_SMBusSlaveIntProcess
N#else
S#define MAP_SMBusSlaveIntProcess                                              \
S        SMBusSlaveIntProcess
X#define MAP_SMBusSlaveIntProcess                                                      SMBusSlaveIntProcess
N#endif
N#ifdef ROM_SMBusSlaveManualACKDisable
N#define MAP_SMBusSlaveManualACKDisable                                        \
N        ROM_SMBusSlaveManualACKDisable
X#define MAP_SMBusSlaveManualACKDisable                                                ROM_SMBusSlaveManualACKDisable
N#else
S#define MAP_SMBusSlaveManualACKDisable                                        \
S        SMBusSlaveManualACKDisable
X#define MAP_SMBusSlaveManualACKDisable                                                SMBusSlaveManualACKDisable
N#endif
N#ifdef ROM_SMBusSlaveManualACKEnable
N#define MAP_SMBusSlaveManualACKEnable                                         \
N        ROM_SMBusSlaveManualACKEnable
X#define MAP_SMBusSlaveManualACKEnable                                                 ROM_SMBusSlaveManualACKEnable
N#else
S#define MAP_SMBusSlaveManualACKEnable                                         \
S        SMBusSlaveManualACKEnable
X#define MAP_SMBusSlaveManualACKEnable                                                 SMBusSlaveManualACKEnable
N#endif
N#ifdef ROM_SMBusSlaveManualACKStatusGet
N#define MAP_SMBusSlaveManualACKStatusGet                                      \
N        ROM_SMBusSlaveManualACKStatusGet
X#define MAP_SMBusSlaveManualACKStatusGet                                              ROM_SMBusSlaveManualACKStatusGet
N#else
S#define MAP_SMBusSlaveManualACKStatusGet                                      \
S        SMBusSlaveManualACKStatusGet
X#define MAP_SMBusSlaveManualACKStatusGet                                              SMBusSlaveManualACKStatusGet
N#endif
N#ifdef ROM_SMBusSlaveProcessCallDisable
N#define MAP_SMBusSlaveProcessCallDisable                                      \
N        ROM_SMBusSlaveProcessCallDisable
X#define MAP_SMBusSlaveProcessCallDisable                                              ROM_SMBusSlaveProcessCallDisable
N#else
S#define MAP_SMBusSlaveProcessCallDisable                                      \
S        SMBusSlaveProcessCallDisable
X#define MAP_SMBusSlaveProcessCallDisable                                              SMBusSlaveProcessCallDisable
N#endif
N#ifdef ROM_SMBusSlaveProcessCallEnable
N#define MAP_SMBusSlaveProcessCallEnable                                       \
N        ROM_SMBusSlaveProcessCallEnable
X#define MAP_SMBusSlaveProcessCallEnable                                               ROM_SMBusSlaveProcessCallEnable
N#else
S#define MAP_SMBusSlaveProcessCallEnable                                       \
S        SMBusSlaveProcessCallEnable
X#define MAP_SMBusSlaveProcessCallEnable                                               SMBusSlaveProcessCallEnable
N#endif
N#ifdef ROM_SMBusSlaveRxBufferSet
N#define MAP_SMBusSlaveRxBufferSet                                             \
N        ROM_SMBusSlaveRxBufferSet
X#define MAP_SMBusSlaveRxBufferSet                                                     ROM_SMBusSlaveRxBufferSet
N#else
S#define MAP_SMBusSlaveRxBufferSet                                             \
S        SMBusSlaveRxBufferSet
X#define MAP_SMBusSlaveRxBufferSet                                                     SMBusSlaveRxBufferSet
N#endif
N#ifdef ROM_SMBusSlaveTransferInit
N#define MAP_SMBusSlaveTransferInit                                            \
N        ROM_SMBusSlaveTransferInit
X#define MAP_SMBusSlaveTransferInit                                                    ROM_SMBusSlaveTransferInit
N#else
S#define MAP_SMBusSlaveTransferInit                                            \
S        SMBusSlaveTransferInit
X#define MAP_SMBusSlaveTransferInit                                                    SMBusSlaveTransferInit
N#endif
N#ifdef ROM_SMBusSlaveTxBufferSet
N#define MAP_SMBusSlaveTxBufferSet                                             \
N        ROM_SMBusSlaveTxBufferSet
X#define MAP_SMBusSlaveTxBufferSet                                                     ROM_SMBusSlaveTxBufferSet
N#else
S#define MAP_SMBusSlaveTxBufferSet                                             \
S        SMBusSlaveTxBufferSet
X#define MAP_SMBusSlaveTxBufferSet                                                     SMBusSlaveTxBufferSet
N#endif
N#ifdef ROM_SMBusSlaveUDIDSet
N#define MAP_SMBusSlaveUDIDSet                                                 \
N        ROM_SMBusSlaveUDIDSet
X#define MAP_SMBusSlaveUDIDSet                                                         ROM_SMBusSlaveUDIDSet
N#else
S#define MAP_SMBusSlaveUDIDSet                                                 \
S        SMBusSlaveUDIDSet
X#define MAP_SMBusSlaveUDIDSet                                                         SMBusSlaveUDIDSet
N#endif
N#ifdef ROM_SMBusStatusGet
N#define MAP_SMBusStatusGet                                                    \
N        ROM_SMBusStatusGet
X#define MAP_SMBusStatusGet                                                            ROM_SMBusStatusGet
N#else
S#define MAP_SMBusStatusGet                                                    \
S        SMBusStatusGet
X#define MAP_SMBusStatusGet                                                            SMBusStatusGet
N#endif
N#ifdef ROM_SMBusSlaveDataSend
N#define MAP_SMBusSlaveDataSend                                                \
N        ROM_SMBusSlaveDataSend
X#define MAP_SMBusSlaveDataSend                                                        ROM_SMBusSlaveDataSend
N#else
S#define MAP_SMBusSlaveDataSend                                                \
S        SMBusSlaveDataSend
X#define MAP_SMBusSlaveDataSend                                                        SMBusSlaveDataSend
N#endif
N#ifdef ROM_SMBusFIFOEnable
S#define MAP_SMBusFIFOEnable                                                   \
S        ROM_SMBusFIFOEnable
X#define MAP_SMBusFIFOEnable                                                           ROM_SMBusFIFOEnable
N#else
N#define MAP_SMBusFIFOEnable                                                   \
N        SMBusFIFOEnable
X#define MAP_SMBusFIFOEnable                                                           SMBusFIFOEnable
N#endif
N#ifdef ROM_SMBusFIFODisable
S#define MAP_SMBusFIFODisable                                                  \
S        ROM_SMBusFIFODisable
X#define MAP_SMBusFIFODisable                                                          ROM_SMBusFIFODisable
N#else
N#define MAP_SMBusFIFODisable                                                  \
N        SMBusFIFODisable
X#define MAP_SMBusFIFODisable                                                          SMBusFIFODisable
N#endif
N#ifdef ROM_SMBusDMAEnable
S#define MAP_SMBusDMAEnable                                                    \
S        ROM_SMBusDMAEnable
X#define MAP_SMBusDMAEnable                                                            ROM_SMBusDMAEnable
N#else
N#define MAP_SMBusDMAEnable                                                    \
N        SMBusDMAEnable
X#define MAP_SMBusDMAEnable                                                            SMBusDMAEnable
N#endif
N#ifdef ROM_SMBusDMADisable
S#define MAP_SMBusDMADisable                                                   \
S        ROM_SMBusDMADisable
X#define MAP_SMBusDMADisable                                                           ROM_SMBusDMADisable
N#else
N#define MAP_SMBusDMADisable                                                   \
N        SMBusDMADisable
X#define MAP_SMBusDMADisable                                                           SMBusDMADisable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SPIFlash API.
N//
N//*****************************************************************************
N#ifdef ROM_SPIFlashIntHandler
S#define MAP_SPIFlashIntHandler                                                \
S        ROM_SPIFlashIntHandler
X#define MAP_SPIFlashIntHandler                                                        ROM_SPIFlashIntHandler
N#else
N#define MAP_SPIFlashIntHandler                                                \
N        SPIFlashIntHandler
X#define MAP_SPIFlashIntHandler                                                        SPIFlashIntHandler
N#endif
N#ifdef ROM_SPIFlashInit
S#define MAP_SPIFlashInit                                                      \
S        ROM_SPIFlashInit
X#define MAP_SPIFlashInit                                                              ROM_SPIFlashInit
N#else
N#define MAP_SPIFlashInit                                                      \
N        SPIFlashInit
X#define MAP_SPIFlashInit                                                              SPIFlashInit
N#endif
N#ifdef ROM_SPIFlashWriteStatus
S#define MAP_SPIFlashWriteStatus                                               \
S        ROM_SPIFlashWriteStatus
X#define MAP_SPIFlashWriteStatus                                                       ROM_SPIFlashWriteStatus
N#else
N#define MAP_SPIFlashWriteStatus                                               \
N        SPIFlashWriteStatus
X#define MAP_SPIFlashWriteStatus                                                       SPIFlashWriteStatus
N#endif
N#ifdef ROM_SPIFlashPageProgram
S#define MAP_SPIFlashPageProgram                                               \
S        ROM_SPIFlashPageProgram
X#define MAP_SPIFlashPageProgram                                                       ROM_SPIFlashPageProgram
N#else
N#define MAP_SPIFlashPageProgram                                               \
N        SPIFlashPageProgram
X#define MAP_SPIFlashPageProgram                                                       SPIFlashPageProgram
N#endif
N#ifdef ROM_SPIFlashPageProgramNonBlocking
S#define MAP_SPIFlashPageProgramNonBlocking                                    \
S        ROM_SPIFlashPageProgramNonBlocking
X#define MAP_SPIFlashPageProgramNonBlocking                                            ROM_SPIFlashPageProgramNonBlocking
N#else
N#define MAP_SPIFlashPageProgramNonBlocking                                    \
N        SPIFlashPageProgramNonBlocking
X#define MAP_SPIFlashPageProgramNonBlocking                                            SPIFlashPageProgramNonBlocking
N#endif
N#ifdef ROM_SPIFlashRead
S#define MAP_SPIFlashRead                                                      \
S        ROM_SPIFlashRead
X#define MAP_SPIFlashRead                                                              ROM_SPIFlashRead
N#else
N#define MAP_SPIFlashRead                                                      \
N        SPIFlashRead
X#define MAP_SPIFlashRead                                                              SPIFlashRead
N#endif
N#ifdef ROM_SPIFlashReadNonBlocking
S#define MAP_SPIFlashReadNonBlocking                                           \
S        ROM_SPIFlashReadNonBlocking
X#define MAP_SPIFlashReadNonBlocking                                                   ROM_SPIFlashReadNonBlocking
N#else
N#define MAP_SPIFlashReadNonBlocking                                           \
N        SPIFlashReadNonBlocking
X#define MAP_SPIFlashReadNonBlocking                                                   SPIFlashReadNonBlocking
N#endif
N#ifdef ROM_SPIFlashWriteDisable
S#define MAP_SPIFlashWriteDisable                                              \
S        ROM_SPIFlashWriteDisable
X#define MAP_SPIFlashWriteDisable                                                      ROM_SPIFlashWriteDisable
N#else
N#define MAP_SPIFlashWriteDisable                                              \
N        SPIFlashWriteDisable
X#define MAP_SPIFlashWriteDisable                                                      SPIFlashWriteDisable
N#endif
N#ifdef ROM_SPIFlashReadStatus
S#define MAP_SPIFlashReadStatus                                                \
S        ROM_SPIFlashReadStatus
X#define MAP_SPIFlashReadStatus                                                        ROM_SPIFlashReadStatus
N#else
N#define MAP_SPIFlashReadStatus                                                \
N        SPIFlashReadStatus
X#define MAP_SPIFlashReadStatus                                                        SPIFlashReadStatus
N#endif
N#ifdef ROM_SPIFlashWriteEnable
S#define MAP_SPIFlashWriteEnable                                               \
S        ROM_SPIFlashWriteEnable
X#define MAP_SPIFlashWriteEnable                                                       ROM_SPIFlashWriteEnable
N#else
N#define MAP_SPIFlashWriteEnable                                               \
N        SPIFlashWriteEnable
X#define MAP_SPIFlashWriteEnable                                                       SPIFlashWriteEnable
N#endif
N#ifdef ROM_SPIFlashFastRead
S#define MAP_SPIFlashFastRead                                                  \
S        ROM_SPIFlashFastRead
X#define MAP_SPIFlashFastRead                                                          ROM_SPIFlashFastRead
N#else
N#define MAP_SPIFlashFastRead                                                  \
N        SPIFlashFastRead
X#define MAP_SPIFlashFastRead                                                          SPIFlashFastRead
N#endif
N#ifdef ROM_SPIFlashFastReadNonBlocking
S#define MAP_SPIFlashFastReadNonBlocking                                       \
S        ROM_SPIFlashFastReadNonBlocking
X#define MAP_SPIFlashFastReadNonBlocking                                               ROM_SPIFlashFastReadNonBlocking
N#else
N#define MAP_SPIFlashFastReadNonBlocking                                       \
N        SPIFlashFastReadNonBlocking
X#define MAP_SPIFlashFastReadNonBlocking                                               SPIFlashFastReadNonBlocking
N#endif
N#ifdef ROM_SPIFlashSectorErase
S#define MAP_SPIFlashSectorErase                                               \
S        ROM_SPIFlashSectorErase
X#define MAP_SPIFlashSectorErase                                                       ROM_SPIFlashSectorErase
N#else
N#define MAP_SPIFlashSectorErase                                               \
N        SPIFlashSectorErase
X#define MAP_SPIFlashSectorErase                                                       SPIFlashSectorErase
N#endif
N#ifdef ROM_SPIFlashDualRead
S#define MAP_SPIFlashDualRead                                                  \
S        ROM_SPIFlashDualRead
X#define MAP_SPIFlashDualRead                                                          ROM_SPIFlashDualRead
N#else
N#define MAP_SPIFlashDualRead                                                  \
N        SPIFlashDualRead
X#define MAP_SPIFlashDualRead                                                          SPIFlashDualRead
N#endif
N#ifdef ROM_SPIFlashDualReadNonBlocking
S#define MAP_SPIFlashDualReadNonBlocking                                       \
S        ROM_SPIFlashDualReadNonBlocking
X#define MAP_SPIFlashDualReadNonBlocking                                               ROM_SPIFlashDualReadNonBlocking
N#else
N#define MAP_SPIFlashDualReadNonBlocking                                       \
N        SPIFlashDualReadNonBlocking
X#define MAP_SPIFlashDualReadNonBlocking                                               SPIFlashDualReadNonBlocking
N#endif
N#ifdef ROM_SPIFlashBlockErase32
S#define MAP_SPIFlashBlockErase32                                              \
S        ROM_SPIFlashBlockErase32
X#define MAP_SPIFlashBlockErase32                                                      ROM_SPIFlashBlockErase32
N#else
N#define MAP_SPIFlashBlockErase32                                              \
N        SPIFlashBlockErase32
X#define MAP_SPIFlashBlockErase32                                                      SPIFlashBlockErase32
N#endif
N#ifdef ROM_SPIFlashQuadRead
S#define MAP_SPIFlashQuadRead                                                  \
S        ROM_SPIFlashQuadRead
X#define MAP_SPIFlashQuadRead                                                          ROM_SPIFlashQuadRead
N#else
N#define MAP_SPIFlashQuadRead                                                  \
N        SPIFlashQuadRead
X#define MAP_SPIFlashQuadRead                                                          SPIFlashQuadRead
N#endif
N#ifdef ROM_SPIFlashQuadReadNonBlocking
S#define MAP_SPIFlashQuadReadNonBlocking                                       \
S        ROM_SPIFlashQuadReadNonBlocking
X#define MAP_SPIFlashQuadReadNonBlocking                                               ROM_SPIFlashQuadReadNonBlocking
N#else
N#define MAP_SPIFlashQuadReadNonBlocking                                       \
N        SPIFlashQuadReadNonBlocking
X#define MAP_SPIFlashQuadReadNonBlocking                                               SPIFlashQuadReadNonBlocking
N#endif
N#ifdef ROM_SPIFlashReadID
S#define MAP_SPIFlashReadID                                                    \
S        ROM_SPIFlashReadID
X#define MAP_SPIFlashReadID                                                            ROM_SPIFlashReadID
N#else
N#define MAP_SPIFlashReadID                                                    \
N        SPIFlashReadID
X#define MAP_SPIFlashReadID                                                            SPIFlashReadID
N#endif
N#ifdef ROM_SPIFlashChipErase
S#define MAP_SPIFlashChipErase                                                 \
S        ROM_SPIFlashChipErase
X#define MAP_SPIFlashChipErase                                                         ROM_SPIFlashChipErase
N#else
N#define MAP_SPIFlashChipErase                                                 \
N        SPIFlashChipErase
X#define MAP_SPIFlashChipErase                                                         SPIFlashChipErase
N#endif
N#ifdef ROM_SPIFlashBlockErase64
S#define MAP_SPIFlashBlockErase64                                              \
S        ROM_SPIFlashBlockErase64
X#define MAP_SPIFlashBlockErase64                                                      ROM_SPIFlashBlockErase64
N#else
N#define MAP_SPIFlashBlockErase64                                              \
N        SPIFlashBlockErase64
X#define MAP_SPIFlashBlockErase64                                                      SPIFlashBlockErase64
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SSI API.
N//
N//*****************************************************************************
N#ifdef ROM_SSIDataPut
N#define MAP_SSIDataPut                                                        \
N        ROM_SSIDataPut
X#define MAP_SSIDataPut                                                                ROM_SSIDataPut
N#else
S#define MAP_SSIDataPut                                                        \
S        SSIDataPut
X#define MAP_SSIDataPut                                                                SSIDataPut
N#endif
N#ifdef ROM_SSIConfigSetExpClk
N#define MAP_SSIConfigSetExpClk                                                \
N        ROM_SSIConfigSetExpClk
X#define MAP_SSIConfigSetExpClk                                                        ROM_SSIConfigSetExpClk
N#else
S#define MAP_SSIConfigSetExpClk                                                \
S        SSIConfigSetExpClk
X#define MAP_SSIConfigSetExpClk                                                        SSIConfigSetExpClk
N#endif
N#ifdef ROM_SSIEnable
N#define MAP_SSIEnable                                                         \
N        ROM_SSIEnable
X#define MAP_SSIEnable                                                                 ROM_SSIEnable
N#else
S#define MAP_SSIEnable                                                         \
S        SSIEnable
X#define MAP_SSIEnable                                                                 SSIEnable
N#endif
N#ifdef ROM_SSIDisable
N#define MAP_SSIDisable                                                        \
N        ROM_SSIDisable
X#define MAP_SSIDisable                                                                ROM_SSIDisable
N#else
S#define MAP_SSIDisable                                                        \
S        SSIDisable
X#define MAP_SSIDisable                                                                SSIDisable
N#endif
N#ifdef ROM_SSIIntEnable
N#define MAP_SSIIntEnable                                                      \
N        ROM_SSIIntEnable
X#define MAP_SSIIntEnable                                                              ROM_SSIIntEnable
N#else
S#define MAP_SSIIntEnable                                                      \
S        SSIIntEnable
X#define MAP_SSIIntEnable                                                              SSIIntEnable
N#endif
N#ifdef ROM_SSIIntDisable
N#define MAP_SSIIntDisable                                                     \
N        ROM_SSIIntDisable
X#define MAP_SSIIntDisable                                                             ROM_SSIIntDisable
N#else
S#define MAP_SSIIntDisable                                                     \
S        SSIIntDisable
X#define MAP_SSIIntDisable                                                             SSIIntDisable
N#endif
N#ifdef ROM_SSIIntStatus
N#define MAP_SSIIntStatus                                                      \
N        ROM_SSIIntStatus
X#define MAP_SSIIntStatus                                                              ROM_SSIIntStatus
N#else
S#define MAP_SSIIntStatus                                                      \
S        SSIIntStatus
X#define MAP_SSIIntStatus                                                              SSIIntStatus
N#endif
N#ifdef ROM_SSIIntClear
N#define MAP_SSIIntClear                                                       \
N        ROM_SSIIntClear
X#define MAP_SSIIntClear                                                               ROM_SSIIntClear
N#else
S#define MAP_SSIIntClear                                                       \
S        SSIIntClear
X#define MAP_SSIIntClear                                                               SSIIntClear
N#endif
N#ifdef ROM_SSIDataPutNonBlocking
N#define MAP_SSIDataPutNonBlocking                                             \
N        ROM_SSIDataPutNonBlocking
X#define MAP_SSIDataPutNonBlocking                                                     ROM_SSIDataPutNonBlocking
N#else
S#define MAP_SSIDataPutNonBlocking                                             \
S        SSIDataPutNonBlocking
X#define MAP_SSIDataPutNonBlocking                                                     SSIDataPutNonBlocking
N#endif
N#ifdef ROM_SSIDataGet
N#define MAP_SSIDataGet                                                        \
N        ROM_SSIDataGet
X#define MAP_SSIDataGet                                                                ROM_SSIDataGet
N#else
S#define MAP_SSIDataGet                                                        \
S        SSIDataGet
X#define MAP_SSIDataGet                                                                SSIDataGet
N#endif
N#ifdef ROM_SSIDataGetNonBlocking
N#define MAP_SSIDataGetNonBlocking                                             \
N        ROM_SSIDataGetNonBlocking
X#define MAP_SSIDataGetNonBlocking                                                     ROM_SSIDataGetNonBlocking
N#else
S#define MAP_SSIDataGetNonBlocking                                             \
S        SSIDataGetNonBlocking
X#define MAP_SSIDataGetNonBlocking                                                     SSIDataGetNonBlocking
N#endif
N#ifdef ROM_SSIDMAEnable
N#define MAP_SSIDMAEnable                                                      \
N        ROM_SSIDMAEnable
X#define MAP_SSIDMAEnable                                                              ROM_SSIDMAEnable
N#else
S#define MAP_SSIDMAEnable                                                      \
S        SSIDMAEnable
X#define MAP_SSIDMAEnable                                                              SSIDMAEnable
N#endif
N#ifdef ROM_SSIDMADisable
N#define MAP_SSIDMADisable                                                     \
N        ROM_SSIDMADisable
X#define MAP_SSIDMADisable                                                             ROM_SSIDMADisable
N#else
S#define MAP_SSIDMADisable                                                     \
S        SSIDMADisable
X#define MAP_SSIDMADisable                                                             SSIDMADisable
N#endif
N#ifdef ROM_SSIBusy
N#define MAP_SSIBusy                                                           \
N        ROM_SSIBusy
X#define MAP_SSIBusy                                                                   ROM_SSIBusy
N#else
S#define MAP_SSIBusy                                                           \
S        SSIBusy
X#define MAP_SSIBusy                                                                   SSIBusy
N#endif
N#ifdef ROM_SSIClockSourceGet
N#define MAP_SSIClockSourceGet                                                 \
N        ROM_SSIClockSourceGet
X#define MAP_SSIClockSourceGet                                                         ROM_SSIClockSourceGet
N#else
S#define MAP_SSIClockSourceGet                                                 \
S        SSIClockSourceGet
X#define MAP_SSIClockSourceGet                                                         SSIClockSourceGet
N#endif
N#ifdef ROM_SSIClockSourceSet
N#define MAP_SSIClockSourceSet                                                 \
N        ROM_SSIClockSourceSet
X#define MAP_SSIClockSourceSet                                                         ROM_SSIClockSourceSet
N#else
S#define MAP_SSIClockSourceSet                                                 \
S        SSIClockSourceSet
X#define MAP_SSIClockSourceSet                                                         SSIClockSourceSet
N#endif
N#ifdef ROM_SSIAdvModeSet
S#define MAP_SSIAdvModeSet                                                     \
S        ROM_SSIAdvModeSet
X#define MAP_SSIAdvModeSet                                                             ROM_SSIAdvModeSet
N#else
N#define MAP_SSIAdvModeSet                                                     \
N        SSIAdvModeSet
X#define MAP_SSIAdvModeSet                                                             SSIAdvModeSet
N#endif
N#ifdef ROM_SSIAdvDataPutFrameEnd
S#define MAP_SSIAdvDataPutFrameEnd                                             \
S        ROM_SSIAdvDataPutFrameEnd
X#define MAP_SSIAdvDataPutFrameEnd                                                     ROM_SSIAdvDataPutFrameEnd
N#else
N#define MAP_SSIAdvDataPutFrameEnd                                             \
N        SSIAdvDataPutFrameEnd
X#define MAP_SSIAdvDataPutFrameEnd                                                     SSIAdvDataPutFrameEnd
N#endif
N#ifdef ROM_SSIAdvDataPutFrameEndNonBlocking
S#define MAP_SSIAdvDataPutFrameEndNonBlocking                                  \
S        ROM_SSIAdvDataPutFrameEndNonBlocking
X#define MAP_SSIAdvDataPutFrameEndNonBlocking                                          ROM_SSIAdvDataPutFrameEndNonBlocking
N#else
N#define MAP_SSIAdvDataPutFrameEndNonBlocking                                  \
N        SSIAdvDataPutFrameEndNonBlocking
X#define MAP_SSIAdvDataPutFrameEndNonBlocking                                          SSIAdvDataPutFrameEndNonBlocking
N#endif
N#ifdef ROM_SSIAdvFrameHoldEnable
S#define MAP_SSIAdvFrameHoldEnable                                             \
S        ROM_SSIAdvFrameHoldEnable
X#define MAP_SSIAdvFrameHoldEnable                                                     ROM_SSIAdvFrameHoldEnable
N#else
N#define MAP_SSIAdvFrameHoldEnable                                             \
N        SSIAdvFrameHoldEnable
X#define MAP_SSIAdvFrameHoldEnable                                                     SSIAdvFrameHoldEnable
N#endif
N#ifdef ROM_SSIAdvFrameHoldDisable
S#define MAP_SSIAdvFrameHoldDisable                                            \
S        ROM_SSIAdvFrameHoldDisable
X#define MAP_SSIAdvFrameHoldDisable                                                    ROM_SSIAdvFrameHoldDisable
N#else
N#define MAP_SSIAdvFrameHoldDisable                                            \
N        SSIAdvFrameHoldDisable
X#define MAP_SSIAdvFrameHoldDisable                                                    SSIAdvFrameHoldDisable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysCtl API.
N//
N//*****************************************************************************
N#ifdef ROM_SysCtlSleep
N#define MAP_SysCtlSleep                                                       \
N        ROM_SysCtlSleep
X#define MAP_SysCtlSleep                                                               ROM_SysCtlSleep
N#else
S#define MAP_SysCtlSleep                                                       \
S        SysCtlSleep
X#define MAP_SysCtlSleep                                                               SysCtlSleep
N#endif
N#ifdef ROM_SysCtlSRAMSizeGet
N#define MAP_SysCtlSRAMSizeGet                                                 \
N        ROM_SysCtlSRAMSizeGet
X#define MAP_SysCtlSRAMSizeGet                                                         ROM_SysCtlSRAMSizeGet
N#else
S#define MAP_SysCtlSRAMSizeGet                                                 \
S        SysCtlSRAMSizeGet
X#define MAP_SysCtlSRAMSizeGet                                                         SysCtlSRAMSizeGet
N#endif
N#ifdef ROM_SysCtlFlashSizeGet
N#define MAP_SysCtlFlashSizeGet                                                \
N        ROM_SysCtlFlashSizeGet
X#define MAP_SysCtlFlashSizeGet                                                        ROM_SysCtlFlashSizeGet
N#else
S#define MAP_SysCtlFlashSizeGet                                                \
S        SysCtlFlashSizeGet
X#define MAP_SysCtlFlashSizeGet                                                        SysCtlFlashSizeGet
N#endif
N#ifdef ROM_SysCtlPeripheralPresent
N#define MAP_SysCtlPeripheralPresent                                           \
N        ROM_SysCtlPeripheralPresent
X#define MAP_SysCtlPeripheralPresent                                                   ROM_SysCtlPeripheralPresent
N#else
S#define MAP_SysCtlPeripheralPresent                                           \
S        SysCtlPeripheralPresent
X#define MAP_SysCtlPeripheralPresent                                                   SysCtlPeripheralPresent
N#endif
N#ifdef ROM_SysCtlPeripheralReset
N#define MAP_SysCtlPeripheralReset                                             \
N        ROM_SysCtlPeripheralReset
X#define MAP_SysCtlPeripheralReset                                                     ROM_SysCtlPeripheralReset
N#else
S#define MAP_SysCtlPeripheralReset                                             \
S        SysCtlPeripheralReset
X#define MAP_SysCtlPeripheralReset                                                     SysCtlPeripheralReset
N#endif
N#ifdef ROM_SysCtlPeripheralEnable
N#define MAP_SysCtlPeripheralEnable                                            \
N        ROM_SysCtlPeripheralEnable
X#define MAP_SysCtlPeripheralEnable                                                    ROM_SysCtlPeripheralEnable
N#else
S#define MAP_SysCtlPeripheralEnable                                            \
S        SysCtlPeripheralEnable
X#define MAP_SysCtlPeripheralEnable                                                    SysCtlPeripheralEnable
N#endif
N#ifdef ROM_SysCtlPeripheralDisable
N#define MAP_SysCtlPeripheralDisable                                           \
N        ROM_SysCtlPeripheralDisable
X#define MAP_SysCtlPeripheralDisable                                                   ROM_SysCtlPeripheralDisable
N#else
S#define MAP_SysCtlPeripheralDisable                                           \
S        SysCtlPeripheralDisable
X#define MAP_SysCtlPeripheralDisable                                                   SysCtlPeripheralDisable
N#endif
N#ifdef ROM_SysCtlPeripheralSleepEnable
N#define MAP_SysCtlPeripheralSleepEnable                                       \
N        ROM_SysCtlPeripheralSleepEnable
X#define MAP_SysCtlPeripheralSleepEnable                                               ROM_SysCtlPeripheralSleepEnable
N#else
S#define MAP_SysCtlPeripheralSleepEnable                                       \
S        SysCtlPeripheralSleepEnable
X#define MAP_SysCtlPeripheralSleepEnable                                               SysCtlPeripheralSleepEnable
N#endif
N#ifdef ROM_SysCtlPeripheralSleepDisable
N#define MAP_SysCtlPeripheralSleepDisable                                      \
N        ROM_SysCtlPeripheralSleepDisable
X#define MAP_SysCtlPeripheralSleepDisable                                              ROM_SysCtlPeripheralSleepDisable
N#else
S#define MAP_SysCtlPeripheralSleepDisable                                      \
S        SysCtlPeripheralSleepDisable
X#define MAP_SysCtlPeripheralSleepDisable                                              SysCtlPeripheralSleepDisable
N#endif
N#ifdef ROM_SysCtlPeripheralDeepSleepEnable
N#define MAP_SysCtlPeripheralDeepSleepEnable                                   \
N        ROM_SysCtlPeripheralDeepSleepEnable
X#define MAP_SysCtlPeripheralDeepSleepEnable                                           ROM_SysCtlPeripheralDeepSleepEnable
N#else
S#define MAP_SysCtlPeripheralDeepSleepEnable                                   \
S        SysCtlPeripheralDeepSleepEnable
X#define MAP_SysCtlPeripheralDeepSleepEnable                                           SysCtlPeripheralDeepSleepEnable
N#endif
N#ifdef ROM_SysCtlPeripheralDeepSleepDisable
N#define MAP_SysCtlPeripheralDeepSleepDisable                                  \
N        ROM_SysCtlPeripheralDeepSleepDisable
X#define MAP_SysCtlPeripheralDeepSleepDisable                                          ROM_SysCtlPeripheralDeepSleepDisable
N#else
S#define MAP_SysCtlPeripheralDeepSleepDisable                                  \
S        SysCtlPeripheralDeepSleepDisable
X#define MAP_SysCtlPeripheralDeepSleepDisable                                          SysCtlPeripheralDeepSleepDisable
N#endif
N#ifdef ROM_SysCtlPeripheralClockGating
N#define MAP_SysCtlPeripheralClockGating                                       \
N        ROM_SysCtlPeripheralClockGating
X#define MAP_SysCtlPeripheralClockGating                                               ROM_SysCtlPeripheralClockGating
N#else
S#define MAP_SysCtlPeripheralClockGating                                       \
S        SysCtlPeripheralClockGating
X#define MAP_SysCtlPeripheralClockGating                                               SysCtlPeripheralClockGating
N#endif
N#ifdef ROM_SysCtlIntEnable
N#define MAP_SysCtlIntEnable                                                   \
N        ROM_SysCtlIntEnable
X#define MAP_SysCtlIntEnable                                                           ROM_SysCtlIntEnable
N#else
S#define MAP_SysCtlIntEnable                                                   \
S        SysCtlIntEnable
X#define MAP_SysCtlIntEnable                                                           SysCtlIntEnable
N#endif
N#ifdef ROM_SysCtlIntDisable
N#define MAP_SysCtlIntDisable                                                  \
N        ROM_SysCtlIntDisable
X#define MAP_SysCtlIntDisable                                                          ROM_SysCtlIntDisable
N#else
S#define MAP_SysCtlIntDisable                                                  \
S        SysCtlIntDisable
X#define MAP_SysCtlIntDisable                                                          SysCtlIntDisable
N#endif
N#ifdef ROM_SysCtlIntClear
N#define MAP_SysCtlIntClear                                                    \
N        ROM_SysCtlIntClear
X#define MAP_SysCtlIntClear                                                            ROM_SysCtlIntClear
N#else
S#define MAP_SysCtlIntClear                                                    \
S        SysCtlIntClear
X#define MAP_SysCtlIntClear                                                            SysCtlIntClear
N#endif
N#ifdef ROM_SysCtlIntStatus
N#define MAP_SysCtlIntStatus                                                   \
N        ROM_SysCtlIntStatus
X#define MAP_SysCtlIntStatus                                                           ROM_SysCtlIntStatus
N#else
S#define MAP_SysCtlIntStatus                                                   \
S        SysCtlIntStatus
X#define MAP_SysCtlIntStatus                                                           SysCtlIntStatus
N#endif
N#ifdef ROM_SysCtlReset
N#define MAP_SysCtlReset                                                       \
N        ROM_SysCtlReset
X#define MAP_SysCtlReset                                                               ROM_SysCtlReset
N#else
S#define MAP_SysCtlReset                                                       \
S        SysCtlReset
X#define MAP_SysCtlReset                                                               SysCtlReset
N#endif
N#ifdef ROM_SysCtlDeepSleep
N#define MAP_SysCtlDeepSleep                                                   \
N        ROM_SysCtlDeepSleep
X#define MAP_SysCtlDeepSleep                                                           ROM_SysCtlDeepSleep
N#else
S#define MAP_SysCtlDeepSleep                                                   \
S        SysCtlDeepSleep
X#define MAP_SysCtlDeepSleep                                                           SysCtlDeepSleep
N#endif
N#ifdef ROM_SysCtlResetCauseGet
N#define MAP_SysCtlResetCauseGet                                               \
N        ROM_SysCtlResetCauseGet
X#define MAP_SysCtlResetCauseGet                                                       ROM_SysCtlResetCauseGet
N#else
S#define MAP_SysCtlResetCauseGet                                               \
S        SysCtlResetCauseGet
X#define MAP_SysCtlResetCauseGet                                                       SysCtlResetCauseGet
N#endif
N#ifdef ROM_SysCtlResetCauseClear
N#define MAP_SysCtlResetCauseClear                                             \
N        ROM_SysCtlResetCauseClear
X#define MAP_SysCtlResetCauseClear                                                     ROM_SysCtlResetCauseClear
N#else
S#define MAP_SysCtlResetCauseClear                                             \
S        SysCtlResetCauseClear
X#define MAP_SysCtlResetCauseClear                                                     SysCtlResetCauseClear
N#endif
N#ifdef ROM_SysCtlClockSet
N#define MAP_SysCtlClockSet                                                    \
N        ROM_SysCtlClockSet
X#define MAP_SysCtlClockSet                                                            ROM_SysCtlClockSet
N#else
S#define MAP_SysCtlClockSet                                                    \
S        SysCtlClockSet
X#define MAP_SysCtlClockSet                                                            SysCtlClockSet
N#endif
N#ifdef ROM_SysCtlClockGet
N#define MAP_SysCtlClockGet                                                    \
N        ROM_SysCtlClockGet
X#define MAP_SysCtlClockGet                                                            ROM_SysCtlClockGet
N#else
S#define MAP_SysCtlClockGet                                                    \
S        SysCtlClockGet
X#define MAP_SysCtlClockGet                                                            SysCtlClockGet
N#endif
N#ifdef ROM_SysCtlPWMClockSet
N#define MAP_SysCtlPWMClockSet                                                 \
N        ROM_SysCtlPWMClockSet
X#define MAP_SysCtlPWMClockSet                                                         ROM_SysCtlPWMClockSet
N#else
S#define MAP_SysCtlPWMClockSet                                                 \
S        SysCtlPWMClockSet
X#define MAP_SysCtlPWMClockSet                                                         SysCtlPWMClockSet
N#endif
N#ifdef ROM_SysCtlPWMClockGet
N#define MAP_SysCtlPWMClockGet                                                 \
N        ROM_SysCtlPWMClockGet
X#define MAP_SysCtlPWMClockGet                                                         ROM_SysCtlPWMClockGet
N#else
S#define MAP_SysCtlPWMClockGet                                                 \
S        SysCtlPWMClockGet
X#define MAP_SysCtlPWMClockGet                                                         SysCtlPWMClockGet
N#endif
N#ifdef ROM_SysCtlUSBPLLEnable
N#define MAP_SysCtlUSBPLLEnable                                                \
N        ROM_SysCtlUSBPLLEnable
X#define MAP_SysCtlUSBPLLEnable                                                        ROM_SysCtlUSBPLLEnable
N#else
S#define MAP_SysCtlUSBPLLEnable                                                \
S        SysCtlUSBPLLEnable
X#define MAP_SysCtlUSBPLLEnable                                                        SysCtlUSBPLLEnable
N#endif
N#ifdef ROM_SysCtlUSBPLLDisable
N#define MAP_SysCtlUSBPLLDisable                                               \
N        ROM_SysCtlUSBPLLDisable
X#define MAP_SysCtlUSBPLLDisable                                                       ROM_SysCtlUSBPLLDisable
N#else
S#define MAP_SysCtlUSBPLLDisable                                               \
S        SysCtlUSBPLLDisable
X#define MAP_SysCtlUSBPLLDisable                                                       SysCtlUSBPLLDisable
N#endif
N#ifdef ROM_SysCtlDelay
N#define MAP_SysCtlDelay                                                       \
N        ROM_SysCtlDelay
X#define MAP_SysCtlDelay                                                               ROM_SysCtlDelay
N#else
S#define MAP_SysCtlDelay                                                       \
S        SysCtlDelay
X#define MAP_SysCtlDelay                                                               SysCtlDelay
N#endif
N#ifdef ROM_SysCtlPeripheralReady
N#define MAP_SysCtlPeripheralReady                                             \
N        ROM_SysCtlPeripheralReady
X#define MAP_SysCtlPeripheralReady                                                     ROM_SysCtlPeripheralReady
N#else
S#define MAP_SysCtlPeripheralReady                                             \
S        SysCtlPeripheralReady
X#define MAP_SysCtlPeripheralReady                                                     SysCtlPeripheralReady
N#endif
N#ifdef ROM_SysCtlPeripheralPowerOn
N#define MAP_SysCtlPeripheralPowerOn                                           \
N        ROM_SysCtlPeripheralPowerOn
X#define MAP_SysCtlPeripheralPowerOn                                                   ROM_SysCtlPeripheralPowerOn
N#else
S#define MAP_SysCtlPeripheralPowerOn                                           \
S        SysCtlPeripheralPowerOn
X#define MAP_SysCtlPeripheralPowerOn                                                   SysCtlPeripheralPowerOn
N#endif
N#ifdef ROM_SysCtlPeripheralPowerOff
N#define MAP_SysCtlPeripheralPowerOff                                          \
N        ROM_SysCtlPeripheralPowerOff
X#define MAP_SysCtlPeripheralPowerOff                                                  ROM_SysCtlPeripheralPowerOff
N#else
S#define MAP_SysCtlPeripheralPowerOff                                          \
S        SysCtlPeripheralPowerOff
X#define MAP_SysCtlPeripheralPowerOff                                                  SysCtlPeripheralPowerOff
N#endif
N#ifdef ROM_SysCtlMOSCConfigSet
N#define MAP_SysCtlMOSCConfigSet                                               \
N        ROM_SysCtlMOSCConfigSet
X#define MAP_SysCtlMOSCConfigSet                                                       ROM_SysCtlMOSCConfigSet
N#else
S#define MAP_SysCtlMOSCConfigSet                                               \
S        SysCtlMOSCConfigSet
X#define MAP_SysCtlMOSCConfigSet                                                       SysCtlMOSCConfigSet
N#endif
N#ifdef ROM_SysCtlPIOSCCalibrate
N#define MAP_SysCtlPIOSCCalibrate                                              \
N        ROM_SysCtlPIOSCCalibrate
X#define MAP_SysCtlPIOSCCalibrate                                                      ROM_SysCtlPIOSCCalibrate
N#else
S#define MAP_SysCtlPIOSCCalibrate                                              \
S        SysCtlPIOSCCalibrate
X#define MAP_SysCtlPIOSCCalibrate                                                      SysCtlPIOSCCalibrate
N#endif
N#ifdef ROM_SysCtlDeepSleepClockSet
N#define MAP_SysCtlDeepSleepClockSet                                           \
N        ROM_SysCtlDeepSleepClockSet
X#define MAP_SysCtlDeepSleepClockSet                                                   ROM_SysCtlDeepSleepClockSet
N#else
S#define MAP_SysCtlDeepSleepClockSet                                           \
S        SysCtlDeepSleepClockSet
X#define MAP_SysCtlDeepSleepClockSet                                                   SysCtlDeepSleepClockSet
N#endif
N#ifdef ROM_SysCtlDeepSleepClockConfigSet
S#define MAP_SysCtlDeepSleepClockConfigSet                                     \
S        ROM_SysCtlDeepSleepClockConfigSet
X#define MAP_SysCtlDeepSleepClockConfigSet                                             ROM_SysCtlDeepSleepClockConfigSet
N#else
N#define MAP_SysCtlDeepSleepClockConfigSet                                     \
N        SysCtlDeepSleepClockConfigSet
X#define MAP_SysCtlDeepSleepClockConfigSet                                             SysCtlDeepSleepClockConfigSet
N#endif
N#ifdef ROM_SysCtlClockFreqSet
S#define MAP_SysCtlClockFreqSet                                                \
S        ROM_SysCtlClockFreqSet
X#define MAP_SysCtlClockFreqSet                                                        ROM_SysCtlClockFreqSet
N#else
N#define MAP_SysCtlClockFreqSet                                                \
N        SysCtlClockFreqSet
X#define MAP_SysCtlClockFreqSet                                                        SysCtlClockFreqSet
N#endif
N#ifdef ROM_SysCtlResetBehaviorSet
S#define MAP_SysCtlResetBehaviorSet                                            \
S        ROM_SysCtlResetBehaviorSet
X#define MAP_SysCtlResetBehaviorSet                                                    ROM_SysCtlResetBehaviorSet
N#else
N#define MAP_SysCtlResetBehaviorSet                                            \
N        SysCtlResetBehaviorSet
X#define MAP_SysCtlResetBehaviorSet                                                    SysCtlResetBehaviorSet
N#endif
N#ifdef ROM_SysCtlResetBehaviorGet
S#define MAP_SysCtlResetBehaviorGet                                            \
S        ROM_SysCtlResetBehaviorGet
X#define MAP_SysCtlResetBehaviorGet                                                    ROM_SysCtlResetBehaviorGet
N#else
N#define MAP_SysCtlResetBehaviorGet                                            \
N        SysCtlResetBehaviorGet
X#define MAP_SysCtlResetBehaviorGet                                                    SysCtlResetBehaviorGet
N#endif
N#ifdef ROM_SysCtlFlashSectorSizeGet
S#define MAP_SysCtlFlashSectorSizeGet                                          \
S        ROM_SysCtlFlashSectorSizeGet
X#define MAP_SysCtlFlashSectorSizeGet                                                  ROM_SysCtlFlashSectorSizeGet
N#else
N#define MAP_SysCtlFlashSectorSizeGet                                          \
N        SysCtlFlashSectorSizeGet
X#define MAP_SysCtlFlashSectorSizeGet                                                  SysCtlFlashSectorSizeGet
N#endif
N#ifdef ROM_SysCtlVoltageEventConfig
N#define MAP_SysCtlVoltageEventConfig                                          \
N        ROM_SysCtlVoltageEventConfig
X#define MAP_SysCtlVoltageEventConfig                                                  ROM_SysCtlVoltageEventConfig
N#else
S#define MAP_SysCtlVoltageEventConfig                                          \
S        SysCtlVoltageEventConfig
X#define MAP_SysCtlVoltageEventConfig                                                  SysCtlVoltageEventConfig
N#endif
N#ifdef ROM_SysCtlVoltageEventStatus
S#define MAP_SysCtlVoltageEventStatus                                          \
S        ROM_SysCtlVoltageEventStatus
X#define MAP_SysCtlVoltageEventStatus                                                  ROM_SysCtlVoltageEventStatus
N#else
N#define MAP_SysCtlVoltageEventStatus                                          \
N        SysCtlVoltageEventStatus
X#define MAP_SysCtlVoltageEventStatus                                                  SysCtlVoltageEventStatus
N#endif
N#ifdef ROM_SysCtlVoltageEventClear
S#define MAP_SysCtlVoltageEventClear                                           \
S        ROM_SysCtlVoltageEventClear
X#define MAP_SysCtlVoltageEventClear                                                   ROM_SysCtlVoltageEventClear
N#else
N#define MAP_SysCtlVoltageEventClear                                           \
N        SysCtlVoltageEventClear
X#define MAP_SysCtlVoltageEventClear                                                   SysCtlVoltageEventClear
N#endif
N#ifdef ROM_SysCtlNMIStatus
S#define MAP_SysCtlNMIStatus                                                   \
S        ROM_SysCtlNMIStatus
X#define MAP_SysCtlNMIStatus                                                           ROM_SysCtlNMIStatus
N#else
N#define MAP_SysCtlNMIStatus                                                   \
N        SysCtlNMIStatus
X#define MAP_SysCtlNMIStatus                                                           SysCtlNMIStatus
N#endif
N#ifdef ROM_SysCtlNMIClear
S#define MAP_SysCtlNMIClear                                                    \
S        ROM_SysCtlNMIClear
X#define MAP_SysCtlNMIClear                                                            ROM_SysCtlNMIClear
N#else
N#define MAP_SysCtlNMIClear                                                    \
N        SysCtlNMIClear
X#define MAP_SysCtlNMIClear                                                            SysCtlNMIClear
N#endif
N#ifdef ROM_SysCtlClockOutConfig
S#define MAP_SysCtlClockOutConfig                                              \
S        ROM_SysCtlClockOutConfig
X#define MAP_SysCtlClockOutConfig                                                      ROM_SysCtlClockOutConfig
N#else
N#define MAP_SysCtlClockOutConfig                                              \
N        SysCtlClockOutConfig
X#define MAP_SysCtlClockOutConfig                                                      SysCtlClockOutConfig
N#endif
N#ifdef ROM_SysCtlAltClkConfig
S#define MAP_SysCtlAltClkConfig                                                \
S        ROM_SysCtlAltClkConfig
X#define MAP_SysCtlAltClkConfig                                                        ROM_SysCtlAltClkConfig
N#else
N#define MAP_SysCtlAltClkConfig                                                \
N        SysCtlAltClkConfig
X#define MAP_SysCtlAltClkConfig                                                        SysCtlAltClkConfig
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysExc API.
N//
N//*****************************************************************************
N#ifdef ROM_SysExcIntStatus
N#define MAP_SysExcIntStatus                                                   \
N        ROM_SysExcIntStatus
X#define MAP_SysExcIntStatus                                                           ROM_SysExcIntStatus
N#else
S#define MAP_SysExcIntStatus                                                   \
S        SysExcIntStatus
X#define MAP_SysExcIntStatus                                                           SysExcIntStatus
N#endif
N#ifdef ROM_SysExcIntClear
N#define MAP_SysExcIntClear                                                    \
N        ROM_SysExcIntClear
X#define MAP_SysExcIntClear                                                            ROM_SysExcIntClear
N#else
S#define MAP_SysExcIntClear                                                    \
S        SysExcIntClear
X#define MAP_SysExcIntClear                                                            SysExcIntClear
N#endif
N#ifdef ROM_SysExcIntDisable
N#define MAP_SysExcIntDisable                                                  \
N        ROM_SysExcIntDisable
X#define MAP_SysExcIntDisable                                                          ROM_SysExcIntDisable
N#else
S#define MAP_SysExcIntDisable                                                  \
S        SysExcIntDisable
X#define MAP_SysExcIntDisable                                                          SysExcIntDisable
N#endif
N#ifdef ROM_SysExcIntEnable
N#define MAP_SysExcIntEnable                                                   \
N        ROM_SysExcIntEnable
X#define MAP_SysExcIntEnable                                                           ROM_SysExcIntEnable
N#else
S#define MAP_SysExcIntEnable                                                   \
S        SysExcIntEnable
X#define MAP_SysExcIntEnable                                                           SysExcIntEnable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysTick API.
N//
N//*****************************************************************************
N#ifdef ROM_SysTickValueGet
N#define MAP_SysTickValueGet                                                   \
N        ROM_SysTickValueGet
X#define MAP_SysTickValueGet                                                           ROM_SysTickValueGet
N#else
S#define MAP_SysTickValueGet                                                   \
S        SysTickValueGet
X#define MAP_SysTickValueGet                                                           SysTickValueGet
N#endif
N#ifdef ROM_SysTickEnable
N#define MAP_SysTickEnable                                                     \
N        ROM_SysTickEnable
X#define MAP_SysTickEnable                                                             ROM_SysTickEnable
N#else
S#define MAP_SysTickEnable                                                     \
S        SysTickEnable
X#define MAP_SysTickEnable                                                             SysTickEnable
N#endif
N#ifdef ROM_SysTickDisable
N#define MAP_SysTickDisable                                                    \
N        ROM_SysTickDisable
X#define MAP_SysTickDisable                                                            ROM_SysTickDisable
N#else
S#define MAP_SysTickDisable                                                    \
S        SysTickDisable
X#define MAP_SysTickDisable                                                            SysTickDisable
N#endif
N#ifdef ROM_SysTickIntEnable
N#define MAP_SysTickIntEnable                                                  \
N        ROM_SysTickIntEnable
X#define MAP_SysTickIntEnable                                                          ROM_SysTickIntEnable
N#else
S#define MAP_SysTickIntEnable                                                  \
S        SysTickIntEnable
X#define MAP_SysTickIntEnable                                                          SysTickIntEnable
N#endif
N#ifdef ROM_SysTickIntDisable
N#define MAP_SysTickIntDisable                                                 \
N        ROM_SysTickIntDisable
X#define MAP_SysTickIntDisable                                                         ROM_SysTickIntDisable
N#else
S#define MAP_SysTickIntDisable                                                 \
S        SysTickIntDisable
X#define MAP_SysTickIntDisable                                                         SysTickIntDisable
N#endif
N#ifdef ROM_SysTickPeriodSet
N#define MAP_SysTickPeriodSet                                                  \
N        ROM_SysTickPeriodSet
X#define MAP_SysTickPeriodSet                                                          ROM_SysTickPeriodSet
N#else
S#define MAP_SysTickPeriodSet                                                  \
S        SysTickPeriodSet
X#define MAP_SysTickPeriodSet                                                          SysTickPeriodSet
N#endif
N#ifdef ROM_SysTickPeriodGet
N#define MAP_SysTickPeriodGet                                                  \
N        ROM_SysTickPeriodGet
X#define MAP_SysTickPeriodGet                                                          ROM_SysTickPeriodGet
N#else
S#define MAP_SysTickPeriodGet                                                  \
S        SysTickPeriodGet
X#define MAP_SysTickPeriodGet                                                          SysTickPeriodGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Timer API.
N//
N//*****************************************************************************
N#ifdef ROM_TimerIntClear
N#define MAP_TimerIntClear                                                     \
N        ROM_TimerIntClear
X#define MAP_TimerIntClear                                                             ROM_TimerIntClear
N#else
S#define MAP_TimerIntClear                                                     \
S        TimerIntClear
X#define MAP_TimerIntClear                                                             TimerIntClear
N#endif
N#ifdef ROM_TimerEnable
N#define MAP_TimerEnable                                                       \
N        ROM_TimerEnable
X#define MAP_TimerEnable                                                               ROM_TimerEnable
N#else
S#define MAP_TimerEnable                                                       \
S        TimerEnable
X#define MAP_TimerEnable                                                               TimerEnable
N#endif
N#ifdef ROM_TimerDisable
N#define MAP_TimerDisable                                                      \
N        ROM_TimerDisable
X#define MAP_TimerDisable                                                              ROM_TimerDisable
N#else
S#define MAP_TimerDisable                                                      \
S        TimerDisable
X#define MAP_TimerDisable                                                              TimerDisable
N#endif
N#ifdef ROM_TimerConfigure
N#define MAP_TimerConfigure                                                    \
N        ROM_TimerConfigure
X#define MAP_TimerConfigure                                                            ROM_TimerConfigure
N#else
S#define MAP_TimerConfigure                                                    \
S        TimerConfigure
X#define MAP_TimerConfigure                                                            TimerConfigure
N#endif
N#ifdef ROM_TimerControlLevel
N#define MAP_TimerControlLevel                                                 \
N        ROM_TimerControlLevel
X#define MAP_TimerControlLevel                                                         ROM_TimerControlLevel
N#else
S#define MAP_TimerControlLevel                                                 \
S        TimerControlLevel
X#define MAP_TimerControlLevel                                                         TimerControlLevel
N#endif
N#ifdef ROM_TimerControlTrigger
N#define MAP_TimerControlTrigger                                               \
N        ROM_TimerControlTrigger
X#define MAP_TimerControlTrigger                                                       ROM_TimerControlTrigger
N#else
S#define MAP_TimerControlTrigger                                               \
S        TimerControlTrigger
X#define MAP_TimerControlTrigger                                                       TimerControlTrigger
N#endif
N#ifdef ROM_TimerControlEvent
N#define MAP_TimerControlEvent                                                 \
N        ROM_TimerControlEvent
X#define MAP_TimerControlEvent                                                         ROM_TimerControlEvent
N#else
S#define MAP_TimerControlEvent                                                 \
S        TimerControlEvent
X#define MAP_TimerControlEvent                                                         TimerControlEvent
N#endif
N#ifdef ROM_TimerControlStall
N#define MAP_TimerControlStall                                                 \
N        ROM_TimerControlStall
X#define MAP_TimerControlStall                                                         ROM_TimerControlStall
N#else
S#define MAP_TimerControlStall                                                 \
S        TimerControlStall
X#define MAP_TimerControlStall                                                         TimerControlStall
N#endif
N#ifdef ROM_TimerRTCEnable
N#define MAP_TimerRTCEnable                                                    \
N        ROM_TimerRTCEnable
X#define MAP_TimerRTCEnable                                                            ROM_TimerRTCEnable
N#else
S#define MAP_TimerRTCEnable                                                    \
S        TimerRTCEnable
X#define MAP_TimerRTCEnable                                                            TimerRTCEnable
N#endif
N#ifdef ROM_TimerRTCDisable
N#define MAP_TimerRTCDisable                                                   \
N        ROM_TimerRTCDisable
X#define MAP_TimerRTCDisable                                                           ROM_TimerRTCDisable
N#else
S#define MAP_TimerRTCDisable                                                   \
S        TimerRTCDisable
X#define MAP_TimerRTCDisable                                                           TimerRTCDisable
N#endif
N#ifdef ROM_TimerPrescaleSet
N#define MAP_TimerPrescaleSet                                                  \
N        ROM_TimerPrescaleSet
X#define MAP_TimerPrescaleSet                                                          ROM_TimerPrescaleSet
N#else
S#define MAP_TimerPrescaleSet                                                  \
S        TimerPrescaleSet
X#define MAP_TimerPrescaleSet                                                          TimerPrescaleSet
N#endif
N#ifdef ROM_TimerPrescaleGet
N#define MAP_TimerPrescaleGet                                                  \
N        ROM_TimerPrescaleGet
X#define MAP_TimerPrescaleGet                                                          ROM_TimerPrescaleGet
N#else
S#define MAP_TimerPrescaleGet                                                  \
S        TimerPrescaleGet
X#define MAP_TimerPrescaleGet                                                          TimerPrescaleGet
N#endif
N#ifdef ROM_TimerPrescaleMatchSet
N#define MAP_TimerPrescaleMatchSet                                             \
N        ROM_TimerPrescaleMatchSet
X#define MAP_TimerPrescaleMatchSet                                                     ROM_TimerPrescaleMatchSet
N#else
S#define MAP_TimerPrescaleMatchSet                                             \
S        TimerPrescaleMatchSet
X#define MAP_TimerPrescaleMatchSet                                                     TimerPrescaleMatchSet
N#endif
N#ifdef ROM_TimerPrescaleMatchGet
N#define MAP_TimerPrescaleMatchGet                                             \
N        ROM_TimerPrescaleMatchGet
X#define MAP_TimerPrescaleMatchGet                                                     ROM_TimerPrescaleMatchGet
N#else
S#define MAP_TimerPrescaleMatchGet                                             \
S        TimerPrescaleMatchGet
X#define MAP_TimerPrescaleMatchGet                                                     TimerPrescaleMatchGet
N#endif
N#ifdef ROM_TimerLoadSet
N#define MAP_TimerLoadSet                                                      \
N        ROM_TimerLoadSet
X#define MAP_TimerLoadSet                                                              ROM_TimerLoadSet
N#else
S#define MAP_TimerLoadSet                                                      \
S        TimerLoadSet
X#define MAP_TimerLoadSet                                                              TimerLoadSet
N#endif
N#ifdef ROM_TimerLoadGet
N#define MAP_TimerLoadGet                                                      \
N        ROM_TimerLoadGet
X#define MAP_TimerLoadGet                                                              ROM_TimerLoadGet
N#else
S#define MAP_TimerLoadGet                                                      \
S        TimerLoadGet
X#define MAP_TimerLoadGet                                                              TimerLoadGet
N#endif
N#ifdef ROM_TimerValueGet
N#define MAP_TimerValueGet                                                     \
N        ROM_TimerValueGet
X#define MAP_TimerValueGet                                                             ROM_TimerValueGet
N#else
S#define MAP_TimerValueGet                                                     \
S        TimerValueGet
X#define MAP_TimerValueGet                                                             TimerValueGet
N#endif
N#ifdef ROM_TimerMatchSet
N#define MAP_TimerMatchSet                                                     \
N        ROM_TimerMatchSet
X#define MAP_TimerMatchSet                                                             ROM_TimerMatchSet
N#else
S#define MAP_TimerMatchSet                                                     \
S        TimerMatchSet
X#define MAP_TimerMatchSet                                                             TimerMatchSet
N#endif
N#ifdef ROM_TimerMatchGet
N#define MAP_TimerMatchGet                                                     \
N        ROM_TimerMatchGet
X#define MAP_TimerMatchGet                                                             ROM_TimerMatchGet
N#else
S#define MAP_TimerMatchGet                                                     \
S        TimerMatchGet
X#define MAP_TimerMatchGet                                                             TimerMatchGet
N#endif
N#ifdef ROM_TimerIntEnable
N#define MAP_TimerIntEnable                                                    \
N        ROM_TimerIntEnable
X#define MAP_TimerIntEnable                                                            ROM_TimerIntEnable
N#else
S#define MAP_TimerIntEnable                                                    \
S        TimerIntEnable
X#define MAP_TimerIntEnable                                                            TimerIntEnable
N#endif
N#ifdef ROM_TimerIntDisable
N#define MAP_TimerIntDisable                                                   \
N        ROM_TimerIntDisable
X#define MAP_TimerIntDisable                                                           ROM_TimerIntDisable
N#else
S#define MAP_TimerIntDisable                                                   \
S        TimerIntDisable
X#define MAP_TimerIntDisable                                                           TimerIntDisable
N#endif
N#ifdef ROM_TimerIntStatus
N#define MAP_TimerIntStatus                                                    \
N        ROM_TimerIntStatus
X#define MAP_TimerIntStatus                                                            ROM_TimerIntStatus
N#else
S#define MAP_TimerIntStatus                                                    \
S        TimerIntStatus
X#define MAP_TimerIntStatus                                                            TimerIntStatus
N#endif
N#ifdef ROM_TimerControlWaitOnTrigger
N#define MAP_TimerControlWaitOnTrigger                                         \
N        ROM_TimerControlWaitOnTrigger
X#define MAP_TimerControlWaitOnTrigger                                                 ROM_TimerControlWaitOnTrigger
N#else
S#define MAP_TimerControlWaitOnTrigger                                         \
S        TimerControlWaitOnTrigger
X#define MAP_TimerControlWaitOnTrigger                                                 TimerControlWaitOnTrigger
N#endif
N#ifdef ROM_TimerLoadSet64
N#define MAP_TimerLoadSet64                                                    \
N        ROM_TimerLoadSet64
X#define MAP_TimerLoadSet64                                                            ROM_TimerLoadSet64
N#else
S#define MAP_TimerLoadSet64                                                    \
S        TimerLoadSet64
X#define MAP_TimerLoadSet64                                                            TimerLoadSet64
N#endif
N#ifdef ROM_TimerLoadGet64
N#define MAP_TimerLoadGet64                                                    \
N        ROM_TimerLoadGet64
X#define MAP_TimerLoadGet64                                                            ROM_TimerLoadGet64
N#else
S#define MAP_TimerLoadGet64                                                    \
S        TimerLoadGet64
X#define MAP_TimerLoadGet64                                                            TimerLoadGet64
N#endif
N#ifdef ROM_TimerValueGet64
N#define MAP_TimerValueGet64                                                   \
N        ROM_TimerValueGet64
X#define MAP_TimerValueGet64                                                           ROM_TimerValueGet64
N#else
S#define MAP_TimerValueGet64                                                   \
S        TimerValueGet64
X#define MAP_TimerValueGet64                                                           TimerValueGet64
N#endif
N#ifdef ROM_TimerMatchSet64
N#define MAP_TimerMatchSet64                                                   \
N        ROM_TimerMatchSet64
X#define MAP_TimerMatchSet64                                                           ROM_TimerMatchSet64
N#else
S#define MAP_TimerMatchSet64                                                   \
S        TimerMatchSet64
X#define MAP_TimerMatchSet64                                                           TimerMatchSet64
N#endif
N#ifdef ROM_TimerMatchGet64
N#define MAP_TimerMatchGet64                                                   \
N        ROM_TimerMatchGet64
X#define MAP_TimerMatchGet64                                                           ROM_TimerMatchGet64
N#else
S#define MAP_TimerMatchGet64                                                   \
S        TimerMatchGet64
X#define MAP_TimerMatchGet64                                                           TimerMatchGet64
N#endif
N#ifdef ROM_TimerClockSourceGet
S#define MAP_TimerClockSourceGet                                               \
S        ROM_TimerClockSourceGet
X#define MAP_TimerClockSourceGet                                                       ROM_TimerClockSourceGet
N#else
N#define MAP_TimerClockSourceGet                                               \
N        TimerClockSourceGet
X#define MAP_TimerClockSourceGet                                                       TimerClockSourceGet
N#endif
N#ifdef ROM_TimerClockSourceSet
S#define MAP_TimerClockSourceSet                                               \
S        ROM_TimerClockSourceSet
X#define MAP_TimerClockSourceSet                                                       ROM_TimerClockSourceSet
N#else
N#define MAP_TimerClockSourceSet                                               \
N        TimerClockSourceSet
X#define MAP_TimerClockSourceSet                                                       TimerClockSourceSet
N#endif
N#ifdef ROM_TimerADCEventGet
S#define MAP_TimerADCEventGet                                                  \
S        ROM_TimerADCEventGet
X#define MAP_TimerADCEventGet                                                          ROM_TimerADCEventGet
N#else
N#define MAP_TimerADCEventGet                                                  \
N        TimerADCEventGet
X#define MAP_TimerADCEventGet                                                          TimerADCEventGet
N#endif
N#ifdef ROM_TimerADCEventSet
S#define MAP_TimerADCEventSet                                                  \
S        ROM_TimerADCEventSet
X#define MAP_TimerADCEventSet                                                          ROM_TimerADCEventSet
N#else
N#define MAP_TimerADCEventSet                                                  \
N        TimerADCEventSet
X#define MAP_TimerADCEventSet                                                          TimerADCEventSet
N#endif
N#ifdef ROM_TimerDMAEventGet
S#define MAP_TimerDMAEventGet                                                  \
S        ROM_TimerDMAEventGet
X#define MAP_TimerDMAEventGet                                                          ROM_TimerDMAEventGet
N#else
N#define MAP_TimerDMAEventGet                                                  \
N        TimerDMAEventGet
X#define MAP_TimerDMAEventGet                                                          TimerDMAEventGet
N#endif
N#ifdef ROM_TimerDMAEventSet
S#define MAP_TimerDMAEventSet                                                  \
S        ROM_TimerDMAEventSet
X#define MAP_TimerDMAEventSet                                                          ROM_TimerDMAEventSet
N#else
N#define MAP_TimerDMAEventSet                                                  \
N        TimerDMAEventSet
X#define MAP_TimerDMAEventSet                                                          TimerDMAEventSet
N#endif
N#ifdef ROM_TimerSynchronize
S#define MAP_TimerSynchronize                                                  \
S        ROM_TimerSynchronize
X#define MAP_TimerSynchronize                                                          ROM_TimerSynchronize
N#else
N#define MAP_TimerSynchronize                                                  \
N        TimerSynchronize
X#define MAP_TimerSynchronize                                                          TimerSynchronize
N#endif
N
N//*****************************************************************************
N//
N// Macros for the UART API.
N//
N//*****************************************************************************
N#ifdef ROM_UARTCharPut
N#define MAP_UARTCharPut                                                       \
N        ROM_UARTCharPut
X#define MAP_UARTCharPut                                                               ROM_UARTCharPut
N#else
S#define MAP_UARTCharPut                                                       \
S        UARTCharPut
X#define MAP_UARTCharPut                                                               UARTCharPut
N#endif
N#ifdef ROM_UARTParityModeSet
N#define MAP_UARTParityModeSet                                                 \
N        ROM_UARTParityModeSet
X#define MAP_UARTParityModeSet                                                         ROM_UARTParityModeSet
N#else
S#define MAP_UARTParityModeSet                                                 \
S        UARTParityModeSet
X#define MAP_UARTParityModeSet                                                         UARTParityModeSet
N#endif
N#ifdef ROM_UARTParityModeGet
N#define MAP_UARTParityModeGet                                                 \
N        ROM_UARTParityModeGet
X#define MAP_UARTParityModeGet                                                         ROM_UARTParityModeGet
N#else
S#define MAP_UARTParityModeGet                                                 \
S        UARTParityModeGet
X#define MAP_UARTParityModeGet                                                         UARTParityModeGet
N#endif
N#ifdef ROM_UARTFIFOLevelSet
N#define MAP_UARTFIFOLevelSet                                                  \
N        ROM_UARTFIFOLevelSet
X#define MAP_UARTFIFOLevelSet                                                          ROM_UARTFIFOLevelSet
N#else
S#define MAP_UARTFIFOLevelSet                                                  \
S        UARTFIFOLevelSet
X#define MAP_UARTFIFOLevelSet                                                          UARTFIFOLevelSet
N#endif
N#ifdef ROM_UARTFIFOLevelGet
N#define MAP_UARTFIFOLevelGet                                                  \
N        ROM_UARTFIFOLevelGet
X#define MAP_UARTFIFOLevelGet                                                          ROM_UARTFIFOLevelGet
N#else
S#define MAP_UARTFIFOLevelGet                                                  \
S        UARTFIFOLevelGet
X#define MAP_UARTFIFOLevelGet                                                          UARTFIFOLevelGet
N#endif
N#ifdef ROM_UARTConfigSetExpClk
N#define MAP_UARTConfigSetExpClk                                               \
N        ROM_UARTConfigSetExpClk
X#define MAP_UARTConfigSetExpClk                                                       ROM_UARTConfigSetExpClk
N#else
S#define MAP_UARTConfigSetExpClk                                               \
S        UARTConfigSetExpClk
X#define MAP_UARTConfigSetExpClk                                                       UARTConfigSetExpClk
N#endif
N#ifdef ROM_UARTConfigGetExpClk
N#define MAP_UARTConfigGetExpClk                                               \
N        ROM_UARTConfigGetExpClk
X#define MAP_UARTConfigGetExpClk                                                       ROM_UARTConfigGetExpClk
N#else
S#define MAP_UARTConfigGetExpClk                                               \
S        UARTConfigGetExpClk
X#define MAP_UARTConfigGetExpClk                                                       UARTConfigGetExpClk
N#endif
N#ifdef ROM_UARTEnable
N#define MAP_UARTEnable                                                        \
N        ROM_UARTEnable
X#define MAP_UARTEnable                                                                ROM_UARTEnable
N#else
S#define MAP_UARTEnable                                                        \
S        UARTEnable
X#define MAP_UARTEnable                                                                UARTEnable
N#endif
N#ifdef ROM_UARTDisable
N#define MAP_UARTDisable                                                       \
N        ROM_UARTDisable
X#define MAP_UARTDisable                                                               ROM_UARTDisable
N#else
S#define MAP_UARTDisable                                                       \
S        UARTDisable
X#define MAP_UARTDisable                                                               UARTDisable
N#endif
N#ifdef ROM_UARTEnableSIR
N#define MAP_UARTEnableSIR                                                     \
N        ROM_UARTEnableSIR
X#define MAP_UARTEnableSIR                                                             ROM_UARTEnableSIR
N#else
S#define MAP_UARTEnableSIR                                                     \
S        UARTEnableSIR
X#define MAP_UARTEnableSIR                                                             UARTEnableSIR
N#endif
N#ifdef ROM_UARTDisableSIR
N#define MAP_UARTDisableSIR                                                    \
N        ROM_UARTDisableSIR
X#define MAP_UARTDisableSIR                                                            ROM_UARTDisableSIR
N#else
S#define MAP_UARTDisableSIR                                                    \
S        UARTDisableSIR
X#define MAP_UARTDisableSIR                                                            UARTDisableSIR
N#endif
N#ifdef ROM_UARTCharsAvail
N#define MAP_UARTCharsAvail                                                    \
N        ROM_UARTCharsAvail
X#define MAP_UARTCharsAvail                                                            ROM_UARTCharsAvail
N#else
S#define MAP_UARTCharsAvail                                                    \
S        UARTCharsAvail
X#define MAP_UARTCharsAvail                                                            UARTCharsAvail
N#endif
N#ifdef ROM_UARTSpaceAvail
N#define MAP_UARTSpaceAvail                                                    \
N        ROM_UARTSpaceAvail
X#define MAP_UARTSpaceAvail                                                            ROM_UARTSpaceAvail
N#else
S#define MAP_UARTSpaceAvail                                                    \
S        UARTSpaceAvail
X#define MAP_UARTSpaceAvail                                                            UARTSpaceAvail
N#endif
N#ifdef ROM_UARTCharGetNonBlocking
N#define MAP_UARTCharGetNonBlocking                                            \
N        ROM_UARTCharGetNonBlocking
X#define MAP_UARTCharGetNonBlocking                                                    ROM_UARTCharGetNonBlocking
N#else
S#define MAP_UARTCharGetNonBlocking                                            \
S        UARTCharGetNonBlocking
X#define MAP_UARTCharGetNonBlocking                                                    UARTCharGetNonBlocking
N#endif
N#ifdef ROM_UARTCharGet
N#define MAP_UARTCharGet                                                       \
N        ROM_UARTCharGet
X#define MAP_UARTCharGet                                                               ROM_UARTCharGet
N#else
S#define MAP_UARTCharGet                                                       \
S        UARTCharGet
X#define MAP_UARTCharGet                                                               UARTCharGet
N#endif
N#ifdef ROM_UARTCharPutNonBlocking
N#define MAP_UARTCharPutNonBlocking                                            \
N        ROM_UARTCharPutNonBlocking
X#define MAP_UARTCharPutNonBlocking                                                    ROM_UARTCharPutNonBlocking
N#else
S#define MAP_UARTCharPutNonBlocking                                            \
S        UARTCharPutNonBlocking
X#define MAP_UARTCharPutNonBlocking                                                    UARTCharPutNonBlocking
N#endif
N#ifdef ROM_UARTBreakCtl
N#define MAP_UARTBreakCtl                                                      \
N        ROM_UARTBreakCtl
X#define MAP_UARTBreakCtl                                                              ROM_UARTBreakCtl
N#else
S#define MAP_UARTBreakCtl                                                      \
S        UARTBreakCtl
X#define MAP_UARTBreakCtl                                                              UARTBreakCtl
N#endif
N#ifdef ROM_UARTIntEnable
N#define MAP_UARTIntEnable                                                     \
N        ROM_UARTIntEnable
X#define MAP_UARTIntEnable                                                             ROM_UARTIntEnable
N#else
S#define MAP_UARTIntEnable                                                     \
S        UARTIntEnable
X#define MAP_UARTIntEnable                                                             UARTIntEnable
N#endif
N#ifdef ROM_UARTIntDisable
N#define MAP_UARTIntDisable                                                    \
N        ROM_UARTIntDisable
X#define MAP_UARTIntDisable                                                            ROM_UARTIntDisable
N#else
S#define MAP_UARTIntDisable                                                    \
S        UARTIntDisable
X#define MAP_UARTIntDisable                                                            UARTIntDisable
N#endif
N#ifdef ROM_UARTIntStatus
N#define MAP_UARTIntStatus                                                     \
N        ROM_UARTIntStatus
X#define MAP_UARTIntStatus                                                             ROM_UARTIntStatus
N#else
S#define MAP_UARTIntStatus                                                     \
S        UARTIntStatus
X#define MAP_UARTIntStatus                                                             UARTIntStatus
N#endif
N#ifdef ROM_UARTIntClear
N#define MAP_UARTIntClear                                                      \
N        ROM_UARTIntClear
X#define MAP_UARTIntClear                                                              ROM_UARTIntClear
N#else
S#define MAP_UARTIntClear                                                      \
S        UARTIntClear
X#define MAP_UARTIntClear                                                              UARTIntClear
N#endif
N#ifdef ROM_UARTDMAEnable
N#define MAP_UARTDMAEnable                                                     \
N        ROM_UARTDMAEnable
X#define MAP_UARTDMAEnable                                                             ROM_UARTDMAEnable
N#else
S#define MAP_UARTDMAEnable                                                     \
S        UARTDMAEnable
X#define MAP_UARTDMAEnable                                                             UARTDMAEnable
N#endif
N#ifdef ROM_UARTDMADisable
N#define MAP_UARTDMADisable                                                    \
N        ROM_UARTDMADisable
X#define MAP_UARTDMADisable                                                            ROM_UARTDMADisable
N#else
S#define MAP_UARTDMADisable                                                    \
S        UARTDMADisable
X#define MAP_UARTDMADisable                                                            UARTDMADisable
N#endif
N#ifdef ROM_UARTFIFOEnable
N#define MAP_UARTFIFOEnable                                                    \
N        ROM_UARTFIFOEnable
X#define MAP_UARTFIFOEnable                                                            ROM_UARTFIFOEnable
N#else
S#define MAP_UARTFIFOEnable                                                    \
S        UARTFIFOEnable
X#define MAP_UARTFIFOEnable                                                            UARTFIFOEnable
N#endif
N#ifdef ROM_UARTFIFODisable
N#define MAP_UARTFIFODisable                                                   \
N        ROM_UARTFIFODisable
X#define MAP_UARTFIFODisable                                                           ROM_UARTFIFODisable
N#else
S#define MAP_UARTFIFODisable                                                   \
S        UARTFIFODisable
X#define MAP_UARTFIFODisable                                                           UARTFIFODisable
N#endif
N#ifdef ROM_UARTBusy
N#define MAP_UARTBusy                                                          \
N        ROM_UARTBusy
X#define MAP_UARTBusy                                                                  ROM_UARTBusy
N#else
S#define MAP_UARTBusy                                                          \
S        UARTBusy
X#define MAP_UARTBusy                                                                  UARTBusy
N#endif
N#ifdef ROM_UARTTxIntModeSet
N#define MAP_UARTTxIntModeSet                                                  \
N        ROM_UARTTxIntModeSet
X#define MAP_UARTTxIntModeSet                                                          ROM_UARTTxIntModeSet
N#else
S#define MAP_UARTTxIntModeSet                                                  \
S        UARTTxIntModeSet
X#define MAP_UARTTxIntModeSet                                                          UARTTxIntModeSet
N#endif
N#ifdef ROM_UARTTxIntModeGet
N#define MAP_UARTTxIntModeGet                                                  \
N        ROM_UARTTxIntModeGet
X#define MAP_UARTTxIntModeGet                                                          ROM_UARTTxIntModeGet
N#else
S#define MAP_UARTTxIntModeGet                                                  \
S        UARTTxIntModeGet
X#define MAP_UARTTxIntModeGet                                                          UARTTxIntModeGet
N#endif
N#ifdef ROM_UARTRxErrorGet
N#define MAP_UARTRxErrorGet                                                    \
N        ROM_UARTRxErrorGet
X#define MAP_UARTRxErrorGet                                                            ROM_UARTRxErrorGet
N#else
S#define MAP_UARTRxErrorGet                                                    \
S        UARTRxErrorGet
X#define MAP_UARTRxErrorGet                                                            UARTRxErrorGet
N#endif
N#ifdef ROM_UARTRxErrorClear
N#define MAP_UARTRxErrorClear                                                  \
N        ROM_UARTRxErrorClear
X#define MAP_UARTRxErrorClear                                                          ROM_UARTRxErrorClear
N#else
S#define MAP_UARTRxErrorClear                                                  \
S        UARTRxErrorClear
X#define MAP_UARTRxErrorClear                                                          UARTRxErrorClear
N#endif
N#ifdef ROM_UARTClockSourceSet
N#define MAP_UARTClockSourceSet                                                \
N        ROM_UARTClockSourceSet
X#define MAP_UARTClockSourceSet                                                        ROM_UARTClockSourceSet
N#else
S#define MAP_UARTClockSourceSet                                                \
S        UARTClockSourceSet
X#define MAP_UARTClockSourceSet                                                        UARTClockSourceSet
N#endif
N#ifdef ROM_UARTClockSourceGet
N#define MAP_UARTClockSourceGet                                                \
N        ROM_UARTClockSourceGet
X#define MAP_UARTClockSourceGet                                                        ROM_UARTClockSourceGet
N#else
S#define MAP_UARTClockSourceGet                                                \
S        UARTClockSourceGet
X#define MAP_UARTClockSourceGet                                                        UARTClockSourceGet
N#endif
N#ifdef ROM_UART9BitEnable
N#define MAP_UART9BitEnable                                                    \
N        ROM_UART9BitEnable
X#define MAP_UART9BitEnable                                                            ROM_UART9BitEnable
N#else
S#define MAP_UART9BitEnable                                                    \
S        UART9BitEnable
X#define MAP_UART9BitEnable                                                            UART9BitEnable
N#endif
N#ifdef ROM_UART9BitDisable
N#define MAP_UART9BitDisable                                                   \
N        ROM_UART9BitDisable
X#define MAP_UART9BitDisable                                                           ROM_UART9BitDisable
N#else
S#define MAP_UART9BitDisable                                                   \
S        UART9BitDisable
X#define MAP_UART9BitDisable                                                           UART9BitDisable
N#endif
N#ifdef ROM_UART9BitAddrSet
N#define MAP_UART9BitAddrSet                                                   \
N        ROM_UART9BitAddrSet
X#define MAP_UART9BitAddrSet                                                           ROM_UART9BitAddrSet
N#else
S#define MAP_UART9BitAddrSet                                                   \
S        UART9BitAddrSet
X#define MAP_UART9BitAddrSet                                                           UART9BitAddrSet
N#endif
N#ifdef ROM_UART9BitAddrSend
N#define MAP_UART9BitAddrSend                                                  \
N        ROM_UART9BitAddrSend
X#define MAP_UART9BitAddrSend                                                          ROM_UART9BitAddrSend
N#else
S#define MAP_UART9BitAddrSend                                                  \
S        UART9BitAddrSend
X#define MAP_UART9BitAddrSend                                                          UART9BitAddrSend
N#endif
N#ifdef ROM_UARTSmartCardDisable
S#define MAP_UARTSmartCardDisable                                              \
S        ROM_UARTSmartCardDisable
X#define MAP_UARTSmartCardDisable                                                      ROM_UARTSmartCardDisable
N#else
N#define MAP_UARTSmartCardDisable                                              \
N        UARTSmartCardDisable
X#define MAP_UARTSmartCardDisable                                                      UARTSmartCardDisable
N#endif
N#ifdef ROM_UARTSmartCardEnable
S#define MAP_UARTSmartCardEnable                                               \
S        ROM_UARTSmartCardEnable
X#define MAP_UARTSmartCardEnable                                                       ROM_UARTSmartCardEnable
N#else
N#define MAP_UARTSmartCardEnable                                               \
N        UARTSmartCardEnable
X#define MAP_UARTSmartCardEnable                                                       UARTSmartCardEnable
N#endif
N#ifdef ROM_UARTModemControlClear
N#define MAP_UARTModemControlClear                                             \
N        ROM_UARTModemControlClear
X#define MAP_UARTModemControlClear                                                     ROM_UARTModemControlClear
N#else
S#define MAP_UARTModemControlClear                                             \
S        UARTModemControlClear
X#define MAP_UARTModemControlClear                                                     UARTModemControlClear
N#endif
N#ifdef ROM_UARTModemControlGet
S#define MAP_UARTModemControlGet                                               \
S        ROM_UARTModemControlGet
X#define MAP_UARTModemControlGet                                                       ROM_UARTModemControlGet
N#else
N#define MAP_UARTModemControlGet                                               \
N        UARTModemControlGet
X#define MAP_UARTModemControlGet                                                       UARTModemControlGet
N#endif
N#ifdef ROM_UARTModemControlSet
S#define MAP_UARTModemControlSet                                               \
S        ROM_UARTModemControlSet
X#define MAP_UARTModemControlSet                                                       ROM_UARTModemControlSet
N#else
N#define MAP_UARTModemControlSet                                               \
N        UARTModemControlSet
X#define MAP_UARTModemControlSet                                                       UARTModemControlSet
N#endif
N#ifdef ROM_UARTModemStatusGet
S#define MAP_UARTModemStatusGet                                                \
S        ROM_UARTModemStatusGet
X#define MAP_UARTModemStatusGet                                                        ROM_UARTModemStatusGet
N#else
N#define MAP_UARTModemStatusGet                                                \
N        UARTModemStatusGet
X#define MAP_UARTModemStatusGet                                                        UARTModemStatusGet
N#endif
N#ifdef ROM_UARTFlowControlGet
S#define MAP_UARTFlowControlGet                                                \
S        ROM_UARTFlowControlGet
X#define MAP_UARTFlowControlGet                                                        ROM_UARTFlowControlGet
N#else
N#define MAP_UARTFlowControlGet                                                \
N        UARTFlowControlGet
X#define MAP_UARTFlowControlGet                                                        UARTFlowControlGet
N#endif
N#ifdef ROM_UARTFlowControlSet
S#define MAP_UARTFlowControlSet                                                \
S        ROM_UARTFlowControlSet
X#define MAP_UARTFlowControlSet                                                        ROM_UARTFlowControlSet
N#else
N#define MAP_UARTFlowControlSet                                                \
N        UARTFlowControlSet
X#define MAP_UARTFlowControlSet                                                        UARTFlowControlSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the uDMA API.
N//
N//*****************************************************************************
N#ifdef ROM_uDMAChannelTransferSet
N#define MAP_uDMAChannelTransferSet                                            \
N        ROM_uDMAChannelTransferSet
X#define MAP_uDMAChannelTransferSet                                                    ROM_uDMAChannelTransferSet
N#else
S#define MAP_uDMAChannelTransferSet                                            \
S        uDMAChannelTransferSet
X#define MAP_uDMAChannelTransferSet                                                    uDMAChannelTransferSet
N#endif
N#ifdef ROM_uDMAEnable
N#define MAP_uDMAEnable                                                        \
N        ROM_uDMAEnable
X#define MAP_uDMAEnable                                                                ROM_uDMAEnable
N#else
S#define MAP_uDMAEnable                                                        \
S        uDMAEnable
X#define MAP_uDMAEnable                                                                uDMAEnable
N#endif
N#ifdef ROM_uDMADisable
N#define MAP_uDMADisable                                                       \
N        ROM_uDMADisable
X#define MAP_uDMADisable                                                               ROM_uDMADisable
N#else
S#define MAP_uDMADisable                                                       \
S        uDMADisable
X#define MAP_uDMADisable                                                               uDMADisable
N#endif
N#ifdef ROM_uDMAErrorStatusGet
N#define MAP_uDMAErrorStatusGet                                                \
N        ROM_uDMAErrorStatusGet
X#define MAP_uDMAErrorStatusGet                                                        ROM_uDMAErrorStatusGet
N#else
S#define MAP_uDMAErrorStatusGet                                                \
S        uDMAErrorStatusGet
X#define MAP_uDMAErrorStatusGet                                                        uDMAErrorStatusGet
N#endif
N#ifdef ROM_uDMAErrorStatusClear
N#define MAP_uDMAErrorStatusClear                                              \
N        ROM_uDMAErrorStatusClear
X#define MAP_uDMAErrorStatusClear                                                      ROM_uDMAErrorStatusClear
N#else
S#define MAP_uDMAErrorStatusClear                                              \
S        uDMAErrorStatusClear
X#define MAP_uDMAErrorStatusClear                                                      uDMAErrorStatusClear
N#endif
N#ifdef ROM_uDMAChannelEnable
N#define MAP_uDMAChannelEnable                                                 \
N        ROM_uDMAChannelEnable
X#define MAP_uDMAChannelEnable                                                         ROM_uDMAChannelEnable
N#else
S#define MAP_uDMAChannelEnable                                                 \
S        uDMAChannelEnable
X#define MAP_uDMAChannelEnable                                                         uDMAChannelEnable
N#endif
N#ifdef ROM_uDMAChannelDisable
N#define MAP_uDMAChannelDisable                                                \
N        ROM_uDMAChannelDisable
X#define MAP_uDMAChannelDisable                                                        ROM_uDMAChannelDisable
N#else
S#define MAP_uDMAChannelDisable                                                \
S        uDMAChannelDisable
X#define MAP_uDMAChannelDisable                                                        uDMAChannelDisable
N#endif
N#ifdef ROM_uDMAChannelIsEnabled
N#define MAP_uDMAChannelIsEnabled                                              \
N        ROM_uDMAChannelIsEnabled
X#define MAP_uDMAChannelIsEnabled                                                      ROM_uDMAChannelIsEnabled
N#else
S#define MAP_uDMAChannelIsEnabled                                              \
S        uDMAChannelIsEnabled
X#define MAP_uDMAChannelIsEnabled                                                      uDMAChannelIsEnabled
N#endif
N#ifdef ROM_uDMAControlBaseSet
N#define MAP_uDMAControlBaseSet                                                \
N        ROM_uDMAControlBaseSet
X#define MAP_uDMAControlBaseSet                                                        ROM_uDMAControlBaseSet
N#else
S#define MAP_uDMAControlBaseSet                                                \
S        uDMAControlBaseSet
X#define MAP_uDMAControlBaseSet                                                        uDMAControlBaseSet
N#endif
N#ifdef ROM_uDMAControlBaseGet
N#define MAP_uDMAControlBaseGet                                                \
N        ROM_uDMAControlBaseGet
X#define MAP_uDMAControlBaseGet                                                        ROM_uDMAControlBaseGet
N#else
S#define MAP_uDMAControlBaseGet                                                \
S        uDMAControlBaseGet
X#define MAP_uDMAControlBaseGet                                                        uDMAControlBaseGet
N#endif
N#ifdef ROM_uDMAChannelRequest
N#define MAP_uDMAChannelRequest                                                \
N        ROM_uDMAChannelRequest
X#define MAP_uDMAChannelRequest                                                        ROM_uDMAChannelRequest
N#else
S#define MAP_uDMAChannelRequest                                                \
S        uDMAChannelRequest
X#define MAP_uDMAChannelRequest                                                        uDMAChannelRequest
N#endif
N#ifdef ROM_uDMAChannelAttributeEnable
N#define MAP_uDMAChannelAttributeEnable                                        \
N        ROM_uDMAChannelAttributeEnable
X#define MAP_uDMAChannelAttributeEnable                                                ROM_uDMAChannelAttributeEnable
N#else
S#define MAP_uDMAChannelAttributeEnable                                        \
S        uDMAChannelAttributeEnable
X#define MAP_uDMAChannelAttributeEnable                                                uDMAChannelAttributeEnable
N#endif
N#ifdef ROM_uDMAChannelAttributeDisable
N#define MAP_uDMAChannelAttributeDisable                                       \
N        ROM_uDMAChannelAttributeDisable
X#define MAP_uDMAChannelAttributeDisable                                               ROM_uDMAChannelAttributeDisable
N#else
S#define MAP_uDMAChannelAttributeDisable                                       \
S        uDMAChannelAttributeDisable
X#define MAP_uDMAChannelAttributeDisable                                               uDMAChannelAttributeDisable
N#endif
N#ifdef ROM_uDMAChannelAttributeGet
N#define MAP_uDMAChannelAttributeGet                                           \
N        ROM_uDMAChannelAttributeGet
X#define MAP_uDMAChannelAttributeGet                                                   ROM_uDMAChannelAttributeGet
N#else
S#define MAP_uDMAChannelAttributeGet                                           \
S        uDMAChannelAttributeGet
X#define MAP_uDMAChannelAttributeGet                                                   uDMAChannelAttributeGet
N#endif
N#ifdef ROM_uDMAChannelControlSet
N#define MAP_uDMAChannelControlSet                                             \
N        ROM_uDMAChannelControlSet
X#define MAP_uDMAChannelControlSet                                                     ROM_uDMAChannelControlSet
N#else
S#define MAP_uDMAChannelControlSet                                             \
S        uDMAChannelControlSet
X#define MAP_uDMAChannelControlSet                                                     uDMAChannelControlSet
N#endif
N#ifdef ROM_uDMAChannelSizeGet
N#define MAP_uDMAChannelSizeGet                                                \
N        ROM_uDMAChannelSizeGet
X#define MAP_uDMAChannelSizeGet                                                        ROM_uDMAChannelSizeGet
N#else
S#define MAP_uDMAChannelSizeGet                                                \
S        uDMAChannelSizeGet
X#define MAP_uDMAChannelSizeGet                                                        uDMAChannelSizeGet
N#endif
N#ifdef ROM_uDMAChannelModeGet
N#define MAP_uDMAChannelModeGet                                                \
N        ROM_uDMAChannelModeGet
X#define MAP_uDMAChannelModeGet                                                        ROM_uDMAChannelModeGet
N#else
S#define MAP_uDMAChannelModeGet                                                \
S        uDMAChannelModeGet
X#define MAP_uDMAChannelModeGet                                                        uDMAChannelModeGet
N#endif
N#ifdef ROM_uDMAChannelSelectSecondary
N#define MAP_uDMAChannelSelectSecondary                                        \
N        ROM_uDMAChannelSelectSecondary
X#define MAP_uDMAChannelSelectSecondary                                                ROM_uDMAChannelSelectSecondary
N#else
S#define MAP_uDMAChannelSelectSecondary                                        \
S        uDMAChannelSelectSecondary
X#define MAP_uDMAChannelSelectSecondary                                                uDMAChannelSelectSecondary
N#endif
N#ifdef ROM_uDMAChannelSelectDefault
N#define MAP_uDMAChannelSelectDefault                                          \
N        ROM_uDMAChannelSelectDefault
X#define MAP_uDMAChannelSelectDefault                                                  ROM_uDMAChannelSelectDefault
N#else
S#define MAP_uDMAChannelSelectDefault                                          \
S        uDMAChannelSelectDefault
X#define MAP_uDMAChannelSelectDefault                                                  uDMAChannelSelectDefault
N#endif
N#ifdef ROM_uDMAIntStatus
N#define MAP_uDMAIntStatus                                                     \
N        ROM_uDMAIntStatus
X#define MAP_uDMAIntStatus                                                             ROM_uDMAIntStatus
N#else
S#define MAP_uDMAIntStatus                                                     \
S        uDMAIntStatus
X#define MAP_uDMAIntStatus                                                             uDMAIntStatus
N#endif
N#ifdef ROM_uDMAIntClear
N#define MAP_uDMAIntClear                                                      \
N        ROM_uDMAIntClear
X#define MAP_uDMAIntClear                                                              ROM_uDMAIntClear
N#else
S#define MAP_uDMAIntClear                                                      \
S        uDMAIntClear
X#define MAP_uDMAIntClear                                                              uDMAIntClear
N#endif
N#ifdef ROM_uDMAControlAlternateBaseGet
N#define MAP_uDMAControlAlternateBaseGet                                       \
N        ROM_uDMAControlAlternateBaseGet
X#define MAP_uDMAControlAlternateBaseGet                                               ROM_uDMAControlAlternateBaseGet
N#else
S#define MAP_uDMAControlAlternateBaseGet                                       \
S        uDMAControlAlternateBaseGet
X#define MAP_uDMAControlAlternateBaseGet                                               uDMAControlAlternateBaseGet
N#endif
N#ifdef ROM_uDMAChannelScatterGatherSet
N#define MAP_uDMAChannelScatterGatherSet                                       \
N        ROM_uDMAChannelScatterGatherSet
X#define MAP_uDMAChannelScatterGatherSet                                               ROM_uDMAChannelScatterGatherSet
N#else
S#define MAP_uDMAChannelScatterGatherSet                                       \
S        uDMAChannelScatterGatherSet
X#define MAP_uDMAChannelScatterGatherSet                                               uDMAChannelScatterGatherSet
N#endif
N#ifdef ROM_uDMAChannelAssign
N#define MAP_uDMAChannelAssign                                                 \
N        ROM_uDMAChannelAssign
X#define MAP_uDMAChannelAssign                                                         ROM_uDMAChannelAssign
N#else
S#define MAP_uDMAChannelAssign                                                 \
S        uDMAChannelAssign
X#define MAP_uDMAChannelAssign                                                         uDMAChannelAssign
N#endif
N
N//*****************************************************************************
N//
N// Macros for the USB API.
N//
N//*****************************************************************************
N#ifdef ROM_USBDevAddrGet
N#define MAP_USBDevAddrGet                                                     \
N        ROM_USBDevAddrGet
X#define MAP_USBDevAddrGet                                                             ROM_USBDevAddrGet
N#else
S#define MAP_USBDevAddrGet                                                     \
S        USBDevAddrGet
X#define MAP_USBDevAddrGet                                                             USBDevAddrGet
N#endif
N#ifdef ROM_USBDevAddrSet
N#define MAP_USBDevAddrSet                                                     \
N        ROM_USBDevAddrSet
X#define MAP_USBDevAddrSet                                                             ROM_USBDevAddrSet
N#else
S#define MAP_USBDevAddrSet                                                     \
S        USBDevAddrSet
X#define MAP_USBDevAddrSet                                                             USBDevAddrSet
N#endif
N#ifdef ROM_USBDevConnect
N#define MAP_USBDevConnect                                                     \
N        ROM_USBDevConnect
X#define MAP_USBDevConnect                                                             ROM_USBDevConnect
N#else
S#define MAP_USBDevConnect                                                     \
S        USBDevConnect
X#define MAP_USBDevConnect                                                             USBDevConnect
N#endif
N#ifdef ROM_USBDevDisconnect
N#define MAP_USBDevDisconnect                                                  \
N        ROM_USBDevDisconnect
X#define MAP_USBDevDisconnect                                                          ROM_USBDevDisconnect
N#else
S#define MAP_USBDevDisconnect                                                  \
S        USBDevDisconnect
X#define MAP_USBDevDisconnect                                                          USBDevDisconnect
N#endif
N#ifdef ROM_USBDevEndpointConfigSet
N#define MAP_USBDevEndpointConfigSet                                           \
N        ROM_USBDevEndpointConfigSet
X#define MAP_USBDevEndpointConfigSet                                                   ROM_USBDevEndpointConfigSet
N#else
S#define MAP_USBDevEndpointConfigSet                                           \
S        USBDevEndpointConfigSet
X#define MAP_USBDevEndpointConfigSet                                                   USBDevEndpointConfigSet
N#endif
N#ifdef ROM_USBDevEndpointDataAck
N#define MAP_USBDevEndpointDataAck                                             \
N        ROM_USBDevEndpointDataAck
X#define MAP_USBDevEndpointDataAck                                                     ROM_USBDevEndpointDataAck
N#else
S#define MAP_USBDevEndpointDataAck                                             \
S        USBDevEndpointDataAck
X#define MAP_USBDevEndpointDataAck                                                     USBDevEndpointDataAck
N#endif
N#ifdef ROM_USBDevEndpointStall
N#define MAP_USBDevEndpointStall                                               \
N        ROM_USBDevEndpointStall
X#define MAP_USBDevEndpointStall                                                       ROM_USBDevEndpointStall
N#else
S#define MAP_USBDevEndpointStall                                               \
S        USBDevEndpointStall
X#define MAP_USBDevEndpointStall                                                       USBDevEndpointStall
N#endif
N#ifdef ROM_USBDevEndpointStallClear
N#define MAP_USBDevEndpointStallClear                                          \
N        ROM_USBDevEndpointStallClear
X#define MAP_USBDevEndpointStallClear                                                  ROM_USBDevEndpointStallClear
N#else
S#define MAP_USBDevEndpointStallClear                                          \
S        USBDevEndpointStallClear
X#define MAP_USBDevEndpointStallClear                                                  USBDevEndpointStallClear
N#endif
N#ifdef ROM_USBDevEndpointStatusClear
N#define MAP_USBDevEndpointStatusClear                                         \
N        ROM_USBDevEndpointStatusClear
X#define MAP_USBDevEndpointStatusClear                                                 ROM_USBDevEndpointStatusClear
N#else
S#define MAP_USBDevEndpointStatusClear                                         \
S        USBDevEndpointStatusClear
X#define MAP_USBDevEndpointStatusClear                                                 USBDevEndpointStatusClear
N#endif
N#ifdef ROM_USBEndpointDataGet
N#define MAP_USBEndpointDataGet                                                \
N        ROM_USBEndpointDataGet
X#define MAP_USBEndpointDataGet                                                        ROM_USBEndpointDataGet
N#else
S#define MAP_USBEndpointDataGet                                                \
S        USBEndpointDataGet
X#define MAP_USBEndpointDataGet                                                        USBEndpointDataGet
N#endif
N#ifdef ROM_USBEndpointDataPut
N#define MAP_USBEndpointDataPut                                                \
N        ROM_USBEndpointDataPut
X#define MAP_USBEndpointDataPut                                                        ROM_USBEndpointDataPut
N#else
S#define MAP_USBEndpointDataPut                                                \
S        USBEndpointDataPut
X#define MAP_USBEndpointDataPut                                                        USBEndpointDataPut
N#endif
N#ifdef ROM_USBEndpointDataSend
N#define MAP_USBEndpointDataSend                                               \
N        ROM_USBEndpointDataSend
X#define MAP_USBEndpointDataSend                                                       ROM_USBEndpointDataSend
N#else
S#define MAP_USBEndpointDataSend                                               \
S        USBEndpointDataSend
X#define MAP_USBEndpointDataSend                                                       USBEndpointDataSend
N#endif
N#ifdef ROM_USBEndpointDataToggleClear
N#define MAP_USBEndpointDataToggleClear                                        \
N        ROM_USBEndpointDataToggleClear
X#define MAP_USBEndpointDataToggleClear                                                ROM_USBEndpointDataToggleClear
N#else
S#define MAP_USBEndpointDataToggleClear                                        \
S        USBEndpointDataToggleClear
X#define MAP_USBEndpointDataToggleClear                                                USBEndpointDataToggleClear
N#endif
N#ifdef ROM_USBEndpointStatus
N#define MAP_USBEndpointStatus                                                 \
N        ROM_USBEndpointStatus
X#define MAP_USBEndpointStatus                                                         ROM_USBEndpointStatus
N#else
S#define MAP_USBEndpointStatus                                                 \
S        USBEndpointStatus
X#define MAP_USBEndpointStatus                                                         USBEndpointStatus
N#endif
N#ifdef ROM_USBFIFOAddrGet
N#define MAP_USBFIFOAddrGet                                                    \
N        ROM_USBFIFOAddrGet
X#define MAP_USBFIFOAddrGet                                                            ROM_USBFIFOAddrGet
N#else
S#define MAP_USBFIFOAddrGet                                                    \
S        USBFIFOAddrGet
X#define MAP_USBFIFOAddrGet                                                            USBFIFOAddrGet
N#endif
N#ifdef ROM_USBFIFOConfigGet
N#define MAP_USBFIFOConfigGet                                                  \
N        ROM_USBFIFOConfigGet
X#define MAP_USBFIFOConfigGet                                                          ROM_USBFIFOConfigGet
N#else
S#define MAP_USBFIFOConfigGet                                                  \
S        USBFIFOConfigGet
X#define MAP_USBFIFOConfigGet                                                          USBFIFOConfigGet
N#endif
N#ifdef ROM_USBFIFOConfigSet
N#define MAP_USBFIFOConfigSet                                                  \
N        ROM_USBFIFOConfigSet
X#define MAP_USBFIFOConfigSet                                                          ROM_USBFIFOConfigSet
N#else
S#define MAP_USBFIFOConfigSet                                                  \
S        USBFIFOConfigSet
X#define MAP_USBFIFOConfigSet                                                          USBFIFOConfigSet
N#endif
N#ifdef ROM_USBFIFOFlush
N#define MAP_USBFIFOFlush                                                      \
N        ROM_USBFIFOFlush
X#define MAP_USBFIFOFlush                                                              ROM_USBFIFOFlush
N#else
S#define MAP_USBFIFOFlush                                                      \
S        USBFIFOFlush
X#define MAP_USBFIFOFlush                                                              USBFIFOFlush
N#endif
N#ifdef ROM_USBFrameNumberGet
N#define MAP_USBFrameNumberGet                                                 \
N        ROM_USBFrameNumberGet
X#define MAP_USBFrameNumberGet                                                         ROM_USBFrameNumberGet
N#else
S#define MAP_USBFrameNumberGet                                                 \
S        USBFrameNumberGet
X#define MAP_USBFrameNumberGet                                                         USBFrameNumberGet
N#endif
N#ifdef ROM_USBHostAddrGet
N#define MAP_USBHostAddrGet                                                    \
N        ROM_USBHostAddrGet
X#define MAP_USBHostAddrGet                                                            ROM_USBHostAddrGet
N#else
S#define MAP_USBHostAddrGet                                                    \
S        USBHostAddrGet
X#define MAP_USBHostAddrGet                                                            USBHostAddrGet
N#endif
N#ifdef ROM_USBHostAddrSet
N#define MAP_USBHostAddrSet                                                    \
N        ROM_USBHostAddrSet
X#define MAP_USBHostAddrSet                                                            ROM_USBHostAddrSet
N#else
S#define MAP_USBHostAddrSet                                                    \
S        USBHostAddrSet
X#define MAP_USBHostAddrSet                                                            USBHostAddrSet
N#endif
N#ifdef ROM_USBHostEndpointConfig
N#define MAP_USBHostEndpointConfig                                             \
N        ROM_USBHostEndpointConfig
X#define MAP_USBHostEndpointConfig                                                     ROM_USBHostEndpointConfig
N#else
S#define MAP_USBHostEndpointConfig                                             \
S        USBHostEndpointConfig
X#define MAP_USBHostEndpointConfig                                                     USBHostEndpointConfig
N#endif
N#ifdef ROM_USBHostEndpointDataAck
N#define MAP_USBHostEndpointDataAck                                            \
N        ROM_USBHostEndpointDataAck
X#define MAP_USBHostEndpointDataAck                                                    ROM_USBHostEndpointDataAck
N#else
S#define MAP_USBHostEndpointDataAck                                            \
S        USBHostEndpointDataAck
X#define MAP_USBHostEndpointDataAck                                                    USBHostEndpointDataAck
N#endif
N#ifdef ROM_USBHostEndpointDataToggle
N#define MAP_USBHostEndpointDataToggle                                         \
N        ROM_USBHostEndpointDataToggle
X#define MAP_USBHostEndpointDataToggle                                                 ROM_USBHostEndpointDataToggle
N#else
S#define MAP_USBHostEndpointDataToggle                                         \
S        USBHostEndpointDataToggle
X#define MAP_USBHostEndpointDataToggle                                                 USBHostEndpointDataToggle
N#endif
N#ifdef ROM_USBHostEndpointStatusClear
N#define MAP_USBHostEndpointStatusClear                                        \
N        ROM_USBHostEndpointStatusClear
X#define MAP_USBHostEndpointStatusClear                                                ROM_USBHostEndpointStatusClear
N#else
S#define MAP_USBHostEndpointStatusClear                                        \
S        USBHostEndpointStatusClear
X#define MAP_USBHostEndpointStatusClear                                                USBHostEndpointStatusClear
N#endif
N#ifdef ROM_USBHostHubAddrGet
N#define MAP_USBHostHubAddrGet                                                 \
N        ROM_USBHostHubAddrGet
X#define MAP_USBHostHubAddrGet                                                         ROM_USBHostHubAddrGet
N#else
S#define MAP_USBHostHubAddrGet                                                 \
S        USBHostHubAddrGet
X#define MAP_USBHostHubAddrGet                                                         USBHostHubAddrGet
N#endif
N#ifdef ROM_USBHostHubAddrSet
N#define MAP_USBHostHubAddrSet                                                 \
N        ROM_USBHostHubAddrSet
X#define MAP_USBHostHubAddrSet                                                         ROM_USBHostHubAddrSet
N#else
S#define MAP_USBHostHubAddrSet                                                 \
S        USBHostHubAddrSet
X#define MAP_USBHostHubAddrSet                                                         USBHostHubAddrSet
N#endif
N#ifdef ROM_USBHostPwrDisable
N#define MAP_USBHostPwrDisable                                                 \
N        ROM_USBHostPwrDisable
X#define MAP_USBHostPwrDisable                                                         ROM_USBHostPwrDisable
N#else
S#define MAP_USBHostPwrDisable                                                 \
S        USBHostPwrDisable
X#define MAP_USBHostPwrDisable                                                         USBHostPwrDisable
N#endif
N#ifdef ROM_USBHostPwrEnable
N#define MAP_USBHostPwrEnable                                                  \
N        ROM_USBHostPwrEnable
X#define MAP_USBHostPwrEnable                                                          ROM_USBHostPwrEnable
N#else
S#define MAP_USBHostPwrEnable                                                  \
S        USBHostPwrEnable
X#define MAP_USBHostPwrEnable                                                          USBHostPwrEnable
N#endif
N#ifdef ROM_USBHostPwrConfig
N#define MAP_USBHostPwrConfig                                                  \
N        ROM_USBHostPwrConfig
X#define MAP_USBHostPwrConfig                                                          ROM_USBHostPwrConfig
N#else
S#define MAP_USBHostPwrConfig                                                  \
S        USBHostPwrConfig
X#define MAP_USBHostPwrConfig                                                          USBHostPwrConfig
N#endif
N#ifdef ROM_USBHostPwrFaultDisable
N#define MAP_USBHostPwrFaultDisable                                            \
N        ROM_USBHostPwrFaultDisable
X#define MAP_USBHostPwrFaultDisable                                                    ROM_USBHostPwrFaultDisable
N#else
S#define MAP_USBHostPwrFaultDisable                                            \
S        USBHostPwrFaultDisable
X#define MAP_USBHostPwrFaultDisable                                                    USBHostPwrFaultDisable
N#endif
N#ifdef ROM_USBHostPwrFaultEnable
N#define MAP_USBHostPwrFaultEnable                                             \
N        ROM_USBHostPwrFaultEnable
X#define MAP_USBHostPwrFaultEnable                                                     ROM_USBHostPwrFaultEnable
N#else
S#define MAP_USBHostPwrFaultEnable                                             \
S        USBHostPwrFaultEnable
X#define MAP_USBHostPwrFaultEnable                                                     USBHostPwrFaultEnable
N#endif
N#ifdef ROM_USBHostRequestIN
N#define MAP_USBHostRequestIN                                                  \
N        ROM_USBHostRequestIN
X#define MAP_USBHostRequestIN                                                          ROM_USBHostRequestIN
N#else
S#define MAP_USBHostRequestIN                                                  \
S        USBHostRequestIN
X#define MAP_USBHostRequestIN                                                          USBHostRequestIN
N#endif
N#ifdef ROM_USBHostRequestStatus
N#define MAP_USBHostRequestStatus                                              \
N        ROM_USBHostRequestStatus
X#define MAP_USBHostRequestStatus                                                      ROM_USBHostRequestStatus
N#else
S#define MAP_USBHostRequestStatus                                              \
S        USBHostRequestStatus
X#define MAP_USBHostRequestStatus                                                      USBHostRequestStatus
N#endif
N#ifdef ROM_USBHostReset
N#define MAP_USBHostReset                                                      \
N        ROM_USBHostReset
X#define MAP_USBHostReset                                                              ROM_USBHostReset
N#else
S#define MAP_USBHostReset                                                      \
S        USBHostReset
X#define MAP_USBHostReset                                                              USBHostReset
N#endif
N#ifdef ROM_USBHostResume
N#define MAP_USBHostResume                                                     \
N        ROM_USBHostResume
X#define MAP_USBHostResume                                                             ROM_USBHostResume
N#else
S#define MAP_USBHostResume                                                     \
S        USBHostResume
X#define MAP_USBHostResume                                                             USBHostResume
N#endif
N#ifdef ROM_USBHostSpeedGet
N#define MAP_USBHostSpeedGet                                                   \
N        ROM_USBHostSpeedGet
X#define MAP_USBHostSpeedGet                                                           ROM_USBHostSpeedGet
N#else
S#define MAP_USBHostSpeedGet                                                   \
S        USBHostSpeedGet
X#define MAP_USBHostSpeedGet                                                           USBHostSpeedGet
N#endif
N#ifdef ROM_USBHostSuspend
N#define MAP_USBHostSuspend                                                    \
N        ROM_USBHostSuspend
X#define MAP_USBHostSuspend                                                            ROM_USBHostSuspend
N#else
S#define MAP_USBHostSuspend                                                    \
S        USBHostSuspend
X#define MAP_USBHostSuspend                                                            USBHostSuspend
N#endif
N#ifdef ROM_USBDevEndpointConfigGet
N#define MAP_USBDevEndpointConfigGet                                           \
N        ROM_USBDevEndpointConfigGet
X#define MAP_USBDevEndpointConfigGet                                                   ROM_USBDevEndpointConfigGet
N#else
S#define MAP_USBDevEndpointConfigGet                                           \
S        USBDevEndpointConfigGet
X#define MAP_USBDevEndpointConfigGet                                                   USBDevEndpointConfigGet
N#endif
N#ifdef ROM_USBEndpointDMAEnable
N#define MAP_USBEndpointDMAEnable                                              \
N        ROM_USBEndpointDMAEnable
X#define MAP_USBEndpointDMAEnable                                                      ROM_USBEndpointDMAEnable
N#else
S#define MAP_USBEndpointDMAEnable                                              \
S        USBEndpointDMAEnable
X#define MAP_USBEndpointDMAEnable                                                      USBEndpointDMAEnable
N#endif
N#ifdef ROM_USBEndpointDMADisable
N#define MAP_USBEndpointDMADisable                                             \
N        ROM_USBEndpointDMADisable
X#define MAP_USBEndpointDMADisable                                                     ROM_USBEndpointDMADisable
N#else
S#define MAP_USBEndpointDMADisable                                             \
S        USBEndpointDMADisable
X#define MAP_USBEndpointDMADisable                                                     USBEndpointDMADisable
N#endif
N#ifdef ROM_USBEndpointDataAvail
N#define MAP_USBEndpointDataAvail                                              \
N        ROM_USBEndpointDataAvail
X#define MAP_USBEndpointDataAvail                                                      ROM_USBEndpointDataAvail
N#else
S#define MAP_USBEndpointDataAvail                                              \
S        USBEndpointDataAvail
X#define MAP_USBEndpointDataAvail                                                      USBEndpointDataAvail
N#endif
N#ifdef ROM_USBModeGet
N#define MAP_USBModeGet                                                        \
N        ROM_USBModeGet
X#define MAP_USBModeGet                                                                ROM_USBModeGet
N#else
S#define MAP_USBModeGet                                                        \
S        USBModeGet
X#define MAP_USBModeGet                                                                USBModeGet
N#endif
N#ifdef ROM_USBEndpointDMAChannel
N#define MAP_USBEndpointDMAChannel                                             \
N        ROM_USBEndpointDMAChannel
X#define MAP_USBEndpointDMAChannel                                                     ROM_USBEndpointDMAChannel
N#else
S#define MAP_USBEndpointDMAChannel                                             \
S        USBEndpointDMAChannel
X#define MAP_USBEndpointDMAChannel                                                     USBEndpointDMAChannel
N#endif
N#ifdef ROM_USBIntDisableControl
N#define MAP_USBIntDisableControl                                              \
N        ROM_USBIntDisableControl
X#define MAP_USBIntDisableControl                                                      ROM_USBIntDisableControl
N#else
S#define MAP_USBIntDisableControl                                              \
S        USBIntDisableControl
X#define MAP_USBIntDisableControl                                                      USBIntDisableControl
N#endif
N#ifdef ROM_USBIntEnableControl
N#define MAP_USBIntEnableControl                                               \
N        ROM_USBIntEnableControl
X#define MAP_USBIntEnableControl                                                       ROM_USBIntEnableControl
N#else
S#define MAP_USBIntEnableControl                                               \
S        USBIntEnableControl
X#define MAP_USBIntEnableControl                                                       USBIntEnableControl
N#endif
N#ifdef ROM_USBIntStatusControl
N#define MAP_USBIntStatusControl                                               \
N        ROM_USBIntStatusControl
X#define MAP_USBIntStatusControl                                                       ROM_USBIntStatusControl
N#else
S#define MAP_USBIntStatusControl                                               \
S        USBIntStatusControl
X#define MAP_USBIntStatusControl                                                       USBIntStatusControl
N#endif
N#ifdef ROM_USBIntDisableEndpoint
N#define MAP_USBIntDisableEndpoint                                             \
N        ROM_USBIntDisableEndpoint
X#define MAP_USBIntDisableEndpoint                                                     ROM_USBIntDisableEndpoint
N#else
S#define MAP_USBIntDisableEndpoint                                             \
S        USBIntDisableEndpoint
X#define MAP_USBIntDisableEndpoint                                                     USBIntDisableEndpoint
N#endif
N#ifdef ROM_USBIntEnableEndpoint
N#define MAP_USBIntEnableEndpoint                                              \
N        ROM_USBIntEnableEndpoint
X#define MAP_USBIntEnableEndpoint                                                      ROM_USBIntEnableEndpoint
N#else
S#define MAP_USBIntEnableEndpoint                                              \
S        USBIntEnableEndpoint
X#define MAP_USBIntEnableEndpoint                                                      USBIntEnableEndpoint
N#endif
N#ifdef ROM_USBIntStatusEndpoint
N#define MAP_USBIntStatusEndpoint                                              \
N        ROM_USBIntStatusEndpoint
X#define MAP_USBIntStatusEndpoint                                                      ROM_USBIntStatusEndpoint
N#else
S#define MAP_USBIntStatusEndpoint                                              \
S        USBIntStatusEndpoint
X#define MAP_USBIntStatusEndpoint                                                      USBIntStatusEndpoint
N#endif
N#ifdef ROM_USBHostMode
N#define MAP_USBHostMode                                                       \
N        ROM_USBHostMode
X#define MAP_USBHostMode                                                               ROM_USBHostMode
N#else
S#define MAP_USBHostMode                                                       \
S        USBHostMode
X#define MAP_USBHostMode                                                               USBHostMode
N#endif
N#ifdef ROM_USBDevMode
N#define MAP_USBDevMode                                                        \
N        ROM_USBDevMode
X#define MAP_USBDevMode                                                                ROM_USBDevMode
N#else
S#define MAP_USBDevMode                                                        \
S        USBDevMode
X#define MAP_USBDevMode                                                                USBDevMode
N#endif
N#ifdef ROM_USBPHYPowerOff
N#define MAP_USBPHYPowerOff                                                    \
N        ROM_USBPHYPowerOff
X#define MAP_USBPHYPowerOff                                                            ROM_USBPHYPowerOff
N#else
S#define MAP_USBPHYPowerOff                                                    \
S        USBPHYPowerOff
X#define MAP_USBPHYPowerOff                                                            USBPHYPowerOff
N#endif
N#ifdef ROM_USBPHYPowerOn
N#define MAP_USBPHYPowerOn                                                     \
N        ROM_USBPHYPowerOn
X#define MAP_USBPHYPowerOn                                                             ROM_USBPHYPowerOn
N#else
S#define MAP_USBPHYPowerOn                                                     \
S        USBPHYPowerOn
X#define MAP_USBPHYPowerOn                                                             USBPHYPowerOn
N#endif
N#ifdef ROM_USBOTGMode
N#define MAP_USBOTGMode                                                        \
N        ROM_USBOTGMode
X#define MAP_USBOTGMode                                                                ROM_USBOTGMode
N#else
S#define MAP_USBOTGMode                                                        \
S        USBOTGMode
X#define MAP_USBOTGMode                                                                USBOTGMode
N#endif
N#ifdef ROM_USBHostRequestINClear
N#define MAP_USBHostRequestINClear                                             \
N        ROM_USBHostRequestINClear
X#define MAP_USBHostRequestINClear                                                     ROM_USBHostRequestINClear
N#else
S#define MAP_USBHostRequestINClear                                             \
S        USBHostRequestINClear
X#define MAP_USBHostRequestINClear                                                     USBHostRequestINClear
N#endif
N#ifdef ROM_USBNumEndpointsGet
N#define MAP_USBNumEndpointsGet                                                \
N        ROM_USBNumEndpointsGet
X#define MAP_USBNumEndpointsGet                                                        ROM_USBNumEndpointsGet
N#else
S#define MAP_USBNumEndpointsGet                                                \
S        USBNumEndpointsGet
X#define MAP_USBNumEndpointsGet                                                        USBNumEndpointsGet
N#endif
N#ifdef ROM_USBClockDisable
S#define MAP_USBClockDisable                                                   \
S        ROM_USBClockDisable
X#define MAP_USBClockDisable                                                           ROM_USBClockDisable
N#else
N#define MAP_USBClockDisable                                                   \
N        USBClockDisable
X#define MAP_USBClockDisable                                                           USBClockDisable
N#endif
N#ifdef ROM_USBClockEnable
S#define MAP_USBClockEnable                                                    \
S        ROM_USBClockEnable
X#define MAP_USBClockEnable                                                            ROM_USBClockEnable
N#else
N#define MAP_USBClockEnable                                                    \
N        USBClockEnable
X#define MAP_USBClockEnable                                                            USBClockEnable
N#endif
N#ifdef ROM_USBControllerVersion
S#define MAP_USBControllerVersion                                              \
S        ROM_USBControllerVersion
X#define MAP_USBControllerVersion                                                      ROM_USBControllerVersion
N#else
N#define MAP_USBControllerVersion                                              \
N        USBControllerVersion
X#define MAP_USBControllerVersion                                                      USBControllerVersion
N#endif
N#ifdef ROM_USBDevLPMConfig
S#define MAP_USBDevLPMConfig                                                   \
S        ROM_USBDevLPMConfig
X#define MAP_USBDevLPMConfig                                                           ROM_USBDevLPMConfig
N#else
N#define MAP_USBDevLPMConfig                                                   \
N        USBDevLPMConfig
X#define MAP_USBDevLPMConfig                                                           USBDevLPMConfig
N#endif
N#ifdef ROM_USBDevLPMDisable
S#define MAP_USBDevLPMDisable                                                  \
S        ROM_USBDevLPMDisable
X#define MAP_USBDevLPMDisable                                                          ROM_USBDevLPMDisable
N#else
N#define MAP_USBDevLPMDisable                                                  \
N        USBDevLPMDisable
X#define MAP_USBDevLPMDisable                                                          USBDevLPMDisable
N#endif
N#ifdef ROM_USBDevLPMEnable
N#define MAP_USBDevLPMEnable                                                   \
N        ROM_USBDevLPMEnable
X#define MAP_USBDevLPMEnable                                                           ROM_USBDevLPMEnable
N#else
S#define MAP_USBDevLPMEnable                                                   \
S        USBDevLPMEnable
X#define MAP_USBDevLPMEnable                                                           USBDevLPMEnable
N#endif
N#ifdef ROM_USBDevLPMRemoteWake
S#define MAP_USBDevLPMRemoteWake                                               \
S        ROM_USBDevLPMRemoteWake
X#define MAP_USBDevLPMRemoteWake                                                       ROM_USBDevLPMRemoteWake
N#else
N#define MAP_USBDevLPMRemoteWake                                               \
N        USBDevLPMRemoteWake
X#define MAP_USBDevLPMRemoteWake                                                       USBDevLPMRemoteWake
N#endif
N#ifdef ROM_USBDevSpeedGet
S#define MAP_USBDevSpeedGet                                                    \
S        ROM_USBDevSpeedGet
X#define MAP_USBDevSpeedGet                                                            ROM_USBDevSpeedGet
N#else
N#define MAP_USBDevSpeedGet                                                    \
N        USBDevSpeedGet
X#define MAP_USBDevSpeedGet                                                            USBDevSpeedGet
N#endif
N#ifdef ROM_USBDMAChannelAddressGet
S#define MAP_USBDMAChannelAddressGet                                           \
S        ROM_USBDMAChannelAddressGet
X#define MAP_USBDMAChannelAddressGet                                                   ROM_USBDMAChannelAddressGet
N#else
N#define MAP_USBDMAChannelAddressGet                                           \
N        USBDMAChannelAddressGet
X#define MAP_USBDMAChannelAddressGet                                                   USBDMAChannelAddressGet
N#endif
N#ifdef ROM_USBDMAChannelAddressSet
S#define MAP_USBDMAChannelAddressSet                                           \
S        ROM_USBDMAChannelAddressSet
X#define MAP_USBDMAChannelAddressSet                                                   ROM_USBDMAChannelAddressSet
N#else
N#define MAP_USBDMAChannelAddressSet                                           \
N        USBDMAChannelAddressSet
X#define MAP_USBDMAChannelAddressSet                                                   USBDMAChannelAddressSet
N#endif
N#ifdef ROM_USBDMAChannelConfigSet
S#define MAP_USBDMAChannelConfigSet                                            \
S        ROM_USBDMAChannelConfigSet
X#define MAP_USBDMAChannelConfigSet                                                    ROM_USBDMAChannelConfigSet
N#else
N#define MAP_USBDMAChannelConfigSet                                            \
N        USBDMAChannelConfigSet
X#define MAP_USBDMAChannelConfigSet                                                    USBDMAChannelConfigSet
N#endif
N#ifdef ROM_USBDMAChannelDisable
S#define MAP_USBDMAChannelDisable                                              \
S        ROM_USBDMAChannelDisable
X#define MAP_USBDMAChannelDisable                                                      ROM_USBDMAChannelDisable
N#else
N#define MAP_USBDMAChannelDisable                                              \
N        USBDMAChannelDisable
X#define MAP_USBDMAChannelDisable                                                      USBDMAChannelDisable
N#endif
N#ifdef ROM_USBDMAChannelEnable
S#define MAP_USBDMAChannelEnable                                               \
S        ROM_USBDMAChannelEnable
X#define MAP_USBDMAChannelEnable                                                       ROM_USBDMAChannelEnable
N#else
N#define MAP_USBDMAChannelEnable                                               \
N        USBDMAChannelEnable
X#define MAP_USBDMAChannelEnable                                                       USBDMAChannelEnable
N#endif
N#ifdef ROM_USBDMAChannelIntDisable
S#define MAP_USBDMAChannelIntDisable                                           \
S        ROM_USBDMAChannelIntDisable
X#define MAP_USBDMAChannelIntDisable                                                   ROM_USBDMAChannelIntDisable
N#else
N#define MAP_USBDMAChannelIntDisable                                           \
N        USBDMAChannelIntDisable
X#define MAP_USBDMAChannelIntDisable                                                   USBDMAChannelIntDisable
N#endif
N#ifdef ROM_USBDMAChannelIntEnable
S#define MAP_USBDMAChannelIntEnable                                            \
S        ROM_USBDMAChannelIntEnable
X#define MAP_USBDMAChannelIntEnable                                                    ROM_USBDMAChannelIntEnable
N#else
N#define MAP_USBDMAChannelIntEnable                                            \
N        USBDMAChannelIntEnable
X#define MAP_USBDMAChannelIntEnable                                                    USBDMAChannelIntEnable
N#endif
N#ifdef ROM_USBDMAChannelCountGet
S#define MAP_USBDMAChannelCountGet                                             \
S        ROM_USBDMAChannelCountGet
X#define MAP_USBDMAChannelCountGet                                                     ROM_USBDMAChannelCountGet
N#else
N#define MAP_USBDMAChannelCountGet                                             \
N        USBDMAChannelCountGet
X#define MAP_USBDMAChannelCountGet                                                     USBDMAChannelCountGet
N#endif
N#ifdef ROM_USBDMAChannelCountSet
S#define MAP_USBDMAChannelCountSet                                             \
S        ROM_USBDMAChannelCountSet
X#define MAP_USBDMAChannelCountSet                                                     ROM_USBDMAChannelCountSet
N#else
N#define MAP_USBDMAChannelCountSet                                             \
N        USBDMAChannelCountSet
X#define MAP_USBDMAChannelCountSet                                                     USBDMAChannelCountSet
N#endif
N#ifdef ROM_USBDMAChannelIntStatus
S#define MAP_USBDMAChannelIntStatus                                            \
S        ROM_USBDMAChannelIntStatus
X#define MAP_USBDMAChannelIntStatus                                                    ROM_USBDMAChannelIntStatus
N#else
N#define MAP_USBDMAChannelIntStatus                                            \
N        USBDMAChannelIntStatus
X#define MAP_USBDMAChannelIntStatus                                                    USBDMAChannelIntStatus
N#endif
N#ifdef ROM_USBDMAChannelStatus
S#define MAP_USBDMAChannelStatus                                               \
S        ROM_USBDMAChannelStatus
X#define MAP_USBDMAChannelStatus                                                       ROM_USBDMAChannelStatus
N#else
N#define MAP_USBDMAChannelStatus                                               \
N        USBDMAChannelStatus
X#define MAP_USBDMAChannelStatus                                                       USBDMAChannelStatus
N#endif
N#ifdef ROM_USBDMAChannelStatusClear
S#define MAP_USBDMAChannelStatusClear                                          \
S        ROM_USBDMAChannelStatusClear
X#define MAP_USBDMAChannelStatusClear                                                  ROM_USBDMAChannelStatusClear
N#else
N#define MAP_USBDMAChannelStatusClear                                          \
N        USBDMAChannelStatusClear
X#define MAP_USBDMAChannelStatusClear                                                  USBDMAChannelStatusClear
N#endif
N#ifdef ROM_USBHighSpeed
S#define MAP_USBHighSpeed                                                      \
S        ROM_USBHighSpeed
X#define MAP_USBHighSpeed                                                              ROM_USBHighSpeed
N#else
N#define MAP_USBHighSpeed                                                      \
N        USBHighSpeed
X#define MAP_USBHighSpeed                                                              USBHighSpeed
N#endif
N#ifdef ROM_USBHostEndpointPing
S#define MAP_USBHostEndpointPing                                               \
S        ROM_USBHostEndpointPing
X#define MAP_USBHostEndpointPing                                                       ROM_USBHostEndpointPing
N#else
N#define MAP_USBHostEndpointPing                                               \
N        USBHostEndpointPing
X#define MAP_USBHostEndpointPing                                                       USBHostEndpointPing
N#endif
N#ifdef ROM_USBHostEndpointSpeed
S#define MAP_USBHostEndpointSpeed                                              \
S        ROM_USBHostEndpointSpeed
X#define MAP_USBHostEndpointSpeed                                                      ROM_USBHostEndpointSpeed
N#else
N#define MAP_USBHostEndpointSpeed                                              \
N        USBHostEndpointSpeed
X#define MAP_USBHostEndpointSpeed                                                      USBHostEndpointSpeed
N#endif
N#ifdef ROM_USBHostLPMConfig
S#define MAP_USBHostLPMConfig                                                  \
S        ROM_USBHostLPMConfig
X#define MAP_USBHostLPMConfig                                                          ROM_USBHostLPMConfig
N#else
N#define MAP_USBHostLPMConfig                                                  \
N        USBHostLPMConfig
X#define MAP_USBHostLPMConfig                                                          USBHostLPMConfig
N#endif
N#ifdef ROM_USBHostLPMResume
S#define MAP_USBHostLPMResume                                                  \
S        ROM_USBHostLPMResume
X#define MAP_USBHostLPMResume                                                          ROM_USBHostLPMResume
N#else
N#define MAP_USBHostLPMResume                                                  \
N        USBHostLPMResume
X#define MAP_USBHostLPMResume                                                          USBHostLPMResume
N#endif
N#ifdef ROM_USBHostLPMSend
S#define MAP_USBHostLPMSend                                                    \
S        ROM_USBHostLPMSend
X#define MAP_USBHostLPMSend                                                            ROM_USBHostLPMSend
N#else
N#define MAP_USBHostLPMSend                                                    \
N        USBHostLPMSend
X#define MAP_USBHostLPMSend                                                            USBHostLPMSend
N#endif
N#ifdef ROM_USBLPMIntDisable
S#define MAP_USBLPMIntDisable                                                  \
S        ROM_USBLPMIntDisable
X#define MAP_USBLPMIntDisable                                                          ROM_USBLPMIntDisable
N#else
N#define MAP_USBLPMIntDisable                                                  \
N        USBLPMIntDisable
X#define MAP_USBLPMIntDisable                                                          USBLPMIntDisable
N#endif
N#ifdef ROM_USBLPMIntEnable
S#define MAP_USBLPMIntEnable                                                   \
S        ROM_USBLPMIntEnable
X#define MAP_USBLPMIntEnable                                                           ROM_USBLPMIntEnable
N#else
N#define MAP_USBLPMIntEnable                                                   \
N        USBLPMIntEnable
X#define MAP_USBLPMIntEnable                                                           USBLPMIntEnable
N#endif
N#ifdef ROM_USBLPMIntStatus
S#define MAP_USBLPMIntStatus                                                   \
S        ROM_USBLPMIntStatus
X#define MAP_USBLPMIntStatus                                                           ROM_USBLPMIntStatus
N#else
N#define MAP_USBLPMIntStatus                                                   \
N        USBLPMIntStatus
X#define MAP_USBLPMIntStatus                                                           USBLPMIntStatus
N#endif
N#ifdef ROM_USBLPMLinkStateGet
S#define MAP_USBLPMLinkStateGet                                                \
S        ROM_USBLPMLinkStateGet
X#define MAP_USBLPMLinkStateGet                                                        ROM_USBLPMLinkStateGet
N#else
N#define MAP_USBLPMLinkStateGet                                                \
N        USBLPMLinkStateGet
X#define MAP_USBLPMLinkStateGet                                                        USBLPMLinkStateGet
N#endif
N#ifdef ROM_USBEndpointPacketCountSet
S#define MAP_USBEndpointPacketCountSet                                         \
S        ROM_USBEndpointPacketCountSet
X#define MAP_USBEndpointPacketCountSet                                                 ROM_USBEndpointPacketCountSet
N#else
N#define MAP_USBEndpointPacketCountSet                                         \
N        USBEndpointPacketCountSet
X#define MAP_USBEndpointPacketCountSet                                                 USBEndpointPacketCountSet
N#endif
N#ifdef ROM_USBULPIConfig
S#define MAP_USBULPIConfig                                                     \
S        ROM_USBULPIConfig
X#define MAP_USBULPIConfig                                                             ROM_USBULPIConfig
N#else
N#define MAP_USBULPIConfig                                                     \
N        USBULPIConfig
X#define MAP_USBULPIConfig                                                             USBULPIConfig
N#endif
N#ifdef ROM_USBULPIDisable
S#define MAP_USBULPIDisable                                                    \
S        ROM_USBULPIDisable
X#define MAP_USBULPIDisable                                                            ROM_USBULPIDisable
N#else
N#define MAP_USBULPIDisable                                                    \
N        USBULPIDisable
X#define MAP_USBULPIDisable                                                            USBULPIDisable
N#endif
N#ifdef ROM_USBULPIEnable
S#define MAP_USBULPIEnable                                                     \
S        ROM_USBULPIEnable
X#define MAP_USBULPIEnable                                                             ROM_USBULPIEnable
N#else
N#define MAP_USBULPIEnable                                                     \
N        USBULPIEnable
X#define MAP_USBULPIEnable                                                             USBULPIEnable
N#endif
N#ifdef ROM_USBULPIRegRead
S#define MAP_USBULPIRegRead                                                    \
S        ROM_USBULPIRegRead
X#define MAP_USBULPIRegRead                                                            ROM_USBULPIRegRead
N#else
N#define MAP_USBULPIRegRead                                                    \
N        USBULPIRegRead
X#define MAP_USBULPIRegRead                                                            USBULPIRegRead
N#endif
N#ifdef ROM_USBULPIRegWrite
S#define MAP_USBULPIRegWrite                                                   \
S        ROM_USBULPIRegWrite
X#define MAP_USBULPIRegWrite                                                           ROM_USBULPIRegWrite
N#else
N#define MAP_USBULPIRegWrite                                                   \
N        USBULPIRegWrite
X#define MAP_USBULPIRegWrite                                                           USBULPIRegWrite
N#endif
N#ifdef ROM_USBOTGSessionRequest
S#define MAP_USBOTGSessionRequest                                              \
S        ROM_USBOTGSessionRequest
X#define MAP_USBOTGSessionRequest                                                      ROM_USBOTGSessionRequest
N#else
N#define MAP_USBOTGSessionRequest                                              \
N        USBOTGSessionRequest
X#define MAP_USBOTGSessionRequest                                                      USBOTGSessionRequest
N#endif
N#ifdef ROM_USBDMANumChannels
S#define MAP_USBDMANumChannels                                                 \
S        ROM_USBDMANumChannels
X#define MAP_USBDMANumChannels                                                         ROM_USBDMANumChannels
N#else
N#define MAP_USBDMANumChannels                                                 \
N        USBDMANumChannels
X#define MAP_USBDMANumChannels                                                         USBDMANumChannels
N#endif
N#ifdef ROM_USBEndpointDMAConfigSet
S#define MAP_USBEndpointDMAConfigSet                                           \
S        ROM_USBEndpointDMAConfigSet
X#define MAP_USBEndpointDMAConfigSet                                                   ROM_USBEndpointDMAConfigSet
N#else
N#define MAP_USBEndpointDMAConfigSet                                           \
N        USBEndpointDMAConfigSet
X#define MAP_USBEndpointDMAConfigSet                                                   USBEndpointDMAConfigSet
N#endif
N#ifdef ROM_USBLPMRemoteWakeEnabled
S#define MAP_USBLPMRemoteWakeEnabled                                           \
S        ROM_USBLPMRemoteWakeEnabled
X#define MAP_USBLPMRemoteWakeEnabled                                                   ROM_USBLPMRemoteWakeEnabled
N#else
N#define MAP_USBLPMRemoteWakeEnabled                                           \
N        USBLPMRemoteWakeEnabled
X#define MAP_USBLPMRemoteWakeEnabled                                                   USBLPMRemoteWakeEnabled
N#endif
N#ifdef ROM_USBModeConfig
S#define MAP_USBModeConfig                                                     \
S        ROM_USBModeConfig
X#define MAP_USBModeConfig                                                             ROM_USBModeConfig
N#else
N#define MAP_USBModeConfig                                                     \
N        USBModeConfig
X#define MAP_USBModeConfig                                                             USBModeConfig
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Watchdog API.
N//
N//*****************************************************************************
N#ifdef ROM_WatchdogIntClear
N#define MAP_WatchdogIntClear                                                  \
N        ROM_WatchdogIntClear
X#define MAP_WatchdogIntClear                                                          ROM_WatchdogIntClear
N#else
S#define MAP_WatchdogIntClear                                                  \
S        WatchdogIntClear
X#define MAP_WatchdogIntClear                                                          WatchdogIntClear
N#endif
N#ifdef ROM_WatchdogRunning
N#define MAP_WatchdogRunning                                                   \
N        ROM_WatchdogRunning
X#define MAP_WatchdogRunning                                                           ROM_WatchdogRunning
N#else
S#define MAP_WatchdogRunning                                                   \
S        WatchdogRunning
X#define MAP_WatchdogRunning                                                           WatchdogRunning
N#endif
N#ifdef ROM_WatchdogEnable
N#define MAP_WatchdogEnable                                                    \
N        ROM_WatchdogEnable
X#define MAP_WatchdogEnable                                                            ROM_WatchdogEnable
N#else
S#define MAP_WatchdogEnable                                                    \
S        WatchdogEnable
X#define MAP_WatchdogEnable                                                            WatchdogEnable
N#endif
N#ifdef ROM_WatchdogResetEnable
N#define MAP_WatchdogResetEnable                                               \
N        ROM_WatchdogResetEnable
X#define MAP_WatchdogResetEnable                                                       ROM_WatchdogResetEnable
N#else
S#define MAP_WatchdogResetEnable                                               \
S        WatchdogResetEnable
X#define MAP_WatchdogResetEnable                                                       WatchdogResetEnable
N#endif
N#ifdef ROM_WatchdogResetDisable
N#define MAP_WatchdogResetDisable                                              \
N        ROM_WatchdogResetDisable
X#define MAP_WatchdogResetDisable                                                      ROM_WatchdogResetDisable
N#else
S#define MAP_WatchdogResetDisable                                              \
S        WatchdogResetDisable
X#define MAP_WatchdogResetDisable                                                      WatchdogResetDisable
N#endif
N#ifdef ROM_WatchdogLock
N#define MAP_WatchdogLock                                                      \
N        ROM_WatchdogLock
X#define MAP_WatchdogLock                                                              ROM_WatchdogLock
N#else
S#define MAP_WatchdogLock                                                      \
S        WatchdogLock
X#define MAP_WatchdogLock                                                              WatchdogLock
N#endif
N#ifdef ROM_WatchdogUnlock
N#define MAP_WatchdogUnlock                                                    \
N        ROM_WatchdogUnlock
X#define MAP_WatchdogUnlock                                                            ROM_WatchdogUnlock
N#else
S#define MAP_WatchdogUnlock                                                    \
S        WatchdogUnlock
X#define MAP_WatchdogUnlock                                                            WatchdogUnlock
N#endif
N#ifdef ROM_WatchdogLockState
N#define MAP_WatchdogLockState                                                 \
N        ROM_WatchdogLockState
X#define MAP_WatchdogLockState                                                         ROM_WatchdogLockState
N#else
S#define MAP_WatchdogLockState                                                 \
S        WatchdogLockState
X#define MAP_WatchdogLockState                                                         WatchdogLockState
N#endif
N#ifdef ROM_WatchdogReloadSet
N#define MAP_WatchdogReloadSet                                                 \
N        ROM_WatchdogReloadSet
X#define MAP_WatchdogReloadSet                                                         ROM_WatchdogReloadSet
N#else
S#define MAP_WatchdogReloadSet                                                 \
S        WatchdogReloadSet
X#define MAP_WatchdogReloadSet                                                         WatchdogReloadSet
N#endif
N#ifdef ROM_WatchdogReloadGet
N#define MAP_WatchdogReloadGet                                                 \
N        ROM_WatchdogReloadGet
X#define MAP_WatchdogReloadGet                                                         ROM_WatchdogReloadGet
N#else
S#define MAP_WatchdogReloadGet                                                 \
S        WatchdogReloadGet
X#define MAP_WatchdogReloadGet                                                         WatchdogReloadGet
N#endif
N#ifdef ROM_WatchdogValueGet
N#define MAP_WatchdogValueGet                                                  \
N        ROM_WatchdogValueGet
X#define MAP_WatchdogValueGet                                                          ROM_WatchdogValueGet
N#else
S#define MAP_WatchdogValueGet                                                  \
S        WatchdogValueGet
X#define MAP_WatchdogValueGet                                                          WatchdogValueGet
N#endif
N#ifdef ROM_WatchdogIntEnable
N#define MAP_WatchdogIntEnable                                                 \
N        ROM_WatchdogIntEnable
X#define MAP_WatchdogIntEnable                                                         ROM_WatchdogIntEnable
N#else
S#define MAP_WatchdogIntEnable                                                 \
S        WatchdogIntEnable
X#define MAP_WatchdogIntEnable                                                         WatchdogIntEnable
N#endif
N#ifdef ROM_WatchdogIntStatus
N#define MAP_WatchdogIntStatus                                                 \
N        ROM_WatchdogIntStatus
X#define MAP_WatchdogIntStatus                                                         ROM_WatchdogIntStatus
N#else
S#define MAP_WatchdogIntStatus                                                 \
S        WatchdogIntStatus
X#define MAP_WatchdogIntStatus                                                         WatchdogIntStatus
N#endif
N#ifdef ROM_WatchdogStallEnable
N#define MAP_WatchdogStallEnable                                               \
N        ROM_WatchdogStallEnable
X#define MAP_WatchdogStallEnable                                                       ROM_WatchdogStallEnable
N#else
S#define MAP_WatchdogStallEnable                                               \
S        WatchdogStallEnable
X#define MAP_WatchdogStallEnable                                                       WatchdogStallEnable
N#endif
N#ifdef ROM_WatchdogStallDisable
N#define MAP_WatchdogStallDisable                                              \
N        ROM_WatchdogStallDisable
X#define MAP_WatchdogStallDisable                                                      ROM_WatchdogStallDisable
N#else
S#define MAP_WatchdogStallDisable                                              \
S        WatchdogStallDisable
X#define MAP_WatchdogStallDisable                                                      WatchdogStallDisable
N#endif
N#ifdef ROM_WatchdogIntTypeSet
N#define MAP_WatchdogIntTypeSet                                                \
N        ROM_WatchdogIntTypeSet
X#define MAP_WatchdogIntTypeSet                                                        ROM_WatchdogIntTypeSet
N#else
S#define MAP_WatchdogIntTypeSet                                                \
S        WatchdogIntTypeSet
X#define MAP_WatchdogIntTypeSet                                                        WatchdogIntTypeSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Software API.
N//
N//*****************************************************************************
N#ifdef ROM_Crc16Array
N#define MAP_Crc16Array                                                        \
N        ROM_Crc16Array
X#define MAP_Crc16Array                                                                ROM_Crc16Array
N#else
S#define MAP_Crc16Array                                                        \
S        Crc16Array
X#define MAP_Crc16Array                                                                Crc16Array
N#endif
N#ifdef ROM_Crc16Array3
N#define MAP_Crc16Array3                                                       \
N        ROM_Crc16Array3
X#define MAP_Crc16Array3                                                               ROM_Crc16Array3
N#else
S#define MAP_Crc16Array3                                                       \
S        Crc16Array3
X#define MAP_Crc16Array3                                                               Crc16Array3
N#endif
N#ifdef ROM_Crc16
N#define MAP_Crc16                                                             \
N        ROM_Crc16
X#define MAP_Crc16                                                                     ROM_Crc16
N#else
S#define MAP_Crc16                                                             \
S        Crc16
X#define MAP_Crc16                                                                     Crc16
N#endif
N#ifdef ROM_Crc8CCITT
N#define MAP_Crc8CCITT                                                         \
N        ROM_Crc8CCITT
X#define MAP_Crc8CCITT                                                                 ROM_Crc8CCITT
N#else
S#define MAP_Crc8CCITT                                                         \
S        Crc8CCITT
X#define MAP_Crc8CCITT                                                                 Crc8CCITT
N#endif
N#ifdef ROM_Crc32
S#define MAP_Crc32                                                             \
S        ROM_Crc32
X#define MAP_Crc32                                                                     ROM_Crc32
N#else
N#define MAP_Crc32                                                             \
N        Crc32
X#define MAP_Crc32                                                                     Crc32
N#endif
N
N#endif // __DRIVERLIB_ROM_MAP_H__
L 34 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/pin_map.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/pin_map.h" 1
N//*****************************************************************************
N//
N// pin_map.h - Mapping of peripherals to pins for all parts.
N//
N// Copyright (c) 2007-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_PIN_MAP_H__
N#define __DRIVERLIB_PIN_MAP_H__
N
N//*****************************************************************************
N//
N// TM4C1230C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230C3PM
N
N//*****************************************************************************
N//
N// TM4C1230D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230D5PM
N
N//*****************************************************************************
N//
N// TM4C1230E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230E6PM
N
N//*****************************************************************************
N//
N// TM4C1230H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230H6PM
N
N//*****************************************************************************
N//
N// TM4C1231C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231C3PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231D5PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231D5PZ
N
N//*****************************************************************************
N//
N// TM4C1231E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231E6PM
N
N//*****************************************************************************
N//
N// TM4C1231E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231E6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231H6PM
N
N//*****************************************************************************
N//
N// TM4C1231H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231H6PZ
N
N//*****************************************************************************
N//
N// TM4C1232C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232C3PM
N
N//*****************************************************************************
N//
N// TM4C1232D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232D5PM
N
N//*****************************************************************************
N//
N// TM4C1232E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232E6PM
N
N//*****************************************************************************
N//
N// TM4C1232H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232H6PM
N
N//*****************************************************************************
N//
N// TM4C1233C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233C3PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233D5PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233D5PZ
N
N//*****************************************************************************
N//
N// TM4C1233E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233E6PM
N
N//*****************************************************************************
N//
N// TM4C1233E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233E6PZ
N
N//*****************************************************************************
N//
N// TM4C1233H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233H6PM
N
N//*****************************************************************************
N//
N// TM4C1233H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233H6PZ
N
N//*****************************************************************************
N//
N// TM4C1236D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236D5PM
N
N//*****************************************************************************
N//
N// TM4C1236E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236E6PM
N
N//*****************************************************************************
N//
N// TM4C1236H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236H6PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237D5PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237D5PZ
N
N//*****************************************************************************
N//
N// TM4C1237E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237E6PM
N
N//*****************************************************************************
N//
N// TM4C1237E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237E6PZ
N
N//*****************************************************************************
N//
N// TM4C1237H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237H6PM
N
N//*****************************************************************************
N//
N// TM4C1237H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237H6PZ
N
N//*****************************************************************************
N//
N// TM4C123AE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AE6PM
N
N//*****************************************************************************
N//
N// TM4C123AH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AH6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BE6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BE6PZ
N
N//*****************************************************************************
N//
N// TM4C123BH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BH6PM
N
N//*****************************************************************************
N//
N// TM4C123BH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BH6PZ
N
N//*****************************************************************************
N//
N// TM4C123FE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FE6PM
N
N//*****************************************************************************
N//
N// TM4C123FH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FH6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C123GE6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GE6PZ
N
N//*****************************************************************************
N//
N// TM4C123GH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PM
N
N#define GPIO_PA0_U0RX           0x00000001
N#define GPIO_PA0_CAN1RX         0x00000008
N
N#define GPIO_PA1_U0TX           0x00000401
N#define GPIO_PA1_CAN1TX         0x00000408
N
N#define GPIO_PA2_SSI0CLK        0x00000802
N
N#define GPIO_PA3_SSI0FSS        0x00000C02
N
N#define GPIO_PA4_SSI0RX         0x00001002
N
N#define GPIO_PA5_SSI0TX         0x00001402
N
N#define GPIO_PA6_I2C1SCL        0x00001803
N#define GPIO_PA6_M1PWM2         0x00001805
N
N#define GPIO_PA7_I2C1SDA        0x00001C03
N#define GPIO_PA7_M1PWM3         0x00001C05
N
N#define GPIO_PB0_U1RX           0x00010001
N#define GPIO_PB0_T2CCP0         0x00010007
N
N#define GPIO_PB1_U1TX           0x00010401
N#define GPIO_PB1_T2CCP1         0x00010407
N
N#define GPIO_PB2_I2C0SCL        0x00010803
N#define GPIO_PB2_T3CCP0         0x00010807
N
N#define GPIO_PB3_I2C0SDA        0x00010C03
N#define GPIO_PB3_T3CCP1         0x00010C07
N
N#define GPIO_PB4_SSI2CLK        0x00011002
N#define GPIO_PB4_M0PWM2         0x00011004
N#define GPIO_PB4_T1CCP0         0x00011007
N#define GPIO_PB4_CAN0RX         0x00011008
N
N#define GPIO_PB5_SSI2FSS        0x00011402
N#define GPIO_PB5_M0PWM3         0x00011404
N#define GPIO_PB5_T1CCP1         0x00011407
N#define GPIO_PB5_CAN0TX         0x00011408
N
N#define GPIO_PB6_SSI2RX         0x00011802
N#define GPIO_PB6_M0PWM0         0x00011804
N#define GPIO_PB6_T0CCP0         0x00011807
N
N#define GPIO_PB7_SSI2TX         0x00011C02
N#define GPIO_PB7_M0PWM1         0x00011C04
N#define GPIO_PB7_T0CCP1         0x00011C07
N
N#define GPIO_PC0_TCK            0x00020001
N#define GPIO_PC0_SWCLK          0x00020001
N#define GPIO_PC0_T4CCP0         0x00020007
N
N#define GPIO_PC1_TMS            0x00020401
N#define GPIO_PC1_SWDIO          0x00020401
N#define GPIO_PC1_T4CCP1         0x00020407
N
N#define GPIO_PC2_TDI            0x00020801
N#define GPIO_PC2_T5CCP0         0x00020807
N
N#define GPIO_PC3_SWO            0x00020C01
N#define GPIO_PC3_TDO            0x00020C01
N#define GPIO_PC3_T5CCP1         0x00020C07
N
N#define GPIO_PC4_U4RX           0x00021001
N#define GPIO_PC4_U1RX           0x00021002
N#define GPIO_PC4_M0PWM6         0x00021004
N#define GPIO_PC4_IDX1           0x00021006
N#define GPIO_PC4_WT0CCP0        0x00021007
N#define GPIO_PC4_U1RTS          0x00021008
N
N#define GPIO_PC5_U4TX           0x00021401
N#define GPIO_PC5_U1TX           0x00021402
N#define GPIO_PC5_M0PWM7         0x00021404
N#define GPIO_PC5_PHA1           0x00021406
N#define GPIO_PC5_WT0CCP1        0x00021407
N#define GPIO_PC5_U1CTS          0x00021408
N
N#define GPIO_PC6_U3RX           0x00021801
N#define GPIO_PC6_PHB1           0x00021806
N#define GPIO_PC6_WT1CCP0        0x00021807
N#define GPIO_PC6_USB0EPEN       0x00021808
N
N#define GPIO_PC7_U3TX           0x00021C01
N#define GPIO_PC7_WT1CCP1        0x00021C07
N#define GPIO_PC7_USB0PFLT       0x00021C08
N
N#define GPIO_PD0_SSI3CLK        0x00030001
N#define GPIO_PD0_SSI1CLK        0x00030002
N#define GPIO_PD0_I2C3SCL        0x00030003
N#define GPIO_PD0_M0PWM6         0x00030004
N#define GPIO_PD0_M1PWM0         0x00030005
N#define GPIO_PD0_WT2CCP0        0x00030007
N
N#define GPIO_PD1_SSI3FSS        0x00030401
N#define GPIO_PD1_SSI1FSS        0x00030402
N#define GPIO_PD1_I2C3SDA        0x00030403
N#define GPIO_PD1_M0PWM7         0x00030404
N#define GPIO_PD1_M1PWM1         0x00030405
N#define GPIO_PD1_WT2CCP1        0x00030407
N
N#define GPIO_PD2_SSI3RX         0x00030801
N#define GPIO_PD2_SSI1RX         0x00030802
N#define GPIO_PD2_M0FAULT0       0x00030804
N#define GPIO_PD2_WT3CCP0        0x00030807
N#define GPIO_PD2_USB0EPEN       0x00030808
N
N#define GPIO_PD3_SSI3TX         0x00030C01
N#define GPIO_PD3_SSI1TX         0x00030C02
N#define GPIO_PD3_IDX0           0x00030C06
N#define GPIO_PD3_WT3CCP1        0x00030C07
N#define GPIO_PD3_USB0PFLT       0x00030C08
N
N#define GPIO_PD4_U6RX           0x00031001
N#define GPIO_PD4_WT4CCP0        0x00031007
N
N#define GPIO_PD5_U6TX           0x00031401
N#define GPIO_PD5_WT4CCP1        0x00031407
N
N#define GPIO_PD6_U2RX           0x00031801
N#define GPIO_PD6_M0FAULT0       0x00031804
N#define GPIO_PD6_PHA0           0x00031806
N#define GPIO_PD6_WT5CCP0        0x00031807
N
N#define GPIO_PD7_U2TX           0x00031C01
N#define GPIO_PD7_PHB0           0x00031C06
N#define GPIO_PD7_WT5CCP1        0x00031C07
N#define GPIO_PD7_NMI            0x00031C08
N
N#define GPIO_PE0_U7RX           0x00040001
N
N#define GPIO_PE1_U7TX           0x00040401
N
N#define GPIO_PE4_U5RX           0x00041001
N#define GPIO_PE4_I2C2SCL        0x00041003
N#define GPIO_PE4_M0PWM4         0x00041004
N#define GPIO_PE4_M1PWM2         0x00041005
N#define GPIO_PE4_CAN0RX         0x00041008
N
N#define GPIO_PE5_U5TX           0x00041401
N#define GPIO_PE5_I2C2SDA        0x00041403
N#define GPIO_PE5_M0PWM5         0x00041404
N#define GPIO_PE5_M1PWM3         0x00041405
N#define GPIO_PE5_CAN0TX         0x00041408
N
N#define GPIO_PF0_U1RTS          0x00050001
N#define GPIO_PF0_SSI1RX         0x00050002
N#define GPIO_PF0_CAN0RX         0x00050003
N#define GPIO_PF0_M1PWM4         0x00050005
N#define GPIO_PF0_PHA0           0x00050006
N#define GPIO_PF0_T0CCP0         0x00050007
N#define GPIO_PF0_NMI            0x00050008
N#define GPIO_PF0_C0O            0x00050009
N
N#define GPIO_PF1_U1CTS          0x00050401
N#define GPIO_PF1_SSI1TX         0x00050402
N#define GPIO_PF1_M1PWM5         0x00050405
N#define GPIO_PF1_PHB0           0x00050406
N#define GPIO_PF1_T0CCP1         0x00050407
N#define GPIO_PF1_C1O            0x00050409
N#define GPIO_PF1_TRD1           0x0005040E
N
N#define GPIO_PF2_SSI1CLK        0x00050802
N#define GPIO_PF2_M0FAULT0       0x00050804
N#define GPIO_PF2_M1PWM6         0x00050805
N#define GPIO_PF2_T1CCP0         0x00050807
N#define GPIO_PF2_TRD0           0x0005080E
N
N#define GPIO_PF3_SSI1FSS        0x00050C02
N#define GPIO_PF3_CAN0TX         0x00050C03
N#define GPIO_PF3_M1PWM7         0x00050C05
N#define GPIO_PF3_T1CCP1         0x00050C07
N#define GPIO_PF3_TRCLK          0x00050C0E
N
N#define GPIO_PF4_M1FAULT0       0x00051005
N#define GPIO_PF4_IDX0           0x00051006
N#define GPIO_PF4_T2CCP0         0x00051007
N#define GPIO_PF4_USB0EPEN       0x00051008
N
N#endif // PART_TM4C123GH6PM
N
N//*****************************************************************************
N//
N// TM4C123GH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GH6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1231H6PGE
N
N//*****************************************************************************
N//
N// TM4C1233H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1233H6PGE
N
N//*****************************************************************************
N//
N// TM4C1237H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1237H6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123BH6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123BH6ZRB
N
N//*****************************************************************************
N//
N// TM4C123GH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123GH6PGE
N
N//*****************************************************************************
N//
N// TM4C123GH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123GH6ZRB
N
N//*****************************************************************************
N//
N// TM4C123GH6ZXR Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6ZXR
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123GH6ZXR
N
N//*****************************************************************************
N//
N// TM4C1290NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C1290NCPDT
N
N//*****************************************************************************
N//
N// TM4C1290NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1290NCZAD
N
N//*****************************************************************************
N//
N// TM4C1292NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C1292NCPDT
N
N//*****************************************************************************
N//
N// TM4C1292NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1292NCZAD
N
N//*****************************************************************************
N//
N// TM4C1294KCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294KCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C1294KCPDT
N
N//*****************************************************************************
N//
N// TM4C1294NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C1294NCPDT
N
N//*****************************************************************************
N//
N// TM4C1294NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1294NCZAD
N
N//*****************************************************************************
N//
N// TM4C1297NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1297NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1297NCZAD
N
N//*****************************************************************************
N//
N// TM4C1299KCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1299KCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1299KCZAD
N
N//*****************************************************************************
N//
N// TM4C1299NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1299NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1299NCZAD
N
N//*****************************************************************************
N//
N// TM4C129CNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C129CNCPDT
N
N//*****************************************************************************
N//
N// TM4C129CNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129CNCZAD
N
N//*****************************************************************************
N//
N// TM4C129DNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C129DNCPDT
N
N//*****************************************************************************
N//
N// TM4C129DNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129DNCZAD
N
N//*****************************************************************************
N//
N// TM4C129EKCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129EKCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C129EKCPDT
N
N//*****************************************************************************
N//
N// TM4C129ENCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C129ENCPDT
N
N//*****************************************************************************
N//
N// TM4C129ENCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129ENCZAD
N
N//*****************************************************************************
N//
N// TM4C129LNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129LNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129LNCZAD
N
N//*****************************************************************************
N//
N// TM4C129XKCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129XKCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S#define GPIO_PE3_OWIRE          0x00040C05
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_OWIRE          0x00061005
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_OWALT          0x00061405
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_OWIRE          0x00061805
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_OWIRE          0x00061C05
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_OWIRE          0x000D1004
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_OWALT          0x000D1404
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PP7_OWIRE          0x000D1C05
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129XKCZAD
N
N//*****************************************************************************
N//
N// TM4C129XNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129XNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S#define GPIO_PE3_OWIRE          0x00040C05
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_OWIRE          0x00061005
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_OWALT          0x00061405
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_OWIRE          0x00061805
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_OWIRE          0x00061C05
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_OWIRE          0x000D1004
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_OWALT          0x000D1404
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PP7_OWIRE          0x000D1C05
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129XNCZAD
N
N#endif // __DRIVERLIB_PIN_MAP_H__
L 35 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/timer.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/timer.h" 1
N//*****************************************************************************
N//
N// timer.h - Prototypes for the timer module
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_TIMER_H__
N#define __DRIVERLIB_TIMER_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerConfigure as the ui32Config parameter.
N//
N//*****************************************************************************
N#define TIMER_CFG_ONE_SHOT       0x00000021  // Full-width one-shot timer
N#define TIMER_CFG_ONE_SHOT_UP    0x00000031  // Full-width one-shot up-count
N                                            // timer
N#define TIMER_CFG_PERIODIC       0x00000022  // Full-width periodic timer
N#define TIMER_CFG_PERIODIC_UP    0x00000032  // Full-width periodic up-count
N                                            // timer
N#define TIMER_CFG_RTC            0x01000000  // Full-width RTC timer
N#define TIMER_CFG_SPLIT_PAIR     0x04000000  // Two half-width timers
N#define TIMER_CFG_A_ONE_SHOT     0x00000021  // Timer A one-shot timer
N#define TIMER_CFG_A_ONE_SHOT_UP  0x00000031  // Timer A one-shot up-count timer
N#define TIMER_CFG_A_PERIODIC     0x00000022  // Timer A periodic timer
N#define TIMER_CFG_A_PERIODIC_UP  0x00000032  // Timer A periodic up-count timer
N#define TIMER_CFG_A_CAP_COUNT    0x00000003  // Timer A event counter
N#define TIMER_CFG_A_CAP_COUNT_UP 0x00000013  // Timer A event up-counter
N#define TIMER_CFG_A_CAP_TIME     0x00000007  // Timer A event timer
N#define TIMER_CFG_A_CAP_TIME_UP  0x00000017  // Timer A event up-count timer
N#define TIMER_CFG_A_PWM          0x0000000A  // Timer A PWM output
N#define TIMER_CFG_B_ONE_SHOT     0x00002100  // Timer B one-shot timer
N#define TIMER_CFG_B_ONE_SHOT_UP  0x00003100  // Timer B one-shot up-count timer
N#define TIMER_CFG_B_PERIODIC     0x00002200  // Timer B periodic timer
N#define TIMER_CFG_B_PERIODIC_UP  0x00003200  // Timer B periodic up-count timer
N#define TIMER_CFG_B_CAP_COUNT    0x00000300  // Timer B event counter
N#define TIMER_CFG_B_CAP_COUNT_UP 0x00001300  // Timer B event up-counter
N#define TIMER_CFG_B_CAP_TIME     0x00000700  // Timer B event timer
N#define TIMER_CFG_B_CAP_TIME_UP  0x00001700  // Timer B event up-count timer
N#define TIMER_CFG_B_PWM          0x00000A00  // Timer B PWM output
N#define TIMER_CFG_A_ACT_TOINTD   0x00010000  // Timer A compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_A_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_A_ACT_TOGGLE   0x00020000  // Timer A compare action toggle.
N#define TIMER_CFG_A_ACT_CLRTO    0x00040000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_SETTO    0x00060000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_A_ACT_SETTOGTO 0x00080000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_A_ACT_CLRTOGTO 0x000A0000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_A_ACT_SETCLRTO 0x000C0000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_CLRSETTO 0x000E0000  // Timer A compare action clear
N                                             // CCP set on time-out.
N#define TIMER_CFG_B_ACT_TOINTD   0x00100000  // Timer B compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_B_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_B_ACT_TOGGLE   0x00200000  // Timer A compare action toggle.
N#define TIMER_CFG_B_ACT_CLRTO    0x00400000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_SETTO    0x00600000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_B_ACT_SETTOGTO 0x00800000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_B_ACT_CLRTOGTO 0x00A00000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_B_ACT_SETCLRTO 0x00C00000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_CLRSETTO 0x0000E000  // Timer A compare action clear
N                                             // CCP set on time-out.
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerIntEnable, TimerIntDisable, and
N// TimerIntClear as the ui32IntFlags parameter, and returned from
N// TimerIntStatus.
N//
N//*****************************************************************************
N#define TIMER_TIMB_DMA          0x00002000 // TimerB DMA Complete Interrupt.
N#define TIMER_TIMB_MATCH        0x00000800  // TimerB match interrupt
N#define TIMER_CAPB_EVENT        0x00000400  // CaptureB event interrupt
N#define TIMER_CAPB_MATCH        0x00000200  // CaptureB match interrupt
N#define TIMER_TIMB_TIMEOUT      0x00000100  // TimerB time out interrupt
N#define TIMER_TIMA_DMA          0x00000020 // TimerA DMA Complete Interrupt.
N#define TIMER_TIMA_MATCH        0x00000010  // TimerA match interrupt
N#define TIMER_RTC_MATCH         0x00000008  // RTC interrupt mask
N#define TIMER_CAPA_EVENT        0x00000004  // CaptureA event interrupt
N#define TIMER_CAPA_MATCH        0x00000002  // CaptureA match interrupt
N#define TIMER_TIMA_TIMEOUT      0x00000001  // TimerA time out interrupt
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerControlEvent as the ui32Event parameter.
N//
N//*****************************************************************************
N#define TIMER_EVENT_POS_EDGE    0x00000000  // Count positive edges
N#define TIMER_EVENT_NEG_EDGE    0x00000404  // Count negative edges
N#define TIMER_EVENT_BOTH_EDGES  0x00000C0C  // Count both edges
N
N//*****************************************************************************
N//
N// Values that can be passed to most of the timer APIs as the ui32Timer
N// parameter.
N//
N//*****************************************************************************
N#define TIMER_A                 0x000000ff  // Timer A
N#define TIMER_B                 0x0000ff00  // Timer B
N#define TIMER_BOTH              0x0000ffff  // Timer Both
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerSynchronize as the ui32Timers parameter.
N//
N//*****************************************************************************
N#define TIMER_0A_SYNC           0x00000001  // Synchronize Timer 0A
N#define TIMER_0B_SYNC           0x00000002  // Synchronize Timer 0B
N#define TIMER_1A_SYNC           0x00000004  // Synchronize Timer 1A
N#define TIMER_1B_SYNC           0x00000008  // Synchronize Timer 1B
N#define TIMER_2A_SYNC           0x00000010  // Synchronize Timer 2A
N#define TIMER_2B_SYNC           0x00000020  // Synchronize Timer 2B
N#define TIMER_3A_SYNC           0x00000040  // Synchronize Timer 3A
N#define TIMER_3B_SYNC           0x00000080  // Synchronize Timer 3B
N#define TIMER_4A_SYNC           0x00000100  // Synchronize Timer 4A
N#define TIMER_4B_SYNC           0x00000200  // Synchronize Timer 4B
N#define TIMER_5A_SYNC           0x00000400  // Synchronize Timer 5A
N#define TIMER_5B_SYNC           0x00000800  // Synchronize Timer 5B
N#define WTIMER_0A_SYNC          0x00001000  // Synchronize Wide Timer 0A
N#define WTIMER_0B_SYNC          0x00002000  // Synchronize Wide Timer 0B
N#define WTIMER_1A_SYNC          0x00004000  // Synchronize Wide Timer 1A
N#define WTIMER_1B_SYNC          0x00008000  // Synchronize Wide Timer 1B
N#define WTIMER_2A_SYNC          0x00010000  // Synchronize Wide Timer 2A
N#define WTIMER_2B_SYNC          0x00020000  // Synchronize Wide Timer 2B
N#define WTIMER_3A_SYNC          0x00040000  // Synchronize Wide Timer 3A
N#define WTIMER_3B_SYNC          0x00080000  // Synchronize Wide Timer 3B
N#define WTIMER_4A_SYNC          0x00100000  // Synchronize Wide Timer 4A
N#define WTIMER_4B_SYNC          0x00200000  // Synchronize Wide Timer 4B
N#define WTIMER_5A_SYNC          0x00400000  // Synchronize Wide Timer 5A
N#define WTIMER_5B_SYNC          0x00800000  // Synchronize Wide Timer 5B
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerClockSourceSet() or returned from
N// TimerClockSourceGet().
N//
N//*****************************************************************************
N#define TIMER_CLOCK_SYSTEM      0x00000000
N#define TIMER_CLOCK_PIOSC       0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerDMAEventSet() or returned from
N// TimerDMAEventGet().
N//
N//*****************************************************************************
N#define TIMER_DMA_MODEMATCH_B   0x00000800
N#define TIMER_DMA_CAPEVENT_B    0x00000400
N#define TIMER_DMA_CAPMATCH_B    0x00000200
N#define TIMER_DMA_TIMEOUT_B     0x00000100
N#define TIMER_DMA_MODEMATCH_A   0x00000010
N#define TIMER_DMA_RTC_A         0x00000008
N#define TIMER_DMA_CAPEVENT_A    0x00000004
N#define TIMER_DMA_CAPMATCH_A    0x00000002
N#define TIMER_DMA_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerADCEventSet() or returned from
N// TimerADCEventGet().
N//
N//*****************************************************************************
N#define TIMER_ADC_MODEMATCH_B   0x00000800
N#define TIMER_ADC_CAPEVENT_B    0x00000400
N#define TIMER_ADC_CAPMATCH_B    0x00000200
N#define TIMER_ADC_TIMEOUT_B     0x00000100
N#define TIMER_ADC_MODEMATCH_A   0x00000010
N#define TIMER_ADC_RTC_A         0x00000008
N#define TIMER_ADC_CAPEVENT_A    0x00000004
N#define TIMER_ADC_CAPMATCH_A    0x00000002
N#define TIMER_ADC_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerUpdateMode().
N//
N//*****************************************************************************
N#define TIMER_UP_LOAD_IMMEDIATE 0x00000000
N#define TIMER_UP_LOAD_TIMEOUT   0x00000100
N#define TIMER_UP_MATCH_IMMEDIATE                                              \
N                                0x00000000
X#define TIMER_UP_MATCH_IMMEDIATE                                                                              0x00000000
N#define TIMER_UP_MATCH_TIMEOUT  0x00000400
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void TimerEnable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerDisable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerConfigure(uint32_t ui32Base, uint32_t ui32Config);
Nextern void TimerControlLevel(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bInvert);
X                              _Bool bInvert);
Nextern void TimerControlTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                bool bEnable);
X                                _Bool bEnable);
Nextern void TimerControlEvent(uint32_t ui32Base, uint32_t ui32Timer,
N                              uint32_t ui32Event);
Nextern void TimerControlStall(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bStall);
X                              _Bool bStall);
Nextern void TimerControlWaitOnTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                      bool bWait);
X                                      _Bool bWait);
Nextern void TimerRTCEnable(uint32_t ui32Base);
Nextern void TimerRTCDisable(uint32_t ui32Base);
Nextern void TimerPrescaleSet(uint32_t ui32Base, uint32_t ui32Timer,
N                             uint32_t ui32Value);
Nextern uint32_t TimerPrescaleGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerPrescaleMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                                  uint32_t ui32Value);
Nextern uint32_t TimerPrescaleMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet(uint32_t ui32Base, uint32_t ui32Timer,
N                         uint32_t ui32Value);
Nextern uint32_t TimerLoadGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerLoadGet64(uint32_t ui32Base);
Nextern uint32_t TimerValueGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern uint64_t TimerValueGet64(uint32_t ui32Base);
Nextern void TimerMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                          uint32_t ui32Value);
Nextern uint32_t TimerMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerMatchSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerMatchGet64(uint32_t ui32Base);
Nextern void TimerIntRegister(uint32_t ui32Base, uint32_t ui32Timer,
N                             void (*pfnHandler)(void));
Nextern void TimerIntUnregister(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t TimerIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t TimerIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void TimerIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerSynchronize(uint32_t ui32Base, uint32_t ui32Timers);
Nextern uint32_t TimerClockSourceGet(uint32_t ui32Base);
Nextern void TimerClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t TimerADCEventGet(uint32_t ui32Base);
Nextern void TimerADCEventSet(uint32_t ui32Base, uint32_t ui32ADCEvent);
Nextern uint32_t TimerDMAEventGet(uint32_t ui32Base);
Nextern void TimerDMAEventSet(uint32_t ui32Base, uint32_t ui32DMAEvent);
Nextern void TimerUpdateMode(uint32_t ui32Base, uint32_t ui32Timer,
N                            uint32_t ui32Config);
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_TIMER_H__
L 36 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/gpio.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/gpio.h" 1
N//*****************************************************************************
N//
N// gpio.h - Defines and Macros for GPIO API.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_GPIO_H__
N#define __DRIVERLIB_GPIO_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following values define the bit field for the ui8Pins argument to
N// several of the APIs.
N//
N//*****************************************************************************
N#define GPIO_PIN_0              0x00000001  // GPIO pin 0
N#define GPIO_PIN_1              0x00000002  // GPIO pin 1
N#define GPIO_PIN_2              0x00000004  // GPIO pin 2
N#define GPIO_PIN_3              0x00000008  // GPIO pin 3
N#define GPIO_PIN_4              0x00000010  // GPIO pin 4
N#define GPIO_PIN_5              0x00000020  // GPIO pin 5
N#define GPIO_PIN_6              0x00000040  // GPIO pin 6
N#define GPIO_PIN_7              0x00000080  // GPIO pin 7
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIODirModeSet as the ui32PinIO parameter, and
N// returned from GPIODirModeGet.
N//
N//*****************************************************************************
N#define GPIO_DIR_MODE_IN        0x00000000  // Pin is a GPIO input
N#define GPIO_DIR_MODE_OUT       0x00000001  // Pin is a GPIO output
N#define GPIO_DIR_MODE_HW        0x00000002  // Pin is a peripheral function
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntTypeSet as the ui32IntType parameter,
N// and returned from GPIOIntTypeGet.
N//
N//*****************************************************************************
N#define GPIO_FALLING_EDGE       0x00000000  // Interrupt on falling edge
N#define GPIO_RISING_EDGE        0x00000004  // Interrupt on rising edge
N#define GPIO_BOTH_EDGES         0x00000001  // Interrupt on both edges
N#define GPIO_LOW_LEVEL          0x00000002  // Interrupt on low level
N#define GPIO_HIGH_LEVEL         0x00000006  // Interrupt on high level
N#define GPIO_DISCRETE_INT       0x00010000  // Interrupt for individual pins
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32Strength parameter,
N// and returned by GPIOPadConfigGet in the *pui32Strength parameter.
N//
N//*****************************************************************************
N#define GPIO_STRENGTH_2MA       0x00000001  // 2mA drive strength
N#define GPIO_STRENGTH_4MA       0x00000002  // 4mA drive strength
N#define GPIO_STRENGTH_6MA       0x00000065  // 6mA drive strength
N#define GPIO_STRENGTH_8MA       0x00000066  // 8mA drive strength
N#define GPIO_STRENGTH_8MA_SC    0x0000006E  // 8mA drive with slew rate control
N#define GPIO_STRENGTH_10MA      0x00000075  // 10mA drive strength
N#define GPIO_STRENGTH_12MA      0x00000077  // 12mA drive strength
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32PadType parameter,
N// and returned by GPIOPadConfigGet in the *pui32PadType parameter.
N//
N//*****************************************************************************
N#define GPIO_PIN_TYPE_STD       0x00000008  // Push-pull
N#define GPIO_PIN_TYPE_STD_WPU   0x0000000A  // Push-pull with weak pull-up
N#define GPIO_PIN_TYPE_STD_WPD   0x0000000C  // Push-pull with weak pull-down
N#define GPIO_PIN_TYPE_OD        0x00000009  // Open-drain
N#define GPIO_PIN_TYPE_ANALOG    0x00000000  // Analog comparator
N#define GPIO_PIN_TYPE_WAKE_HIGH 0x00000208  // Hibernate wake, high
N#define GPIO_PIN_TYPE_WAKE_LOW  0x00000108  // Hibernate wake, low
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntEnable() and GPIOIntDisable() functions
N// in the ui32IntFlags parameter.
N//
N//*****************************************************************************
N#define GPIO_INT_PIN_0          0x00000001
N#define GPIO_INT_PIN_1          0x00000002
N#define GPIO_INT_PIN_2          0x00000004
N#define GPIO_INT_PIN_3          0x00000008
N#define GPIO_INT_PIN_4          0x00000010
N#define GPIO_INT_PIN_5          0x00000020
N#define GPIO_INT_PIN_6          0x00000040
N#define GPIO_INT_PIN_7          0x00000080
N#define GPIO_INT_DMA            0x00000100
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32PinIO);
Nextern uint32_t GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32IntType);
Nextern uint32_t GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOPadConfigSet(uint32_t ui32Port, uint8_t ui8Pins,
N                             uint32_t ui32Strength, uint32_t ui32PadType);
Nextern void GPIOPadConfigGet(uint32_t ui32Port, uint8_t ui8Pin,
N                             uint32_t *pui32Strength, uint32_t *pui32PadType);
Nextern void GPIOIntEnable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntDisable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern uint32_t GPIOIntStatus(uint32_t ui32Port, bool bMasked);
Xextern uint32_t GPIOIntStatus(uint32_t ui32Port, _Bool bMasked);
Nextern void GPIOIntClear(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntRegister(uint32_t ui32Port, void (*pfnIntHandler)(void));
Nextern void GPIOIntUnregister(uint32_t ui32Port);
Nextern int32_t GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val);
Nextern void GPIOPinConfigure(uint32_t ui32PinConfig);
Nextern void GPIOPinTypeADC(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeCAN(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparator(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparatorOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeDIVSCLK(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEPI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetLED(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetMII(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutputOD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeHibernateRTCCLK(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2CSCL(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeLCD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeOneWire(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypePWM(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeQEI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTrace(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUART(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBAnalog(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBDigital(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeHigh(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeLow(uint32_t ui32Port, uint8_t ui8Pins);
Nextern uint32_t GPIOPinWakeStatus(uint32_t ui32Port);
Nextern void GPIODMATriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIODMATriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_GPIO_H__
L 37 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "driverlib/interrupt.h"
L 1 "C:/ti/TivaWare_C_Series-2.1.3.156/driverlib/interrupt.h" 1
N//*****************************************************************************
N//
N// interrupt.h - Prototypes for the NVIC Interrupt Controller Driver.
N//
N// Copyright (c) 2005-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.3.156 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_INTERRUPT_H__
N#define __DRIVERLIB_INTERRUPT_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Macro to generate an interrupt priority mask based on the number of bits
N// of priority supported by the hardware.
N//
N//*****************************************************************************
N#define INT_PRIORITY_MASK       ((0xFF << (8 - NUM_PRIORITY_BITS)) & 0xFF)
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern bool IntMasterEnable(void);
Xextern _Bool IntMasterEnable(void);
Nextern bool IntMasterDisable(void);
Xextern _Bool IntMasterDisable(void);
Nextern void IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void));
Nextern void IntUnregister(uint32_t ui32Interrupt);
Nextern void IntPriorityGroupingSet(uint32_t ui32Bits);
Nextern uint32_t IntPriorityGroupingGet(void);
Nextern void IntPrioritySet(uint32_t ui32Interrupt,
N                           uint8_t ui8Priority);
Nextern int32_t IntPriorityGet(uint32_t ui32Interrupt);
Nextern void IntEnable(uint32_t ui32Interrupt);
Nextern void IntDisable(uint32_t ui32Interrupt);
Nextern uint32_t IntIsEnabled(uint32_t ui32Interrupt);
Nextern void IntPendSet(uint32_t ui32Interrupt);
Nextern void IntPendClear(uint32_t ui32Interrupt);
Nextern void IntPriorityMaskSet(uint32_t ui32PriorityMask);
Nextern uint32_t IntPriorityMaskGet(void);
Nextern void IntTrigger(uint32_t ui32Interrupt);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_INTERRUPT_H__
L 38 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N#include "rgb.h"
L 1 "C:\ti\TivaWare_C_Series-2.1.3.156\examples\boards\ek-tm4c123gxl-boost-dlptrf7970abp\drivers\rgb.h" 1
N//*****************************************************************************
N//
N// rgb.h - Prototypes for the evaluation board RGB LED driver.
N//
N// Copyright (c) 2012-2016 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 2.1.3.156 of the EK-TM4C123GXL Firmware Package.
N//
N//*****************************************************************************
N
N#ifndef __RGBLED_H__
N#define __RGBLED_H__
N
N//*****************************************************************************
N//
N// Defines for the hardware resources used by the pushbuttons.
N//
N// The switches are on the following ports/pins:
N//
N// PF1 - RED    (632 nanometer)
N// PF2 - GREEN  (518 nanometer)
N// PF3 - BLUE   (465 nanometer)
N
N//
N// The RGB LED is tied up to 5V but since the lowest Vf is 1.75 we can still
N// use a General Purpose Timer in pulse out mode.
N//
N//*****************************************************************************
N
N//
N// Indexes into the array of colors
N//
N#define RED                     0
N#define GREEN                   1
N#define BLUE                    2
N
N//
N// Ratio for percent of full on that should be "true" white.
N//
N#define RED_WHITE_BALANCE        0.497f
N#define GREEN_WHITE_BALANCE      0.6f
N#define BLUE_WHITE_BALANCE       1.0f
N
N//
N// GPIO, Timer, Peripheral, and Pin assignments for the colors
N//
N#define RED_GPIO_PERIPH         SYSCTL_PERIPH_GPIOF
N#define RED_TIMER_PERIPH        SYSCTL_PERIPH_TIMER0
N#define BLUE_GPIO_PERIPH        SYSCTL_PERIPH_GPIOF
N#define BLUE_TIMER_PERIPH       SYSCTL_PERIPH_TIMER1
N#define GREEN_GPIO_PERIPH       SYSCTL_PERIPH_GPIOF
N#define GREEN_TIMER_PERIPH      SYSCTL_PERIPH_TIMER1
N
N
N#define RED_GPIO_BASE           GPIO_PORTF_BASE
N#define RED_TIMER_BASE          TIMER0_BASE
N#define BLUE_GPIO_BASE          GPIO_PORTF_BASE
N#define BLUE_TIMER_BASE         TIMER1_BASE
N#define GREEN_GPIO_BASE         GPIO_PORTF_BASE
N#define GREEN_TIMER_BASE        TIMER1_BASE
N
N#define RED_GPIO_PIN            GPIO_PIN_1
N#define BLUE_GPIO_PIN           GPIO_PIN_2
N#define GREEN_GPIO_PIN          GPIO_PIN_3
N
N
N#define RED_GPIO_PIN_CFG        GPIO_PF1_T0CCP1
N#define BLUE_GPIO_PIN_CFG       GPIO_PF2_T1CCP0
N#define GREEN_GPIO_PIN_CFG      GPIO_PF3_T1CCP1
N
N#define RED_TIMER_CFG           TIMER_CFG_B_PWM
N#define BLUE_TIMER_CFG          TIMER_CFG_A_PWM
N#define GREEN_TIMER_CFG         TIMER_CFG_B_PWM
N
N#define RED_TIMER               TIMER_B
N#define BLUE_TIMER              TIMER_A
N#define GREEN_TIMER             TIMER_B
N
N
N//*****************************************************************************
N//
N// Useful macros
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Functions exported from rgb.c
N//
N//*****************************************************************************
Nextern void RGBInit(uint32_t ui32Enable);
N
Nextern void RGBEnable(void);
Nextern void RGBDisable(void);
Nextern void RGBSet(volatile uint32_t * pui32RGBColor, float fIntensity);
Nextern void RGBColorSet(volatile uint32_t * pui32RGBColor);
N
Nextern void RGBIntensitySet(float fIntensity);
Nextern void RGBBlinkRateSet(float fRate);
Nextern void RGBGet(uint32_t * pui32RGBColor, float * pfIntensity);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N//*****************************************************************************
N//
N// Prototypes for the globals exported by this driver.
N//
N//*****************************************************************************
N
N#endif // __RGBLED_H__
L 39 "C:/ti/TivaWare_C_Series-2.1.3.156/examples/boards/ek-tm4c123gxl-boost-dlptrf7970abp/drivers/rgb.c" 2
N
N//*****************************************************************************
N//
N//! \addtogroup rgb_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// This is a custom driver that allows the easy manipulation of the RGB LED.
N//
N// The driver uses the general purpose timers to govern the brightness of the
N// LED through simple PWM output mode of the GP Timers.
N//
N// A global array contains the current relative color of each of the three
N// LEDs. A global float variable controls intensity of the overall mixed color.
N//
N// This implementation consumes the following hardware resources
N// 		- Wide Timer 5B for blinking the entire RGB unit.
N// 		- Timer 0B intensity of an RGB element
N// 		- Timer 1A intensity of an RGB element
N// 		- Timer 1B intensity of an RGB element
N//
N//*****************************************************************************
Nstatic uint32_t  g_ui32Colors[3];
Nstatic float g_fIntensity = 0.3f;
N
N//*****************************************************************************
N//
N//! Wide Timer interrupt to handle blinking effect of the RGB 
N//!
N//! This function is called by the hardware interrupt controller on a timeout
N//! of the wide timer.  This function must be in the NVIC table in the startup
N//! file.  When called will toggle the enable flag to turn on or off the entire
N//! RGB unit.  This creates a blinking effect.  A wide timer is used since the 
N//! blink is intended to be visible to the human eye and thus is expected to 
N//! have a frequency between 15 and 0.1 hz. Currently blink duty is fixed at
N//! 50%.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBBlinkIntHandler(void)
N{
N    static unsigned long ulFlags;
N
N
N    //
N    // Clear the timer interrupt.
N    //
N    ROM_TimerIntClear(WTIMER5_BASE, TIMER_TIMB_TIMEOUT);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32IntFlags))((uint32_t *)(((uint32_t *)0x01000010)[11]))[0])(0x4004F000, 0x00000100);
N
N    //
N    // Toggle the flag for the blink timer.
N    //
N    ulFlags ^= 1;
N
N    if(ulFlags)
N    {
N        RGBEnable();
N    }
N    else
N    {
N        RGBDisable();
N    }
N
N}
N
N//*****************************************************************************
N//
N//! Initializes the Timer and GPIO functionality associated with the RGB LED
N//!
N//! \param ui32Enable enables RGB immediately if set.
N//!
N//! This function must be called during application initialization to
N//! configure the GPIO pins to which the LEDs are attached.  It enables
N//! the port used by the LEDs and configures each color's Timer. It optionally
N//! enables the RGB LED by configuring the GPIO pins and starting the timers.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBInit(uint32_t ui32Enable)
N{
N    //
N    // Enable the GPIO Port and Timer for each LED
N    //
N    ROM_SysCtlPeripheralEnable(RED_GPIO_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000805);
N    ROM_SysCtlPeripheralEnable(RED_TIMER_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000400);
N
N    ROM_SysCtlPeripheralEnable(GREEN_GPIO_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000805);
N    ROM_SysCtlPeripheralEnable(GREEN_TIMER_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000401);
N
N    ROM_SysCtlPeripheralEnable(BLUE_GPIO_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000805);
N    ROM_SysCtlPeripheralEnable(BLUE_TIMER_PERIPH);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0000401);
N
N    //
N    // Configure each timer for output mode
N    //
N    HWREG(GREEN_TIMER_BASE + TIMER_O_CFG)   = 0x04;
X    (*((volatile uint32_t *)(0x40031000 + 0x00000000)))   = 0x04;
N    HWREG(GREEN_TIMER_BASE + TIMER_O_TAMR)  = 0x0A;
X    (*((volatile uint32_t *)(0x40031000 + 0x00000004)))  = 0x0A;
N    HWREG(GREEN_TIMER_BASE + TIMER_O_TAILR) = 0xFFFF;
X    (*((volatile uint32_t *)(0x40031000 + 0x00000028))) = 0xFFFF;
N
N    HWREG(BLUE_TIMER_BASE + TIMER_O_CFG)   = 0x04;
X    (*((volatile uint32_t *)(0x40031000 + 0x00000000)))   = 0x04;
N    HWREG(BLUE_TIMER_BASE + TIMER_O_TBMR)  = 0x0A;
X    (*((volatile uint32_t *)(0x40031000 + 0x00000008)))  = 0x0A;
N    HWREG(BLUE_TIMER_BASE + TIMER_O_TBILR) = 0xFFFF;
X    (*((volatile uint32_t *)(0x40031000 + 0x0000002C))) = 0xFFFF;
N
N    HWREG(RED_TIMER_BASE + TIMER_O_CFG)   = 0x04;
X    (*((volatile uint32_t *)(0x40030000 + 0x00000000)))   = 0x04;
N    HWREG(RED_TIMER_BASE + TIMER_O_TBMR)  = 0x0A;
X    (*((volatile uint32_t *)(0x40030000 + 0x00000008)))  = 0x0A;
N    HWREG(RED_TIMER_BASE + TIMER_O_TBILR) = 0xFFFF;
X    (*((volatile uint32_t *)(0x40030000 + 0x0000002C))) = 0xFFFF;
N
N    //
N    // Invert the output signals.
N    //
N    HWREG(RED_TIMER_BASE + TIMER_O_CTL)   |= 0x4000;
X    (*((volatile uint32_t *)(0x40030000 + 0x0000000C)))   |= 0x4000;
N    HWREG(GREEN_TIMER_BASE + TIMER_O_CTL)   |= 0x40;
X    (*((volatile uint32_t *)(0x40031000 + 0x0000000C)))   |= 0x40;
N    HWREG(BLUE_TIMER_BASE + TIMER_O_CTL)   |= 0x4000;
X    (*((volatile uint32_t *)(0x40031000 + 0x0000000C)))   |= 0x4000;
N
N    if(ui32Enable)
N    {
N        RGBEnable();
N    }
N
N    //
N    // Setup the blink functionality
N    //
N    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_WTIMER5);
X    ((void (*)(uint32_t ui32Peripheral))((uint32_t *)(((uint32_t *)0x01000010)[13]))[6])(0xf0005c05);
N    ROM_TimerConfigure(WTIMER5_BASE, TIMER_CFG_B_PERIODIC | TIMER_CFG_SPLIT_PAIR);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Config))((uint32_t *)(((uint32_t *)0x01000010)[11]))[3])(0x4004F000, 0x00002200 | 0x04000000);
N    ROM_TimerLoadSet64(WTIMER5_BASE, 0xFFFFFFFFFFFFFFFF);
X    ((void (*)(uint32_t ui32Base, uint64_t ui64Value))((uint32_t *)(((uint32_t *)0x01000010)[11]))[23])(0x4004F000, 0xFFFFFFFFFFFFFFFF);
N    ROM_IntEnable(INT_WTIMER5B);
X    ((void (*)(uint32_t ui32Interrupt))((uint32_t *)(((uint32_t *)0x01000010)[14]))[0])(121);
N    ROM_TimerIntEnable(WTIMER5_BASE, TIMER_TIMB_TIMEOUT);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32IntFlags))((uint32_t *)(((uint32_t *)0x01000010)[11]))[19])(0x4004F000, 0x00000100);
N
N
N}
N
N//*****************************************************************************
N//
N//! Enable the RGB LED with already configured timer settings
N//!
N//! This function or RGBDisable should be called during application
N//! initialization to configure the GPIO pins to which the LEDs are attached.
N//! This function enables the timers and configures the GPIO pins as timer
N//! outputs.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBEnable(void)
N{
N
N    //
N    // Enable timers to begin counting
N    //
N    ROM_TimerEnable(RED_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[1])(0x40030000, 0x0000ffff);
N    ROM_TimerEnable(GREEN_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[1])(0x40031000, 0x0000ffff);
N    ROM_TimerEnable(BLUE_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[1])(0x40031000, 0x0000ffff);
N
N    //
N    // Reconfigure each LED's GPIO pad for timer control
N    //
N    ROM_GPIOPinConfigure(GREEN_GPIO_PIN_CFG);
X    ((void (*)(uint32_t ui32PinConfig))((uint32_t *)(((uint32_t *)0x01000010)[4]))[26])(0x00050C07);
N    ROM_GPIOPinTypeTimer(GREEN_GPIO_BASE, GREEN_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[20])(0x40025000, 0x00000008);
N    MAP_GPIOPadConfigSet(GREEN_GPIO_BASE, GREEN_GPIO_PIN, GPIO_STRENGTH_8MA_SC,
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins, uint32_t ui32Strength, uint32_t ui32PadType))((uint32_t *)(((uint32_t *)0x01000010)[4]))[5])(0x40025000, 0x00000008, 0x0000006E,
N                     GPIO_PIN_TYPE_STD);
X                     0x00000008);
N
N    ROM_GPIOPinConfigure(BLUE_GPIO_PIN_CFG);
X    ((void (*)(uint32_t ui32PinConfig))((uint32_t *)(((uint32_t *)0x01000010)[4]))[26])(0x00050807);
N    ROM_GPIOPinTypeTimer(BLUE_GPIO_BASE, BLUE_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[20])(0x40025000, 0x00000004);
N    MAP_GPIOPadConfigSet(BLUE_GPIO_BASE, BLUE_GPIO_PIN, GPIO_STRENGTH_8MA_SC,
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins, uint32_t ui32Strength, uint32_t ui32PadType))((uint32_t *)(((uint32_t *)0x01000010)[4]))[5])(0x40025000, 0x00000004, 0x0000006E,
N                     GPIO_PIN_TYPE_STD);
X                     0x00000008);
N
N    ROM_GPIOPinConfigure(RED_GPIO_PIN_CFG);
X    ((void (*)(uint32_t ui32PinConfig))((uint32_t *)(((uint32_t *)0x01000010)[4]))[26])(0x00050407);
N    ROM_GPIOPinTypeTimer(RED_GPIO_BASE, RED_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[20])(0x40025000, 0x00000002);
N    MAP_GPIOPadConfigSet(RED_GPIO_BASE, RED_GPIO_PIN, GPIO_STRENGTH_8MA_SC,
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins, uint32_t ui32Strength, uint32_t ui32PadType))((uint32_t *)(((uint32_t *)0x01000010)[4]))[5])(0x40025000, 0x00000002, 0x0000006E,
N                     GPIO_PIN_TYPE_STD);
X                     0x00000008);
N}
N
N//*****************************************************************************
N//
N//! Disable the RGB LED by configuring the GPIO's as inputs.
N//!
N//! This function or RGBEnable should be called during application
N//! initialization to configure the GPIO pins to which the LEDs are attached.
N//! This function disables the timers and configures the GPIO pins as inputs
N//! for minimum current draw.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBDisable(void)
N{
N    //
N    // Configure the GPIO pads as general purpose inputs.
N    //
N    ROM_GPIOPinTypeGPIOInput(RED_GPIO_BASE, RED_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[14])(0x40025000, 0x00000002);
N    ROM_GPIOPinTypeGPIOInput(GREEN_GPIO_BASE, GREEN_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[14])(0x40025000, 0x00000008);
N    ROM_GPIOPinTypeGPIOInput(BLUE_GPIO_BASE, BLUE_GPIO_PIN);
X    ((void (*)(uint32_t ui32Port, uint8_t ui8Pins))((uint32_t *)(((uint32_t *)0x01000010)[4]))[14])(0x40025000, 0x00000004);
N
N    //
N    // Stop the timer counting.
N    //
N    ROM_TimerDisable(RED_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[2])(0x40030000, 0x0000ffff);
N    ROM_TimerDisable(GREEN_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[2])(0x40031000, 0x0000ffff);
N    ROM_TimerDisable(BLUE_TIMER_BASE, TIMER_BOTH);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[2])(0x40031000, 0x0000ffff);
N}
N
N//*****************************************************************************
N//
N//! Set the output color and intensity.
N//!
N//! \param pui32RGBColor points to a three element array representing the
N//! relative intensity of each color.  Red is element 0, Green is element 1,
N//! Blue is element 2. 0x0000 is off.  0xFFFF is fully on.
N//!
N//! \param fIntensity is used to scale the intensity of all three colors by
N//! the same amount.  fIntensity should be between 0.0 and 1.0.  This scale
N//! factor is applied to all three colors.
N//!
N//! This function should be called by the application to set the color and
N//! intensity of the RGB LED.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBSet(volatile uint32_t * pui32RGBColor,  float fIntensity)
N{
N    RGBColorSet(pui32RGBColor);
N    RGBIntensitySet(fIntensity);
N}
N
N//*****************************************************************************
N//
N//! Set the output color.
N//!
N//! \param pui32RGBColor points to a three element array representing the
N//! relative intensity of each color.  Red is element 0, Green is element 1,
N//! Blue is element 2. 0x0000 is off.  0xFFFF is fully on.
N//!
N//! This function should be called by the application to set the color
N//! of the RGB LED.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBColorSet(volatile uint32_t * pui32RGBColor)
N{
N    uint32_t ui32Color[3];
N    uint32_t ui32Index;
N
N    for(ui32Index=0; ui32Index < 3; ui32Index++)
N    {
N        g_ui32Colors[ui32Index] = pui32RGBColor[ui32Index];
N        ui32Color[ui32Index] = (uint32_t) (((float) pui32RGBColor[ui32Index]) *
N                            g_fIntensity + 0.5f);
N
N        if(ui32Color[ui32Index] > 0xFFFF)
N        {
N            ui32Color[ui32Index] = 0xFFFF;
N        }
N    }
N
N    ROM_TimerMatchSet(RED_TIMER_BASE, RED_TIMER, ui32Color[RED]);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer, uint32_t ui32Value))((uint32_t *)(((uint32_t *)0x01000010)[11]))[17])(0x40030000, 0x0000ff00, ui32Color[0]);
N    ROM_TimerMatchSet(GREEN_TIMER_BASE, GREEN_TIMER, ui32Color[GREEN]);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer, uint32_t ui32Value))((uint32_t *)(((uint32_t *)0x01000010)[11]))[17])(0x40031000, 0x0000ff00, ui32Color[1]);
N    ROM_TimerMatchSet(BLUE_TIMER_BASE, BLUE_TIMER, ui32Color[BLUE]);
X    ((void (*)(uint32_t ui32Base, uint32_t ui32Timer, uint32_t ui32Value))((uint32_t *)(((uint32_t *)0x01000010)[11]))[17])(0x40031000, 0x000000ff, ui32Color[2]);
N}
N
N//*****************************************************************************
N//
N//! Set the current output intensity.
N//!
N//! \param fIntensity is used to scale the intensity of all three colors by
N//! the same amount.  fIntensity should be between 0.0 and 1.0.  This scale
N//! factor is applied individually to all three colors.
N//!
N//! This function should be called by the application to set the intensity
N//! of the RGB LED.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBIntensitySet(float fIntensity)
N{
N    g_fIntensity = fIntensity;
N    RGBColorSet(g_ui32Colors);
N}
N
N//*****************************************************************************
N//
N//! Sets the blink rate of the RGB Led
N//!
N//! \param fRate is the blink rate in hertz.
N//!
N//! This function controls the blink rate of the RGB LED in auto blink mode.
N//! to enable blinking pass a non-zero floating pointer number.  To disable
N//! pass 0.0f as the argument. Calling this function will override the current
N//! RGBDisable or RGBEnable status.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBBlinkRateSet(float fRate)
N{
N    uint64_t ui64Load;
N
N    if(fRate == 0.0f)
N    {
N        //
N        // Disable the timer and enable the RGB.  If blink rate is zero we
N        // assume we want the RGB to be enabled. To disable call RGBDisable
N        //
N        ROM_TimerDisable(WTIMER5_BASE, TIMER_B);
X        ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[2])(0x4004F000, 0x0000ff00);
N        RGBEnable();
N    }
N    else
N    {
N        //
N        // Keep the math in floating pointing until the end so that we keep as
N        // much precision as we can.
N        //
N        ui64Load = (uint64_t) (((float)SysCtlClockGet()) / (fRate * 2.0f));
N        ROM_TimerLoadSet(WTIMER5_BASE, TIMER_B, ui64Load);
X        ((void (*)(uint32_t ui32Base, uint32_t ui32Timer, uint32_t ui32Value))((uint32_t *)(((uint32_t *)0x01000010)[11]))[14])(0x4004F000, 0x0000ff00, ui64Load);
N        ROM_TimerEnable(WTIMER5_BASE, TIMER_B);
X        ((void (*)(uint32_t ui32Base, uint32_t ui32Timer))((uint32_t *)(((uint32_t *)0x01000010)[11]))[1])(0x4004F000, 0x0000ff00);
N    }
N
N}
N
N//*****************************************************************************
N//
N//! Get the output color.
N//!
N//! \param pui32RGBColor points to a three element array representing the
N//! relative intensity of each color.  Red is element 0, Green is element 1,
N//! Blue is element 2. 0x0000 is off.  0xFFFF is fully on. Caller must allocate
N//! and pass a pointer to a three element array of uint32_ts.
N//!
N//! This function should be called by the application to get the current color
N//! of the RGB LED.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NRGBColorGet(uint32_t * pui32RGBColor)
N{
N    uint32_t ui32Index;
N
N    for(ui32Index=0; ui32Index < 3; ui32Index++)
N    {
N        pui32RGBColor[ui32Index] = g_ui32Colors[ui32Index];
N    }
N}
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
