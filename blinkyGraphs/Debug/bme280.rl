L 1 "../bme280.c"
N/*
N * @file bme280.c
N * @brief BME280 Library Code
N * @headerfile <bme280.h>
N * @details Bosch Sensortec BME280 driver library for TI-RTOS using I2C bus
N *
N * @author Eric Brundick
N * @date 2016
N * @version 100
N * @copyright (C) 2016 Eric Brundick spirilis at linux dot com
N *  @n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
N *  @n (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
N *  @n publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to
N *  @n do so, subject to the following conditions:
N *  @n
N *  @n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
N *  @n
N *  @n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
N *  @n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
N *  @n BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
N *  @n OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
N *  @n
N *  @n Parts of this codebase derive from BOSCH SENSORTEC calibration compensation example code and is provided by BOSCH with no
N *  @n implied warranty.  The end-user assumes all responsibility for the performance of this codebase.
N *  @n BOSCH SENSORTEC also states in their datasheet the end-user bears all risk for the use of this product and they do not consider
N *  @n the product suitable for life-sustaining or security sensitive systems.
N *  @n
N *  @n A copy of the BME280 product datasheet may be found on BOSCH SENSORTEC's product page:
N *  @n https://www.bosch-sensortec.com/bst/products/all_products/bme280
N */
N
N/* XDCtools Header files */
N//#include <xdc/std.h>
N//#include <xdc/runtime/System.h>
N//#include <xdc/runtime/Error.h>
N
N/* BIOS Header files */
N#include <ti/sysbios/BIOS.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_BIOS__include
N#define ti_sysbios_BIOS__include
N
N#ifndef __nested__
N#define __nested__
N#define ti_sysbios_BIOS__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_BIOS___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/std.h" 1
N/* 
N *  Copyright (c) 2008-2016 Texas Instruments. All rights reserved.
N *  This program and the accompanying materials are made available under the 
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at 
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_std__include
N#define xdc_std__include
N
N#include <stdarg.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdarg.h" 1
N/*****************************************************************************/
N/* stdarg.h   v5.2.6                                                         */
N/*                                                                           */
N/* Copyright (c) 1996-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _STDARG
N#define _STDARG
N
N#pragma diag_push
N#pragma CHECK_MISRA("-20.2") /* standard headers must define standard names */
N#pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
N
N#ifdef __cplusplus
S#define _NS_PREFIX std::
Snamespace std {
N#else
N#define _NS_PREFIX
N#endif /* __cplusplus */
N
N#ifdef __TI_EABI_SUPPORT__
Ntypedef struct __va_list {
N    void * __ap;
N} va_list;
N#else
Stypedef char *va_list;
N#endif
N
N#ifdef __cplusplus
S} /* namespace std */
N#endif
N
N#define _VA_RNDUP(sz) 	(((sz) + 3) & ~3)
N#define _VA_MASK(tp)     ((__ALIGNOF__(tp) == 8) ? 7 : 3)
N#define _VA_ALN(ap,tp)  (((int)(ap) + _VA_MASK(tp)) & ~(_VA_MASK(tp)))
N
N#ifdef __TI_EABI_SUPPORT__
N#define va_start(ap, parmN)						      \
N   ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   \
N		                              _VA_RNDUP(sizeof(parmN)))))
X#define va_start(ap, parmN)						         ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   		                              _VA_RNDUP(sizeof(parmN)))))
N#else
S#define va_start(ap, parmN)						      \
S   ((ap) = (__va_argref(parmN) 						      \
S	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      \
S	    : (sizeof(parmN) < sizeof(int)) 				      \
S	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      \
S	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
X#define va_start(ap, parmN)						         ((ap) = (__va_argref(parmN) 						      	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      	    : (sizeof(parmN) < sizeof(int)) 				      	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
N#endif
N
N#ifdef __big_endian__
S#ifdef __TI_EABI_SUPPORT__
S#define va_arg(_ap, _type)					 	      \
S    (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       \
S			                         _VA_RNDUP(sizeof(_type)))),  \
S     (*(_type *)((int)(_ap).__ap -                                            \
S		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      \
S		                       : (sizeof(_type))))))
X#define va_arg(_ap, _type)					 	          (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       			                         _VA_RNDUP(sizeof(_type)))),       (*(_type *)((int)(_ap).__ap -                                            		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      		                       : (sizeof(_type))))))
S#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                                		      \
S	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                                		      	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
S#endif
N#else
N#ifdef __TI_EABI_SUPPORT__
N#define va_arg(_ap, _type) 						      \
N   (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        \
N			   _VA_RNDUP(sizeof(_type)))),                        \
N	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
X#define va_arg(_ap, _type) 						         (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        			   _VA_RNDUP(sizeof(_type)))),                        	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
N#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                         		              \
S	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      \
S	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                         		              	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
N#endif
N#endif
N
N#define va_end(ap) ((void)0)
N
N#pragma diag_pop
N
N#endif /* _STDARG */
N
N#pragma diag_push
N
N/* using declarations must occur outside header guard to support including both
N   C and C++-wrapped version of header; see _CPP_STYLE_HEADER check */
N/* this code is for C++ mode only and thus also not relevant for MISRA */
N#pragma CHECK_MISRA("-19.15")
N
N#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
X#if 0L && !0L
Susing std::va_list;
N#endif /* _CPP_STYLE_HEADER */
N
N#pragma diag_pop
L 18 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/std.h" 2
N#include <stddef.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stddef.h" 1
N/*****************************************************************************/
N/* stddef.h   v5.2.6                                                         */
N/*                                                                           */
N/* Copyright (c) 1993-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _STDDEF
N#define _STDDEF
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.7") /* macros required for implementation */
N#pragma CHECK_MISRA("-20.1") /* standard headers must define standard names */
N#pragma CHECK_MISRA("-20.2") /* standard headers must define standard names */
N
N#ifdef __cplusplus
Sextern "C" namespace std {
N#endif
N
N#ifndef NULL
N#define NULL 0
N#endif
N
Ntypedef __PTRDIFF_T_TYPE__ ptrdiff_t;
Xtypedef int ptrdiff_t;
N
N#ifndef _SIZE_T
N#define _SIZE_T
Ntypedef __SIZE_T_TYPE__ size_t;
Xtypedef unsigned size_t;
N#endif
N
N#ifndef __cplusplus
N#ifndef _WCHAR_T
N#define _WCHAR_T
N
Ntypedef __WCHAR_T_TYPE__ wchar_t;
Xtypedef unsigned short wchar_t;
N
N#endif /* _WCHAR_T */
N#endif /* ! __cplusplus */
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
N
N#ifdef __TI_LLVM__
S#  define offsetof(_type, _ident) __builtin_offsetof(_type, _ident)
N#else
N#    ifdef __cplusplus
S#      define offsetof(_type, _ident) \
S         ((std::size_t)__intaddr__(&(((_type *)0)->_ident)))
X#      define offsetof(_type, _ident)          ((std::size_t)__intaddr__(&(((_type *)0)->_ident)))
N#    else
N#      define offsetof(_type, _ident) \
N         ((size_t)__intaddr__(&(((_type *)0)->_ident)))
X#      define offsetof(_type, _ident)          ((size_t)__intaddr__(&(((_type *)0)->_ident)))
N#    endif
N#endif
N
N#ifdef __cplusplus
S} /* extern "C" namespace std */
N#endif  /* __cplusplus */
N
N#pragma diag_pop
N
N#endif  /* _STDDEF */
N
N#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
X#if 0L && !0L
Susing std::ptrdiff_t;
Susing std::size_t;
S/*using std::wchar_t;*/
N#endif /* _CPP_STYLE_HEADER */
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.15") /* code outside guard; see below comment */
N
N/*-----------------------------------------------------------------------*/
N/* Define _win_t, for compiling GCC libraries with the TI compiler.      */
N/* GCC's library (newlib) expects wint_t to be defined here, in stddef.h,*/
N/* which is arguably incorrect, but we go along for compatibility.       */
N/* This is outside the _STDDEF guard in case this file has already       */
N/* been included without __need_wint_t.                                  */
N/*-----------------------------------------------------------------------*/
N#if defined(__need_wint_t) && !defined(_WINT_T) 
X#if 0L && !0L 
S#if (__STDC_VERSION__ >= 199901L || !__TI_STRICT_ANSI_MODE__)
S
S#undef __need_wint_t
S#define _WINT_T
S#ifdef __cplusplus
S   extern "C" namespace std {
S#endif /* __cplusplus */
S
Stypedef unsigned int wint_t;
S
S#ifdef __cplusplus
S   } /* extern "C" namespace std { */
S#endif /* __cplusplus */
S
S#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
Susing std::wint_t;
S#endif /* _CPP_STYLE_HEADER */
S
S#endif /* __STDC_VERSION__ >= 199901L  */
N#endif
N
N#pragma diag_pop
L 19 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/std.h" 2
N
N/* macros to simplify "stringification" and computed includes */
N#define xdc__stringify(a) #a
N#define xdc__local_include(a) xdc__stringify(a.h)
N#define xdc__system_include(m) <m.h>
N
N/* TitleCase standard types */
N
N#define xdc_Void        void
N
Ntypedef char            xdc_Char;
Ntypedef unsigned char   xdc_UChar;
Ntypedef short           xdc_Short;
Ntypedef unsigned short  xdc_UShort;
Ntypedef int             xdc_Int;
Ntypedef unsigned int    xdc_UInt;
Ntypedef long            xdc_Long;
Ntypedef unsigned long   xdc_ULong;
Ntypedef float           xdc_Float;
Ntypedef double          xdc_Double;
Ntypedef long double     xdc_LDouble;
Ntypedef size_t          xdc_SizeT;
Ntypedef va_list         xdc_VaList;
N
N/* Generic Extended Types */
N
Ntypedef unsigned short  xdc_Bool;       /* boolean flag */
Ntypedef void            *xdc_Ptr;       /* data pointer */
Ntypedef const void      *xdc_CPtr;      /* data pointer */
Ntypedef char            *xdc_String;    /* null terminated string */
Ntypedef const char      *xdc_CString;   /* null terminated immutable string */
N
N#define xdc__CSTRING__  1               /* flag that CString is declared */
N
N/* we intentionally omit arguments from Fxn to indicate that it can have
N * any (or none).  Unfortunately this causes gcc to emit warnings when
N * -Wstrict-prototypes is used.  Newer gcc's (4.6 or later) support a pragma
N * that works around this:
N *
N *    #pragma GCC diagnostic ignored "-Wstrict-prototypes"
N */
N#ifdef __GNUC__
S  #if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ >= 6))
S    #pragma GCC diagnostic push
S    #pragma GCC diagnostic ignored "-Wpragmas"
S    #pragma GCC diagnostic ignored "-Wstrict-prototypes"
S    typedef int             (*xdc_Fxn)();   /* function pointer */
S    #pragma GCC diagnostic pop
S  #else
S    typedef int             (*xdc_Fxn)();   /* function pointer */
S  #endif
N#else
N  typedef int             (*xdc_Fxn)();   /* function pointer */
N#endif
N
N/*
N * Import the target-specific std.h
N */
N#ifdef xdc_target_types__
S#define xdc_target__ <xdc_target_types__>
N#endif
N#ifdef xdc_target__
S#include xdc_target__
N#else
N/* if the user did not supply the required xdc_target* definitions, ask well
N * known compiler tool chains to select based on their pre-defined macros
N */
N#ifdef __TI_COMPILER_VERSION__
N#include <ti/targets/select.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/select.h" 1
N/*
N *  Copyright 2016 by Texas Instruments Incorporated.
N *
N */
N
N/*
N *  ======== select.h ========
N *  This header selects an appropriate target name based on TI compiler
N *  predefined macros and includes the appropriate target-specific std.h.
N *
N *  This header is entirely optional: the user can directly select any
N *  existing target by adding definition of the following two symbols to
N *  the compile line:
N *    xdc_target_name__     the short name of the target; e.g., C64P
N *    xdc_target_types__    a package path relative path to the types header
N *                          for the target; e.g., ti/targets/std.h
N *
N *  For more information about these symbols see:
N *  http://rtsc.eclipse.org/docs-tip/Integrating_RTSC_Modules
N */
N
N/*
N *  ======== MSP430 ========
N */
N#if defined(__MSP430__)
X#if 0L
S#  if defined(__MSP430X__)
S     /* --silicon_version=mspx is specified */
S#    if defined(__LARGE_CODE_MODEL__)
S       /* --code_model=large is specified */
S#      define xdc_target_name__ MSP430X
S#    else
S#      define xdc_target_name__ MSP430X_small
S#    endif
S#  else
S#    define xdc_target_name__ MSP430
S#  endif
S#  if __TI_EABI__ == 1
S#    define xdc_target_types__ ti/targets/msp430/elf/std.h
S#  else
S#    define xdc_target_types__ ti/targets/msp430/std.h
S#  endif
S
S/*
S *  ======== TMS320C6X ========
S */
S#elif defined(_TMS320C6X)
X#elif 0L
S#  if __TI_EABI__ == 1
S     /* set to 1 if compiling for EABI (ELF) and is set to 0 otherwise. */
S#    define xdc_target_types__ ti/targets/elf/std.h
S#  else
S#    define xdc_target_types__ ti/targets/std.h
S#  endif
S
S#  if defined(_BIG_ENDIAN)
S#    if defined(_TMS320C6600)
S#      define xdc_target_name__ C66_big_endian
S#    elif defined(_TI_C6X_TESLA)
S#      define xdc_target_name__ C64T_big_endian
S#    elif defined(_TMS320C6740)
S#      define xdc_target_name__ C674_big_endian
S#    elif defined(_TMS320C6400_PLUS)
S#      define xdc_target_name__ C64P_big_endian
S#    endif
S#  else
S#    if defined(_TMS320C6600)
S#      define xdc_target_name__ C66
S#    elif defined(_TI_C6X_TESLA)
S#      define xdc_target_name__ C64T
S#    elif defined(_TMS320C6740)
S#      define xdc_target_name__ C674
S#    elif defined(_TMS320C6400_PLUS)
S#      define xdc_target_name__ C64P
S#    elif defined(_TMS320C6700_PLUS)
S#      define xdc_target_name__ C67P
S#    endif
S#  endif
S/*
S *  ======== ARP32 ========
S *  ARP32 (EVE) devices
S */
S#elif defined (__ARP32__)
X#elif 0L
S#  define xdc_target_types__ ti/targets/arp32/elf/std.h
S#  define xdc_target_name__ ARP32
S
S/*
S *  ======== TMS470 ========
S *  Arm devices
S */
N#elif defined (__TMS470__)
X#elif 1L
N#  if defined(__TI_EABI_SUPPORT__)
X#  if 1L
N     /* Defined to 1 if the --abi=eabi option is used */
N#    define xdc_target_types__ ti/targets/arm/elf/std.h
N#  else
S#    define xdc_target_types__ ti/targets/arm/std.h
N#  endif
N
N#  if defined (__TI_TMS470_V4__)
X#  if 0L
S     /* Defined to 1 if the ARM7 is targeted (the -mv4 option is used); */
S#    if defined(__big_endian__)
S#      define xdc_target_name__ Arm7_big_endian
S#    else
S#      define xdc_target_name__ Arm7
S#    endif
S
S#  elif defined(__TI_TMS470_V5__)
X#  elif 0L
S     /* Defined to 1 if the ARM9E is targeted (the -mv5e option is used); */
S#    if defined(__16bis__)
S#      define xdc_target_name__ Arm9t
S#    else
S#      define xdc_target_name__ Arm9
S#    endif
S#  elif defined(__TI_TMS470_V7A8__)
X#  elif 0L
S     /* Defined to 1 if the Cortex-A8 is targeted ( -mv7A8 option is used) */
S#    if defined(__16bis__)
S#      define xdc_target_name__ A8Ft
S#    else
S#      if defined(__TI_VFP_SUPPORT__)
S#        if defined(__TI_NEON_SUPPORT__)
S#          define xdc_target_name__ A8Fnv
S#        else
S#          define xdc_target_name__ A8Fv
S#        endif
S#      else
S#        if defined(__TI_NEON_SUPPORT__)
S#          define xdc_target_name__ A8F
S#        else
S#          define xdc_target_name__ A8
S#        endif
S#      endif
S#    endif
S
S#  elif defined(__TI_TMS470_V7M3__)
X#  elif 0L
S     /* Defined to 1 if Cortex-M3 is targeted (the -mv7M3 option is used); */
S#    if defined(__big_endian__)
S#      define xdc_target_name__ M3_big_endian
S#    else
S#      define xdc_target_name__ M3
S#    endif
S
N#  elif defined(__TI_TMS470_V7M4__)
X#  elif 1L
N     /* Defined to 1 if Cortex-M4 is targeted (the -mv7M4 option is used); */
N#    if defined(__TI_VFP_SUPPORT__)
X#    if 1L
N#      define xdc_target_name__ M4F
N#    else
S#      define xdc_target_name__ M4
N#    endif
N
N#  elif defined(__TI_TMS470_V7R4__)
S     /* Defined to 1 if Cortex-R4 is targeted (the -mv7R4 option is used); */
S#    if defined(__big_endian__)
S#      if defined(__16bis__)
S#        if defined(__TI_VFP_SUPPORT__)
S#          define xdc_target_name__ R4Ft_big_endian
S#        else
S#          define xdc_target_name__ R4t_big_endian
S#        endif
S#      else
S#        if defined(__TI_VFP_SUPPORT__)
S#          define xdc_target_name__ R4F_big_endian
S#        else
S#          define xdc_target_name__ R4_big_endian
S#        endif
S#      endif
S#    else
S#      if defined(__16bis__)
S#        if defined(__TI_VFP_SUPPORT__)
S#          define xdc_target_name__ R4Ft
S#        else
S#          define xdc_target_name__ R4t
S#        endif
S#      else
S#        if defined(__TI_VFP_SUPPORT__)
S#          define xdc_target_name__ R4F
S#        else
S#          define xdc_target_name__ R4
S#        endif
S#      endif
S#    endif
N#  endif
N
N/*
N *  ======== TMS320C28XX ========
N */
N#elif defined(__TMS320C28XX__)
S#  if defined(__LARGE_MODEL__)
S     /* large-model code is selected (the -ml option is used) */
S#    if defined(__TMS320C28XX_FPU32__)
S       /* 32-bit hardware floating-point support (--float_support=fpu32) */
S#      define xdc_target_name__ C28_float
S#    elif defined(__TMS320C28XX_FPU64__)
S       /* 64-bit hardware floating-point support (--float_support=fpu64) */
S#      error 64-bit floating point target does not exist (yet)
S#    else
S#      define xdc_target_name__ C28_large
S#    endif
S#  else
S     /* small-model */
S#    define xdc_target_name__ C28
S#  endif
S#  define xdc_target_types__ ti/targets/std.h
S
S#else
S#  warn can't determine an appropriate setting for xdc_target_types__; unknown ISA
N#endif
N
N#if defined(xdc_target_name__) && defined(xdc_target_types__)
X#if 1L && 1L
N/*
N *  ======== include the selected type header ========
N */
N#define xdc_target__ <xdc_target_types__>
N#include xdc_target__
X#include <ti/targets/arm/elf/std.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/arm/elf/std.h" 1
N/* 
N *  Copyright (c) 2008 Texas Instruments and others.
N *  All rights reserved. This program and the accompanying materials
N *  are made available under the terms of the Eclipse Public License v1.0
N *  which accompanies this distribution, and is available at
N *  http://www.eclipse.org/legal/epl-v10.html
N * 
N *  Contributors:
N *      Texas Instruments - initial implementation
N * 
N * */
N/*
N *  ======== ti/targets/arm/elf/std.h ========
N *  Standard types for supported TI Arm compilers for ELF
N */
N
N#ifndef ti_targets_arm_elf_STD_
N#define ti_targets_arm_elf_STD_
N
N/*  Define target-specific "portable" macros
N *
N *  The build command-line define xdc_target_name__ to be the value
N *  of the target's name config parameter.  We use this to include the
N *  target-specific definitions for the required target-independent
N *  xdc_target* macros.
N */
N#if defined(xdc_target_name__) & !defined(xdc_target_macros_include__)
X#if 1L & !0L
N#include xdc__local_include(xdc_target_name__)
X#include "M4F.h"
L 1 "C:\ti\tirtos_tivac_2_16_00_08\products\bios_6_45_01_29\packages\ti\targets\arm\elf\M4F.h" 1
N/*
N *  ======== M4F.h ========
N *  DO NOT MODIFY: This header is generated from stddef.xdt
N *
N *  This header contains target-specific definitions of target-independent
N *  macros required by the ITarget interface.  These definitions allow C/C++
N *  sources to portably compile for multiple targets (using #ifdef ...).
N */
N#ifndef xdc_target_macros_include__
N#define xdc_target_macros_include__    1
N
N/*
N *  ======== ti_targets_arm_elf_M4F ========
N *  This macro identifies the specific target being used.  This macro should
N *  probably be avoided in portable sources.
N */
N#define ti_targets_arm_elf_M4F  1
N
N/*
N *  ======== xdc_target__arraytype_VaList ========
N *  The following macro specifies whether or not a VaList is an 
N *  array type; e.g., struct __va_list_tag (*)[1] verses a simple char *.  
N *  This affects how va_list variables are passed to functions (by value
N *  or by address).
N */
N#define xdc_target__arraytype_VaList 0
N
N/*
N *  ======== xdc_target__isaCompatible_* macros ========
N *  The following definitions enable clients to conditionally compile for any
N *  compatible subset of the actual target ISA.
N */
N#define xdc_target__isaCompatible_v7M  1
N#define xdc_target__isaCompatible_v7M4  1
N
N/*
N *  ======== xdc_target__isa_v7M4 ========
N *  This macro identifies the specific target ISA for which we are being
N *  compiled.
N */
N#define xdc_target__isa_v7M4  1
N
N/*
N *  ======== xdc_target__{big|little}Endian ========
N *  The following macro enables clients to portably compile for big or little
N *  endian targets.
N */
N#define xdc_target__littleEndian   1
N
N/*
N *  ======== xdc_target__{...}Code ========
N *  The following macro enables clients to portably compile for target specific
N *  code models; e.g., near, far, ...
N */
N#define xdc_target__thumb2Code  1
N
N/*
N *  ======== xdc_target__os_undefined ========
N *  The following macro enables clients to portably compile for target specific
N *  OS; e.g., Linux, Solaris, Windows, undefined.
N */
N#define xdc_target__os_undefined    1
N
N/*
N *  ======== xdc_target__sizeof_ ========
N *  The following macros enable clients to portably determine type sizes
N *  within #ifdef blocks; sizeof() can't be used and the definitions in
N *  stdint.h are not available to C++ clients (unless the special macro
N *  __STDC_LIMIT_MACROS is defined).
N */
N#define  xdc_target__sizeof_IArg 4
N#define  xdc_target__sizeof_Char 1
N#define  xdc_target__sizeof_Double 8
N#define  xdc_target__sizeof_Float 4
N#define  xdc_target__sizeof_Fxn 4
N#define  xdc_target__sizeof_Int 4
N#define  xdc_target__sizeof_Int8 1
N#define  xdc_target__sizeof_Int16 2
N#define  xdc_target__sizeof_Int32 4
N#define  xdc_target__sizeof_Int64 8
N#define  xdc_target__sizeof_Long 4
N#define  xdc_target__sizeof_LDouble 8
N#define  xdc_target__sizeof_LLong 8
N#define  xdc_target__sizeof_Ptr 4
N#define  xdc_target__sizeof_Short 2
N#define  xdc_target__sizeof_Size 4
N
N/*
N *  ======== xdc_target__alignof_ ========
N *  The following macros enable clients to portably determine type alignment
N *  within #ifdef blocks; even if provided by the compiler, alignof() can't
N *  be used in pre-processor statements.
N */
N#define  xdc_target__alignof_IArg 4
N#define  xdc_target__alignof_Char 1
N#define  xdc_target__alignof_Double 8
N#define  xdc_target__alignof_Float 4
N#define  xdc_target__alignof_Fxn 4
N#define  xdc_target__alignof_Int 4
N#define  xdc_target__alignof_Int8 1
N#define  xdc_target__alignof_Int16 2
N#define  xdc_target__alignof_Int32 4
N#define  xdc_target__alignof_Int64 8
N#define  xdc_target__alignof_Long 4
N#define  xdc_target__alignof_LDouble 8
N#define  xdc_target__alignof_LLong 8
N#define  xdc_target__alignof_Ptr 4
N#define  xdc_target__alignof_Short 2
N#define  xdc_target__alignof_Size 4
N
N/*
N *  ======== xdc_target__bitsPerChar ========
N *  The number of bits in a char.  This macro allow one to determine the
N *  precise number of bits in any of the standard types (whose sizes are
N *  expressed as a number of chars).
N */
N#define  xdc_target__bitsPerChar 8
N
N#endif  /* end multi-include guard */
L 29 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/arm/elf/std.h" 2
N#endif
N
N/* "inherit" (i.e., include) all ti.targets standard types */
N#include <ti/targets/std.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/std.h" 1
N/* 
N *  Copyright (c) 2008 Texas Instruments and others.
N *  All rights reserved. This program and the accompanying materials
N *  are made available under the terms of the Eclipse Public License v1.0
N *  which accompanies this distribution, and is available at
N *  http://www.eclipse.org/legal/epl-v10.html
N * 
N *  Contributors:
N *      Texas Instruments - initial implementation
N * 
N * */
N/*
N *  ======== ti/targets/std.h ========
N *  Standard types for supported TI compilers
N *
N */
N
N#ifndef ti_targets_STD_
N#define ti_targets_STD_
N
N/* allow _TI_STD_TYPES like 'Uns' and 'Uint8' */
N#ifndef xdc__deprecated_types
N#define xdc__deprecated_types
N#endif
N
N/* include target-specific "portable" macros */
N#if defined(xdc_target_name__) && !defined(xdc_target_macros_include__)
X#if 1L && !1L
S#include xdc__local_include(xdc_target_name__)
N#endif
N
N#include <stdint.h>     /* C99 standard integer types */
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdint.h" 1
N/*****************************************************************************/
N/* STDINT.H v5.2.6                                                           */
N/*                                                                           */
N/* Copyright (c) 2002-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N#ifndef _STDINT_H_
N#define _STDINT_H_
N
N/* 7.18.1.1 Exact-width integer types */
N
N    typedef   signed char   int8_t;
N    typedef unsigned char  uint8_t;
N    typedef          short  int16_t;
N    typedef unsigned short uint16_t;
N    typedef          int    int32_t;
N    typedef unsigned int   uint32_t;
N
N
N    typedef          long long  int64_t;
N    typedef unsigned long long uint64_t;
N
N/* 7.18.1.2 Minimum-width integer types */
N
N    typedef  int8_t   int_least8_t;
N    typedef uint8_t  uint_least8_t;
N
N    typedef  int16_t  int_least16_t;
N    typedef uint16_t uint_least16_t;
N    typedef  int32_t  int_least32_t;
N    typedef uint32_t uint_least32_t;
N
N
N    typedef  int64_t  int_least64_t;
N    typedef uint64_t uint_least64_t;
N
N/* 7.18.1.3 Fastest minimum-width integer types */
N
N    typedef  int32_t  int_fast8_t;
N    typedef uint32_t uint_fast8_t;
N    typedef  int32_t  int_fast16_t;
N    typedef uint32_t uint_fast16_t;
N
N    typedef  int32_t  int_fast32_t;
N    typedef uint32_t uint_fast32_t;
N
N
N    typedef  int64_t  int_fast64_t;
N    typedef uint64_t uint_fast64_t;
N
N/* 7.18.1.4 Integer types capable of holding object pointers */
N    typedef          int intptr_t;
N    typedef unsigned int uintptr_t;
N
N/* 7.18.1.5 Greatest-width integer types */
N    typedef          long long intmax_t;
N    typedef unsigned long long uintmax_t;
N
N/* 
N   According to footnotes in the 1999 C standard, "C++ implementations
N   should define these macros only when __STDC_LIMIT_MACROS is defined
N   before <stdint.h> is included." 
N*/
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N/* 7.18.2 Limits of specified width integer types */
N
N    #define  INT8_MAX   0x7f
N    #define  INT8_MIN   (-INT8_MAX-1)
N    #define UINT8_MAX   0xff
N
N    #define  INT16_MAX  0x7fff
N    #define  INT16_MIN  (-INT16_MAX-1)
N    #define UINT16_MAX  0xffff
N
N    #define  INT32_MAX  0x7fffffff
N    #define  INT32_MIN  (-INT32_MAX-1)
N    #define UINT32_MAX  0xffffffff
N
N
N    #define  INT64_MAX  0x7fffffffffffffff
N    #define  INT64_MIN  (-INT64_MAX-1)
N    #define UINT64_MAX  0xffffffffffffffff
N
N    #define  INT_LEAST8_MAX   (INT8_MAX)
N    #define  INT_LEAST8_MIN   (INT8_MIN)
N    #define UINT_LEAST8_MAX   (UINT8_MAX)
N
N    #define  INT_LEAST16_MAX  (INT16_MAX)
N    #define  INT_LEAST16_MIN  (INT16_MIN)
N    #define UINT_LEAST16_MAX  (UINT16_MAX)
N    #define  INT_LEAST32_MAX  (INT32_MAX)
N    #define  INT_LEAST32_MIN  (INT32_MIN)
N    #define UINT_LEAST32_MAX  (UINT32_MAX)
N
N
N    #define  INT_LEAST64_MAX  (INT64_MAX)
N    #define  INT_LEAST64_MIN  (INT64_MIN)
N    #define UINT_LEAST64_MAX  (UINT64_MAX)
N
N    #define  INT_FAST8_MAX   (INT32_MAX)
N    #define  INT_FAST8_MIN   (INT32_MIN)
N    #define UINT_FAST8_MAX   (UINT32_MAX)
N    #define  INT_FAST16_MAX  (INT32_MAX)
N    #define  INT_FAST16_MIN  (INT32_MIN)
N    #define UINT_FAST16_MAX  (UINT32_MAX)
N
N    #define  INT_FAST32_MAX  (INT32_MAX)
N    #define  INT_FAST32_MIN  (INT32_MIN)
N    #define UINT_FAST32_MAX  (UINT32_MAX)
N
N
N    #define  INT_FAST64_MAX  (INT64_MAX)
N    #define  INT_FAST64_MIN  (INT64_MIN)
N    #define UINT_FAST64_MAX  (UINT64_MAX)
N
N    #define INTPTR_MAX   (INT32_MAX)
N    #define INTPTR_MIN   (INT32_MIN)
N    #define UINTPTR_MAX  (UINT32_MAX)
N
N    #define INTMAX_MIN   (INT64_MIN)
N    #define INTMAX_MAX   (INT64_MAX)
N    #define UINTMAX_MAX  (UINT64_MAX)
N
N/* 7.18.3 Limits of other integer types */
N
N    #define PTRDIFF_MAX (INT32_MAX)
N    #define PTRDIFF_MIN (INT32_MIN)
N
N    #define SIG_ATOMIC_MIN (INT32_MIN)
N    #define SIG_ATOMIC_MAX (INT32_MAX)
N
N    #define SIZE_MAX (UINT32_MAX)
N
N#ifndef WCHAR_MAX
N#if !defined(__TI_WCHAR_T_BITS__) || __TI_WCHAR_T_BITS__ == 16
X#if !1L || 16 == 16
N#define WCHAR_MAX 0xffffu
N#else 
S#define WCHAR_MAX 0xffffffffu
N#endif
N#endif
N
N#ifndef WCHAR_MIN
N#define WCHAR_MIN 0
N#endif
N
N    #define WINT_MIN (INT32_MIN)
N    #define WINT_MAX (INT32_MAX)
N
N/* 7.18.4.1 Macros for minimum-width integer constants */
N
N/*
N   There is a defect report filed against the C99 standard concerning how 
N   the (U)INTN_C macros should be implemented.  Please refer to --
N   http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm 
N   for more information.  These macros are implemented according to the
N   suggestion given at this web site.
N*/
N
N    #define  INT8_C(value)  ((int_least8_t)(value))
N    #define UINT8_C(value)  ((uint_least8_t)(value))
N    #define  INT16_C(value) ((int_least16_t)(value))
N    #define UINT16_C(value) ((uint_least16_t)(value))
N    #define  INT32_C(value) ((int_least32_t)(value))
N    #define UINT32_C(value) ((uint_least32_t)(value))
N
N
N    #define  INT64_C(value) ((int_least64_t)(value))
N    #define UINT64_C(value) ((uint_least64_t)(value))
N
N/* 7.18.4.2 Macros for greatest-width integer constants */
N
N    #define  INTMAX_C(value) ((intmax_t)(value))
N    #define UINTMAX_C(value) ((uintmax_t)(value))
N
N#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
N
N#endif /* _STDINT_H_ */
L 32 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/std.h" 2
N
N#if !defined(xdc__strict)
X#if !0L
N    #if defined(_TMS320C28X)
X    #if 0L
S        #define xdc__ARG__
S        typedef void *xdc_Arg;  /* deprecated, but compatible with BIOS 5.x */
S    #elif defined(_TMS320C6X)
X    #elif 0L
S        #define xdc__ARG__
S        typedef int xdc_Arg;    /* deprecated, but compatible with BIOS 5.x */
N    #endif
N#endif    
N
N/*
N * xdc__LONGLONG__ indicates if compiler supports 'long long' type
N * xdc__BITS<n> __ indicates if compiler supports 'uint<n>_t' type
N */
N#if defined(_TMS320C28X)                        /* 28x */
X#if 0L                         
S    #define xdc__LONGLONG__
S    #undef xdc__BITS8__
S    #define xdc__BITS16__
S    #define xdc__BITS32__
S    #define xdc__BITS64__
S    #define xdc__INT64__
S
S#elif defined(_TMS320C6X)                       /* all C6x */
X#elif 0L                        
S    #define xdc__LONGLONG__
S    #define xdc__BITS8__
S    #define xdc__BITS16__
S    #define xdc__BITS32__
S    #define xdc__BITS64__
S    #define xdc__INT40__
S    #define xdc__INT64__
S
S    #define __FAR__ far
S
N#elif defined(__TMS470__)                       /* ARM */
X#elif 1L                        
N    #define xdc__LONGLONG__
N    #define xdc__BITS8__
N    #define xdc__BITS16__
N    #define xdc__BITS32__
N    #define xdc__BITS64__
N    #define xdc__INT64__
N
N#elif defined(__ARP32__)
S    #define xdc__LONGLONG__
S    #define xdc__BITS8__
S    #define xdc__BITS16__
S    #define xdc__BITS32__
S    #define xdc__BITS64__
S    #define xdc__INT64__
S
S#elif defined(__MSP430__)                       /* MSP430 */
S    #define xdc__LONGLONG__
S    #define xdc__BITS8__
S    #define xdc__BITS16__
S    #define xdc__BITS32__
S    #define xdc__BITS64__
S    #define xdc__INT64__
S#else
S    #error <ti/targets/std.h> is not supported for this target
N#endif
N
N/*
N *  ======== [U]Int<n> ========
N */
Ntypedef int_least8_t    xdc_Int8;
Ntypedef uint_least8_t   xdc_UInt8;
Ntypedef int_least16_t   xdc_Int16;
Ntypedef uint_least16_t  xdc_UInt16;
Ntypedef int_least32_t   xdc_Int32;
Ntypedef uint_least32_t  xdc_UInt32;
N
N#ifdef xdc__INT64__
N    typedef int_least64_t   xdc_Int64;
N    typedef uint_least64_t   xdc_UInt64;
N#endif
N
N#ifdef xdc__INT40__
S    typedef int_least40_t   xdc_Int40;
S    typedef uint_least40_t  xdc_UInt40;
S
S  /*  the following unqualified names are here because 40-bit types are not
S   *  supported by xdc/std.h
S   */
S  #ifndef xdc__nolocalnames
S    typedef xdc_Int40       Int40;
S    typedef xdc_UInt40      UInt40;
S  #endif
N#endif
N
N/*
N *  ======== Bits<n> ========
N */
N#ifdef xdc__BITS8__
N    typedef uint8_t     xdc_Bits8;
N#endif
N#ifdef xdc__BITS16__
N    typedef uint16_t    xdc_Bits16;
N#endif
N#ifdef xdc__BITS32__
N    typedef uint32_t    xdc_Bits32;
N#endif
N#ifdef xdc__BITS64__
N    typedef uint64_t    xdc_Bits64;
N#endif
N
N/*
N *  ======== [UI]Arg ========
N */
Ntypedef intptr_t        xdc_IArg;
Ntypedef uintptr_t       xdc_UArg;
N
N/*
N *  ======== restrict ========
N */
N#define xdc__RESTRICT__
N
N
N/*
N *  ======== ti_targets_mkPragma ========
N */
N#define ti_targets_mkPragma(x) _Pragma(#x)
N
N/*
N *  ======== xdc__META ========
N */
N#define xdc__META(n,s) \
N    ti_targets_mkPragma(DATA_SECTION(n, "xdc.meta")) \
N    const char (n)[] = {s}
X#define xdc__META(n,s)     ti_targets_mkPragma(DATA_SECTION(n, "xdc.meta"))     const char (n)[] = {s}
N
N/*
N *  ======== __ti__ ========
N *  These symbols are used by RTSC tools to indicate presence/absence of
N *  assorted #pragma options in TI compiler.
N */
N#define __ti__
N#define __ti__align
N#define __ti__sect
N
N#if (xdc_target__sizeof_IArg > xdc_target__sizeof_Ptr) \
N    || (xdc_target__sizeof_IArg > xdc_target__sizeof_Fxn)
X#if (4 > 4)     || (4 > 4)
S
S#define xdc__ARGTOPTR
S#define xdc__ARGTOFXN
Sstatic inline xdc_Ptr xdc_iargToPtr(xdc_IArg a) { return ((xdc_Ptr)(int)a); }
Sstatic inline xdc_Ptr xdc_uargToPtr(xdc_UArg a) { return ((xdc_Ptr)(int)a); }
Sstatic inline xdc_Fxn xdc_iargToFxn(xdc_IArg a) { return ((xdc_Fxn)(int)a); }
Sstatic inline xdc_Fxn xdc_uargToFxn(xdc_UArg a) { return ((xdc_Fxn)(int)a); }
S
N#endif
N
N#endif /* ti_targets_STD_ */
N/*
N *  @(#) ti.targets; 1, 0, 3,0; 1-29-2016 16:37:07; /db/ztree/library/trees/xdctargets/xdctargets-k09/src/ xlibrary
N
N */
N
L 33 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/arm/elf/std.h" 2
N
N#endif /* ti_targets_arm_elf_STD_ */
N/*
N *  @(#) ti.targets.arm.elf; 1, 0, 0,0; 1-29-2016 16:37:09; /db/ztree/library/trees/xdctargets/xdctargets-k09/src/ xlibrary
N
N */
N
L 212 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/targets/select.h" 2
N
N#else
S  /* if we get here, this header was unable to select an appropriate set of
S   * types.  If the target exists, you can avoid the warnings below by
S   * explicitly defining the symbols xdc_target_name__ and
S   * xdc_target_types__ on the compile line.
S   */
S#  ifndef xdc_target_name__
S#    warn can't determine an appropriate setting for xdc_target_name__
S#  endif
S#  ifndef xdc_target_types__
S#    warn can't determine an appropriate setting for xdc_target_types__
S#  endif
N#endif
N/*
N *  @(#) ti.targets; 1, 0, 3,0; 1-29-2016 16:37:07; /db/ztree/library/trees/xdctargets/xdctargets-k09/src/ xlibrary
N
N */
N
L 88 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/std.h" 2
N#elif defined(__IAR_SYSTEMS_ICC__)
S#include <iar/targets/select.h>
S#elif defined(__GNUC__)
S#include <gnu/targets/select.h>
S#else
S/*
S * 'xdc_target_types__' must be defined to name a target-specific header
S * file (e.g., ti/targets/std.h) that has definitions for the basic types:
S * xdc_Int8, xdc_Int16, ...
S *
S * For example, to build for a target in the ti.targets package you should
S * add the following option to your compiler's command line:
S *    -Dxdc_target_types__=ti/targets/std.h
S */
S#error xdc_target_types__ must be defined to name a target-specific header containing definitions of xdc_Int8, xdc_Int16, ...
S
S/* the following definitions are required to keep the compiler from
S * complaining about references to these types in the rest of this header;
S * some compilers do not stop parsing this file after the #error above.
S */
Stypedef int xdc_IArg;
Stypedef unsigned int xdc_UArg;
Stypedef signed char xdc_Int8;
Stypedef unsigned char xdc_UInt8;
Stypedef short xdc_Int16;
Stypedef unsigned short xdc_UInt16;
Stypedef int xdc_Int32;
Stypedef unsigned int xdc_UInt32;
N#endif
N#endif
N
N/* Each modules' internal header file defines 'module' as 
N * xdc__MODOBJADDR__(Module__state__V), where Module__state__V is the actual
N * object where the module state is kept. For most targets, the default macro
N * given here results in the construct '(&Module__state__V)->field', when the
N * expression 'module->field' is used. Compilers then generate the code that
N * doesn't dereference a pointer, but puts the address of the field in the
N * code.
N * The targets that need to do something different can define
N * xdc__MODOBJADDR__ in std.h for their target package.
N */
N#ifndef xdc__MODOBJADDR__
N#define xdc__MODOBJADDR__(symbol) (&(symbol))
N#endif
N
N/* Long Long Types */
N
N#ifdef xdc__LONGLONG__
Ntypedef long long               xdc_LLong;
Ntypedef unsigned long long      xdc_ULLong;
N
N#else
S
S#ifndef xdc__INT64__
S/* If the target doesn't support "long long" or a 64-bit integral type, we
S * simply use "long".  This is done to ensure that the type LLong always
S * exists, it's at least as long as a "long", and it's 64-bits wide whenever
S * possible.
S */
Stypedef long                    xdc_LLong;
Stypedef unsigned long           xdc_ULLong;
S#endif
S
N#endif
N
N/* Arg to Ptr and Fxn conversion operators
N *
N * Individual targets may override these definitions in the event
N * that compilers issue warnings about shortening of an Arg to a pointer,
N * for example.
N */
N#ifndef xdc__ARGTOPTR
Nstatic xdc_Ptr xdc_iargToPtr(xdc_IArg a);
Nstatic xdc_Ptr xdc_uargToPtr(xdc_UArg a);
N
Nstatic inline xdc_Ptr xdc_iargToPtr(xdc_IArg a) { return ((xdc_Ptr)a); }
Nstatic inline xdc_Ptr xdc_uargToPtr(xdc_UArg a) { return ((xdc_Ptr)a); }
N#endif
N
N#ifndef xdc__ARGTOFXN
Nstatic xdc_Fxn xdc_iargToFxn(xdc_IArg a);
Nstatic xdc_Fxn xdc_uargToFxn(xdc_UArg a);
N
Nstatic inline xdc_Fxn xdc_iargToFxn(xdc_IArg a) { return ((xdc_Fxn)a); }
Nstatic inline xdc_Fxn xdc_uargToFxn(xdc_UArg a) { return ((xdc_Fxn)a); }
N#endif
N
N#ifndef xdc__ARGTOFLOAT
N/*
N * functions to efficiently convert a single precision float to an IArg
N * and vice-versa while maintaining client type safety
N * 
N * Here the assumption is that sizeof(Float) <= sizeof(IArg);
N */
Ntypedef union {
N    xdc_Float f;
N    xdc_IArg  a;
N} xdc_FloatData;
N
Nstatic xdc_IArg xdc_floatToArg(xdc_Float f);
Nstatic inline xdc_IArg xdc_floatToArg(xdc_Float f)
N{
N     xdc_FloatData u;
N     u.f = f;
N
N     return (u.a);
N}
N
Nstatic xdc_Float xdc_argToFloat(xdc_IArg a);
Nstatic inline xdc_Float xdc_argToFloat(xdc_IArg a)
N{
N     xdc_FloatData u;
N     u.a = a;
N
N     return (u.f);
N}
N#endif
N
N/* restrict keyword */
N#ifndef xdc__RESTRICT__
S#define restrict
N#endif
N
N/* Unprefixed Aliases */
N
N#ifndef xdc__nolocalnames
N
N#define iargToPtr(a) xdc_iargToPtr(a)
N#define uargToPtr(a) xdc_uargToPtr(a)
N#define iargToFxn(a) xdc_iargToFxn(a)
N#define uargToFxn(a) xdc_uargToFxn(a)
N#define floatToArg(a) xdc_floatToArg(a)
N#define argToFloat(a) xdc_argToFloat(a)
N
N#define Void xdc_Void
N
Ntypedef xdc_Char        Char;
Ntypedef xdc_UChar       UChar;
Ntypedef xdc_Short       Short;
Ntypedef xdc_UShort      UShort;
Ntypedef xdc_Int         Int;
Ntypedef xdc_UInt        UInt;
Ntypedef xdc_Long        Long;
Ntypedef xdc_ULong       ULong;
Ntypedef xdc_LLong       LLong;
Ntypedef xdc_ULLong      ULLong;
Ntypedef xdc_Float       Float;
Ntypedef xdc_Double      Double;
Ntypedef xdc_LDouble     LDouble;
Ntypedef xdc_SizeT       SizeT;
Ntypedef xdc_VaList      VaList;
N
Ntypedef xdc_IArg        IArg;
Ntypedef xdc_UArg        UArg;
Ntypedef xdc_Bool        Bool;
Ntypedef xdc_Int8        Int8;
Ntypedef xdc_Int16       Int16;
Ntypedef xdc_Int32       Int32;
Ntypedef xdc_Fxn         Fxn;
Ntypedef xdc_Ptr         Ptr;
Ntypedef xdc_CPtr        CPtr;
N#ifndef xdc__nolocalstring
Ntypedef xdc_String      String;
N#endif
Ntypedef xdc_CString     CString;
N
Ntypedef xdc_UInt8       UInt8;
Ntypedef xdc_UInt16      UInt16;
Ntypedef xdc_UInt32      UInt32;
N
N/* DEPRECATED Aliases */
N#if !defined(xdc__strict) && defined(xdc__deprecated_types)
X#if !0L && 1L
N#define _TI_STD_TYPES
N
N/* xdc_Arg is defined only in ti/targets/std.h; use IArg and UArg instead */
N#ifdef xdc__ARG__
Stypedef xdc_Arg         Arg;
N#endif
N
Ntypedef xdc_UInt8       Uint8;
Ntypedef xdc_UInt16      Uint16;
Ntypedef xdc_UInt32      Uint32;
Ntypedef xdc_UInt        Uns;
N#endif
N
N/*
N *  ======== optional types ========
N *  The following types are not always defined for all targets
N */
N#ifdef xdc__INT64__
Ntypedef xdc_Int64       Int64;
Ntypedef xdc_UInt64      UInt64;
N#endif
N
N/* The following exact size types are not required by C99 and may not be
N * supported by some compiler/processor environments.  For greater
N * portability, use the IntN or UIntN types above.
N */
N#ifdef xdc__BITS8__
Ntypedef xdc_Bits8       Bits8;
N#endif
N
N#ifdef xdc__BITS16__
Ntypedef xdc_Bits16      Bits16;
N#endif
N
N#ifdef xdc__BITS32__
Ntypedef xdc_Bits32      Bits32;
N#endif
N
N#ifdef xdc__BITS64__
Ntypedef xdc_Bits64      Bits64;
N#endif
N
N#endif /* xdc__nolocalnames */
N
N/* Standard Constants */
N
N/* NULL must be 0 for C++ and is set to 0 in C to allow legacy code to
N * compile without warnings.
N *
N * If xdc__strict is defined, NULL is defined to be a pointer to allow
N * maximal type checking in "modern" C sources
N */
N#undef NULL
N#if defined(__cplusplus) || !defined(xdc__strict)
X#if 0L || !0L
N#define NULL 0
N#else
S#define NULL ((void *)0)
N#endif
N
N#undef FALSE
N#define FALSE 0U
N
N#undef TRUE
N#define TRUE 1U
N
N/* Declaration Qualifiers */
N
N#ifndef __FAR__
N#define __FAR__
N#endif
N
N/*
N *  ======== xdc__CODESECT ========
N *  Code-Section Directive
N *
N *  Targets can optionally #define xdc__CODESECT in their specific
N *  std.h files.  This directive is placed in front of all
N *  "extern" function declarations, and specifies a section-name in
N *  which to place this function.  This approach
N *  provides more control on combining/organizing groups of
N *  related functions into a single named sub-section (e.g.,
N *  "init-code")  If this macro is not defined by the target, an
N *  empty definition is used instead.
N */ 
N#ifndef xdc__CODESECT
N#define xdc__CODESECT(fn, sn)
N#endif
N
N/*
N *  ======== xdc__META ========
N *  Embed unreferenced string in the current file
N *
N *  Strings emebdded via xdc__META can be placed in a section that is
N *  _not_ loaded on the target but are, nevertheless, part of the
N *  executable and available to loaders.
N *
N *  Different targets may define this macro in a way that places these
N *  strings in an output section that is not loaded (and therefore does
N *  not takeup space on the target).  Unless the target provides a
N *  definition of xdc__META, the definition below simply defines
N *  as string constant in the current file.
N */
N#ifndef xdc__META
S#define xdc__META(n,s) __FAR__ const char (n)[] = {(s)}
N#endif
N
N#endif /* xdc_std__include */
N/*
N *  @(#) xdc; 1, 1, 1,0; 2-8-2018 16:12:11; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 51 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N
N#include <xdc/runtime/xdc.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/xdc.h" 1
N/* 
N *  Copyright (c) 2008-2018 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at 
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N/*
N * ======== xdc.h ========
N *  All generated public module headers include this file
N */
N
N#ifndef XDC__
N#define XDC__
N
N/*
N *  ======== __CONC__ ========
N *  Concatenate the specified tokens to create a new single token
N */
N#define __CONC2__(x,y) x ## y
N#define __CONC__(x,y) __CONC2__(x,y)
N
N/*
N *  ======== __STR__ ========
N *  Stringify the specified arguement
N */
N#define __STR2__(x) #x
N#define __STR__(x) __STR2__(x)
N
N/*
N *  ======== xdc_FILE__ ========
N *  Alternative to __FILE__ which defaults to NULL
N *
N *  We define our own symbol in lieu of the standard __FILE__
N *  so we can avoid embedding lots of static strings in applications
N *  that use Error and Assert.
N *
N *  Both Error and Assert use xdc_FILE__ and ALL module internal headers
N *  redefine xdc_FILE__ to be NULL, unless xdc_FILE is defined.  If xdc_FILE
N *  is defined, xdc-FILE__ has the same value assigned to xdc_FILE.  So, by
N *  default, Error and Asserts in modules do *not* provide a file name.
N *
N *  Since this header is included in all module public headers, "non-module"
N *  clients of Error and Assert *will*, by default, provide a file name
N *  string.  To eliminate these embedded strings, add the following line
N *  before all module headers:
N *      #define xdc_FILE    NULL
N *
N *  Module creators may opt to define xdc_FILE as the string to use in
N *  Error and Assert messages.  For example, adding the following line
N *  to a module's implementation (before the inclusion of the module's
N *  internal header) will cause the standard __FILE__ to be
N *  used in lieu of NULL in Error and Assert calls:
N *      #define xdc_FILE    __FILE__
N *
N */
N#ifndef xdc_FILE__
N#ifdef xdc_FILE
S#define xdc_FILE__ xdc_FILE
N#else
N#define xdc_FILE__ __FILE__
N#endif
N#endif
N
N/*
N *  ======== xdc_LINE ========
N *  Standard file-line-number string for identifying a call site
N */
N#ifdef xdc_FILE
S#define xdc_LINE (xdc_runtime_Types_RopeAddr)"\"" xdc_FILE "\", line " __STR__(__LINE__)
N#else
N#define xdc_LINE (xdc_runtime_Types_RopeAddr)"\"" __FILE__ "\", line " __STR__(__LINE__)
N#endif
N
N#endif /* XDC__ */
N
N
N
N
N
N
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 53 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
N#define xdc_runtime_Types__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Types___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types__prologue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types__prologue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Types__prologue__include
N#define xdc_runtime_Types__prologue__include
N
N/*
N *  ======== Types__prologue.h ========
N *  Hand crafted definitions for Types.xdc
N */
N
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 2
N#include <xdc/runtime/package/package.defs.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/package.defs.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N#ifndef xdc_runtime__
N#define xdc_runtime__
N
N
N/*
N * ======== interface xdc.runtime.IModule ========
N */
N
Ntypedef struct xdc_runtime_IModule_Fxns__ xdc_runtime_IModule_Fxns__;
Ntypedef const struct xdc_runtime_IModule_Fxns__* xdc_runtime_IModule_Module;
N
N/*
N * ======== module xdc.runtime.Assert ========
N */
N
N
N/*
N * ======== module xdc.runtime.Core ========
N */
N
Ntypedef struct xdc_runtime_Core_ObjDesc xdc_runtime_Core_ObjDesc;
N
N/*
N * ======== module xdc.runtime.Defaults ========
N */
N
N
N/*
N * ======== module xdc.runtime.Diags ========
N */
N
Ntypedef struct xdc_runtime_Diags_DictElem xdc_runtime_Diags_DictElem;
N
N/*
N * ======== module xdc.runtime.Error ========
N */
N
Ntypedef struct xdc_runtime_Error_Data xdc_runtime_Error_Data;
Ntypedef struct xdc_runtime_Error_Block xdc_runtime_Error_Block;
Ntypedef struct xdc_runtime_Error_Module_State xdc_runtime_Error_Module_State;
N
N/*
N * ======== module xdc.runtime.Gate ========
N */
N
N
N/*
N * ======== interface xdc.runtime.IGateProvider ========
N */
N
Ntypedef struct xdc_runtime_IGateProvider_Fxns__ xdc_runtime_IGateProvider_Fxns__;
Ntypedef const struct xdc_runtime_IGateProvider_Fxns__* xdc_runtime_IGateProvider_Module;
Ntypedef struct xdc_runtime_IGateProvider_Params xdc_runtime_IGateProvider_Params;
Ntypedef struct xdc_runtime_IGateProvider___Object { xdc_runtime_IGateProvider_Fxns__* __fxns; xdc_Bits32 __label; } *xdc_runtime_IGateProvider_Handle;
N
N/*
N * ======== module xdc.runtime.GateNull ========
N */
N
Ntypedef struct xdc_runtime_GateNull_Fxns__ xdc_runtime_GateNull_Fxns__;
Ntypedef const struct xdc_runtime_GateNull_Fxns__* xdc_runtime_GateNull_Module;
Ntypedef struct xdc_runtime_GateNull_Params xdc_runtime_GateNull_Params;
Ntypedef struct xdc_runtime_GateNull_Object xdc_runtime_GateNull_Object;
Ntypedef struct xdc_runtime_GateNull_Struct xdc_runtime_GateNull_Struct;
Ntypedef xdc_runtime_GateNull_Object* xdc_runtime_GateNull_Handle;
Ntypedef struct xdc_runtime_GateNull_Object__ xdc_runtime_GateNull_Instance_State;
Ntypedef xdc_runtime_GateNull_Object* xdc_runtime_GateNull_Instance;
N
N/*
N * ======== module xdc.runtime.Log ========
N */
N
Ntypedef struct xdc_runtime_Log_EventRec xdc_runtime_Log_EventRec;
N
N/*
N * ======== interface xdc.runtime.ILogger ========
N */
N
Ntypedef struct xdc_runtime_ILogger_Fxns__ xdc_runtime_ILogger_Fxns__;
Ntypedef const struct xdc_runtime_ILogger_Fxns__* xdc_runtime_ILogger_Module;
Ntypedef struct xdc_runtime_ILogger_Params xdc_runtime_ILogger_Params;
Ntypedef struct xdc_runtime_ILogger___Object { xdc_runtime_ILogger_Fxns__* __fxns; xdc_Bits32 __label; } *xdc_runtime_ILogger_Handle;
N
N/*
N * ======== interface xdc.runtime.IFilterLogger ========
N */
N
Ntypedef struct xdc_runtime_IFilterLogger_Fxns__ xdc_runtime_IFilterLogger_Fxns__;
Ntypedef const struct xdc_runtime_IFilterLogger_Fxns__* xdc_runtime_IFilterLogger_Module;
Ntypedef struct xdc_runtime_IFilterLogger_Params xdc_runtime_IFilterLogger_Params;
Ntypedef struct xdc_runtime_IFilterLogger___Object { xdc_runtime_IFilterLogger_Fxns__* __fxns; xdc_Bits32 __label; } *xdc_runtime_IFilterLogger_Handle;
N
N/*
N * ======== module xdc.runtime.LoggerBuf ========
N */
N
Ntypedef struct xdc_runtime_LoggerBuf_Entry xdc_runtime_LoggerBuf_Entry;
Ntypedef struct xdc_runtime_LoggerBuf_Module_State xdc_runtime_LoggerBuf_Module_State;
Ntypedef struct xdc_runtime_LoggerBuf_Fxns__ xdc_runtime_LoggerBuf_Fxns__;
Ntypedef const struct xdc_runtime_LoggerBuf_Fxns__* xdc_runtime_LoggerBuf_Module;
Ntypedef struct xdc_runtime_LoggerBuf_Params xdc_runtime_LoggerBuf_Params;
Ntypedef struct xdc_runtime_LoggerBuf_Object xdc_runtime_LoggerBuf_Object;
Ntypedef struct xdc_runtime_LoggerBuf_Struct xdc_runtime_LoggerBuf_Struct;
Ntypedef xdc_runtime_LoggerBuf_Object* xdc_runtime_LoggerBuf_Handle;
Ntypedef struct xdc_runtime_LoggerBuf_Object__ xdc_runtime_LoggerBuf_Instance_State;
Ntypedef xdc_runtime_LoggerBuf_Object* xdc_runtime_LoggerBuf_Instance;
N
N/*
N * ======== module xdc.runtime.LoggerCallback ========
N */
N
Ntypedef struct xdc_runtime_LoggerCallback_Fxns__ xdc_runtime_LoggerCallback_Fxns__;
Ntypedef const struct xdc_runtime_LoggerCallback_Fxns__* xdc_runtime_LoggerCallback_Module;
Ntypedef struct xdc_runtime_LoggerCallback_Params xdc_runtime_LoggerCallback_Params;
Ntypedef struct xdc_runtime_LoggerCallback_Object xdc_runtime_LoggerCallback_Object;
Ntypedef struct xdc_runtime_LoggerCallback_Struct xdc_runtime_LoggerCallback_Struct;
Ntypedef xdc_runtime_LoggerCallback_Object* xdc_runtime_LoggerCallback_Handle;
Ntypedef struct xdc_runtime_LoggerCallback_Object__ xdc_runtime_LoggerCallback_Instance_State;
Ntypedef xdc_runtime_LoggerCallback_Object* xdc_runtime_LoggerCallback_Instance;
N
N/*
N * ======== module xdc.runtime.LoggerSys ========
N */
N
Ntypedef struct xdc_runtime_LoggerSys_Fxns__ xdc_runtime_LoggerSys_Fxns__;
Ntypedef const struct xdc_runtime_LoggerSys_Fxns__* xdc_runtime_LoggerSys_Module;
Ntypedef struct xdc_runtime_LoggerSys_Params xdc_runtime_LoggerSys_Params;
Ntypedef struct xdc_runtime_LoggerSys_Object xdc_runtime_LoggerSys_Object;
Ntypedef struct xdc_runtime_LoggerSys_Struct xdc_runtime_LoggerSys_Struct;
Ntypedef xdc_runtime_LoggerSys_Object* xdc_runtime_LoggerSys_Handle;
Ntypedef struct xdc_runtime_LoggerSys_Object__ xdc_runtime_LoggerSys_Instance_State;
Ntypedef xdc_runtime_LoggerSys_Object* xdc_runtime_LoggerSys_Instance;
N
N/*
N * ======== module xdc.runtime.Main ========
N */
N
N
N/*
N * ======== module xdc.runtime.Memory ========
N */
N
Ntypedef struct xdc_runtime_Memory_Stats xdc_runtime_Memory_Stats;
Ntypedef struct xdc_runtime_Memory_Module_State xdc_runtime_Memory_Module_State;
N
N/*
N * ======== interface xdc.runtime.IHeap ========
N */
N
Ntypedef struct xdc_runtime_IHeap_Fxns__ xdc_runtime_IHeap_Fxns__;
Ntypedef const struct xdc_runtime_IHeap_Fxns__* xdc_runtime_IHeap_Module;
Ntypedef struct xdc_runtime_IHeap_Params xdc_runtime_IHeap_Params;
Ntypedef struct xdc_runtime_IHeap___Object { xdc_runtime_IHeap_Fxns__* __fxns; xdc_Bits32 __label; } *xdc_runtime_IHeap_Handle;
N
N/*
N * ======== module xdc.runtime.HeapMin ========
N */
N
Ntypedef struct xdc_runtime_HeapMin_Fxns__ xdc_runtime_HeapMin_Fxns__;
Ntypedef const struct xdc_runtime_HeapMin_Fxns__* xdc_runtime_HeapMin_Module;
Ntypedef struct xdc_runtime_HeapMin_Params xdc_runtime_HeapMin_Params;
Ntypedef struct xdc_runtime_HeapMin_Object xdc_runtime_HeapMin_Object;
Ntypedef struct xdc_runtime_HeapMin_Struct xdc_runtime_HeapMin_Struct;
Ntypedef xdc_runtime_HeapMin_Object* xdc_runtime_HeapMin_Handle;
Ntypedef struct xdc_runtime_HeapMin_Object__ xdc_runtime_HeapMin_Instance_State;
Ntypedef xdc_runtime_HeapMin_Object* xdc_runtime_HeapMin_Instance;
N
N/*
N * ======== module xdc.runtime.HeapStd ========
N */
N
Ntypedef struct xdc_runtime_HeapStd_Module_State xdc_runtime_HeapStd_Module_State;
Ntypedef struct xdc_runtime_HeapStd_Fxns__ xdc_runtime_HeapStd_Fxns__;
Ntypedef const struct xdc_runtime_HeapStd_Fxns__* xdc_runtime_HeapStd_Module;
Ntypedef struct xdc_runtime_HeapStd_Params xdc_runtime_HeapStd_Params;
Ntypedef struct xdc_runtime_HeapStd_Object xdc_runtime_HeapStd_Object;
Ntypedef struct xdc_runtime_HeapStd_Struct xdc_runtime_HeapStd_Struct;
Ntypedef xdc_runtime_HeapStd_Object* xdc_runtime_HeapStd_Handle;
Ntypedef struct xdc_runtime_HeapStd_Object__ xdc_runtime_HeapStd_Instance_State;
Ntypedef xdc_runtime_HeapStd_Object* xdc_runtime_HeapStd_Instance;
N
N/*
N * ======== module xdc.runtime.Registry ========
N */
N
Ntypedef struct xdc_runtime_Registry_Module_State xdc_runtime_Registry_Module_State;
N
N/*
N * ======== module xdc.runtime.Rta ========
N */
N
Ntypedef struct xdc_runtime_Rta_CommandPacket xdc_runtime_Rta_CommandPacket;
Ntypedef struct xdc_runtime_Rta_ResponsePacket xdc_runtime_Rta_ResponsePacket;
N
N/*
N * ======== module xdc.runtime.Startup ========
N */
N
Ntypedef struct xdc_runtime_Startup_IdMap xdc_runtime_Startup_IdMap;
Ntypedef struct xdc_runtime_Startup_Module_State xdc_runtime_Startup_Module_State;
N
N/*
N * ======== module xdc.runtime.System ========
N */
N
Ntypedef struct xdc_runtime_System_ParseData xdc_runtime_System_ParseData;
Ntypedef struct xdc_runtime_System_Module_State xdc_runtime_System_Module_State;
N
N/*
N * ======== interface xdc.runtime.ISystemSupport ========
N */
N
Ntypedef struct xdc_runtime_ISystemSupport_Fxns__ xdc_runtime_ISystemSupport_Fxns__;
Ntypedef const struct xdc_runtime_ISystemSupport_Fxns__* xdc_runtime_ISystemSupport_Module;
N
N/*
N * ======== module xdc.runtime.SysCallback ========
N */
N
Ntypedef struct xdc_runtime_SysCallback_Fxns__ xdc_runtime_SysCallback_Fxns__;
Ntypedef const struct xdc_runtime_SysCallback_Fxns__* xdc_runtime_SysCallback_Module;
N
N/*
N * ======== module xdc.runtime.SysMin ========
N */
N
Ntypedef struct xdc_runtime_SysMin_Module_State xdc_runtime_SysMin_Module_State;
Ntypedef struct xdc_runtime_SysMin_Fxns__ xdc_runtime_SysMin_Fxns__;
Ntypedef const struct xdc_runtime_SysMin_Fxns__* xdc_runtime_SysMin_Module;
N
N/*
N * ======== module xdc.runtime.SysStd ========
N */
N
Ntypedef struct xdc_runtime_SysStd_Fxns__ xdc_runtime_SysStd_Fxns__;
Ntypedef const struct xdc_runtime_SysStd_Fxns__* xdc_runtime_SysStd_Module;
N
N/*
N * ======== module xdc.runtime.Text ========
N */
N
Ntypedef struct xdc_runtime_Text_Node xdc_runtime_Text_Node;
Ntypedef struct xdc_runtime_Text_MatchVisState xdc_runtime_Text_MatchVisState;
Ntypedef struct xdc_runtime_Text_PrintVisState xdc_runtime_Text_PrintVisState;
Ntypedef struct xdc_runtime_Text_Module_State xdc_runtime_Text_Module_State;
N
N/*
N * ======== interface xdc.runtime.ITimestampClient ========
N */
N
Ntypedef struct xdc_runtime_ITimestampClient_Fxns__ xdc_runtime_ITimestampClient_Fxns__;
Ntypedef const struct xdc_runtime_ITimestampClient_Fxns__* xdc_runtime_ITimestampClient_Module;
N
N/*
N * ======== module xdc.runtime.Timestamp ========
N */
N
Ntypedef struct xdc_runtime_Timestamp_Fxns__ xdc_runtime_Timestamp_Fxns__;
Ntypedef const struct xdc_runtime_Timestamp_Fxns__* xdc_runtime_Timestamp_Module;
N
N/*
N * ======== interface xdc.runtime.ITimestampProvider ========
N */
N
Ntypedef struct xdc_runtime_ITimestampProvider_Fxns__ xdc_runtime_ITimestampProvider_Fxns__;
Ntypedef const struct xdc_runtime_ITimestampProvider_Fxns__* xdc_runtime_ITimestampProvider_Module;
N
N/*
N * ======== module xdc.runtime.TimestampNull ========
N */
N
Ntypedef struct xdc_runtime_TimestampNull_Fxns__ xdc_runtime_TimestampNull_Fxns__;
Ntypedef const struct xdc_runtime_TimestampNull_Fxns__* xdc_runtime_TimestampNull_Module;
N
N/*
N * ======== module xdc.runtime.TimestampStd ========
N */
N
Ntypedef struct xdc_runtime_TimestampStd_Fxns__ xdc_runtime_TimestampStd_Fxns__;
Ntypedef const struct xdc_runtime_TimestampStd_Fxns__* xdc_runtime_TimestampStd_Module;
N
N/*
N * ======== module xdc.runtime.Types ========
N */
N
Ntypedef struct xdc_runtime_Types_CordAddr__ xdc_runtime_Types_CordAddr__;
Ntypedef struct xdc_runtime_Types_GateRef__ xdc_runtime_Types_GateRef__;
Ntypedef struct xdc_runtime_Types_Label xdc_runtime_Types_Label;
Ntypedef struct xdc_runtime_Types_Site xdc_runtime_Types_Site;
Ntypedef struct xdc_runtime_Types_Timestamp64 xdc_runtime_Types_Timestamp64;
Ntypedef struct xdc_runtime_Types_FreqHz xdc_runtime_Types_FreqHz;
Ntypedef struct xdc_runtime_Types_RegDesc xdc_runtime_Types_RegDesc;
Ntypedef struct xdc_runtime_Types_Vec xdc_runtime_Types_Vec;
Ntypedef struct xdc_runtime_Types_Link xdc_runtime_Types_Link;
Ntypedef struct xdc_runtime_Types_InstHdr xdc_runtime_Types_InstHdr;
Ntypedef struct xdc_runtime_Types_PrmsHdr xdc_runtime_Types_PrmsHdr;
Ntypedef struct xdc_runtime_Types_Base xdc_runtime_Types_Base;
Ntypedef struct xdc_runtime_Types_SysFxns2 xdc_runtime_Types_SysFxns2;
N
N/*
N * ======== interface xdc.runtime.IInstance ========
N */
N
Ntypedef struct xdc_runtime_IInstance_Fxns__ xdc_runtime_IInstance_Fxns__;
Ntypedef const struct xdc_runtime_IInstance_Fxns__* xdc_runtime_IInstance_Module;
Ntypedef struct xdc_runtime_IInstance_Params xdc_runtime_IInstance_Params;
Ntypedef struct xdc_runtime_IInstance___Object { xdc_runtime_IInstance_Fxns__* __fxns; xdc_Bits32 __label; } *xdc_runtime_IInstance_Handle;
N
N/*
N * ======== module xdc.runtime.LoggerBuf_TimestampProxy ========
N */
N
Ntypedef struct xdc_runtime_LoggerBuf_TimestampProxy_Fxns__ xdc_runtime_LoggerBuf_TimestampProxy_Fxns__;
Ntypedef const struct xdc_runtime_LoggerBuf_TimestampProxy_Fxns__* xdc_runtime_LoggerBuf_TimestampProxy_Module;
N
N/*
N * ======== module xdc.runtime.LoggerBuf_Module_GateProxy ========
N */
N
Ntypedef struct xdc_runtime_LoggerBuf_Module_GateProxy_Fxns__ xdc_runtime_LoggerBuf_Module_GateProxy_Fxns__;
Ntypedef const struct xdc_runtime_LoggerBuf_Module_GateProxy_Fxns__* xdc_runtime_LoggerBuf_Module_GateProxy_Module;
Ntypedef struct xdc_runtime_LoggerBuf_Module_GateProxy_Params xdc_runtime_LoggerBuf_Module_GateProxy_Params;
Ntypedef struct xdc_runtime_IGateProvider___Object *xdc_runtime_LoggerBuf_Module_GateProxy_Handle;
N
N/*
N * ======== module xdc.runtime.LoggerSys_TimestampProxy ========
N */
N
Ntypedef struct xdc_runtime_LoggerSys_TimestampProxy_Fxns__ xdc_runtime_LoggerSys_TimestampProxy_Fxns__;
Ntypedef const struct xdc_runtime_LoggerSys_TimestampProxy_Fxns__* xdc_runtime_LoggerSys_TimestampProxy_Module;
N
N/*
N * ======== module xdc.runtime.Main_Module_GateProxy ========
N */
N
Ntypedef struct xdc_runtime_Main_Module_GateProxy_Fxns__ xdc_runtime_Main_Module_GateProxy_Fxns__;
Ntypedef const struct xdc_runtime_Main_Module_GateProxy_Fxns__* xdc_runtime_Main_Module_GateProxy_Module;
Ntypedef struct xdc_runtime_Main_Module_GateProxy_Params xdc_runtime_Main_Module_GateProxy_Params;
Ntypedef struct xdc_runtime_IGateProvider___Object *xdc_runtime_Main_Module_GateProxy_Handle;
N
N/*
N * ======== module xdc.runtime.Memory_HeapProxy ========
N */
N
Ntypedef struct xdc_runtime_Memory_HeapProxy_Fxns__ xdc_runtime_Memory_HeapProxy_Fxns__;
Ntypedef const struct xdc_runtime_Memory_HeapProxy_Fxns__* xdc_runtime_Memory_HeapProxy_Module;
Ntypedef struct xdc_runtime_Memory_HeapProxy_Params xdc_runtime_Memory_HeapProxy_Params;
Ntypedef struct xdc_runtime_IHeap___Object *xdc_runtime_Memory_HeapProxy_Handle;
N
N/*
N * ======== module xdc.runtime.System_SupportProxy ========
N */
N
Ntypedef struct xdc_runtime_System_SupportProxy_Fxns__ xdc_runtime_System_SupportProxy_Fxns__;
Ntypedef const struct xdc_runtime_System_SupportProxy_Fxns__* xdc_runtime_System_SupportProxy_Module;
N
N/*
N * ======== module xdc.runtime.System_Module_GateProxy ========
N */
N
Ntypedef struct xdc_runtime_System_Module_GateProxy_Fxns__ xdc_runtime_System_Module_GateProxy_Fxns__;
Ntypedef const struct xdc_runtime_System_Module_GateProxy_Fxns__* xdc_runtime_System_Module_GateProxy_Module;
Ntypedef struct xdc_runtime_System_Module_GateProxy_Params xdc_runtime_System_Module_GateProxy_Params;
Ntypedef struct xdc_runtime_IGateProvider___Object *xdc_runtime_System_Module_GateProxy_Handle;
N
N/*
N * ======== module xdc.runtime.Timestamp_SupportProxy ========
N */
N
Ntypedef struct xdc_runtime_Timestamp_SupportProxy_Fxns__ xdc_runtime_Timestamp_SupportProxy_Fxns__;
Ntypedef const struct xdc_runtime_Timestamp_SupportProxy_Fxns__* xdc_runtime_Timestamp_SupportProxy_Module;
N
N
N#endif /* xdc_runtime__ */ 
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* ModuleId */
Ntypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
N
N/* DiagsMask */
Ntypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
N
N/* Event */
Ntypedef xdc_Bits32 xdc_runtime_Types_Event;
N
N/* EventId */
Ntypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
N
N/* CordAddr__ */
Nstruct xdc_runtime_Types_CordAddr__;
N
N/* CordAddr */
Ntypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
N
N/* GateRef__ */
Nstruct xdc_runtime_Types_GateRef__;
N
N/* GateRef */
Ntypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
N
N/* RopeId */
Ntypedef xdc_Bits16 xdc_runtime_Types_RopeId;
N
N/* CreatePolicy */
Nenum xdc_runtime_Types_CreatePolicy {
N    xdc_runtime_Types_STATIC_POLICY,
N    xdc_runtime_Types_CREATE_POLICY,
N    xdc_runtime_Types_DELETE_POLICY
N};
Ntypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
N
N/* OutputPolicy */
Nenum xdc_runtime_Types_OutputPolicy {
N    xdc_runtime_Types_COMMON_FILE,
N    xdc_runtime_Types_SEPARATE_FILE,
N    xdc_runtime_Types_NO_FILE
N};
Ntypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
N
N/* Label */
Nstruct xdc_runtime_Types_Label {
N    xdc_Ptr handle;
N    xdc_runtime_Types_ModuleId modId;
N    xdc_String iname;
N    xdc_Bool named;
N};
N
N/* Site */
Nstruct xdc_runtime_Types_Site {
N    xdc_runtime_Types_ModuleId mod;
N    xdc_CString file;
N    xdc_Int line;
N};
N
N/* Timestamp64 */
Nstruct xdc_runtime_Types_Timestamp64 {
N    xdc_Bits32 hi;
N    xdc_Bits32 lo;
N};
N
N/* FreqHz */
Nstruct xdc_runtime_Types_FreqHz {
N    xdc_Bits32 hi;
N    xdc_Bits32 lo;
N};
N
N/* RegDesc */
Nstruct xdc_runtime_Types_RegDesc {
N    xdc_runtime_Types_RegDesc *next;
N    xdc_CString modName;
N    xdc_runtime_Types_ModuleId id;
N    xdc_runtime_Types_DiagsMask mask;
N};
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* LogEvent */
Ntypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
N
N/* LoggerFxn0 */
Ntypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
Xtypedef void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
N
N/* LoggerFxn1 */
Ntypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
Xtypedef void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
N
N/* LoggerFxn2 */
Ntypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
Xtypedef void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
N
N/* LoggerFxn4 */
Ntypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
Xtypedef void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
N
N/* LoggerFxn8 */
Ntypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
Xtypedef void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
N
N/* Vec */
Nstruct xdc_runtime_Types_Vec {
N    xdc_Int len;
N    xdc_Ptr arr;
N};
N
N/* Link */
Nstruct xdc_runtime_Types_Link {
N    xdc_runtime_Types_Link *next;
N    xdc_runtime_Types_Link *prev;
N};
N
N/* InstHdr */
Nstruct xdc_runtime_Types_InstHdr {
N    xdc_runtime_Types_Link link;
N};
N
N/* PrmsHdr */
Nstruct xdc_runtime_Types_PrmsHdr {
N    xdc_SizeT size;
N    xdc_Ptr self;
N    xdc_Ptr modFxns;
N    xdc_Ptr instPrms;
N};
N
N/* Base */
Nstruct xdc_runtime_Types_Base {
N    const xdc_runtime_Types_Base *base;
N};
N
N/* SysFxns2 */
Nstruct xdc_runtime_Types_SysFxns2 {
N    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
N    xdc_Void (*__delete)(xdc_Ptr arg1);
X    void (*__delete)(xdc_Ptr arg1);
N    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
N    xdc_runtime_Types_ModuleId __mid;
N};
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
N#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
N#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
N#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
Xextern  const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
N#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
N#else
N#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
N#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
N#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Types_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
Xextern  const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
N#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
N#else
N#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
Xextern  const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
N#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
N#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
Xextern  const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
N#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
N#else
N#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Types_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Nstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
N{
N    return xdc_runtime_Types_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
N{
N    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)0) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
X    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)0) {
N        *xdc_runtime_Types_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <xdc/runtime/Types__epilogue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types__epilogue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Types__epilogue__include
N#define xdc_runtime_Types__epilogue__include
N
N/*
N *  ======== Types__epilogue.h ========
N *  Hand crafted macros for Types.xdc
N */
N
N/*
N *  ======== xdc_runtime_Types_getEventId ========
N */
N#define xdc_runtime_Types_getEventId(evt) (\
N    (xdc_runtime_Types_RopeId)((evt) >> 16))
X#define xdc_runtime_Types_getEventId(evt) (    (xdc_runtime_Types_RopeId)((evt) >> 16))
N
N/*
N *  ======== xdc_runtime_Types_makeEvent ========
N */
N#define xdc_runtime_Types_makeEvent(id, site) (\
N    (xdc_runtime_Types_Event)((((Bits32) id) << 16U) | ((Bits32)(site) & 0x0000ffffU)))
X#define xdc_runtime_Types_makeEvent(id, site) (    (xdc_runtime_Types_Event)((((Bits32) id) << 16U) | ((Bits32)(site) & 0x0000ffffU)))
N
N/*
N *  ======== xdc_runtime_Types_getModuleId ========
N */
N#define xdc_runtime_Types_getModuleId(evt) ((evt) & 0x0000ffffU)
N
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 420 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 2
N
N#ifdef xdc_runtime_Types__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <ti/sysbios/BIOS__prologue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS__prologue.h" 1
N/*
N * Copyright (c) 2012, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <ti/sysbios/package/package.defs.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/package.defs.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N#ifndef ti_sysbios__
N#define ti_sysbios__
N
N
N/*
N * ======== module ti.sysbios.BIOS ========
N */
N
Ntypedef struct ti_sysbios_BIOS_intSize ti_sysbios_BIOS_intSize;
Ntypedef struct ti_sysbios_BIOS_Module_State ti_sysbios_BIOS_Module_State;
N
N/*
N * ======== module ti.sysbios.BIOS_RtsGateProxy ========
N */
N
Ntypedef struct ti_sysbios_BIOS_RtsGateProxy_Fxns__ ti_sysbios_BIOS_RtsGateProxy_Fxns__;
Ntypedef const ti_sysbios_BIOS_RtsGateProxy_Fxns__* ti_sysbios_BIOS_RtsGateProxy_Module;
Ntypedef struct ti_sysbios_BIOS_RtsGateProxy_Params ti_sysbios_BIOS_RtsGateProxy_Params;
Ntypedef struct xdc_runtime_IGateProvider___Object *ti_sysbios_BIOS_RtsGateProxy_Handle;
N
N
N#endif /* ti_sysbios__ */ 
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
N#define xdc_runtime_Error__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Error___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 2
N#include <xdc/runtime/Error__prologue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error__prologue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Error__prologue__include
N#define xdc_runtime_Error__prologue__include
N
N#include <xdc/runtime/Main.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Main__include
N#define xdc_runtime_Main__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Main__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Main___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
N#define xdc_runtime_IModule__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_IModule___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 52 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 2
N#include <xdc/runtime/IHeap.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IHeap__include
N#define xdc_runtime_IHeap__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IHeap__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_IHeap___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 53 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
N#define xdc_runtime_IInstance__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_IInstance___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 53 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct xdc_runtime_IInstance_Params {
N    size_t __size;
N    xdc_CString name;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_IInstance_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_IInstance_Module__BASE__CR
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
N#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
N#endif
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* create */
Nxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
X
N__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
Xextern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
N
N/* delete */
Nxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
X
N__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
Xextern void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
N
N/* Handle_to_Module */
Nstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Nstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
N{
N    return inst->__fxns;
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
N{
N    return inst->__fxns->__sysp->__label(inst, lab);
N}
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
N{
N    return mod->__sysp->__mid;
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 2
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 2
N#include <xdc/runtime/Memory.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Memory__include
N#define xdc_runtime_Memory__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Memory__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Memory___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 2
N#include <xdc/runtime/IHeap.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IHeap__include
S#define xdc_runtime_IHeap__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IHeap__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IHeap___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Memory.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IHeap_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IHeap_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Ptr (*alloc)(void* inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
S    xdc_Void (*free)(void* inst, xdc_Ptr block, xdc_SizeT size);
S    xdc_Bool (*isBlocking)(void* inst);
S    xdc_Void (*getStats)(void* inst, xdc_runtime_Memory_Stats* stats);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IHeap_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C;
S#else
S#define xdc_runtime_IHeap_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IHeap_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IHeap_create, "xdc_runtime_IHeap_create")
S__extern xdc_runtime_IHeap_Handle xdc_runtime_IHeap_create(xdc_runtime_IHeap_Module mod, const xdc_runtime_IHeap_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IHeap_delete, "xdc_runtime_IHeap_delete")
S__extern xdc_Void xdc_runtime_IHeap_delete(xdc_runtime_IHeap_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* alloc */
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc(xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb);
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc( xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb )
S{
S    return inst->__fxns->alloc((void*)inst, size, align, eb);
S}
S
S/* free */
Sstatic inline xdc_Void xdc_runtime_IHeap_free(xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_Void xdc_runtime_IHeap_free( xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size )
S{
S    inst->__fxns->free((void*)inst, block, size);
S}
S
S/* isBlocking */
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking( xdc_runtime_IHeap_Handle inst )
S{
S    return inst->__fxns->isBlocking((void*)inst);
S}
S
S/* getStats */
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats(xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats);
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats( xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats )
S{
S    inst->__fxns->getStats((void*)inst, stats);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* alloc_{FxnT,fxnP} */
Stypedef xdc_Ptr (*xdc_runtime_IHeap_alloc_FxnT)(xdc_Void *inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_alloc_FxnT)inst->__fxns->alloc;
S}
S
S/* free_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_free_FxnT)(xdc_Void *inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_free_FxnT)inst->__fxns->free;
S}
S
S/* isBlocking_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IHeap_isBlocking_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_isBlocking_FxnT)inst->__fxns->isBlocking;
S}
S
S/* getStats_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_getStats_FxnT)(xdc_Void *inst, xdc_runtime_Memory_Stats* stats);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_getStats_FxnT)inst->__fxns->getStats;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IHeap__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IHeap__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IHeap__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IHeap__localnames__done
S#define xdc_runtime_IHeap__localnames__done
S
S/* module prefix */
S#define IHeap_Instance xdc_runtime_IHeap_Instance
S#define IHeap_Handle xdc_runtime_IHeap_Handle
S#define IHeap_Module xdc_runtime_IHeap_Module
S#define IHeap_Params xdc_runtime_IHeap_Params
S#define IHeap_alloc xdc_runtime_IHeap_alloc
S#define IHeap_alloc_fxnP xdc_runtime_IHeap_alloc_fxnP
S#define IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_FxnT
S#define IHeap_free xdc_runtime_IHeap_free
S#define IHeap_free_fxnP xdc_runtime_IHeap_free_fxnP
S#define IHeap_free_FxnT xdc_runtime_IHeap_free_FxnT
S#define IHeap_isBlocking xdc_runtime_IHeap_isBlocking
S#define IHeap_isBlocking_fxnP xdc_runtime_IHeap_isBlocking_fxnP
S#define IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_FxnT
S#define IHeap_getStats xdc_runtime_IHeap_getStats
S#define IHeap_getStats_fxnP xdc_runtime_IHeap_getStats_fxnP
S#define IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_FxnT
S#define IHeap_Module_name xdc_runtime_IHeap_Module_name
S#define IHeap_create xdc_runtime_IHeap_create
S#define IHeap_delete xdc_runtime_IHeap_delete
S#define IHeap_Handle_label xdc_runtime_IHeap_Handle_label
S#define IHeap_Handle_to_Module xdc_runtime_IHeap_Handle_to_Module
S
S#endif /* xdc_runtime_IHeap__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 2
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 2
N#include <xdc/runtime/package/Memory_HeapProxy.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Memory_HeapProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Memory_HeapProxy__include
N#define xdc_runtime_Memory_HeapProxy__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Memory_HeapProxy__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Memory_HeapProxy___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Memory_HeapProxy.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Memory_HeapProxy.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IHeap.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IHeap__include
S#define xdc_runtime_IHeap__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IHeap__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IHeap___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Memory.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IHeap_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IHeap_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Ptr (*alloc)(void* inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
S    xdc_Void (*free)(void* inst, xdc_Ptr block, xdc_SizeT size);
S    xdc_Bool (*isBlocking)(void* inst);
S    xdc_Void (*getStats)(void* inst, xdc_runtime_Memory_Stats* stats);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IHeap_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C;
S#else
S#define xdc_runtime_IHeap_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IHeap_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IHeap_create, "xdc_runtime_IHeap_create")
S__extern xdc_runtime_IHeap_Handle xdc_runtime_IHeap_create(xdc_runtime_IHeap_Module mod, const xdc_runtime_IHeap_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IHeap_delete, "xdc_runtime_IHeap_delete")
S__extern xdc_Void xdc_runtime_IHeap_delete(xdc_runtime_IHeap_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* alloc */
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc(xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb);
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc( xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb )
S{
S    return inst->__fxns->alloc((void*)inst, size, align, eb);
S}
S
S/* free */
Sstatic inline xdc_Void xdc_runtime_IHeap_free(xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_Void xdc_runtime_IHeap_free( xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size )
S{
S    inst->__fxns->free((void*)inst, block, size);
S}
S
S/* isBlocking */
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking( xdc_runtime_IHeap_Handle inst )
S{
S    return inst->__fxns->isBlocking((void*)inst);
S}
S
S/* getStats */
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats(xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats);
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats( xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats )
S{
S    inst->__fxns->getStats((void*)inst, stats);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* alloc_{FxnT,fxnP} */
Stypedef xdc_Ptr (*xdc_runtime_IHeap_alloc_FxnT)(xdc_Void *inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_alloc_FxnT)inst->__fxns->alloc;
S}
S
S/* free_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_free_FxnT)(xdc_Void *inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_free_FxnT)inst->__fxns->free;
S}
S
S/* isBlocking_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IHeap_isBlocking_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_isBlocking_FxnT)inst->__fxns->isBlocking;
S}
S
S/* getStats_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_getStats_FxnT)(xdc_Void *inst, xdc_runtime_Memory_Stats* stats);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_getStats_FxnT)inst->__fxns->getStats;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IHeap__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IHeap__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IHeap__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IHeap__localnames__done
S#define xdc_runtime_IHeap__localnames__done
S
S/* module prefix */
S#define IHeap_Instance xdc_runtime_IHeap_Instance
S#define IHeap_Handle xdc_runtime_IHeap_Handle
S#define IHeap_Module xdc_runtime_IHeap_Module
S#define IHeap_Params xdc_runtime_IHeap_Params
S#define IHeap_alloc xdc_runtime_IHeap_alloc
S#define IHeap_alloc_fxnP xdc_runtime_IHeap_alloc_fxnP
S#define IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_FxnT
S#define IHeap_free xdc_runtime_IHeap_free
S#define IHeap_free_fxnP xdc_runtime_IHeap_free_fxnP
S#define IHeap_free_FxnT xdc_runtime_IHeap_free_FxnT
S#define IHeap_isBlocking xdc_runtime_IHeap_isBlocking
S#define IHeap_isBlocking_fxnP xdc_runtime_IHeap_isBlocking_fxnP
S#define IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_FxnT
S#define IHeap_getStats xdc_runtime_IHeap_getStats
S#define IHeap_getStats_fxnP xdc_runtime_IHeap_getStats_fxnP
S#define IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_FxnT
S#define IHeap_Module_name xdc_runtime_IHeap_Module_name
S#define IHeap_create xdc_runtime_IHeap_create
S#define IHeap_delete xdc_runtime_IHeap_delete
S#define IHeap_Handle_label xdc_runtime_IHeap_Handle_label
S#define IHeap_Handle_to_Module xdc_runtime_IHeap_Handle_to_Module
S
S#endif /* xdc_runtime_IHeap__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Memory_HeapProxy.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Memory_HeapProxy_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__diagsEnabled xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__diagsEnabled xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__CR
S#define xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__diagsEnabled (xdc_runtime_Memory_HeapProxy_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Memory_HeapProxy_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__diagsIncluded xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__diagsIncluded xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__CR
S#define xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__diagsIncluded (xdc_runtime_Memory_HeapProxy_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Memory_HeapProxy_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__diagsMask xdc_runtime_Memory_HeapProxy_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__diagsMask xdc_runtime_Memory_HeapProxy_Module__diagsMask__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__diagsMask__CR
S#define xdc_runtime_Memory_HeapProxy_Module__diagsMask__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__diagsMask (xdc_runtime_Memory_HeapProxy_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_HeapProxy_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__gateObj xdc_runtime_Memory_HeapProxy_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__gateObj xdc_runtime_Memory_HeapProxy_Module__gateObj__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__gateObj__CR
S#define xdc_runtime_Memory_HeapProxy_Module__gateObj__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__gateObj (xdc_runtime_Memory_HeapProxy_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_HeapProxy_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__gatePrms xdc_runtime_Memory_HeapProxy_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__gatePrms xdc_runtime_Memory_HeapProxy_Module__gatePrms__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__gatePrms__CR
S#define xdc_runtime_Memory_HeapProxy_Module__gatePrms__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__gatePrms (xdc_runtime_Memory_HeapProxy_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Memory_HeapProxy_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__id xdc_runtime_Memory_HeapProxy_Module__id__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__id xdc_runtime_Memory_HeapProxy_Module__id__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__id__CR
S#define xdc_runtime_Memory_HeapProxy_Module__id__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__id*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__id__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__id (xdc_runtime_Memory_HeapProxy_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Memory_HeapProxy_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerDefined xdc_runtime_Memory_HeapProxy_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerDefined xdc_runtime_Memory_HeapProxy_Module__loggerDefined__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerDefined__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerDefined__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerDefined (xdc_runtime_Memory_HeapProxy_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_HeapProxy_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerObj xdc_runtime_Memory_HeapProxy_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerObj xdc_runtime_Memory_HeapProxy_Module__loggerObj__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerObj__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerObj__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerObj (xdc_runtime_Memory_HeapProxy_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn0 xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn0 xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn0 (xdc_runtime_Memory_HeapProxy_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn1 xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn1 xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn1 (xdc_runtime_Memory_HeapProxy_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn2 xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn2 xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn2 (xdc_runtime_Memory_HeapProxy_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn4 xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn4 xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn4 (xdc_runtime_Memory_HeapProxy_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn8 xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn8 xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__CR
S#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__C (*((CT__xdc_runtime_Memory_HeapProxy_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Module__loggerFxn8 (xdc_runtime_Memory_HeapProxy_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Memory_HeapProxy_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Object__count xdc_runtime_Memory_HeapProxy_Object__count__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Object__count xdc_runtime_Memory_HeapProxy_Object__count__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Object__count__CR
S#define xdc_runtime_Memory_HeapProxy_Object__count__C (*((CT__xdc_runtime_Memory_HeapProxy_Object__count*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Object__count__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Object__count (xdc_runtime_Memory_HeapProxy_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Memory_HeapProxy_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Object__heap xdc_runtime_Memory_HeapProxy_Object__heap__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Object__heap xdc_runtime_Memory_HeapProxy_Object__heap__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Object__heap__CR
S#define xdc_runtime_Memory_HeapProxy_Object__heap__C (*((CT__xdc_runtime_Memory_HeapProxy_Object__heap*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Object__heap (xdc_runtime_Memory_HeapProxy_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Memory_HeapProxy_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Object__sizeof xdc_runtime_Memory_HeapProxy_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Object__sizeof xdc_runtime_Memory_HeapProxy_Object__sizeof__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Object__sizeof__CR
S#define xdc_runtime_Memory_HeapProxy_Object__sizeof__C (*((CT__xdc_runtime_Memory_HeapProxy_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Object__sizeof (xdc_runtime_Memory_HeapProxy_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_HeapProxy_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Memory_HeapProxy_Object__table xdc_runtime_Memory_HeapProxy_Object__table__C;
Xextern  const CT__xdc_runtime_Memory_HeapProxy_Object__table xdc_runtime_Memory_HeapProxy_Object__table__C;
N#ifdef xdc_runtime_Memory_HeapProxy_Object__table__CR
S#define xdc_runtime_Memory_HeapProxy_Object__table__C (*((CT__xdc_runtime_Memory_HeapProxy_Object__table*)(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Object__table__C_offset)))
N#else
N#define xdc_runtime_Memory_HeapProxy_Object__table (xdc_runtime_Memory_HeapProxy_Object__table__C)
N#endif
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct xdc_runtime_Memory_HeapProxy_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct xdc_runtime_Memory_HeapProxy_Struct {
N    const xdc_runtime_Memory_HeapProxy_Fxns__ *__fxns;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_Memory_HeapProxy_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_Ptr (*alloc)(xdc_runtime_Memory_HeapProxy_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
N    xdc_Void (*free)(xdc_runtime_Memory_HeapProxy_Handle inst, xdc_Ptr block, xdc_SizeT size);
X    void (*free)(xdc_runtime_Memory_HeapProxy_Handle inst, xdc_Ptr block, xdc_SizeT size);
N    xdc_Bool (*isBlocking)(xdc_runtime_Memory_HeapProxy_Handle inst);
N    xdc_Void (*getStats)(xdc_runtime_Memory_HeapProxy_Handle inst, xdc_runtime_Memory_Stats* stats);
X    void (*getStats)(xdc_runtime_Memory_HeapProxy_Handle inst, xdc_runtime_Memory_Stats* stats);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_Memory_HeapProxy_Module__FXNS__CR
N
N/* Module__FXNS__C */
N__extern const xdc_runtime_Memory_HeapProxy_Fxns__ xdc_runtime_Memory_HeapProxy_Module__FXNS__C;
Xextern const xdc_runtime_Memory_HeapProxy_Fxns__ xdc_runtime_Memory_HeapProxy_Module__FXNS__C;
N#else
S#define xdc_runtime_Memory_HeapProxy_Module__FXNS__C (*(xdcRomConstPtr + xdc_runtime_Memory_HeapProxy_Module__FXNS__C_offset))
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Memory_HeapProxy_Module_startup( state ) (-1)
N
N/* create */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_create, "xdc_runtime_Memory_HeapProxy_create")
X
N__extern xdc_runtime_Memory_HeapProxy_Handle xdc_runtime_Memory_HeapProxy_create( const xdc_runtime_Memory_HeapProxy_Params *prms, xdc_runtime_Error_Block *eb);
Xextern xdc_runtime_Memory_HeapProxy_Handle xdc_runtime_Memory_HeapProxy_create( const xdc_runtime_Memory_HeapProxy_Params *prms, xdc_runtime_Error_Block *eb);
N
N/* delete */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_delete, "xdc_runtime_Memory_HeapProxy_delete")
X
N__extern void xdc_runtime_Memory_HeapProxy_delete(xdc_runtime_Memory_HeapProxy_Handle *instp);
Xextern void xdc_runtime_Memory_HeapProxy_delete(xdc_runtime_Memory_HeapProxy_Handle *instp);
N
N/* Handle__label__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Handle__label__S, "xdc_runtime_Memory_HeapProxy_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *xdc_runtime_Memory_HeapProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *xdc_runtime_Memory_HeapProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Module__startupDone__S, "xdc_runtime_Memory_HeapProxy_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Memory_HeapProxy_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Memory_HeapProxy_Module__startupDone__S( void );
N
N/* Object__get__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Object__get__S, "xdc_runtime_Memory_HeapProxy_Object__get__S")
X
N__extern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Object__first__S, "xdc_runtime_Memory_HeapProxy_Object__first__S")
X
N__extern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__first__S( void );
Xextern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Object__next__S, "xdc_runtime_Memory_HeapProxy_Object__next__S")
X
N__extern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Params__init__S, "xdc_runtime_Memory_HeapProxy_Params__init__S")
X
N__extern xdc_Void xdc_runtime_Memory_HeapProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void xdc_runtime_Memory_HeapProxy_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* Proxy__abstract__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Proxy__abstract__S, "xdc_runtime_Memory_HeapProxy_Proxy__abstract__S")
X
N__extern xdc_Bool xdc_runtime_Memory_HeapProxy_Proxy__abstract__S( void );
Xextern xdc_Bool xdc_runtime_Memory_HeapProxy_Proxy__abstract__S( void );
N
N/* Proxy__delegate__S */
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_Proxy__delegate__S, "xdc_runtime_Memory_HeapProxy_Proxy__delegate__S")
X
N__extern xdc_CPtr xdc_runtime_Memory_HeapProxy_Proxy__delegate__S( void );
Xextern xdc_CPtr xdc_runtime_Memory_HeapProxy_Proxy__delegate__S( void );
N
N/* alloc__E */
N#define xdc_runtime_Memory_HeapProxy_alloc xdc_runtime_Memory_HeapProxy_alloc__E
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_alloc__E, "xdc_runtime_Memory_HeapProxy_alloc")
X
N__extern xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
Xextern xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
N
N/* free__E */
N#define xdc_runtime_Memory_HeapProxy_free xdc_runtime_Memory_HeapProxy_free__E
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_free__E, "xdc_runtime_Memory_HeapProxy_free")
X
N__extern xdc_Void xdc_runtime_Memory_HeapProxy_free__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_Ptr block, xdc_SizeT size );
Xextern void xdc_runtime_Memory_HeapProxy_free__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_Ptr block, xdc_SizeT size );
N
N/* isBlocking__E */
N#define xdc_runtime_Memory_HeapProxy_isBlocking xdc_runtime_Memory_HeapProxy_isBlocking__E
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_isBlocking__E, "xdc_runtime_Memory_HeapProxy_isBlocking")
X
N__extern xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E( xdc_runtime_Memory_HeapProxy_Handle __inst );
Xextern xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E( xdc_runtime_Memory_HeapProxy_Handle __inst );
N
N/* getStats__E */
N#define xdc_runtime_Memory_HeapProxy_getStats xdc_runtime_Memory_HeapProxy_getStats__E
Nxdc__CODESECT(xdc_runtime_Memory_HeapProxy_getStats__E, "xdc_runtime_Memory_HeapProxy_getStats")
X
N__extern xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_runtime_Memory_Stats *stats );
Xextern void xdc_runtime_Memory_HeapProxy_getStats__E( xdc_runtime_Memory_HeapProxy_Handle __inst, xdc_runtime_Memory_Stats *stats );
N
N
N/*
N * ======== CONVERTORS ========
N */
N
N/* Module_upCast */
Nstatic inline xdc_runtime_IHeap_Module xdc_runtime_Memory_HeapProxy_Module_upCast(void);
Nstatic inline xdc_runtime_IHeap_Module xdc_runtime_Memory_HeapProxy_Module_upCast(void)
N{
N    return (xdc_runtime_IHeap_Module)xdc_runtime_Memory_HeapProxy_Proxy__delegate__S();
N}
N
N/* Module_to_xdc_runtime_IHeap */
N#define xdc_runtime_Memory_HeapProxy_Module_to_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Module_upCast
N
N/* Handle_upCast */
Nstatic inline xdc_runtime_IHeap_Handle xdc_runtime_Memory_HeapProxy_Handle_upCast(xdc_runtime_Memory_HeapProxy_Handle i);
Nstatic inline xdc_runtime_IHeap_Handle xdc_runtime_Memory_HeapProxy_Handle_upCast(xdc_runtime_Memory_HeapProxy_Handle i)
N{
N    return (xdc_runtime_IHeap_Handle)i;
N}
N
N/* Handle_to_xdc_runtime_IHeap */
N#define xdc_runtime_Memory_HeapProxy_Handle_to_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Handle_upCast
N
N/* Handle_downCast */
Nstatic inline xdc_runtime_Memory_HeapProxy_Handle xdc_runtime_Memory_HeapProxy_Handle_downCast(xdc_runtime_IHeap_Handle i);
Nstatic inline xdc_runtime_Memory_HeapProxy_Handle xdc_runtime_Memory_HeapProxy_Handle_downCast(xdc_runtime_IHeap_Handle i)
N{
N    xdc_runtime_IHeap_Handle i2 = (xdc_runtime_IHeap_Handle)i;
N    if (xdc_runtime_Memory_HeapProxy_Proxy__abstract__S()) {
N        return (xdc_runtime_Memory_HeapProxy_Handle)i;
N    }
N    return ((const void*)i2->__fxns == (const void*)xdc_runtime_Memory_HeapProxy_Proxy__delegate__S()) ? (xdc_runtime_Memory_HeapProxy_Handle)i : (xdc_runtime_Memory_HeapProxy_Handle)NULL;
X    return ((const void*)i2->__fxns == (const void*)xdc_runtime_Memory_HeapProxy_Proxy__delegate__S()) ? (xdc_runtime_Memory_HeapProxy_Handle)i : (xdc_runtime_Memory_HeapProxy_Handle)0;
N}
N
N/* Handle_from_xdc_runtime_IHeap */
N#define xdc_runtime_Memory_HeapProxy_Handle_from_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Handle_downCast
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Memory_HeapProxy_Module_startupDone() xdc_runtime_Memory_HeapProxy_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Memory_HeapProxy_Object_heap() xdc_runtime_Memory_HeapProxy_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Memory_HeapProxy_Module_heap() xdc_runtime_Memory_HeapProxy_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Memory_HeapProxy_Module__id xdc_runtime_Memory_HeapProxy_Module_id(void);
Nstatic inline CT__xdc_runtime_Memory_HeapProxy_Module__id xdc_runtime_Memory_HeapProxy_Module_id( void ) 
N{
N    return xdc_runtime_Memory_HeapProxy_Module__id__C;
N}
N
N/* Proxy_abstract */
N#define xdc_runtime_Memory_HeapProxy_Proxy_abstract() xdc_runtime_Memory_HeapProxy_Proxy__abstract__S()
N
N/* Proxy_delegate */
N#define xdc_runtime_Memory_HeapProxy_Proxy_delegate() ((xdc_runtime_IHeap_Module)xdc_runtime_Memory_HeapProxy_Proxy__delegate__S())
N
N/* Params_init */
Nstatic inline void xdc_runtime_Memory_HeapProxy_Params_init(xdc_runtime_Memory_HeapProxy_Params *prms);
Nstatic inline void xdc_runtime_Memory_HeapProxy_Params_init( xdc_runtime_Memory_HeapProxy_Params *prms ) 
N{
N    if (prms != NULL) {
X    if (prms != 0) {
N        xdc_runtime_Memory_HeapProxy_Params__init__S(prms, NULL, sizeof(xdc_runtime_Memory_HeapProxy_Params), sizeof(xdc_runtime_IInstance_Params));
X        xdc_runtime_Memory_HeapProxy_Params__init__S(prms, 0, sizeof(xdc_runtime_Memory_HeapProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void xdc_runtime_Memory_HeapProxy_Params_copy(xdc_runtime_Memory_HeapProxy_Params *dst, const xdc_runtime_Memory_HeapProxy_Params *src);
Nstatic inline void xdc_runtime_Memory_HeapProxy_Params_copy(xdc_runtime_Memory_HeapProxy_Params *dst, const xdc_runtime_Memory_HeapProxy_Params *src) 
N{
N    if (dst != NULL) {
X    if (dst != 0) {
N        xdc_runtime_Memory_HeapProxy_Params__init__S(dst, (const void *)src, sizeof(xdc_runtime_Memory_HeapProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_Memory_HeapProxy__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Memory_HeapProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Memory_HeapProxy__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Memory_HeapProxy__localnames__done
S#define xdc_runtime_Memory_HeapProxy__localnames__done
S
S/* module prefix */
S#define Memory_HeapProxy_Instance xdc_runtime_Memory_HeapProxy_Instance
S#define Memory_HeapProxy_Handle xdc_runtime_Memory_HeapProxy_Handle
S#define Memory_HeapProxy_Module xdc_runtime_Memory_HeapProxy_Module
S#define Memory_HeapProxy_Object xdc_runtime_Memory_HeapProxy_Object
S#define Memory_HeapProxy_Struct xdc_runtime_Memory_HeapProxy_Struct
S#define Memory_HeapProxy_Params xdc_runtime_Memory_HeapProxy_Params
S#define Memory_HeapProxy_alloc xdc_runtime_Memory_HeapProxy_alloc
S#define Memory_HeapProxy_free xdc_runtime_Memory_HeapProxy_free
S#define Memory_HeapProxy_isBlocking xdc_runtime_Memory_HeapProxy_isBlocking
S#define Memory_HeapProxy_getStats xdc_runtime_Memory_HeapProxy_getStats
S#define Memory_HeapProxy_Module_name xdc_runtime_Memory_HeapProxy_Module_name
S#define Memory_HeapProxy_Module_id xdc_runtime_Memory_HeapProxy_Module_id
S#define Memory_HeapProxy_Module_startup xdc_runtime_Memory_HeapProxy_Module_startup
S#define Memory_HeapProxy_Module_startupDone xdc_runtime_Memory_HeapProxy_Module_startupDone
S#define Memory_HeapProxy_Module_hasMask xdc_runtime_Memory_HeapProxy_Module_hasMask
S#define Memory_HeapProxy_Module_getMask xdc_runtime_Memory_HeapProxy_Module_getMask
S#define Memory_HeapProxy_Module_setMask xdc_runtime_Memory_HeapProxy_Module_setMask
S#define Memory_HeapProxy_Object_heap xdc_runtime_Memory_HeapProxy_Object_heap
S#define Memory_HeapProxy_Module_heap xdc_runtime_Memory_HeapProxy_Module_heap
S#define Memory_HeapProxy_construct xdc_runtime_Memory_HeapProxy_construct
S#define Memory_HeapProxy_create xdc_runtime_Memory_HeapProxy_create
S#define Memory_HeapProxy_handle xdc_runtime_Memory_HeapProxy_handle
S#define Memory_HeapProxy_struct xdc_runtime_Memory_HeapProxy_struct
S#define Memory_HeapProxy_Handle_label xdc_runtime_Memory_HeapProxy_Handle_label
S#define Memory_HeapProxy_Handle_name xdc_runtime_Memory_HeapProxy_Handle_name
S#define Memory_HeapProxy_Instance_init xdc_runtime_Memory_HeapProxy_Instance_init
S#define Memory_HeapProxy_Object_count xdc_runtime_Memory_HeapProxy_Object_count
S#define Memory_HeapProxy_Object_get xdc_runtime_Memory_HeapProxy_Object_get
S#define Memory_HeapProxy_Object_first xdc_runtime_Memory_HeapProxy_Object_first
S#define Memory_HeapProxy_Object_next xdc_runtime_Memory_HeapProxy_Object_next
S#define Memory_HeapProxy_Object_sizeof xdc_runtime_Memory_HeapProxy_Object_sizeof
S#define Memory_HeapProxy_Params_copy xdc_runtime_Memory_HeapProxy_Params_copy
S#define Memory_HeapProxy_Params_init xdc_runtime_Memory_HeapProxy_Params_init
S#define Memory_HeapProxy_Instance_State xdc_runtime_Memory_HeapProxy_Instance_State
S#define Memory_HeapProxy_Proxy_abstract xdc_runtime_Memory_HeapProxy_Proxy_abstract
S#define Memory_HeapProxy_Proxy_delegate xdc_runtime_Memory_HeapProxy_Proxy_delegate
S#define Memory_HeapProxy_delete xdc_runtime_Memory_HeapProxy_delete
S#define Memory_HeapProxy_destruct xdc_runtime_Memory_HeapProxy_destruct
S#define Memory_HeapProxy_Module_upCast xdc_runtime_Memory_HeapProxy_Module_upCast
S#define Memory_HeapProxy_Module_to_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Module_to_xdc_runtime_IHeap
S#define Memory_HeapProxy_Handle_upCast xdc_runtime_Memory_HeapProxy_Handle_upCast
S#define Memory_HeapProxy_Handle_to_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Handle_to_xdc_runtime_IHeap
S#define Memory_HeapProxy_Handle_downCast xdc_runtime_Memory_HeapProxy_Handle_downCast
S#define Memory_HeapProxy_Handle_from_xdc_runtime_IHeap xdc_runtime_Memory_HeapProxy_Handle_from_xdc_runtime_IHeap
S
S#endif /* xdc_runtime_Memory_HeapProxy__localnames__done */
N#endif
L 60 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Memory.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Q_BLOCKING */
N#define xdc_runtime_Memory_Q_BLOCKING (1)
N
N/* Size */
Ntypedef xdc_UArg xdc_runtime_Memory_Size;
N
N/* Stats */
Nstruct xdc_runtime_Memory_Stats {
N    xdc_runtime_Memory_Size totalSize;
N    xdc_runtime_Memory_Size totalFreeSize;
N    xdc_runtime_Memory_Size largestFreeSize;
N};
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Memory_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__diagsEnabled xdc_runtime_Memory_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Memory_Module__diagsEnabled xdc_runtime_Memory_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Memory_Module__diagsEnabled__CR
S#define xdc_runtime_Memory_Module__diagsEnabled__C (*((CT__xdc_runtime_Memory_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Memory_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__diagsEnabled (xdc_runtime_Memory_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Memory_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__diagsIncluded xdc_runtime_Memory_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Memory_Module__diagsIncluded xdc_runtime_Memory_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Memory_Module__diagsIncluded__CR
S#define xdc_runtime_Memory_Module__diagsIncluded__C (*((CT__xdc_runtime_Memory_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Memory_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__diagsIncluded (xdc_runtime_Memory_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Memory_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__diagsMask xdc_runtime_Memory_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Memory_Module__diagsMask xdc_runtime_Memory_Module__diagsMask__C;
N#ifdef xdc_runtime_Memory_Module__diagsMask__CR
S#define xdc_runtime_Memory_Module__diagsMask__C (*((CT__xdc_runtime_Memory_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Memory_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__diagsMask (xdc_runtime_Memory_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__gateObj xdc_runtime_Memory_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Memory_Module__gateObj xdc_runtime_Memory_Module__gateObj__C;
N#ifdef xdc_runtime_Memory_Module__gateObj__CR
S#define xdc_runtime_Memory_Module__gateObj__C (*((CT__xdc_runtime_Memory_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Memory_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__gateObj (xdc_runtime_Memory_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__gatePrms xdc_runtime_Memory_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Memory_Module__gatePrms xdc_runtime_Memory_Module__gatePrms__C;
N#ifdef xdc_runtime_Memory_Module__gatePrms__CR
S#define xdc_runtime_Memory_Module__gatePrms__C (*((CT__xdc_runtime_Memory_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Memory_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__gatePrms (xdc_runtime_Memory_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Memory_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__id xdc_runtime_Memory_Module__id__C;
Xextern  const CT__xdc_runtime_Memory_Module__id xdc_runtime_Memory_Module__id__C;
N#ifdef xdc_runtime_Memory_Module__id__CR
S#define xdc_runtime_Memory_Module__id__C (*((CT__xdc_runtime_Memory_Module__id*)(xdcRomConstPtr + xdc_runtime_Memory_Module__id__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__id (xdc_runtime_Memory_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Memory_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerDefined xdc_runtime_Memory_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerDefined xdc_runtime_Memory_Module__loggerDefined__C;
N#ifdef xdc_runtime_Memory_Module__loggerDefined__CR
S#define xdc_runtime_Memory_Module__loggerDefined__C (*((CT__xdc_runtime_Memory_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerDefined (xdc_runtime_Memory_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerObj xdc_runtime_Memory_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerObj xdc_runtime_Memory_Module__loggerObj__C;
N#ifdef xdc_runtime_Memory_Module__loggerObj__CR
S#define xdc_runtime_Memory_Module__loggerObj__C (*((CT__xdc_runtime_Memory_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerObj (xdc_runtime_Memory_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Memory_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerFxn0 xdc_runtime_Memory_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerFxn0 xdc_runtime_Memory_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Memory_Module__loggerFxn0__CR
S#define xdc_runtime_Memory_Module__loggerFxn0__C (*((CT__xdc_runtime_Memory_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerFxn0 (xdc_runtime_Memory_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Memory_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerFxn1 xdc_runtime_Memory_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerFxn1 xdc_runtime_Memory_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Memory_Module__loggerFxn1__CR
S#define xdc_runtime_Memory_Module__loggerFxn1__C (*((CT__xdc_runtime_Memory_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerFxn1 (xdc_runtime_Memory_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Memory_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerFxn2 xdc_runtime_Memory_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerFxn2 xdc_runtime_Memory_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Memory_Module__loggerFxn2__CR
S#define xdc_runtime_Memory_Module__loggerFxn2__C (*((CT__xdc_runtime_Memory_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerFxn2 (xdc_runtime_Memory_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Memory_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerFxn4 xdc_runtime_Memory_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerFxn4 xdc_runtime_Memory_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Memory_Module__loggerFxn4__CR
S#define xdc_runtime_Memory_Module__loggerFxn4__C (*((CT__xdc_runtime_Memory_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerFxn4 (xdc_runtime_Memory_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Memory_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Memory_Module__loggerFxn8 xdc_runtime_Memory_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Memory_Module__loggerFxn8 xdc_runtime_Memory_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Memory_Module__loggerFxn8__CR
S#define xdc_runtime_Memory_Module__loggerFxn8__C (*((CT__xdc_runtime_Memory_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Memory_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Memory_Module__loggerFxn8 (xdc_runtime_Memory_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Memory_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Memory_Object__count xdc_runtime_Memory_Object__count__C;
Xextern  const CT__xdc_runtime_Memory_Object__count xdc_runtime_Memory_Object__count__C;
N#ifdef xdc_runtime_Memory_Object__count__CR
S#define xdc_runtime_Memory_Object__count__C (*((CT__xdc_runtime_Memory_Object__count*)(xdcRomConstPtr + xdc_runtime_Memory_Object__count__C_offset)))
N#else
N#define xdc_runtime_Memory_Object__count (xdc_runtime_Memory_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Memory_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Memory_Object__heap xdc_runtime_Memory_Object__heap__C;
Xextern  const CT__xdc_runtime_Memory_Object__heap xdc_runtime_Memory_Object__heap__C;
N#ifdef xdc_runtime_Memory_Object__heap__CR
S#define xdc_runtime_Memory_Object__heap__C (*((CT__xdc_runtime_Memory_Object__heap*)(xdcRomConstPtr + xdc_runtime_Memory_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Memory_Object__heap (xdc_runtime_Memory_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Memory_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Memory_Object__sizeof xdc_runtime_Memory_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Memory_Object__sizeof xdc_runtime_Memory_Object__sizeof__C;
N#ifdef xdc_runtime_Memory_Object__sizeof__CR
S#define xdc_runtime_Memory_Object__sizeof__C (*((CT__xdc_runtime_Memory_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Memory_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Memory_Object__sizeof (xdc_runtime_Memory_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Memory_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Memory_Object__table xdc_runtime_Memory_Object__table__C;
Xextern  const CT__xdc_runtime_Memory_Object__table xdc_runtime_Memory_Object__table__C;
N#ifdef xdc_runtime_Memory_Object__table__CR
S#define xdc_runtime_Memory_Object__table__C (*((CT__xdc_runtime_Memory_Object__table*)(xdcRomConstPtr + xdc_runtime_Memory_Object__table__C_offset)))
N#else
N#define xdc_runtime_Memory_Object__table (xdc_runtime_Memory_Object__table__C)
N#endif
N
N/* defaultHeapInstance */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Memory_defaultHeapInstance;
N__extern __FAR__ const CT__xdc_runtime_Memory_defaultHeapInstance xdc_runtime_Memory_defaultHeapInstance__C;
Xextern  const CT__xdc_runtime_Memory_defaultHeapInstance xdc_runtime_Memory_defaultHeapInstance__C;
N#ifdef xdc_runtime_Memory_defaultHeapInstance__CR
S#define xdc_runtime_Memory_defaultHeapInstance (*((CT__xdc_runtime_Memory_defaultHeapInstance*)(xdcRomConstPtr + xdc_runtime_Memory_defaultHeapInstance__C_offset)))
N#else
N#define xdc_runtime_Memory_defaultHeapInstance (xdc_runtime_Memory_defaultHeapInstance__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Memory_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Memory_Module__startupDone__S, "xdc_runtime_Memory_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Memory_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Memory_Module__startupDone__S( void );
N
N/* alloc__E */
N#define xdc_runtime_Memory_alloc xdc_runtime_Memory_alloc__E
Nxdc__CODESECT(xdc_runtime_Memory_alloc__E, "xdc_runtime_Memory_alloc")
X
N__extern xdc_Ptr xdc_runtime_Memory_alloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
Xextern xdc_Ptr xdc_runtime_Memory_alloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
N
N/* calloc__E */
N#define xdc_runtime_Memory_calloc xdc_runtime_Memory_calloc__E
Nxdc__CODESECT(xdc_runtime_Memory_calloc__E, "xdc_runtime_Memory_calloc")
X
N__extern xdc_Ptr xdc_runtime_Memory_calloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
Xextern xdc_Ptr xdc_runtime_Memory_calloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb );
N
N/* free__E */
N#define xdc_runtime_Memory_free xdc_runtime_Memory_free__E
Nxdc__CODESECT(xdc_runtime_Memory_free__E, "xdc_runtime_Memory_free")
X
N__extern xdc_Void xdc_runtime_Memory_free__E( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size );
Xextern void xdc_runtime_Memory_free__E( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size );
N
N/* getStats__E */
N#define xdc_runtime_Memory_getStats xdc_runtime_Memory_getStats__E
Nxdc__CODESECT(xdc_runtime_Memory_getStats__E, "xdc_runtime_Memory_getStats")
X
N__extern xdc_Void xdc_runtime_Memory_getStats__E( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats *stats );
Xextern void xdc_runtime_Memory_getStats__E( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats *stats );
N
N/* query__E */
N#define xdc_runtime_Memory_query xdc_runtime_Memory_query__E
Nxdc__CODESECT(xdc_runtime_Memory_query__E, "xdc_runtime_Memory_query")
X
N__extern xdc_Bool xdc_runtime_Memory_query__E( xdc_runtime_IHeap_Handle heap, xdc_Int qual );
Xextern xdc_Bool xdc_runtime_Memory_query__E( xdc_runtime_IHeap_Handle heap, xdc_Int qual );
N
N/* getMaxDefaultTypeAlign__E */
N#define xdc_runtime_Memory_getMaxDefaultTypeAlign xdc_runtime_Memory_getMaxDefaultTypeAlign__E
Nxdc__CODESECT(xdc_runtime_Memory_getMaxDefaultTypeAlign__E, "xdc_runtime_Memory_getMaxDefaultTypeAlign")
X
N__extern xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__E( void );
Xextern xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__E( void );
N
N/* valloc__E */
N#define xdc_runtime_Memory_valloc xdc_runtime_Memory_valloc__E
Nxdc__CODESECT(xdc_runtime_Memory_valloc__E, "xdc_runtime_Memory_valloc")
X
N__extern xdc_Ptr xdc_runtime_Memory_valloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block *eb );
Xextern xdc_Ptr xdc_runtime_Memory_valloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block *eb );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Memory_Module_startupDone() xdc_runtime_Memory_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Memory_Object_heap() xdc_runtime_Memory_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Memory_Module_heap() xdc_runtime_Memory_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Memory_Module__id xdc_runtime_Memory_Module_id(void);
Nstatic inline CT__xdc_runtime_Memory_Module__id xdc_runtime_Memory_Module_id( void ) 
N{
N    return xdc_runtime_Memory_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Memory_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Memory_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Memory_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Memory_Module_getMask(void)
N{
N    return (xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)NULL) ? *xdc_runtime_Memory_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)0) ? *xdc_runtime_Memory_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Memory_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Memory_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Memory_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Memory_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)NULL) {
X    if (xdc_runtime_Memory_Module__diagsMask__C != (CT__xdc_runtime_Memory_Module__diagsMask)0) {
N        *xdc_runtime_Memory_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_Memory__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Memory__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Memory__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Memory__include_state
S#define xdc_runtime_Memory__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Memory_Module_State {
S    xdc_SizeT maxDefaultTypeAlign;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Memory_Module__state__VR
Sextern struct xdc_runtime_Memory_Module_State__ xdc_runtime_Memory_Module__state__V;
S#else
S#define xdc_runtime_Memory_Module__state__V (*((struct xdc_runtime_Memory_Module_State__*)(xdcRomStatePtr + xdc_runtime_Memory_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Memory__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Memory__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Memory__localnames__done
S#define xdc_runtime_Memory__localnames__done
S
S/* module prefix */
S#define Memory_Q_BLOCKING xdc_runtime_Memory_Q_BLOCKING
S#define Memory_Size xdc_runtime_Memory_Size
S#define Memory_Stats xdc_runtime_Memory_Stats
S#define Memory_Module_State xdc_runtime_Memory_Module_State
S#define Memory_defaultHeapInstance xdc_runtime_Memory_defaultHeapInstance
S#define Memory_alloc xdc_runtime_Memory_alloc
S#define Memory_calloc xdc_runtime_Memory_calloc
S#define Memory_free xdc_runtime_Memory_free
S#define Memory_getStats xdc_runtime_Memory_getStats
S#define Memory_query xdc_runtime_Memory_query
S#define Memory_getMaxDefaultTypeAlign xdc_runtime_Memory_getMaxDefaultTypeAlign
S#define Memory_valloc xdc_runtime_Memory_valloc
S#define Memory_Module_name xdc_runtime_Memory_Module_name
S#define Memory_Module_id xdc_runtime_Memory_Module_id
S#define Memory_Module_startup xdc_runtime_Memory_Module_startup
S#define Memory_Module_startupDone xdc_runtime_Memory_Module_startupDone
S#define Memory_Module_hasMask xdc_runtime_Memory_Module_hasMask
S#define Memory_Module_getMask xdc_runtime_Memory_Module_getMask
S#define Memory_Module_setMask xdc_runtime_Memory_Module_setMask
S#define Memory_Object_heap xdc_runtime_Memory_Object_heap
S#define Memory_Module_heap xdc_runtime_Memory_Module_heap
S
S/* proxies */
S#include <xdc/runtime/package/Memory_HeapProxy.h>
S
S#endif /* xdc_runtime_Memory__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct xdc_runtime_IHeap_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_IHeap_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_Ptr (*alloc)(void* inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
N    xdc_Void (*free)(void* inst, xdc_Ptr block, xdc_SizeT size);
X    void (*free)(void* inst, xdc_Ptr block, xdc_SizeT size);
N    xdc_Bool (*isBlocking)(void* inst);
N    xdc_Void (*getStats)(void* inst, xdc_runtime_Memory_Stats* stats);
X    void (*getStats)(void* inst, xdc_runtime_Memory_Stats* stats);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_IHeap_Module__BASE__CR
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C;
N#else
S#define xdc_runtime_IHeap_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IHeap_Interface__BASE__C_offset)))
N#endif
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* create */
Nxdc__CODESECT(xdc_runtime_IHeap_create, "xdc_runtime_IHeap_create")
X
N__extern xdc_runtime_IHeap_Handle xdc_runtime_IHeap_create(xdc_runtime_IHeap_Module mod, const xdc_runtime_IHeap_Params *prms, xdc_runtime_Error_Block *eb);
Xextern xdc_runtime_IHeap_Handle xdc_runtime_IHeap_create(xdc_runtime_IHeap_Module mod, const xdc_runtime_IHeap_Params *prms, xdc_runtime_Error_Block *eb);
N
N/* delete */
Nxdc__CODESECT(xdc_runtime_IHeap_delete, "xdc_runtime_IHeap_delete")
X
N__extern xdc_Void xdc_runtime_IHeap_delete(xdc_runtime_IHeap_Handle *inst);
Xextern void xdc_runtime_IHeap_delete(xdc_runtime_IHeap_Handle *inst);
N
N/* Handle_to_Module */
Nstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst)
N{
N    return inst->__fxns;
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab);
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab)
N{
N    return inst->__fxns->__sysp->__label(inst, lab);
N}
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod);
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod)
N{
N    return mod->__sysp->__mid;
N}
N
N/* alloc */
Nstatic inline xdc_Ptr xdc_runtime_IHeap_alloc(xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb);
Nstatic inline xdc_Ptr xdc_runtime_IHeap_alloc( xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb )
N{
N    return inst->__fxns->alloc((void*)inst, size, align, eb);
N}
N
N/* free */
Nstatic inline xdc_Void xdc_runtime_IHeap_free(xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size);
Xstatic inline void xdc_runtime_IHeap_free(xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size);
Nstatic inline xdc_Void xdc_runtime_IHeap_free( xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size )
Xstatic inline void xdc_runtime_IHeap_free( xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size )
N{
N    inst->__fxns->free((void*)inst, block, size);
N}
N
N/* isBlocking */
Nstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking( xdc_runtime_IHeap_Handle inst )
N{
N    return inst->__fxns->isBlocking((void*)inst);
N}
N
N/* getStats */
Nstatic inline xdc_Void xdc_runtime_IHeap_getStats(xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats);
Xstatic inline void xdc_runtime_IHeap_getStats(xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats);
Nstatic inline xdc_Void xdc_runtime_IHeap_getStats( xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats )
Xstatic inline void xdc_runtime_IHeap_getStats( xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats )
N{
N    inst->__fxns->getStats((void*)inst, stats);
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N/* These functions return function pointers for module and instance functions.
N * The functions accept modules and instances declared as types defined in this
N * interface, but they return functions defined for the actual objects passed
N * as parameters. These functions are not invoked by any generated code or
N * XDCtools internal code.
N */
N
N/* alloc_{FxnT,fxnP} */
Ntypedef xdc_Ptr (*xdc_runtime_IHeap_alloc_FxnT)(xdc_Void *inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
Xtypedef xdc_Ptr (*xdc_runtime_IHeap_alloc_FxnT)(void *inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
Nstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst)
N{
N    return (xdc_runtime_IHeap_alloc_FxnT)inst->__fxns->alloc;
N}
N
N/* free_{FxnT,fxnP} */
Ntypedef xdc_Void (*xdc_runtime_IHeap_free_FxnT)(xdc_Void *inst, xdc_Ptr block, xdc_SizeT size);
Xtypedef void (*xdc_runtime_IHeap_free_FxnT)(void *inst, xdc_Ptr block, xdc_SizeT size);
Nstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst)
N{
N    return (xdc_runtime_IHeap_free_FxnT)inst->__fxns->free;
N}
N
N/* isBlocking_{FxnT,fxnP} */
Ntypedef xdc_Bool (*xdc_runtime_IHeap_isBlocking_FxnT)(xdc_Void *inst);
Xtypedef xdc_Bool (*xdc_runtime_IHeap_isBlocking_FxnT)(void *inst);
Nstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst)
N{
N    return (xdc_runtime_IHeap_isBlocking_FxnT)inst->__fxns->isBlocking;
N}
N
N/* getStats_{FxnT,fxnP} */
Ntypedef xdc_Void (*xdc_runtime_IHeap_getStats_FxnT)(xdc_Void *inst, xdc_runtime_Memory_Stats* stats);
Xtypedef void (*xdc_runtime_IHeap_getStats_FxnT)(void *inst, xdc_runtime_Memory_Stats* stats);
Nstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst);
Nstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst)
N{
N    return (xdc_runtime_IHeap_getStats_FxnT)inst->__fxns->getStats;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_IHeap__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_IHeap__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IHeap__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IHeap__localnames__done
S#define xdc_runtime_IHeap__localnames__done
S
S/* module prefix */
S#define IHeap_Instance xdc_runtime_IHeap_Instance
S#define IHeap_Handle xdc_runtime_IHeap_Handle
S#define IHeap_Module xdc_runtime_IHeap_Module
S#define IHeap_Params xdc_runtime_IHeap_Params
S#define IHeap_alloc xdc_runtime_IHeap_alloc
S#define IHeap_alloc_fxnP xdc_runtime_IHeap_alloc_fxnP
S#define IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_FxnT
S#define IHeap_free xdc_runtime_IHeap_free
S#define IHeap_free_fxnP xdc_runtime_IHeap_free_fxnP
S#define IHeap_free_FxnT xdc_runtime_IHeap_free_FxnT
S#define IHeap_isBlocking xdc_runtime_IHeap_isBlocking
S#define IHeap_isBlocking_fxnP xdc_runtime_IHeap_isBlocking_fxnP
S#define IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_FxnT
S#define IHeap_getStats xdc_runtime_IHeap_getStats
S#define IHeap_getStats_fxnP xdc_runtime_IHeap_getStats_fxnP
S#define IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_FxnT
S#define IHeap_Module_name xdc_runtime_IHeap_Module_name
S#define IHeap_create xdc_runtime_IHeap_create
S#define IHeap_delete xdc_runtime_IHeap_delete
S#define IHeap_Handle_label xdc_runtime_IHeap_Handle_label
S#define IHeap_Handle_to_Module xdc_runtime_IHeap_Handle_to_Module
S
S#endif /* xdc_runtime_IHeap__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 2
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_IModule_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_IModule_Module__BASE__CR
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
N#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
N#endif
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
N{
N    return mod->__sysp->__mid;
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_IModule__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 2
N#include <xdc/runtime/IGateProvider.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IGateProvider__include
N#define xdc_runtime_IGateProvider__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IGateProvider__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_IGateProvider___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 53 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Q_BLOCKING */
N#define xdc_runtime_IGateProvider_Q_BLOCKING (1)
N
N/* Q_PREEMPTING */
N#define xdc_runtime_IGateProvider_Q_PREEMPTING (2)
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct xdc_runtime_IGateProvider_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_IGateProvider_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_Bool (*query)(xdc_Int qual);
N    xdc_IArg (*enter)(void* inst);
N    xdc_Void (*leave)(void* inst, xdc_IArg key);
X    void (*leave)(void* inst, xdc_IArg key);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_IGateProvider_Module__BASE__CR
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C;
N#else
S#define xdc_runtime_IGateProvider_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IGateProvider_Interface__BASE__C_offset)))
N#endif
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* create */
Nxdc__CODESECT(xdc_runtime_IGateProvider_create, "xdc_runtime_IGateProvider_create")
X
N__extern xdc_runtime_IGateProvider_Handle xdc_runtime_IGateProvider_create(xdc_runtime_IGateProvider_Module mod, const xdc_runtime_IGateProvider_Params *prms, xdc_runtime_Error_Block *eb);
Xextern xdc_runtime_IGateProvider_Handle xdc_runtime_IGateProvider_create(xdc_runtime_IGateProvider_Module mod, const xdc_runtime_IGateProvider_Params *prms, xdc_runtime_Error_Block *eb);
N
N/* delete */
Nxdc__CODESECT(xdc_runtime_IGateProvider_delete, "xdc_runtime_IGateProvider_delete")
X
N__extern xdc_Void xdc_runtime_IGateProvider_delete(xdc_runtime_IGateProvider_Handle *inst);
Xextern void xdc_runtime_IGateProvider_delete(xdc_runtime_IGateProvider_Handle *inst);
N
N/* Handle_to_Module */
Nstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst);
Nstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst)
N{
N    return inst->__fxns;
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab);
Nstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab)
N{
N    return inst->__fxns->__sysp->__label(inst, lab);
N}
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod);
Nstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod)
N{
N    return mod->__sysp->__mid;
N}
N
N/* query */
Nstatic inline xdc_Bool xdc_runtime_IGateProvider_query(xdc_runtime_IGateProvider_Module mod, xdc_Int qual);
Nstatic inline xdc_Bool xdc_runtime_IGateProvider_query( xdc_runtime_IGateProvider_Module mod, xdc_Int qual )
N{
N    return mod->query(qual);
N}
N
N/* enter */
Nstatic inline xdc_IArg xdc_runtime_IGateProvider_enter(xdc_runtime_IGateProvider_Handle inst);
Nstatic inline xdc_IArg xdc_runtime_IGateProvider_enter( xdc_runtime_IGateProvider_Handle inst )
N{
N    return inst->__fxns->enter((void*)inst);
N}
N
N/* leave */
Nstatic inline xdc_Void xdc_runtime_IGateProvider_leave(xdc_runtime_IGateProvider_Handle inst, xdc_IArg key);
Xstatic inline void xdc_runtime_IGateProvider_leave(xdc_runtime_IGateProvider_Handle inst, xdc_IArg key);
Nstatic inline xdc_Void xdc_runtime_IGateProvider_leave( xdc_runtime_IGateProvider_Handle inst, xdc_IArg key )
Xstatic inline void xdc_runtime_IGateProvider_leave( xdc_runtime_IGateProvider_Handle inst, xdc_IArg key )
N{
N    inst->__fxns->leave((void*)inst, key);
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N/* These functions return function pointers for module and instance functions.
N * The functions accept modules and instances declared as types defined in this
N * interface, but they return functions defined for the actual objects passed
N * as parameters. These functions are not invoked by any generated code or
N * XDCtools internal code.
N */
N
N/* query_{FxnT,fxnP} */
Ntypedef xdc_Bool (*xdc_runtime_IGateProvider_query_FxnT)(xdc_Int qual);
Nstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod);
Nstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod)
N{
N    return (xdc_runtime_IGateProvider_query_FxnT)mod->query;
N}
N
N/* enter_{FxnT,fxnP} */
Ntypedef xdc_IArg (*xdc_runtime_IGateProvider_enter_FxnT)(xdc_Void *inst);
Xtypedef xdc_IArg (*xdc_runtime_IGateProvider_enter_FxnT)(void *inst);
Nstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst);
Nstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst)
N{
N    return (xdc_runtime_IGateProvider_enter_FxnT)inst->__fxns->enter;
N}
N
N/* leave_{FxnT,fxnP} */
Ntypedef xdc_Void (*xdc_runtime_IGateProvider_leave_FxnT)(xdc_Void *inst, xdc_IArg key);
Xtypedef void (*xdc_runtime_IGateProvider_leave_FxnT)(void *inst, xdc_IArg key);
Nstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst);
Nstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst)
N{
N    return (xdc_runtime_IGateProvider_leave_FxnT)inst->__fxns->leave;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_IGateProvider__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_IGateProvider__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IGateProvider__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IGateProvider__localnames__done
S#define xdc_runtime_IGateProvider__localnames__done
S
S/* module prefix */
S#define IGateProvider_Instance xdc_runtime_IGateProvider_Instance
S#define IGateProvider_Handle xdc_runtime_IGateProvider_Handle
S#define IGateProvider_Module xdc_runtime_IGateProvider_Module
S#define IGateProvider_Q_BLOCKING xdc_runtime_IGateProvider_Q_BLOCKING
S#define IGateProvider_Q_PREEMPTING xdc_runtime_IGateProvider_Q_PREEMPTING
S#define IGateProvider_Params xdc_runtime_IGateProvider_Params
S#define IGateProvider_query xdc_runtime_IGateProvider_query
S#define IGateProvider_query_fxnP xdc_runtime_IGateProvider_query_fxnP
S#define IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_FxnT
S#define IGateProvider_enter xdc_runtime_IGateProvider_enter
S#define IGateProvider_enter_fxnP xdc_runtime_IGateProvider_enter_fxnP
S#define IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_FxnT
S#define IGateProvider_leave xdc_runtime_IGateProvider_leave
S#define IGateProvider_leave_fxnP xdc_runtime_IGateProvider_leave_fxnP
S#define IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_FxnT
S#define IGateProvider_Module_name xdc_runtime_IGateProvider_Module_name
S#define IGateProvider_create xdc_runtime_IGateProvider_create
S#define IGateProvider_delete xdc_runtime_IGateProvider_delete
S#define IGateProvider_Handle_label xdc_runtime_IGateProvider_Handle_label
S#define IGateProvider_Handle_to_Module xdc_runtime_IGateProvider_Handle_to_Module
S
S#endif /* xdc_runtime_IGateProvider__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 2
N#include <xdc/runtime/package/Main_Module_GateProxy.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Main_Module_GateProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Main_Module_GateProxy__include
N#define xdc_runtime_Main_Module_GateProxy__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Main_Module_GateProxy__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Main_Module_GateProxy___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Main_Module_GateProxy.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Main_Module_GateProxy.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IGateProvider.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IGateProvider__include
S#define xdc_runtime_IGateProvider__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IGateProvider__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IGateProvider___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Q_BLOCKING */
S#define xdc_runtime_IGateProvider_Q_BLOCKING (1)
S
S/* Q_PREEMPTING */
S#define xdc_runtime_IGateProvider_Q_PREEMPTING (2)
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IGateProvider_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IGateProvider_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Bool (*query)(xdc_Int qual);
S    xdc_IArg (*enter)(void* inst);
S    xdc_Void (*leave)(void* inst, xdc_IArg key);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IGateProvider_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C;
S#else
S#define xdc_runtime_IGateProvider_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IGateProvider_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IGateProvider_create, "xdc_runtime_IGateProvider_create")
S__extern xdc_runtime_IGateProvider_Handle xdc_runtime_IGateProvider_create(xdc_runtime_IGateProvider_Module mod, const xdc_runtime_IGateProvider_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IGateProvider_delete, "xdc_runtime_IGateProvider_delete")
S__extern xdc_Void xdc_runtime_IGateProvider_delete(xdc_runtime_IGateProvider_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* query */
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query(xdc_runtime_IGateProvider_Module mod, xdc_Int qual);
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query( xdc_runtime_IGateProvider_Module mod, xdc_Int qual )
S{
S    return mod->query(qual);
S}
S
S/* enter */
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter( xdc_runtime_IGateProvider_Handle inst )
S{
S    return inst->__fxns->enter((void*)inst);
S}
S
S/* leave */
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave(xdc_runtime_IGateProvider_Handle inst, xdc_IArg key);
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave( xdc_runtime_IGateProvider_Handle inst, xdc_IArg key )
S{
S    inst->__fxns->leave((void*)inst, key);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* query_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IGateProvider_query_FxnT)(xdc_Int qual);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod)
S{
S    return (xdc_runtime_IGateProvider_query_FxnT)mod->query;
S}
S
S/* enter_{FxnT,fxnP} */
Stypedef xdc_IArg (*xdc_runtime_IGateProvider_enter_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_enter_FxnT)inst->__fxns->enter;
S}
S
S/* leave_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IGateProvider_leave_FxnT)(xdc_Void *inst, xdc_IArg key);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_leave_FxnT)inst->__fxns->leave;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IGateProvider__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IGateProvider__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IGateProvider__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IGateProvider__localnames__done
S#define xdc_runtime_IGateProvider__localnames__done
S
S/* module prefix */
S#define IGateProvider_Instance xdc_runtime_IGateProvider_Instance
S#define IGateProvider_Handle xdc_runtime_IGateProvider_Handle
S#define IGateProvider_Module xdc_runtime_IGateProvider_Module
S#define IGateProvider_Q_BLOCKING xdc_runtime_IGateProvider_Q_BLOCKING
S#define IGateProvider_Q_PREEMPTING xdc_runtime_IGateProvider_Q_PREEMPTING
S#define IGateProvider_Params xdc_runtime_IGateProvider_Params
S#define IGateProvider_query xdc_runtime_IGateProvider_query
S#define IGateProvider_query_fxnP xdc_runtime_IGateProvider_query_fxnP
S#define IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_FxnT
S#define IGateProvider_enter xdc_runtime_IGateProvider_enter
S#define IGateProvider_enter_fxnP xdc_runtime_IGateProvider_enter_fxnP
S#define IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_FxnT
S#define IGateProvider_leave xdc_runtime_IGateProvider_leave
S#define IGateProvider_leave_fxnP xdc_runtime_IGateProvider_leave_fxnP
S#define IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_FxnT
S#define IGateProvider_Module_name xdc_runtime_IGateProvider_Module_name
S#define IGateProvider_create xdc_runtime_IGateProvider_create
S#define IGateProvider_delete xdc_runtime_IGateProvider_delete
S#define IGateProvider_Handle_label xdc_runtime_IGateProvider_Handle_label
S#define IGateProvider_Handle_to_Module xdc_runtime_IGateProvider_Handle_to_Module
S
S#endif /* xdc_runtime_IGateProvider__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/package/Main_Module_GateProxy.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Q_BLOCKING */
N#define xdc_runtime_Main_Module_GateProxy_Q_BLOCKING (1)
N
N/* Q_PREEMPTING */
N#define xdc_runtime_Main_Module_GateProxy_Q_PREEMPTING (2)
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled (xdc_runtime_Main_Module_GateProxy_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded (xdc_runtime_Main_Module_GateProxy_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Main_Module_GateProxy_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsMask xdc_runtime_Main_Module_GateProxy_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__diagsMask xdc_runtime_Main_Module_GateProxy_Module__diagsMask__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__diagsMask__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__diagsMask__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__diagsMask (xdc_runtime_Main_Module_GateProxy_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module_GateProxy_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__gateObj xdc_runtime_Main_Module_GateProxy_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__gateObj xdc_runtime_Main_Module_GateProxy_Module__gateObj__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__gateObj__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__gateObj__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__gateObj (xdc_runtime_Main_Module_GateProxy_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module_GateProxy_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__gatePrms xdc_runtime_Main_Module_GateProxy_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__gatePrms xdc_runtime_Main_Module_GateProxy_Module__gatePrms__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__gatePrms__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__gatePrms__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__gatePrms (xdc_runtime_Main_Module_GateProxy_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Main_Module_GateProxy_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__id xdc_runtime_Main_Module_GateProxy_Module__id__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__id xdc_runtime_Main_Module_GateProxy_Module__id__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__id__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__id__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__id__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__id (xdc_runtime_Main_Module_GateProxy_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Main_Module_GateProxy_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerDefined xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerDefined xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerDefined (xdc_runtime_Main_Module_GateProxy_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module_GateProxy_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerObj xdc_runtime_Main_Module_GateProxy_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerObj xdc_runtime_Main_Module_GateProxy_Module__loggerObj__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerObj__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerObj__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerObj (xdc_runtime_Main_Module_GateProxy_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0 (xdc_runtime_Main_Module_GateProxy_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1 (xdc_runtime_Main_Module_GateProxy_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2 (xdc_runtime_Main_Module_GateProxy_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4 (xdc_runtime_Main_Module_GateProxy_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8 xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__CR
S#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__C (*((CT__xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8 (xdc_runtime_Main_Module_GateProxy_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Main_Module_GateProxy_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Object__count xdc_runtime_Main_Module_GateProxy_Object__count__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Object__count xdc_runtime_Main_Module_GateProxy_Object__count__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Object__count__CR
S#define xdc_runtime_Main_Module_GateProxy_Object__count__C (*((CT__xdc_runtime_Main_Module_GateProxy_Object__count*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Object__count__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Object__count (xdc_runtime_Main_Module_GateProxy_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Main_Module_GateProxy_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Object__heap xdc_runtime_Main_Module_GateProxy_Object__heap__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Object__heap xdc_runtime_Main_Module_GateProxy_Object__heap__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Object__heap__CR
S#define xdc_runtime_Main_Module_GateProxy_Object__heap__C (*((CT__xdc_runtime_Main_Module_GateProxy_Object__heap*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Object__heap (xdc_runtime_Main_Module_GateProxy_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Main_Module_GateProxy_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Object__sizeof xdc_runtime_Main_Module_GateProxy_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Object__sizeof xdc_runtime_Main_Module_GateProxy_Object__sizeof__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Object__sizeof__CR
S#define xdc_runtime_Main_Module_GateProxy_Object__sizeof__C (*((CT__xdc_runtime_Main_Module_GateProxy_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Object__sizeof (xdc_runtime_Main_Module_GateProxy_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module_GateProxy_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Main_Module_GateProxy_Object__table xdc_runtime_Main_Module_GateProxy_Object__table__C;
Xextern  const CT__xdc_runtime_Main_Module_GateProxy_Object__table xdc_runtime_Main_Module_GateProxy_Object__table__C;
N#ifdef xdc_runtime_Main_Module_GateProxy_Object__table__CR
S#define xdc_runtime_Main_Module_GateProxy_Object__table__C (*((CT__xdc_runtime_Main_Module_GateProxy_Object__table*)(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Object__table__C_offset)))
N#else
N#define xdc_runtime_Main_Module_GateProxy_Object__table (xdc_runtime_Main_Module_GateProxy_Object__table__C)
N#endif
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct xdc_runtime_Main_Module_GateProxy_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct xdc_runtime_Main_Module_GateProxy_Struct {
N    const xdc_runtime_Main_Module_GateProxy_Fxns__ *__fxns;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct xdc_runtime_Main_Module_GateProxy_Fxns__ {
N    const xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2* __sysp;
N    xdc_Bool (*query)(xdc_Int qual);
N    xdc_IArg (*enter)(xdc_runtime_Main_Module_GateProxy_Handle inst);
N    xdc_Void (*leave)(xdc_runtime_Main_Module_GateProxy_Handle inst, xdc_IArg key);
X    void (*leave)(xdc_runtime_Main_Module_GateProxy_Handle inst, xdc_IArg key);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N#ifndef xdc_runtime_Main_Module_GateProxy_Module__FXNS__CR
N
N/* Module__FXNS__C */
N__extern const xdc_runtime_Main_Module_GateProxy_Fxns__ xdc_runtime_Main_Module_GateProxy_Module__FXNS__C;
Xextern const xdc_runtime_Main_Module_GateProxy_Fxns__ xdc_runtime_Main_Module_GateProxy_Module__FXNS__C;
N#else
S#define xdc_runtime_Main_Module_GateProxy_Module__FXNS__C (*(xdcRomConstPtr + xdc_runtime_Main_Module_GateProxy_Module__FXNS__C_offset))
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Main_Module_GateProxy_Module_startup( state ) (-1)
N
N/* create */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_create, "xdc_runtime_Main_Module_GateProxy_create")
X
N__extern xdc_runtime_Main_Module_GateProxy_Handle xdc_runtime_Main_Module_GateProxy_create( const xdc_runtime_Main_Module_GateProxy_Params *prms, xdc_runtime_Error_Block *eb);
Xextern xdc_runtime_Main_Module_GateProxy_Handle xdc_runtime_Main_Module_GateProxy_create( const xdc_runtime_Main_Module_GateProxy_Params *prms, xdc_runtime_Error_Block *eb);
N
N/* delete */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_delete, "xdc_runtime_Main_Module_GateProxy_delete")
X
N__extern void xdc_runtime_Main_Module_GateProxy_delete(xdc_runtime_Main_Module_GateProxy_Handle *instp);
Xextern void xdc_runtime_Main_Module_GateProxy_delete(xdc_runtime_Main_Module_GateProxy_Handle *instp);
N
N/* Handle__label__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Handle__label__S, "xdc_runtime_Main_Module_GateProxy_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *xdc_runtime_Main_Module_GateProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *xdc_runtime_Main_Module_GateProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Module__startupDone__S, "xdc_runtime_Main_Module_GateProxy_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Main_Module_GateProxy_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Main_Module_GateProxy_Module__startupDone__S( void );
N
N/* Object__get__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Object__get__S, "xdc_runtime_Main_Module_GateProxy_Object__get__S")
X
N__extern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Object__first__S, "xdc_runtime_Main_Module_GateProxy_Object__first__S")
X
N__extern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__first__S( void );
Xextern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Object__next__S, "xdc_runtime_Main_Module_GateProxy_Object__next__S")
X
N__extern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Params__init__S, "xdc_runtime_Main_Module_GateProxy_Params__init__S")
X
N__extern xdc_Void xdc_runtime_Main_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void xdc_runtime_Main_Module_GateProxy_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* Proxy__abstract__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S, "xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S")
X
N__extern xdc_Bool xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S( void );
Xextern xdc_Bool xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S( void );
N
N/* Proxy__delegate__S */
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S, "xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S")
X
N__extern xdc_CPtr xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S( void );
Xextern xdc_CPtr xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S( void );
N
N/* query__E */
N#define xdc_runtime_Main_Module_GateProxy_query xdc_runtime_Main_Module_GateProxy_query__E
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_query__E, "xdc_runtime_Main_Module_GateProxy_query")
X
N__extern xdc_Bool xdc_runtime_Main_Module_GateProxy_query__E( xdc_Int qual );
Xextern xdc_Bool xdc_runtime_Main_Module_GateProxy_query__E( xdc_Int qual );
N
N/* enter__E */
N#define xdc_runtime_Main_Module_GateProxy_enter xdc_runtime_Main_Module_GateProxy_enter__E
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_enter__E, "xdc_runtime_Main_Module_GateProxy_enter")
X
N__extern xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E( xdc_runtime_Main_Module_GateProxy_Handle __inst );
Xextern xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E( xdc_runtime_Main_Module_GateProxy_Handle __inst );
N
N/* leave__E */
N#define xdc_runtime_Main_Module_GateProxy_leave xdc_runtime_Main_Module_GateProxy_leave__E
Nxdc__CODESECT(xdc_runtime_Main_Module_GateProxy_leave__E, "xdc_runtime_Main_Module_GateProxy_leave")
X
N__extern xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E( xdc_runtime_Main_Module_GateProxy_Handle __inst, xdc_IArg key );
Xextern void xdc_runtime_Main_Module_GateProxy_leave__E( xdc_runtime_Main_Module_GateProxy_Handle __inst, xdc_IArg key );
N
N
N/*
N * ======== CONVERTORS ========
N */
N
N/* Module_upCast */
Nstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_Main_Module_GateProxy_Module_upCast(void);
Nstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_Main_Module_GateProxy_Module_upCast(void)
N{
N    return (xdc_runtime_IGateProvider_Module)xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S();
N}
N
N/* Module_to_xdc_runtime_IGateProvider */
N#define xdc_runtime_Main_Module_GateProxy_Module_to_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Module_upCast
N
N/* Handle_upCast */
Nstatic inline xdc_runtime_IGateProvider_Handle xdc_runtime_Main_Module_GateProxy_Handle_upCast(xdc_runtime_Main_Module_GateProxy_Handle i);
Nstatic inline xdc_runtime_IGateProvider_Handle xdc_runtime_Main_Module_GateProxy_Handle_upCast(xdc_runtime_Main_Module_GateProxy_Handle i)
N{
N    return (xdc_runtime_IGateProvider_Handle)i;
N}
N
N/* Handle_to_xdc_runtime_IGateProvider */
N#define xdc_runtime_Main_Module_GateProxy_Handle_to_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Handle_upCast
N
N/* Handle_downCast */
Nstatic inline xdc_runtime_Main_Module_GateProxy_Handle xdc_runtime_Main_Module_GateProxy_Handle_downCast(xdc_runtime_IGateProvider_Handle i);
Nstatic inline xdc_runtime_Main_Module_GateProxy_Handle xdc_runtime_Main_Module_GateProxy_Handle_downCast(xdc_runtime_IGateProvider_Handle i)
N{
N    xdc_runtime_IGateProvider_Handle i2 = (xdc_runtime_IGateProvider_Handle)i;
N    if (xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S()) {
N        return (xdc_runtime_Main_Module_GateProxy_Handle)i;
N    }
N    return ((const void*)i2->__fxns == (const void*)xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S()) ? (xdc_runtime_Main_Module_GateProxy_Handle)i : (xdc_runtime_Main_Module_GateProxy_Handle)NULL;
X    return ((const void*)i2->__fxns == (const void*)xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S()) ? (xdc_runtime_Main_Module_GateProxy_Handle)i : (xdc_runtime_Main_Module_GateProxy_Handle)0;
N}
N
N/* Handle_from_xdc_runtime_IGateProvider */
N#define xdc_runtime_Main_Module_GateProxy_Handle_from_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Handle_downCast
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Main_Module_GateProxy_Module_startupDone() xdc_runtime_Main_Module_GateProxy_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Main_Module_GateProxy_Object_heap() xdc_runtime_Main_Module_GateProxy_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Main_Module_GateProxy_Module_heap() xdc_runtime_Main_Module_GateProxy_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Main_Module_GateProxy_Module__id xdc_runtime_Main_Module_GateProxy_Module_id(void);
Nstatic inline CT__xdc_runtime_Main_Module_GateProxy_Module__id xdc_runtime_Main_Module_GateProxy_Module_id( void ) 
N{
N    return xdc_runtime_Main_Module_GateProxy_Module__id__C;
N}
N
N/* Proxy_abstract */
N#define xdc_runtime_Main_Module_GateProxy_Proxy_abstract() xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S()
N
N/* Proxy_delegate */
N#define xdc_runtime_Main_Module_GateProxy_Proxy_delegate() ((xdc_runtime_IGateProvider_Module)xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S())
N
N/* Params_init */
Nstatic inline void xdc_runtime_Main_Module_GateProxy_Params_init(xdc_runtime_Main_Module_GateProxy_Params *prms);
Nstatic inline void xdc_runtime_Main_Module_GateProxy_Params_init( xdc_runtime_Main_Module_GateProxy_Params *prms ) 
N{
N    if (prms != NULL) {
X    if (prms != 0) {
N        xdc_runtime_Main_Module_GateProxy_Params__init__S(prms, NULL, sizeof(xdc_runtime_Main_Module_GateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
X        xdc_runtime_Main_Module_GateProxy_Params__init__S(prms, 0, sizeof(xdc_runtime_Main_Module_GateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void xdc_runtime_Main_Module_GateProxy_Params_copy(xdc_runtime_Main_Module_GateProxy_Params *dst, const xdc_runtime_Main_Module_GateProxy_Params *src);
Nstatic inline void xdc_runtime_Main_Module_GateProxy_Params_copy(xdc_runtime_Main_Module_GateProxy_Params *dst, const xdc_runtime_Main_Module_GateProxy_Params *src) 
N{
N    if (dst != NULL) {
X    if (dst != 0) {
N        xdc_runtime_Main_Module_GateProxy_Params__init__S(dst, (const void *)src, sizeof(xdc_runtime_Main_Module_GateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_Main_Module_GateProxy__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Main_Module_GateProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Main_Module_GateProxy__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Main_Module_GateProxy__localnames__done
S#define xdc_runtime_Main_Module_GateProxy__localnames__done
S
S/* module prefix */
S#define Main_Module_GateProxy_Instance xdc_runtime_Main_Module_GateProxy_Instance
S#define Main_Module_GateProxy_Handle xdc_runtime_Main_Module_GateProxy_Handle
S#define Main_Module_GateProxy_Module xdc_runtime_Main_Module_GateProxy_Module
S#define Main_Module_GateProxy_Object xdc_runtime_Main_Module_GateProxy_Object
S#define Main_Module_GateProxy_Struct xdc_runtime_Main_Module_GateProxy_Struct
S#define Main_Module_GateProxy_Q_BLOCKING xdc_runtime_Main_Module_GateProxy_Q_BLOCKING
S#define Main_Module_GateProxy_Q_PREEMPTING xdc_runtime_Main_Module_GateProxy_Q_PREEMPTING
S#define Main_Module_GateProxy_Params xdc_runtime_Main_Module_GateProxy_Params
S#define Main_Module_GateProxy_query xdc_runtime_Main_Module_GateProxy_query
S#define Main_Module_GateProxy_enter xdc_runtime_Main_Module_GateProxy_enter
S#define Main_Module_GateProxy_leave xdc_runtime_Main_Module_GateProxy_leave
S#define Main_Module_GateProxy_Module_name xdc_runtime_Main_Module_GateProxy_Module_name
S#define Main_Module_GateProxy_Module_id xdc_runtime_Main_Module_GateProxy_Module_id
S#define Main_Module_GateProxy_Module_startup xdc_runtime_Main_Module_GateProxy_Module_startup
S#define Main_Module_GateProxy_Module_startupDone xdc_runtime_Main_Module_GateProxy_Module_startupDone
S#define Main_Module_GateProxy_Module_hasMask xdc_runtime_Main_Module_GateProxy_Module_hasMask
S#define Main_Module_GateProxy_Module_getMask xdc_runtime_Main_Module_GateProxy_Module_getMask
S#define Main_Module_GateProxy_Module_setMask xdc_runtime_Main_Module_GateProxy_Module_setMask
S#define Main_Module_GateProxy_Object_heap xdc_runtime_Main_Module_GateProxy_Object_heap
S#define Main_Module_GateProxy_Module_heap xdc_runtime_Main_Module_GateProxy_Module_heap
S#define Main_Module_GateProxy_construct xdc_runtime_Main_Module_GateProxy_construct
S#define Main_Module_GateProxy_create xdc_runtime_Main_Module_GateProxy_create
S#define Main_Module_GateProxy_handle xdc_runtime_Main_Module_GateProxy_handle
S#define Main_Module_GateProxy_struct xdc_runtime_Main_Module_GateProxy_struct
S#define Main_Module_GateProxy_Handle_label xdc_runtime_Main_Module_GateProxy_Handle_label
S#define Main_Module_GateProxy_Handle_name xdc_runtime_Main_Module_GateProxy_Handle_name
S#define Main_Module_GateProxy_Instance_init xdc_runtime_Main_Module_GateProxy_Instance_init
S#define Main_Module_GateProxy_Object_count xdc_runtime_Main_Module_GateProxy_Object_count
S#define Main_Module_GateProxy_Object_get xdc_runtime_Main_Module_GateProxy_Object_get
S#define Main_Module_GateProxy_Object_first xdc_runtime_Main_Module_GateProxy_Object_first
S#define Main_Module_GateProxy_Object_next xdc_runtime_Main_Module_GateProxy_Object_next
S#define Main_Module_GateProxy_Object_sizeof xdc_runtime_Main_Module_GateProxy_Object_sizeof
S#define Main_Module_GateProxy_Params_copy xdc_runtime_Main_Module_GateProxy_Params_copy
S#define Main_Module_GateProxy_Params_init xdc_runtime_Main_Module_GateProxy_Params_init
S#define Main_Module_GateProxy_Instance_State xdc_runtime_Main_Module_GateProxy_Instance_State
S#define Main_Module_GateProxy_Proxy_abstract xdc_runtime_Main_Module_GateProxy_Proxy_abstract
S#define Main_Module_GateProxy_Proxy_delegate xdc_runtime_Main_Module_GateProxy_Proxy_delegate
S#define Main_Module_GateProxy_delete xdc_runtime_Main_Module_GateProxy_delete
S#define Main_Module_GateProxy_destruct xdc_runtime_Main_Module_GateProxy_destruct
S#define Main_Module_GateProxy_Module_upCast xdc_runtime_Main_Module_GateProxy_Module_upCast
S#define Main_Module_GateProxy_Module_to_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Module_to_xdc_runtime_IGateProvider
S#define Main_Module_GateProxy_Handle_upCast xdc_runtime_Main_Module_GateProxy_Handle_upCast
S#define Main_Module_GateProxy_Handle_to_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Handle_to_xdc_runtime_IGateProvider
S#define Main_Module_GateProxy_Handle_downCast xdc_runtime_Main_Module_GateProxy_Handle_downCast
S#define Main_Module_GateProxy_Handle_from_xdc_runtime_IGateProvider xdc_runtime_Main_Module_GateProxy_Handle_from_xdc_runtime_IGateProvider
S
S#endif /* xdc_runtime_Main_Module_GateProxy__localnames__done */
N#endif
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Main_Module__diagsEnabled__CR
S#define xdc_runtime_Main_Module__diagsEnabled__C (*((CT__xdc_runtime_Main_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Main_Module__diagsEnabled (xdc_runtime_Main_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Main_Module__diagsIncluded__CR
S#define xdc_runtime_Main_Module__diagsIncluded__C (*((CT__xdc_runtime_Main_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Main_Module__diagsIncluded (xdc_runtime_Main_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Main_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C;
N#ifdef xdc_runtime_Main_Module__diagsMask__CR
S#define xdc_runtime_Main_Module__diagsMask__C (*((CT__xdc_runtime_Main_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Main_Module__diagsMask (xdc_runtime_Main_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C;
N#ifdef xdc_runtime_Main_Module__gateObj__CR
S#define xdc_runtime_Main_Module__gateObj__C (*((CT__xdc_runtime_Main_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Main_Module__gateObj (xdc_runtime_Main_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C;
N#ifdef xdc_runtime_Main_Module__gatePrms__CR
S#define xdc_runtime_Main_Module__gatePrms__C (*((CT__xdc_runtime_Main_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Main_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Main_Module__gatePrms (xdc_runtime_Main_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Main_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C;
Xextern  const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C;
N#ifdef xdc_runtime_Main_Module__id__CR
S#define xdc_runtime_Main_Module__id__C (*((CT__xdc_runtime_Main_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module__id__C_offset)))
N#else
N#define xdc_runtime_Main_Module__id (xdc_runtime_Main_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Main_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C;
N#ifdef xdc_runtime_Main_Module__loggerDefined__CR
S#define xdc_runtime_Main_Module__loggerDefined__C (*((CT__xdc_runtime_Main_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerDefined (xdc_runtime_Main_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C;
N#ifdef xdc_runtime_Main_Module__loggerObj__CR
S#define xdc_runtime_Main_Module__loggerObj__C (*((CT__xdc_runtime_Main_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerObj (xdc_runtime_Main_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Main_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn0 xdc_runtime_Main_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerFxn0 xdc_runtime_Main_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Main_Module__loggerFxn0__CR
S#define xdc_runtime_Main_Module__loggerFxn0__C (*((CT__xdc_runtime_Main_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerFxn0 (xdc_runtime_Main_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Main_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn1 xdc_runtime_Main_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerFxn1 xdc_runtime_Main_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Main_Module__loggerFxn1__CR
S#define xdc_runtime_Main_Module__loggerFxn1__C (*((CT__xdc_runtime_Main_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerFxn1 (xdc_runtime_Main_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Main_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn2 xdc_runtime_Main_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerFxn2 xdc_runtime_Main_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Main_Module__loggerFxn2__CR
S#define xdc_runtime_Main_Module__loggerFxn2__C (*((CT__xdc_runtime_Main_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerFxn2 (xdc_runtime_Main_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Main_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Main_Module__loggerFxn4__CR
S#define xdc_runtime_Main_Module__loggerFxn4__C (*((CT__xdc_runtime_Main_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerFxn4 (xdc_runtime_Main_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Main_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Main_Module__loggerFxn8__CR
S#define xdc_runtime_Main_Module__loggerFxn8__C (*((CT__xdc_runtime_Main_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Main_Module__loggerFxn8 (xdc_runtime_Main_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Main_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C;
Xextern  const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C;
N#ifdef xdc_runtime_Main_Object__count__CR
S#define xdc_runtime_Main_Object__count__C (*((CT__xdc_runtime_Main_Object__count*)(xdcRomConstPtr + xdc_runtime_Main_Object__count__C_offset)))
N#else
N#define xdc_runtime_Main_Object__count (xdc_runtime_Main_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Main_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C;
Xextern  const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C;
N#ifdef xdc_runtime_Main_Object__heap__CR
S#define xdc_runtime_Main_Object__heap__C (*((CT__xdc_runtime_Main_Object__heap*)(xdcRomConstPtr + xdc_runtime_Main_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Main_Object__heap (xdc_runtime_Main_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Main_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C;
N#ifdef xdc_runtime_Main_Object__sizeof__CR
S#define xdc_runtime_Main_Object__sizeof__C (*((CT__xdc_runtime_Main_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Main_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Main_Object__sizeof (xdc_runtime_Main_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Main_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C;
Xextern  const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C;
N#ifdef xdc_runtime_Main_Object__table__CR
S#define xdc_runtime_Main_Object__table__C (*((CT__xdc_runtime_Main_Object__table*)(xdcRomConstPtr + xdc_runtime_Main_Object__table__C_offset)))
N#else
N#define xdc_runtime_Main_Object__table (xdc_runtime_Main_Object__table__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Main_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Main_Module__startupDone__S, "xdc_runtime_Main_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Main_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Main_Module__startupDone__S( void );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Main_Module_startupDone() xdc_runtime_Main_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Main_Object_heap() xdc_runtime_Main_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Main_Module_heap() xdc_runtime_Main_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id(void);
Nstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id( void ) 
N{
N    return xdc_runtime_Main_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void)
N{
N    return (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) ? *xdc_runtime_Main_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)0) ? *xdc_runtime_Main_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) {
X    if (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)0) {
N        *xdc_runtime_Main_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_Main__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Main__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Main__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Main__include_state
S#define xdc_runtime_Main__include_state
S
S
S#endif /* xdc_runtime_Main__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Main__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Main__localnames__done
S#define xdc_runtime_Main__localnames__done
S
S/* module prefix */
S#define Main_Module_name xdc_runtime_Main_Module_name
S#define Main_Module_id xdc_runtime_Main_Module_id
S#define Main_Module_startup xdc_runtime_Main_Module_startup
S#define Main_Module_startupDone xdc_runtime_Main_Module_startupDone
S#define Main_Module_hasMask xdc_runtime_Main_Module_hasMask
S#define Main_Module_getMask xdc_runtime_Main_Module_getMask
S#define Main_Module_setMask xdc_runtime_Main_Module_setMask
S#define Main_Object_heap xdc_runtime_Main_Object_heap
S#define Main_Module_heap xdc_runtime_Main_Module_heap
S
S/* proxies */
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S#endif /* xdc_runtime_Main__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 18 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error__prologue.h" 2
N
N/*
N *  ======== xdc_runtime_Error_Id ========
N */
Ntypedef xdc_Bits32 xdc_runtime_Error_Id;
N
N#ifdef __cplusplus
Snamespace xdc_runtime { namespace Error {
S    typedef xdc_runtime_Error_Id Id;
S}}
N#endif
N
N
N/*
N *  ======== Module__MID ========
N *  This definition allows non-module code to
N *  use the Error module.  This symbol is normally defined in each
N *  module internal header (i.e., package/internal/<mod>.xdc.h).
N *
N *  Only do this if this file is not one that will be included in the Registry.
N *  This check ensures that Registry.h (which similarly defines these Module__*
N *  symbols) can be included in any order relative to other xdc.runtime
N *  headers.
N */
N#ifndef Registry_CURDESC
N
N#undef Module__MID
N#define Module__MID xdc_runtime_Main_Module__id__C
N
N#endif
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Policy */
Nenum xdc_runtime_Error_Policy {
N    xdc_runtime_Error_TERMINATE,
N    xdc_runtime_Error_UNWIND
N};
Ntypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
N
N/* HookFxn */
Ntypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
Xtypedef void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
N
N/* NUMARGS */
N#define xdc_runtime_Error_NUMARGS (2)
N
N/* Data */
Ntypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Ntypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Ntypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Ntypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Nstruct xdc_runtime_Error_Data {
N    __TA_xdc_runtime_Error_Data__arg arg;
N};
N
N/* Block */
Nstruct xdc_runtime_Error_Block {
N    xdc_UInt16 unused;
N    xdc_runtime_Error_Data data;
N    xdc_runtime_Error_Id id;
N    xdc_CString msg;
N    xdc_runtime_Types_Site site;
N};
N
N/* IGNORE */
N
N/* ABORT */
N
N/* PolicyFxn */
Ntypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
Xtypedef void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
N#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
N#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
N#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
Xextern  const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
N#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
N#else
N#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
N#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
N#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Error_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
Xextern  const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
N#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
N#else
N#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
Xextern  const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
N#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
N#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
Xextern  const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
N#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
N#else
N#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
N#endif
N
N/* policyFxn */
Ntypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
N__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
Xextern  const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
N#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
N#else
N#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
N#endif
N
N/* E_generic */
Ntypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
N__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
Xextern  const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
N#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
N#else
N#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
N#endif
N
N/* E_memory */
Ntypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
N__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
Xextern  const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
N#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
N#else
N#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
N#endif
N
N/* E_msgCode */
Ntypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
N__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
Xextern  const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
N#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
N#else
N#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
N#endif
N
N/* policy */
Ntypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
N__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
Xextern  const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
N#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
N#else
N#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
N#endif
N
N/* raiseHook */
Ntypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
N__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
Xextern  const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
N#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
N#else
N#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
N#endif
N
N/* maxDepth */
Ntypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
N__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
Xextern  const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
N#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
N#else
N#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
N#else
N#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
N#endif
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Error_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
N
N/* check__E */
N#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Nxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
X
N__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
Xextern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
N
N/* getData__E */
N#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Nxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
X
N__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
Xextern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
N
N/* getCode__E */
N#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Nxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
X
N__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
Xextern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
N
N/* getId__E */
N#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Nxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
X
N__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
Xextern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
N
N/* getMsg__E */
N#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Nxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
X
N__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
Xextern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
N
N/* getSite__E */
N#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Nxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
X
N__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
Xextern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
N
N/* init__E */
N#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Nxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
X
N__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
Xextern void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
N
N/* print__E */
N#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Nxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
X
N__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
Xextern void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
N
N/* policyDefault__E */
N#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Nxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
X
N__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
Xextern void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
N
N/* policyMin__E */
N#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Nxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
X
N__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
Xextern void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
N
N/* policySpin__E */
N#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Nxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
X
N__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
Xextern void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
N
N/* raiseX__E */
N#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Nxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
X
N__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
Xextern void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
N
N/* setX__E */
N#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Nxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
X
N__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
Xextern void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Nstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
N{
N    return xdc_runtime_Error_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
N{
N    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)0) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
X    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)0) {
N        *xdc_runtime_Error_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <xdc/runtime/Error__epilogue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error__epilogue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Error__epilogue__include
N#define xdc_runtime_Error__epilogue__include
N
N/*
N *  ======== xdc_runtime_Error_raise ========
N *  Call underlying error handler with current module ID, file name, and
N *  line number.
N *
N *  Note use of xdc_FILE__ in lieu of __FILE__; this is done
N *  to prevent accumulation of file name strings in the application.  See
N *  xdc.h for details.
N */
N#define xdc_runtime_Error_raise(eb, id, arg1, arg2) \
N    xdc_runtime_Error_raiseX((eb), Module__MID, xdc_FILE__, __LINE__, \
N        (id), (IArg)(arg1), (IArg)(arg2));
X#define xdc_runtime_Error_raise(eb, id, arg1, arg2)     xdc_runtime_Error_raiseX((eb), Module__MID, xdc_FILE__, __LINE__,         (id), (IArg)(arg1), (IArg)(arg2));
N
N/*
N *  ======== xdc_runtime_Error_idToCode ========
N */
N#define xdc_runtime_Error_idToCode(id) \
N    (xdc_UInt16)((id) & 0x0000ffffU)
X#define xdc_runtime_Error_idToCode(id)     (xdc_UInt16)((id) & 0x0000ffffU)
N
N/*
N *  ======== xdc_runtime_Error_idToUid ========
N */
N#define xdc_runtime_Error_idToUid(id) \
N    (xdc_UInt16)((id) >> 16)
X#define xdc_runtime_Error_idToUid(id)     (xdc_UInt16)((id) >> 16)
N
N#define xdc_runtime_Error_ABORT NULL
N
Nextern xdc_runtime_Error_Block xdc_runtime_Error_IgnoreBlock;
N#define xdc_runtime_Error_IGNORE (&xdc_runtime_Error_IgnoreBlock)
N
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 460 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 2
N
N#ifdef xdc_runtime_Error__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <xdc/runtime/IGateProvider.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IGateProvider__include
S#define xdc_runtime_IGateProvider__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IGateProvider__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IGateProvider___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Q_BLOCKING */
S#define xdc_runtime_IGateProvider_Q_BLOCKING (1)
S
S/* Q_PREEMPTING */
S#define xdc_runtime_IGateProvider_Q_PREEMPTING (2)
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IGateProvider_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IGateProvider_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Bool (*query)(xdc_Int qual);
S    xdc_IArg (*enter)(void* inst);
S    xdc_Void (*leave)(void* inst, xdc_IArg key);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IGateProvider_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C;
S#else
S#define xdc_runtime_IGateProvider_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IGateProvider_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IGateProvider_create, "xdc_runtime_IGateProvider_create")
S__extern xdc_runtime_IGateProvider_Handle xdc_runtime_IGateProvider_create(xdc_runtime_IGateProvider_Module mod, const xdc_runtime_IGateProvider_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IGateProvider_delete, "xdc_runtime_IGateProvider_delete")
S__extern xdc_Void xdc_runtime_IGateProvider_delete(xdc_runtime_IGateProvider_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* query */
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query(xdc_runtime_IGateProvider_Module mod, xdc_Int qual);
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query( xdc_runtime_IGateProvider_Module mod, xdc_Int qual )
S{
S    return mod->query(qual);
S}
S
S/* enter */
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter( xdc_runtime_IGateProvider_Handle inst )
S{
S    return inst->__fxns->enter((void*)inst);
S}
S
S/* leave */
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave(xdc_runtime_IGateProvider_Handle inst, xdc_IArg key);
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave( xdc_runtime_IGateProvider_Handle inst, xdc_IArg key )
S{
S    inst->__fxns->leave((void*)inst, key);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* query_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IGateProvider_query_FxnT)(xdc_Int qual);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod)
S{
S    return (xdc_runtime_IGateProvider_query_FxnT)mod->query;
S}
S
S/* enter_{FxnT,fxnP} */
Stypedef xdc_IArg (*xdc_runtime_IGateProvider_enter_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_enter_FxnT)inst->__fxns->enter;
S}
S
S/* leave_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IGateProvider_leave_FxnT)(xdc_Void *inst, xdc_IArg key);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_leave_FxnT)inst->__fxns->leave;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IGateProvider__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IGateProvider__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IGateProvider__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IGateProvider__localnames__done
S#define xdc_runtime_IGateProvider__localnames__done
S
S/* module prefix */
S#define IGateProvider_Instance xdc_runtime_IGateProvider_Instance
S#define IGateProvider_Handle xdc_runtime_IGateProvider_Handle
S#define IGateProvider_Module xdc_runtime_IGateProvider_Module
S#define IGateProvider_Q_BLOCKING xdc_runtime_IGateProvider_Q_BLOCKING
S#define IGateProvider_Q_PREEMPTING xdc_runtime_IGateProvider_Q_PREEMPTING
S#define IGateProvider_Params xdc_runtime_IGateProvider_Params
S#define IGateProvider_query xdc_runtime_IGateProvider_query
S#define IGateProvider_query_fxnP xdc_runtime_IGateProvider_query_fxnP
S#define IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_FxnT
S#define IGateProvider_enter xdc_runtime_IGateProvider_enter
S#define IGateProvider_enter_fxnP xdc_runtime_IGateProvider_enter_fxnP
S#define IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_FxnT
S#define IGateProvider_leave xdc_runtime_IGateProvider_leave
S#define IGateProvider_leave_fxnP xdc_runtime_IGateProvider_leave_fxnP
S#define IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_FxnT
S#define IGateProvider_Module_name xdc_runtime_IGateProvider_Module_name
S#define IGateProvider_create xdc_runtime_IGateProvider_create
S#define IGateProvider_delete xdc_runtime_IGateProvider_delete
S#define IGateProvider_Handle_label xdc_runtime_IGateProvider_Handle_label
S#define IGateProvider_Handle_to_Module xdc_runtime_IGateProvider_Handle_to_Module
S
S#endif /* xdc_runtime_IGateProvider__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N#include <ti/sysbios/package/BIOS_RtsGateProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/BIOS_RtsGateProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_BIOS_RtsGateProxy__include
N#define ti_sysbios_BIOS_RtsGateProxy__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_BIOS_RtsGateProxy__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_BIOS_RtsGateProxy___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/BIOS_RtsGateProxy.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/BIOS_RtsGateProxy.h" 2
N#include <ti/sysbios/package/package.defs.h>
N
N#include <xdc/runtime/IGateProvider.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IGateProvider.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IGateProvider__include
S#define xdc_runtime_IGateProvider__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IGateProvider__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IGateProvider___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Q_BLOCKING */
S#define xdc_runtime_IGateProvider_Q_BLOCKING (1)
S
S/* Q_PREEMPTING */
S#define xdc_runtime_IGateProvider_Q_PREEMPTING (2)
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IGateProvider_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IGateProvider_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Bool (*query)(xdc_Int qual);
S    xdc_IArg (*enter)(void* inst);
S    xdc_Void (*leave)(void* inst, xdc_IArg key);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IGateProvider_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C;
S#else
S#define xdc_runtime_IGateProvider_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IGateProvider_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IGateProvider_create, "xdc_runtime_IGateProvider_create")
S__extern xdc_runtime_IGateProvider_Handle xdc_runtime_IGateProvider_create(xdc_runtime_IGateProvider_Module mod, const xdc_runtime_IGateProvider_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IGateProvider_delete, "xdc_runtime_IGateProvider_delete")
S__extern xdc_Void xdc_runtime_IGateProvider_delete(xdc_runtime_IGateProvider_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_Module xdc_runtime_IGateProvider_Handle_to_Module(xdc_runtime_IGateProvider_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IGateProvider_Handle_label(xdc_runtime_IGateProvider_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IGateProvider_Module_id(xdc_runtime_IGateProvider_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* query */
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query(xdc_runtime_IGateProvider_Module mod, xdc_Int qual);
Sstatic inline xdc_Bool xdc_runtime_IGateProvider_query( xdc_runtime_IGateProvider_Module mod, xdc_Int qual )
S{
S    return mod->query(qual);
S}
S
S/* enter */
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_IArg xdc_runtime_IGateProvider_enter( xdc_runtime_IGateProvider_Handle inst )
S{
S    return inst->__fxns->enter((void*)inst);
S}
S
S/* leave */
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave(xdc_runtime_IGateProvider_Handle inst, xdc_IArg key);
Sstatic inline xdc_Void xdc_runtime_IGateProvider_leave( xdc_runtime_IGateProvider_Handle inst, xdc_IArg key )
S{
S    inst->__fxns->leave((void*)inst, key);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* query_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IGateProvider_query_FxnT)(xdc_Int qual);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod);
Sstatic inline xdc_runtime_IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_fxnP(xdc_runtime_IGateProvider_Module mod)
S{
S    return (xdc_runtime_IGateProvider_query_FxnT)mod->query;
S}
S
S/* enter_{FxnT,fxnP} */
Stypedef xdc_IArg (*xdc_runtime_IGateProvider_enter_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_enter_FxnT)inst->__fxns->enter;
S}
S
S/* leave_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IGateProvider_leave_FxnT)(xdc_Void *inst, xdc_IArg key);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst);
Sstatic inline xdc_runtime_IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_fxnP(xdc_runtime_IGateProvider_Handle inst)
S{
S    return (xdc_runtime_IGateProvider_leave_FxnT)inst->__fxns->leave;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IGateProvider__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IGateProvider__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IGateProvider__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IGateProvider__localnames__done
S#define xdc_runtime_IGateProvider__localnames__done
S
S/* module prefix */
S#define IGateProvider_Instance xdc_runtime_IGateProvider_Instance
S#define IGateProvider_Handle xdc_runtime_IGateProvider_Handle
S#define IGateProvider_Module xdc_runtime_IGateProvider_Module
S#define IGateProvider_Q_BLOCKING xdc_runtime_IGateProvider_Q_BLOCKING
S#define IGateProvider_Q_PREEMPTING xdc_runtime_IGateProvider_Q_PREEMPTING
S#define IGateProvider_Params xdc_runtime_IGateProvider_Params
S#define IGateProvider_query xdc_runtime_IGateProvider_query
S#define IGateProvider_query_fxnP xdc_runtime_IGateProvider_query_fxnP
S#define IGateProvider_query_FxnT xdc_runtime_IGateProvider_query_FxnT
S#define IGateProvider_enter xdc_runtime_IGateProvider_enter
S#define IGateProvider_enter_fxnP xdc_runtime_IGateProvider_enter_fxnP
S#define IGateProvider_enter_FxnT xdc_runtime_IGateProvider_enter_FxnT
S#define IGateProvider_leave xdc_runtime_IGateProvider_leave
S#define IGateProvider_leave_fxnP xdc_runtime_IGateProvider_leave_fxnP
S#define IGateProvider_leave_FxnT xdc_runtime_IGateProvider_leave_FxnT
S#define IGateProvider_Module_name xdc_runtime_IGateProvider_Module_name
S#define IGateProvider_create xdc_runtime_IGateProvider_create
S#define IGateProvider_delete xdc_runtime_IGateProvider_delete
S#define IGateProvider_Handle_label xdc_runtime_IGateProvider_Handle_label
S#define IGateProvider_Handle_to_Module xdc_runtime_IGateProvider_Handle_to_Module
S
S#endif /* xdc_runtime_IGateProvider__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/BIOS_RtsGateProxy.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Q_BLOCKING */
N#define ti_sysbios_BIOS_RtsGateProxy_Q_BLOCKING (1)
N
N/* Q_PREEMPTING */
N#define ti_sysbios_BIOS_RtsGateProxy_Q_PREEMPTING (2)
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gateObj ti_sysbios_BIOS_RtsGateProxy_Module__gateObj__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gateObj ti_sysbios_BIOS_RtsGateProxy_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_BIOS_RtsGateProxy_Module__id;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__id ti_sysbios_BIOS_RtsGateProxy_Module__id__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__id ti_sysbios_BIOS_RtsGateProxy_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_BIOS_RtsGateProxy_Object__count;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__count ti_sysbios_BIOS_RtsGateProxy_Object__count__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Object__count ti_sysbios_BIOS_RtsGateProxy_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_BIOS_RtsGateProxy_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__heap ti_sysbios_BIOS_RtsGateProxy_Object__heap__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Object__heap ti_sysbios_BIOS_RtsGateProxy_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_BIOS_RtsGateProxy_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__sizeof ti_sysbios_BIOS_RtsGateProxy_Object__sizeof__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Object__sizeof ti_sysbios_BIOS_RtsGateProxy_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Object__table;
N__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__table ti_sysbios_BIOS_RtsGateProxy_Object__table__C;
Xextern  const CT__ti_sysbios_BIOS_RtsGateProxy_Object__table ti_sysbios_BIOS_RtsGateProxy_Object__table__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_BIOS_RtsGateProxy_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_BIOS_RtsGateProxy_Struct {
N    const ti_sysbios_BIOS_RtsGateProxy_Fxns__ *__fxns;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct ti_sysbios_BIOS_RtsGateProxy_Fxns__ {
N    xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2 *__sysp;
N    xdc_Bool (*query)(xdc_Int);
N    xdc_IArg (*enter)(ti_sysbios_BIOS_RtsGateProxy_Handle);
N    xdc_Void (*leave)(ti_sysbios_BIOS_RtsGateProxy_Handle, xdc_IArg);
X    void (*leave)(ti_sysbios_BIOS_RtsGateProxy_Handle, xdc_IArg);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N
N/* Module__FXNS__C */
N__extern const ti_sysbios_BIOS_RtsGateProxy_Fxns__ ti_sysbios_BIOS_RtsGateProxy_Module__FXNS__C;
Xextern const ti_sysbios_BIOS_RtsGateProxy_Fxns__ ti_sysbios_BIOS_RtsGateProxy_Module__FXNS__C;
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_BIOS_RtsGateProxy_Module_startup( state ) (-1)
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Handle__label__S, "ti_sysbios_BIOS_RtsGateProxy_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_BIOS_RtsGateProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_BIOS_RtsGateProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S, "ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__create__S, "ti_sysbios_BIOS_RtsGateProxy_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_create, "ti_sysbios_BIOS_RtsGateProxy_create")
X
N__extern ti_sysbios_BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_create( const ti_sysbios_BIOS_RtsGateProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_create( const ti_sysbios_BIOS_RtsGateProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__delete__S, "ti_sysbios_BIOS_RtsGateProxy_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_BIOS_RtsGateProxy_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_delete, "ti_sysbios_BIOS_RtsGateProxy_delete")
X
N__extern void ti_sysbios_BIOS_RtsGateProxy_delete(ti_sysbios_BIOS_RtsGateProxy_Handle *instp);
Xextern void ti_sysbios_BIOS_RtsGateProxy_delete(ti_sysbios_BIOS_RtsGateProxy_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S, "ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S( xdc_Ptr objp );
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__get__S, "ti_sysbios_BIOS_RtsGateProxy_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__first__S, "ti_sysbios_BIOS_RtsGateProxy_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__next__S, "ti_sysbios_BIOS_RtsGateProxy_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Params__init__S, "ti_sysbios_BIOS_RtsGateProxy_Params__init__S")
X
N__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_BIOS_RtsGateProxy_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* Proxy__abstract__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S, "ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S")
X
N__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S( void );
Xextern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S( void );
N
N/* Proxy__delegate__S */
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S, "ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S")
X
N__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S( void );
Xextern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S( void );
N
N/* query__E */
N#define ti_sysbios_BIOS_RtsGateProxy_query ti_sysbios_BIOS_RtsGateProxy_query__E
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_query__E, "ti_sysbios_BIOS_RtsGateProxy_query")
X
N__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_query__E( xdc_Int qual );
Xextern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_query__E( xdc_Int qual );
N
N/* enter__E */
N#define ti_sysbios_BIOS_RtsGateProxy_enter ti_sysbios_BIOS_RtsGateProxy_enter__E
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_enter__E, "ti_sysbios_BIOS_RtsGateProxy_enter")
X
N__extern xdc_IArg ti_sysbios_BIOS_RtsGateProxy_enter__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst );
Xextern xdc_IArg ti_sysbios_BIOS_RtsGateProxy_enter__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst );
N
N/* leave__E */
N#define ti_sysbios_BIOS_RtsGateProxy_leave ti_sysbios_BIOS_RtsGateProxy_leave__E
Nxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_leave__E, "ti_sysbios_BIOS_RtsGateProxy_leave")
X
N__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_leave__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst, xdc_IArg key );
Xextern void ti_sysbios_BIOS_RtsGateProxy_leave__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst, xdc_IArg key );
N
N
N/*
N * ======== CONVERTORS ========
N */
N
N/* Module_upCast */
Nstatic inline xdc_runtime_IGateProvider_Module ti_sysbios_BIOS_RtsGateProxy_Module_upCast( void )
N{
N    return (xdc_runtime_IGateProvider_Module)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S();
N}
N
N/* Module_to_xdc_runtime_IGateProvider */
N#define ti_sysbios_BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Module_upCast
N
N/* Handle_upCast */
Nstatic inline xdc_runtime_IGateProvider_Handle ti_sysbios_BIOS_RtsGateProxy_Handle_upCast( ti_sysbios_BIOS_RtsGateProxy_Handle i )
N{
N    return (xdc_runtime_IGateProvider_Handle)i;
N}
N
N/* Handle_to_xdc_runtime_IGateProvider */
N#define ti_sysbios_BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_upCast
N
N/* Handle_downCast */
Nstatic inline ti_sysbios_BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_Handle_downCast( xdc_runtime_IGateProvider_Handle i )
N{
N    xdc_runtime_IGateProvider_Handle i2 = (xdc_runtime_IGateProvider_Handle)i;
Nif (ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S()) return (ti_sysbios_BIOS_RtsGateProxy_Handle)i;
N    return (void*)i2->__fxns == (void*)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S() ? (ti_sysbios_BIOS_RtsGateProxy_Handle)i : 0;
N}
N
N/* Handle_from_xdc_runtime_IGateProvider */
N#define ti_sysbios_BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_downCast
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_BIOS_RtsGateProxy_Module_startupDone() ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_BIOS_RtsGateProxy_Object_heap() ti_sysbios_BIOS_RtsGateProxy_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_BIOS_RtsGateProxy_Module_heap() ti_sysbios_BIOS_RtsGateProxy_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_BIOS_RtsGateProxy_Module__id ti_sysbios_BIOS_RtsGateProxy_Module_id( void ) 
N{
N    return ti_sysbios_BIOS_RtsGateProxy_Module__id__C;
N}
N
N/* Proxy_abstract */
N#define ti_sysbios_BIOS_RtsGateProxy_Proxy_abstract() ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S()
N
N/* Proxy_delegate */
N#define ti_sysbios_BIOS_RtsGateProxy_Proxy_delegate() ((xdc_runtime_IGateProvider_Module)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S())
N
N/* Params_init */
Nstatic inline void ti_sysbios_BIOS_RtsGateProxy_Params_init( ti_sysbios_BIOS_RtsGateProxy_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_BIOS_RtsGateProxy_Params__init__S(prms, 0, sizeof(ti_sysbios_BIOS_RtsGateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_BIOS_RtsGateProxy_Params_copy(ti_sysbios_BIOS_RtsGateProxy_Params *dst, const ti_sysbios_BIOS_RtsGateProxy_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_BIOS_RtsGateProxy_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_BIOS_RtsGateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_BIOS_RtsGateProxy__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_BIOS_RtsGateProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_BIOS_RtsGateProxy__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_BIOS_RtsGateProxy__localnames__done
S#define ti_sysbios_BIOS_RtsGateProxy__localnames__done
S
S/* module prefix */
S#define BIOS_RtsGateProxy_Instance ti_sysbios_BIOS_RtsGateProxy_Instance
S#define BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_Handle
S#define BIOS_RtsGateProxy_Module ti_sysbios_BIOS_RtsGateProxy_Module
S#define BIOS_RtsGateProxy_Object ti_sysbios_BIOS_RtsGateProxy_Object
S#define BIOS_RtsGateProxy_Struct ti_sysbios_BIOS_RtsGateProxy_Struct
S#define BIOS_RtsGateProxy_Q_BLOCKING ti_sysbios_BIOS_RtsGateProxy_Q_BLOCKING
S#define BIOS_RtsGateProxy_Q_PREEMPTING ti_sysbios_BIOS_RtsGateProxy_Q_PREEMPTING
S#define BIOS_RtsGateProxy_Params ti_sysbios_BIOS_RtsGateProxy_Params
S#define BIOS_RtsGateProxy_query ti_sysbios_BIOS_RtsGateProxy_query
S#define BIOS_RtsGateProxy_enter ti_sysbios_BIOS_RtsGateProxy_enter
S#define BIOS_RtsGateProxy_leave ti_sysbios_BIOS_RtsGateProxy_leave
S#define BIOS_RtsGateProxy_Module_name ti_sysbios_BIOS_RtsGateProxy_Module_name
S#define BIOS_RtsGateProxy_Module_id ti_sysbios_BIOS_RtsGateProxy_Module_id
S#define BIOS_RtsGateProxy_Module_startup ti_sysbios_BIOS_RtsGateProxy_Module_startup
S#define BIOS_RtsGateProxy_Module_startupDone ti_sysbios_BIOS_RtsGateProxy_Module_startupDone
S#define BIOS_RtsGateProxy_Module_hasMask ti_sysbios_BIOS_RtsGateProxy_Module_hasMask
S#define BIOS_RtsGateProxy_Module_getMask ti_sysbios_BIOS_RtsGateProxy_Module_getMask
S#define BIOS_RtsGateProxy_Module_setMask ti_sysbios_BIOS_RtsGateProxy_Module_setMask
S#define BIOS_RtsGateProxy_Object_heap ti_sysbios_BIOS_RtsGateProxy_Object_heap
S#define BIOS_RtsGateProxy_Module_heap ti_sysbios_BIOS_RtsGateProxy_Module_heap
S#define BIOS_RtsGateProxy_construct ti_sysbios_BIOS_RtsGateProxy_construct
S#define BIOS_RtsGateProxy_create ti_sysbios_BIOS_RtsGateProxy_create
S#define BIOS_RtsGateProxy_handle ti_sysbios_BIOS_RtsGateProxy_handle
S#define BIOS_RtsGateProxy_struct ti_sysbios_BIOS_RtsGateProxy_struct
S#define BIOS_RtsGateProxy_Handle_label ti_sysbios_BIOS_RtsGateProxy_Handle_label
S#define BIOS_RtsGateProxy_Handle_name ti_sysbios_BIOS_RtsGateProxy_Handle_name
S#define BIOS_RtsGateProxy_Instance_init ti_sysbios_BIOS_RtsGateProxy_Instance_init
S#define BIOS_RtsGateProxy_Object_count ti_sysbios_BIOS_RtsGateProxy_Object_count
S#define BIOS_RtsGateProxy_Object_get ti_sysbios_BIOS_RtsGateProxy_Object_get
S#define BIOS_RtsGateProxy_Object_first ti_sysbios_BIOS_RtsGateProxy_Object_first
S#define BIOS_RtsGateProxy_Object_next ti_sysbios_BIOS_RtsGateProxy_Object_next
S#define BIOS_RtsGateProxy_Object_sizeof ti_sysbios_BIOS_RtsGateProxy_Object_sizeof
S#define BIOS_RtsGateProxy_Params_copy ti_sysbios_BIOS_RtsGateProxy_Params_copy
S#define BIOS_RtsGateProxy_Params_init ti_sysbios_BIOS_RtsGateProxy_Params_init
S#define BIOS_RtsGateProxy_Instance_State ti_sysbios_BIOS_RtsGateProxy_Instance_State
S#define BIOS_RtsGateProxy_Proxy_abstract ti_sysbios_BIOS_RtsGateProxy_Proxy_abstract
S#define BIOS_RtsGateProxy_Proxy_delegate ti_sysbios_BIOS_RtsGateProxy_Proxy_delegate
S#define BIOS_RtsGateProxy_delete ti_sysbios_BIOS_RtsGateProxy_delete
S#define BIOS_RtsGateProxy_destruct ti_sysbios_BIOS_RtsGateProxy_destruct
S#define BIOS_RtsGateProxy_Module_upCast ti_sysbios_BIOS_RtsGateProxy_Module_upCast
S#define BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider
S#define BIOS_RtsGateProxy_Handle_upCast ti_sysbios_BIOS_RtsGateProxy_Handle_upCast
S#define BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider
S#define BIOS_RtsGateProxy_Handle_downCast ti_sysbios_BIOS_RtsGateProxy_Handle_downCast
S#define BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider
S
S#endif /* ti_sysbios_BIOS_RtsGateProxy__localnames__done */
N#endif
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* ThreadType */
Nenum ti_sysbios_BIOS_ThreadType {
N    ti_sysbios_BIOS_ThreadType_Hwi,
N    ti_sysbios_BIOS_ThreadType_Swi,
N    ti_sysbios_BIOS_ThreadType_Task,
N    ti_sysbios_BIOS_ThreadType_Main
N};
Ntypedef enum ti_sysbios_BIOS_ThreadType ti_sysbios_BIOS_ThreadType;
N
N/* RtsLockType */
Nenum ti_sysbios_BIOS_RtsLockType {
N    ti_sysbios_BIOS_NoLocking,
N    ti_sysbios_BIOS_GateHwi,
N    ti_sysbios_BIOS_GateSwi,
N    ti_sysbios_BIOS_GateMutex,
N    ti_sysbios_BIOS_GateMutexPri
N};
Ntypedef enum ti_sysbios_BIOS_RtsLockType ti_sysbios_BIOS_RtsLockType;
N
N/* LibType */
Nenum ti_sysbios_BIOS_LibType {
N    ti_sysbios_BIOS_LibType_Instrumented,
N    ti_sysbios_BIOS_LibType_NonInstrumented,
N    ti_sysbios_BIOS_LibType_Custom,
N    ti_sysbios_BIOS_LibType_Debug
N};
Ntypedef enum ti_sysbios_BIOS_LibType ti_sysbios_BIOS_LibType;
N
N/* WAIT_FOREVER */
N#define ti_sysbios_BIOS_WAIT_FOREVER (~(0))
N
N/* NO_WAIT */
N#define ti_sysbios_BIOS_NO_WAIT (0)
N
N/* StartupFuncPtr */
Ntypedef xdc_Void (*ti_sysbios_BIOS_StartupFuncPtr)(xdc_Void);
Xtypedef void (*ti_sysbios_BIOS_StartupFuncPtr)(void);
N
N/* version */
N#define ti_sysbios_BIOS_version (0x64501)
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* intSize */
Nstruct ti_sysbios_BIOS_intSize {
N    xdc_Int intSize;
N};
N
N/* StartFuncPtr */
Ntypedef xdc_Void (*ti_sysbios_BIOS_StartFuncPtr)(xdc_Void);
Xtypedef void (*ti_sysbios_BIOS_StartFuncPtr)(void);
N
N/* ExitFuncPtr */
Ntypedef xdc_Void (*ti_sysbios_BIOS_ExitFuncPtr)(xdc_Int);
Xtypedef void (*ti_sysbios_BIOS_ExitFuncPtr)(xdc_Int);
N
N/* Module_State */
Ntypedef ti_sysbios_BIOS_ThreadType __T1_ti_sysbios_BIOS_Module_State__smpThreadType;
Ntypedef ti_sysbios_BIOS_ThreadType *__ARRAY1_ti_sysbios_BIOS_Module_State__smpThreadType;
Ntypedef __ARRAY1_ti_sysbios_BIOS_Module_State__smpThreadType __TA_ti_sysbios_BIOS_Module_State__smpThreadType;
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_BIOS_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__diagsEnabled ti_sysbios_BIOS_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_Module__diagsEnabled ti_sysbios_BIOS_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_BIOS_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__diagsIncluded ti_sysbios_BIOS_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_BIOS_Module__diagsIncluded ti_sysbios_BIOS_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_BIOS_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__diagsMask ti_sysbios_BIOS_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_BIOS_Module__diagsMask ti_sysbios_BIOS_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__gateObj ti_sysbios_BIOS_Module__gateObj__C;
Xextern  const CT__ti_sysbios_BIOS_Module__gateObj ti_sysbios_BIOS_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__gatePrms ti_sysbios_BIOS_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_BIOS_Module__gatePrms ti_sysbios_BIOS_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_BIOS_Module__id;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__id ti_sysbios_BIOS_Module__id__C;
Xextern  const CT__ti_sysbios_BIOS_Module__id ti_sysbios_BIOS_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerDefined ti_sysbios_BIOS_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerDefined ti_sysbios_BIOS_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerObj ti_sysbios_BIOS_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerObj ti_sysbios_BIOS_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_BIOS_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerFxn0 ti_sysbios_BIOS_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerFxn0 ti_sysbios_BIOS_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_BIOS_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerFxn1 ti_sysbios_BIOS_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerFxn1 ti_sysbios_BIOS_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_BIOS_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerFxn2 ti_sysbios_BIOS_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerFxn2 ti_sysbios_BIOS_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_BIOS_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerFxn4 ti_sysbios_BIOS_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerFxn4 ti_sysbios_BIOS_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_BIOS_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__loggerFxn8 ti_sysbios_BIOS_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_BIOS_Module__loggerFxn8 ti_sysbios_BIOS_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_BIOS_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_BIOS_Module__startupDoneFxn ti_sysbios_BIOS_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_BIOS_Module__startupDoneFxn ti_sysbios_BIOS_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_BIOS_Object__count;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Object__count ti_sysbios_BIOS_Object__count__C;
Xextern  const CT__ti_sysbios_BIOS_Object__count ti_sysbios_BIOS_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_BIOS_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Object__heap ti_sysbios_BIOS_Object__heap__C;
Xextern  const CT__ti_sysbios_BIOS_Object__heap ti_sysbios_BIOS_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_BIOS_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Object__sizeof ti_sysbios_BIOS_Object__sizeof__C;
Xextern  const CT__ti_sysbios_BIOS_Object__sizeof ti_sysbios_BIOS_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_BIOS_Object__table;
N__extern __FAR__ const CT__ti_sysbios_BIOS_Object__table ti_sysbios_BIOS_Object__table__C;
Xextern  const CT__ti_sysbios_BIOS_Object__table ti_sysbios_BIOS_Object__table__C;
N
N/* smpEnabled */
N#ifdef ti_sysbios_BIOS_smpEnabled__D
S#define ti_sysbios_BIOS_smpEnabled (ti_sysbios_BIOS_smpEnabled__D)
N#else
N#define ti_sysbios_BIOS_smpEnabled (ti_sysbios_BIOS_smpEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_smpEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_smpEnabled ti_sysbios_BIOS_smpEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_smpEnabled ti_sysbios_BIOS_smpEnabled__C;
N#endif
N
N/* cpuFreq */
N#define ti_sysbios_BIOS_cpuFreq (ti_sysbios_BIOS_cpuFreq__C)
Ntypedef xdc_runtime_Types_FreqHz CT__ti_sysbios_BIOS_cpuFreq;
N__extern __FAR__ const CT__ti_sysbios_BIOS_cpuFreq ti_sysbios_BIOS_cpuFreq__C;
Xextern  const CT__ti_sysbios_BIOS_cpuFreq ti_sysbios_BIOS_cpuFreq__C;
N
N/* runtimeCreatesEnabled */
N#ifdef ti_sysbios_BIOS_runtimeCreatesEnabled__D
S#define ti_sysbios_BIOS_runtimeCreatesEnabled (ti_sysbios_BIOS_runtimeCreatesEnabled__D)
N#else
N#define ti_sysbios_BIOS_runtimeCreatesEnabled (ti_sysbios_BIOS_runtimeCreatesEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_runtimeCreatesEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_runtimeCreatesEnabled ti_sysbios_BIOS_runtimeCreatesEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_runtimeCreatesEnabled ti_sysbios_BIOS_runtimeCreatesEnabled__C;
N#endif
N
N/* taskEnabled */
N#ifdef ti_sysbios_BIOS_taskEnabled__D
S#define ti_sysbios_BIOS_taskEnabled (ti_sysbios_BIOS_taskEnabled__D)
N#else
N#define ti_sysbios_BIOS_taskEnabled (ti_sysbios_BIOS_taskEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_taskEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_taskEnabled ti_sysbios_BIOS_taskEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_taskEnabled ti_sysbios_BIOS_taskEnabled__C;
N#endif
N
N/* swiEnabled */
N#ifdef ti_sysbios_BIOS_swiEnabled__D
S#define ti_sysbios_BIOS_swiEnabled (ti_sysbios_BIOS_swiEnabled__D)
N#else
N#define ti_sysbios_BIOS_swiEnabled (ti_sysbios_BIOS_swiEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_swiEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_swiEnabled ti_sysbios_BIOS_swiEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_swiEnabled ti_sysbios_BIOS_swiEnabled__C;
N#endif
N
N/* clockEnabled */
N#ifdef ti_sysbios_BIOS_clockEnabled__D
S#define ti_sysbios_BIOS_clockEnabled (ti_sysbios_BIOS_clockEnabled__D)
N#else
N#define ti_sysbios_BIOS_clockEnabled (ti_sysbios_BIOS_clockEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_clockEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_clockEnabled ti_sysbios_BIOS_clockEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_clockEnabled ti_sysbios_BIOS_clockEnabled__C;
N#endif
N
N/* heapSize */
N#ifdef ti_sysbios_BIOS_heapSize__D
S#define ti_sysbios_BIOS_heapSize (ti_sysbios_BIOS_heapSize__D)
N#else
N#define ti_sysbios_BIOS_heapSize (ti_sysbios_BIOS_heapSize__C)
Ntypedef xdc_SizeT CT__ti_sysbios_BIOS_heapSize;
N__extern __FAR__ const CT__ti_sysbios_BIOS_heapSize ti_sysbios_BIOS_heapSize__C;
Xextern  const CT__ti_sysbios_BIOS_heapSize ti_sysbios_BIOS_heapSize__C;
N#endif
N
N/* heapSection */
N#define ti_sysbios_BIOS_heapSection (ti_sysbios_BIOS_heapSection__C)
Ntypedef xdc_String CT__ti_sysbios_BIOS_heapSection;
N__extern __FAR__ const CT__ti_sysbios_BIOS_heapSection ti_sysbios_BIOS_heapSection__C;
Xextern  const CT__ti_sysbios_BIOS_heapSection ti_sysbios_BIOS_heapSection__C;
N
N/* heapTrackEnabled */
N#ifdef ti_sysbios_BIOS_heapTrackEnabled__D
S#define ti_sysbios_BIOS_heapTrackEnabled (ti_sysbios_BIOS_heapTrackEnabled__D)
N#else
N#define ti_sysbios_BIOS_heapTrackEnabled (ti_sysbios_BIOS_heapTrackEnabled__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_heapTrackEnabled;
N__extern __FAR__ const CT__ti_sysbios_BIOS_heapTrackEnabled ti_sysbios_BIOS_heapTrackEnabled__C;
Xextern  const CT__ti_sysbios_BIOS_heapTrackEnabled ti_sysbios_BIOS_heapTrackEnabled__C;
N#endif
N
N/* setupSecureContext */
N#ifdef ti_sysbios_BIOS_setupSecureContext__D
S#define ti_sysbios_BIOS_setupSecureContext (ti_sysbios_BIOS_setupSecureContext__D)
N#else
N#define ti_sysbios_BIOS_setupSecureContext (ti_sysbios_BIOS_setupSecureContext__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_setupSecureContext;
N__extern __FAR__ const CT__ti_sysbios_BIOS_setupSecureContext ti_sysbios_BIOS_setupSecureContext__C;
Xextern  const CT__ti_sysbios_BIOS_setupSecureContext ti_sysbios_BIOS_setupSecureContext__C;
N#endif
N
N/* useSK */
N#ifdef ti_sysbios_BIOS_useSK__D
S#define ti_sysbios_BIOS_useSK (ti_sysbios_BIOS_useSK__D)
N#else
N#define ti_sysbios_BIOS_useSK (ti_sysbios_BIOS_useSK__C)
Ntypedef xdc_Bool CT__ti_sysbios_BIOS_useSK;
N__extern __FAR__ const CT__ti_sysbios_BIOS_useSK ti_sysbios_BIOS_useSK__C;
Xextern  const CT__ti_sysbios_BIOS_useSK ti_sysbios_BIOS_useSK__C;
N#endif
N
N/* installedErrorHook */
N#define ti_sysbios_BIOS_installedErrorHook (ti_sysbios_BIOS_installedErrorHook__C)
Ntypedef xdc_Void (*CT__ti_sysbios_BIOS_installedErrorHook)(xdc_runtime_Error_Block*);
Xtypedef void (*CT__ti_sysbios_BIOS_installedErrorHook)(xdc_runtime_Error_Block*);
N__extern __FAR__ const CT__ti_sysbios_BIOS_installedErrorHook ti_sysbios_BIOS_installedErrorHook__C;
Xextern  const CT__ti_sysbios_BIOS_installedErrorHook ti_sysbios_BIOS_installedErrorHook__C;
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_BIOS_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_BIOS_Module__startupDone__S, "ti_sysbios_BIOS_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_BIOS_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_BIOS_Module__startupDone__S( void );
N
N/* start__E */
N#define ti_sysbios_BIOS_start ti_sysbios_BIOS_start__E
Nxdc__CODESECT(ti_sysbios_BIOS_start__E, "ti_sysbios_BIOS_start")
X
N__extern xdc_Void ti_sysbios_BIOS_start__E( void );
Xextern void ti_sysbios_BIOS_start__E( void );
N
N/* exit__E */
N#define ti_sysbios_BIOS_exit ti_sysbios_BIOS_exit__E
Nxdc__CODESECT(ti_sysbios_BIOS_exit__E, "ti_sysbios_BIOS_exit")
X
N__extern xdc_Void ti_sysbios_BIOS_exit__E( xdc_Int stat );
Xextern void ti_sysbios_BIOS_exit__E( xdc_Int stat );
N
N/* getThreadType__E */
N#define ti_sysbios_BIOS_getThreadType ti_sysbios_BIOS_getThreadType__E
Nxdc__CODESECT(ti_sysbios_BIOS_getThreadType__E, "ti_sysbios_BIOS_getThreadType")
X
N__extern ti_sysbios_BIOS_ThreadType ti_sysbios_BIOS_getThreadType__E( void );
Xextern ti_sysbios_BIOS_ThreadType ti_sysbios_BIOS_getThreadType__E( void );
N
N/* setThreadType__E */
N#define ti_sysbios_BIOS_setThreadType ti_sysbios_BIOS_setThreadType__E
Nxdc__CODESECT(ti_sysbios_BIOS_setThreadType__E, "ti_sysbios_BIOS_setThreadType")
X
N__extern ti_sysbios_BIOS_ThreadType ti_sysbios_BIOS_setThreadType__E( ti_sysbios_BIOS_ThreadType ttype );
Xextern ti_sysbios_BIOS_ThreadType ti_sysbios_BIOS_setThreadType__E( ti_sysbios_BIOS_ThreadType ttype );
N
N/* setCpuFreq__E */
N#define ti_sysbios_BIOS_setCpuFreq ti_sysbios_BIOS_setCpuFreq__E
Nxdc__CODESECT(ti_sysbios_BIOS_setCpuFreq__E, "ti_sysbios_BIOS_setCpuFreq")
X
N__extern xdc_Void ti_sysbios_BIOS_setCpuFreq__E( xdc_runtime_Types_FreqHz *freq );
Xextern void ti_sysbios_BIOS_setCpuFreq__E( xdc_runtime_Types_FreqHz *freq );
N
N/* getCpuFreq__E */
N#define ti_sysbios_BIOS_getCpuFreq ti_sysbios_BIOS_getCpuFreq__E
Nxdc__CODESECT(ti_sysbios_BIOS_getCpuFreq__E, "ti_sysbios_BIOS_getCpuFreq")
X
N__extern xdc_Void ti_sysbios_BIOS_getCpuFreq__E( xdc_runtime_Types_FreqHz *freq );
Xextern void ti_sysbios_BIOS_getCpuFreq__E( xdc_runtime_Types_FreqHz *freq );
N
N/* errorRaiseHook__I */
N#define ti_sysbios_BIOS_errorRaiseHook ti_sysbios_BIOS_errorRaiseHook__I
Nxdc__CODESECT(ti_sysbios_BIOS_errorRaiseHook__I, "ti_sysbios_BIOS_errorRaiseHook")
X
N__extern xdc_Void ti_sysbios_BIOS_errorRaiseHook__I( xdc_runtime_Error_Block *eb );
Xextern void ti_sysbios_BIOS_errorRaiseHook__I( xdc_runtime_Error_Block *eb );
N
N/* startFunc__I */
N#define ti_sysbios_BIOS_startFunc ti_sysbios_BIOS_startFunc__I
Nxdc__CODESECT(ti_sysbios_BIOS_startFunc__I, "ti_sysbios_BIOS_startFunc")
X
N__extern xdc_Void ti_sysbios_BIOS_startFunc__I( void );
Xextern void ti_sysbios_BIOS_startFunc__I( void );
N
N/* atExitFunc__I */
N#define ti_sysbios_BIOS_atExitFunc ti_sysbios_BIOS_atExitFunc__I
Nxdc__CODESECT(ti_sysbios_BIOS_atExitFunc__I, "ti_sysbios_BIOS_atExitFunc")
X
N__extern xdc_Void ti_sysbios_BIOS_atExitFunc__I( xdc_Int stat );
Xextern void ti_sysbios_BIOS_atExitFunc__I( xdc_Int stat );
N
N/* exitFunc__I */
N#define ti_sysbios_BIOS_exitFunc ti_sysbios_BIOS_exitFunc__I
Nxdc__CODESECT(ti_sysbios_BIOS_exitFunc__I, "ti_sysbios_BIOS_exitFunc")
X
N__extern xdc_Void ti_sysbios_BIOS_exitFunc__I( xdc_Int stat );
Xextern void ti_sysbios_BIOS_exitFunc__I( xdc_Int stat );
N
N/* registerRTSLock__I */
N#define ti_sysbios_BIOS_registerRTSLock ti_sysbios_BIOS_registerRTSLock__I
Nxdc__CODESECT(ti_sysbios_BIOS_registerRTSLock__I, "ti_sysbios_BIOS_registerRTSLock")
X
N__extern xdc_Void ti_sysbios_BIOS_registerRTSLock__I( void );
Xextern void ti_sysbios_BIOS_registerRTSLock__I( void );
N
N/* removeRTSLock__I */
N#define ti_sysbios_BIOS_removeRTSLock ti_sysbios_BIOS_removeRTSLock__I
Nxdc__CODESECT(ti_sysbios_BIOS_removeRTSLock__I, "ti_sysbios_BIOS_removeRTSLock")
X
N__extern xdc_Void ti_sysbios_BIOS_removeRTSLock__I( void );
Xextern void ti_sysbios_BIOS_removeRTSLock__I( void );
N
N/* rtsLock__I */
N#define ti_sysbios_BIOS_rtsLock ti_sysbios_BIOS_rtsLock__I
Nxdc__CODESECT(ti_sysbios_BIOS_rtsLock__I, "ti_sysbios_BIOS_rtsLock")
X
N__extern xdc_Void ti_sysbios_BIOS_rtsLock__I( void );
Xextern void ti_sysbios_BIOS_rtsLock__I( void );
N
N/* rtsUnlock__I */
N#define ti_sysbios_BIOS_rtsUnlock ti_sysbios_BIOS_rtsUnlock__I
Nxdc__CODESECT(ti_sysbios_BIOS_rtsUnlock__I, "ti_sysbios_BIOS_rtsUnlock")
X
N__extern xdc_Void ti_sysbios_BIOS_rtsUnlock__I( void );
Xextern void ti_sysbios_BIOS_rtsUnlock__I( void );
N
N/* nullFunc__I */
N#define ti_sysbios_BIOS_nullFunc ti_sysbios_BIOS_nullFunc__I
Nxdc__CODESECT(ti_sysbios_BIOS_nullFunc__I, "ti_sysbios_BIOS_nullFunc")
X
N__extern xdc_Void ti_sysbios_BIOS_nullFunc__I( void );
Xextern void ti_sysbios_BIOS_nullFunc__I( void );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_BIOS_Module_startupDone() ti_sysbios_BIOS_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_BIOS_Object_heap() ti_sysbios_BIOS_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_BIOS_Module_heap() ti_sysbios_BIOS_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_BIOS_Module__id ti_sysbios_BIOS_Module_id( void ) 
N{
N    return ti_sysbios_BIOS_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_BIOS_Module_hasMask( void ) 
N{
N    return ti_sysbios_BIOS_Module__diagsMask__C != NULL;
X    return ti_sysbios_BIOS_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_BIOS_Module_getMask( void ) 
N{
N    return ti_sysbios_BIOS_Module__diagsMask__C != NULL ? *ti_sysbios_BIOS_Module__diagsMask__C : 0;
X    return ti_sysbios_BIOS_Module__diagsMask__C != 0 ? *ti_sysbios_BIOS_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_BIOS_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_BIOS_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_BIOS_Module__diagsMask__C != NULL) *ti_sysbios_BIOS_Module__diagsMask__C = mask;
X    if (ti_sysbios_BIOS_Module__diagsMask__C != 0) *ti_sysbios_BIOS_Module__diagsMask__C = mask;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <ti/sysbios/BIOS__epilogue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS__epilogue.h" 1
N/*
N * Copyright (c) 2012, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifdef __TMS470__
N#if __TI_COMPILER_VERSION__ < 4009000
X#if 5002006 < 4009000
S#error "This version of BIOS requires the use of Arm codegen tools 4.9.0 or newer."
N#endif
N#endif
N
L 433 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N
N#ifdef ti_sysbios_BIOS__top__
N#undef __nested__
N#endif
N
N#endif /* ti_sysbios_BIOS__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_BIOS__internalaccess))
X#if 0L || (!0L && 0L)
S
S#ifndef ti_sysbios_BIOS__include_state
S#define ti_sysbios_BIOS__include_state
S
S/* Module_State */
Sstruct ti_sysbios_BIOS_Module_State {
S    xdc_runtime_Types_FreqHz cpuFreq;
S    xdc_UInt rtsGateCount;
S    xdc_IArg rtsGateKey;
S    ti_sysbios_BIOS_RtsGateProxy_Handle rtsGate;
S    ti_sysbios_BIOS_ThreadType threadType;
S    __TA_ti_sysbios_BIOS_Module_State__smpThreadType smpThreadType;
S    volatile ti_sysbios_BIOS_StartFuncPtr startFunc;
S    volatile ti_sysbios_BIOS_ExitFuncPtr exitFunc;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_BIOS_Module_State__ ti_sysbios_BIOS_Module__state__V;
S
S#endif /* ti_sysbios_BIOS__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_BIOS__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_BIOS__localnames__done
N#define ti_sysbios_BIOS__localnames__done
N
N/* module prefix */
N#define BIOS_ThreadType ti_sysbios_BIOS_ThreadType
N#define BIOS_RtsLockType ti_sysbios_BIOS_RtsLockType
N#define BIOS_LibType ti_sysbios_BIOS_LibType
N#define BIOS_WAIT_FOREVER ti_sysbios_BIOS_WAIT_FOREVER
N#define BIOS_NO_WAIT ti_sysbios_BIOS_NO_WAIT
N#define BIOS_StartupFuncPtr ti_sysbios_BIOS_StartupFuncPtr
N#define BIOS_version ti_sysbios_BIOS_version
N#define BIOS_intSize ti_sysbios_BIOS_intSize
N#define BIOS_StartFuncPtr ti_sysbios_BIOS_StartFuncPtr
N#define BIOS_ExitFuncPtr ti_sysbios_BIOS_ExitFuncPtr
N#define BIOS_Module_State ti_sysbios_BIOS_Module_State
N#define BIOS_ThreadType_Hwi ti_sysbios_BIOS_ThreadType_Hwi
N#define BIOS_ThreadType_Swi ti_sysbios_BIOS_ThreadType_Swi
N#define BIOS_ThreadType_Task ti_sysbios_BIOS_ThreadType_Task
N#define BIOS_ThreadType_Main ti_sysbios_BIOS_ThreadType_Main
N#define BIOS_NoLocking ti_sysbios_BIOS_NoLocking
N#define BIOS_GateHwi ti_sysbios_BIOS_GateHwi
N#define BIOS_GateSwi ti_sysbios_BIOS_GateSwi
N#define BIOS_GateMutex ti_sysbios_BIOS_GateMutex
N#define BIOS_GateMutexPri ti_sysbios_BIOS_GateMutexPri
N#define BIOS_LibType_Instrumented ti_sysbios_BIOS_LibType_Instrumented
N#define BIOS_LibType_NonInstrumented ti_sysbios_BIOS_LibType_NonInstrumented
N#define BIOS_LibType_Custom ti_sysbios_BIOS_LibType_Custom
N#define BIOS_LibType_Debug ti_sysbios_BIOS_LibType_Debug
N#define BIOS_smpEnabled ti_sysbios_BIOS_smpEnabled
N#define BIOS_cpuFreq ti_sysbios_BIOS_cpuFreq
N#define BIOS_runtimeCreatesEnabled ti_sysbios_BIOS_runtimeCreatesEnabled
N#define BIOS_taskEnabled ti_sysbios_BIOS_taskEnabled
N#define BIOS_swiEnabled ti_sysbios_BIOS_swiEnabled
N#define BIOS_clockEnabled ti_sysbios_BIOS_clockEnabled
N#define BIOS_heapSize ti_sysbios_BIOS_heapSize
N#define BIOS_heapSection ti_sysbios_BIOS_heapSection
N#define BIOS_heapTrackEnabled ti_sysbios_BIOS_heapTrackEnabled
N#define BIOS_setupSecureContext ti_sysbios_BIOS_setupSecureContext
N#define BIOS_useSK ti_sysbios_BIOS_useSK
N#define BIOS_installedErrorHook ti_sysbios_BIOS_installedErrorHook
N#define BIOS_start ti_sysbios_BIOS_start
N#define BIOS_exit ti_sysbios_BIOS_exit
N#define BIOS_getThreadType ti_sysbios_BIOS_getThreadType
N#define BIOS_setThreadType ti_sysbios_BIOS_setThreadType
N#define BIOS_setCpuFreq ti_sysbios_BIOS_setCpuFreq
N#define BIOS_getCpuFreq ti_sysbios_BIOS_getCpuFreq
N#define BIOS_Module_name ti_sysbios_BIOS_Module_name
N#define BIOS_Module_id ti_sysbios_BIOS_Module_id
N#define BIOS_Module_startup ti_sysbios_BIOS_Module_startup
N#define BIOS_Module_startupDone ti_sysbios_BIOS_Module_startupDone
N#define BIOS_Module_hasMask ti_sysbios_BIOS_Module_hasMask
N#define BIOS_Module_getMask ti_sysbios_BIOS_Module_getMask
N#define BIOS_Module_setMask ti_sysbios_BIOS_Module_setMask
N#define BIOS_Object_heap ti_sysbios_BIOS_Object_heap
N#define BIOS_Module_heap ti_sysbios_BIOS_Module_heap
N
N/* proxies */
N#include <ti/sysbios/package/BIOS_RtsGateProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/package/BIOS_RtsGateProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_BIOS_RtsGateProxy__include
S#define ti_sysbios_BIOS_RtsGateProxy__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_BIOS_RtsGateProxy__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_BIOS_RtsGateProxy___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/package/package.defs.h>
S
S#include <xdc/runtime/IGateProvider.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Q_BLOCKING */
S#define ti_sysbios_BIOS_RtsGateProxy_Q_BLOCKING (1)
S
S/* Q_PREEMPTING */
S#define ti_sysbios_BIOS_RtsGateProxy_Q_PREEMPTING (2)
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled ti_sysbios_BIOS_RtsGateProxy_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded ti_sysbios_BIOS_RtsGateProxy_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask ti_sysbios_BIOS_RtsGateProxy_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gateObj ti_sysbios_BIOS_RtsGateProxy_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms ti_sysbios_BIOS_RtsGateProxy_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_BIOS_RtsGateProxy_Module__id;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__id ti_sysbios_BIOS_RtsGateProxy_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined ti_sysbios_BIOS_RtsGateProxy_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj ti_sysbios_BIOS_RtsGateProxy_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8 ti_sysbios_BIOS_RtsGateProxy_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn ti_sysbios_BIOS_RtsGateProxy_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_BIOS_RtsGateProxy_Object__count;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__count ti_sysbios_BIOS_RtsGateProxy_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_BIOS_RtsGateProxy_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__heap ti_sysbios_BIOS_RtsGateProxy_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_BIOS_RtsGateProxy_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__sizeof ti_sysbios_BIOS_RtsGateProxy_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_BIOS_RtsGateProxy_Object__table;
S__extern __FAR__ const CT__ti_sysbios_BIOS_RtsGateProxy_Object__table ti_sysbios_BIOS_RtsGateProxy_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_BIOS_RtsGateProxy_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_BIOS_RtsGateProxy_Struct {
S    const ti_sysbios_BIOS_RtsGateProxy_Fxns__ *__fxns;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct ti_sysbios_BIOS_RtsGateProxy_Fxns__ {
S    xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2 *__sysp;
S    xdc_Bool (*query)(xdc_Int);
S    xdc_IArg (*enter)(ti_sysbios_BIOS_RtsGateProxy_Handle);
S    xdc_Void (*leave)(ti_sysbios_BIOS_RtsGateProxy_Handle, xdc_IArg);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S
S/* Module__FXNS__C */
S__extern const ti_sysbios_BIOS_RtsGateProxy_Fxns__ ti_sysbios_BIOS_RtsGateProxy_Module__FXNS__C;
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_BIOS_RtsGateProxy_Module_startup( state ) (-1)
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Handle__label__S, "ti_sysbios_BIOS_RtsGateProxy_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_BIOS_RtsGateProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S, "ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__create__S, "ti_sysbios_BIOS_RtsGateProxy_Object__create__S")
S__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_create, "ti_sysbios_BIOS_RtsGateProxy_create")
S__extern ti_sysbios_BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_create( const ti_sysbios_BIOS_RtsGateProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__delete__S, "ti_sysbios_BIOS_RtsGateProxy_Object__delete__S")
S__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_delete, "ti_sysbios_BIOS_RtsGateProxy_delete")
S__extern void ti_sysbios_BIOS_RtsGateProxy_delete(ti_sysbios_BIOS_RtsGateProxy_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S, "ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S")
S__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Object__destruct__S( xdc_Ptr objp );
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__get__S, "ti_sysbios_BIOS_RtsGateProxy_Object__get__S")
S__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__first__S, "ti_sysbios_BIOS_RtsGateProxy_Object__first__S")
S__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Object__next__S, "ti_sysbios_BIOS_RtsGateProxy_Object__next__S")
S__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Params__init__S, "ti_sysbios_BIOS_RtsGateProxy_Params__init__S")
S__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* Proxy__abstract__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S, "ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S")
S__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S( void );
S
S/* Proxy__delegate__S */
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S, "ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S")
S__extern xdc_Ptr ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S( void );
S
S/* query__E */
S#define ti_sysbios_BIOS_RtsGateProxy_query ti_sysbios_BIOS_RtsGateProxy_query__E
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_query__E, "ti_sysbios_BIOS_RtsGateProxy_query")
S__extern xdc_Bool ti_sysbios_BIOS_RtsGateProxy_query__E( xdc_Int qual );
S
S/* enter__E */
S#define ti_sysbios_BIOS_RtsGateProxy_enter ti_sysbios_BIOS_RtsGateProxy_enter__E
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_enter__E, "ti_sysbios_BIOS_RtsGateProxy_enter")
S__extern xdc_IArg ti_sysbios_BIOS_RtsGateProxy_enter__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst );
S
S/* leave__E */
S#define ti_sysbios_BIOS_RtsGateProxy_leave ti_sysbios_BIOS_RtsGateProxy_leave__E
Sxdc__CODESECT(ti_sysbios_BIOS_RtsGateProxy_leave__E, "ti_sysbios_BIOS_RtsGateProxy_leave")
S__extern xdc_Void ti_sysbios_BIOS_RtsGateProxy_leave__E( ti_sysbios_BIOS_RtsGateProxy_Handle __inst, xdc_IArg key );
S
S
S/*
S * ======== CONVERTORS ========
S */
S
S/* Module_upCast */
Sstatic inline xdc_runtime_IGateProvider_Module ti_sysbios_BIOS_RtsGateProxy_Module_upCast( void )
S{
S    return (xdc_runtime_IGateProvider_Module)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S();
S}
S
S/* Module_to_xdc_runtime_IGateProvider */
S#define ti_sysbios_BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Module_upCast
S
S/* Handle_upCast */
Sstatic inline xdc_runtime_IGateProvider_Handle ti_sysbios_BIOS_RtsGateProxy_Handle_upCast( ti_sysbios_BIOS_RtsGateProxy_Handle i )
S{
S    return (xdc_runtime_IGateProvider_Handle)i;
S}
S
S/* Handle_to_xdc_runtime_IGateProvider */
S#define ti_sysbios_BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_upCast
S
S/* Handle_downCast */
Sstatic inline ti_sysbios_BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_Handle_downCast( xdc_runtime_IGateProvider_Handle i )
S{
S    xdc_runtime_IGateProvider_Handle i2 = (xdc_runtime_IGateProvider_Handle)i;
Sif (ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S()) return (ti_sysbios_BIOS_RtsGateProxy_Handle)i;
S    return (void*)i2->__fxns == (void*)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S() ? (ti_sysbios_BIOS_RtsGateProxy_Handle)i : 0;
S}
S
S/* Handle_from_xdc_runtime_IGateProvider */
S#define ti_sysbios_BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_downCast
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_BIOS_RtsGateProxy_Module_startupDone() ti_sysbios_BIOS_RtsGateProxy_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_BIOS_RtsGateProxy_Object_heap() ti_sysbios_BIOS_RtsGateProxy_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_BIOS_RtsGateProxy_Module_heap() ti_sysbios_BIOS_RtsGateProxy_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_BIOS_RtsGateProxy_Module__id ti_sysbios_BIOS_RtsGateProxy_Module_id( void ) 
S{
S    return ti_sysbios_BIOS_RtsGateProxy_Module__id__C;
S}
S
S/* Proxy_abstract */
S#define ti_sysbios_BIOS_RtsGateProxy_Proxy_abstract() ti_sysbios_BIOS_RtsGateProxy_Proxy__abstract__S()
S
S/* Proxy_delegate */
S#define ti_sysbios_BIOS_RtsGateProxy_Proxy_delegate() ((xdc_runtime_IGateProvider_Module)ti_sysbios_BIOS_RtsGateProxy_Proxy__delegate__S())
S
S/* Params_init */
Sstatic inline void ti_sysbios_BIOS_RtsGateProxy_Params_init( ti_sysbios_BIOS_RtsGateProxy_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_BIOS_RtsGateProxy_Params__init__S(prms, 0, sizeof(ti_sysbios_BIOS_RtsGateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_BIOS_RtsGateProxy_Params_copy(ti_sysbios_BIOS_RtsGateProxy_Params *dst, const ti_sysbios_BIOS_RtsGateProxy_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_BIOS_RtsGateProxy_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_BIOS_RtsGateProxy_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_BIOS_RtsGateProxy__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_BIOS_RtsGateProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_BIOS_RtsGateProxy__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_BIOS_RtsGateProxy__localnames__done
N#define ti_sysbios_BIOS_RtsGateProxy__localnames__done
N
N/* module prefix */
N#define BIOS_RtsGateProxy_Instance ti_sysbios_BIOS_RtsGateProxy_Instance
N#define BIOS_RtsGateProxy_Handle ti_sysbios_BIOS_RtsGateProxy_Handle
N#define BIOS_RtsGateProxy_Module ti_sysbios_BIOS_RtsGateProxy_Module
N#define BIOS_RtsGateProxy_Object ti_sysbios_BIOS_RtsGateProxy_Object
N#define BIOS_RtsGateProxy_Struct ti_sysbios_BIOS_RtsGateProxy_Struct
N#define BIOS_RtsGateProxy_Q_BLOCKING ti_sysbios_BIOS_RtsGateProxy_Q_BLOCKING
N#define BIOS_RtsGateProxy_Q_PREEMPTING ti_sysbios_BIOS_RtsGateProxy_Q_PREEMPTING
N#define BIOS_RtsGateProxy_Params ti_sysbios_BIOS_RtsGateProxy_Params
N#define BIOS_RtsGateProxy_query ti_sysbios_BIOS_RtsGateProxy_query
N#define BIOS_RtsGateProxy_enter ti_sysbios_BIOS_RtsGateProxy_enter
N#define BIOS_RtsGateProxy_leave ti_sysbios_BIOS_RtsGateProxy_leave
N#define BIOS_RtsGateProxy_Module_name ti_sysbios_BIOS_RtsGateProxy_Module_name
N#define BIOS_RtsGateProxy_Module_id ti_sysbios_BIOS_RtsGateProxy_Module_id
N#define BIOS_RtsGateProxy_Module_startup ti_sysbios_BIOS_RtsGateProxy_Module_startup
N#define BIOS_RtsGateProxy_Module_startupDone ti_sysbios_BIOS_RtsGateProxy_Module_startupDone
N#define BIOS_RtsGateProxy_Module_hasMask ti_sysbios_BIOS_RtsGateProxy_Module_hasMask
N#define BIOS_RtsGateProxy_Module_getMask ti_sysbios_BIOS_RtsGateProxy_Module_getMask
N#define BIOS_RtsGateProxy_Module_setMask ti_sysbios_BIOS_RtsGateProxy_Module_setMask
N#define BIOS_RtsGateProxy_Object_heap ti_sysbios_BIOS_RtsGateProxy_Object_heap
N#define BIOS_RtsGateProxy_Module_heap ti_sysbios_BIOS_RtsGateProxy_Module_heap
N#define BIOS_RtsGateProxy_construct ti_sysbios_BIOS_RtsGateProxy_construct
N#define BIOS_RtsGateProxy_create ti_sysbios_BIOS_RtsGateProxy_create
N#define BIOS_RtsGateProxy_handle ti_sysbios_BIOS_RtsGateProxy_handle
N#define BIOS_RtsGateProxy_struct ti_sysbios_BIOS_RtsGateProxy_struct
N#define BIOS_RtsGateProxy_Handle_label ti_sysbios_BIOS_RtsGateProxy_Handle_label
N#define BIOS_RtsGateProxy_Handle_name ti_sysbios_BIOS_RtsGateProxy_Handle_name
N#define BIOS_RtsGateProxy_Instance_init ti_sysbios_BIOS_RtsGateProxy_Instance_init
N#define BIOS_RtsGateProxy_Object_count ti_sysbios_BIOS_RtsGateProxy_Object_count
N#define BIOS_RtsGateProxy_Object_get ti_sysbios_BIOS_RtsGateProxy_Object_get
N#define BIOS_RtsGateProxy_Object_first ti_sysbios_BIOS_RtsGateProxy_Object_first
N#define BIOS_RtsGateProxy_Object_next ti_sysbios_BIOS_RtsGateProxy_Object_next
N#define BIOS_RtsGateProxy_Object_sizeof ti_sysbios_BIOS_RtsGateProxy_Object_sizeof
N#define BIOS_RtsGateProxy_Params_copy ti_sysbios_BIOS_RtsGateProxy_Params_copy
N#define BIOS_RtsGateProxy_Params_init ti_sysbios_BIOS_RtsGateProxy_Params_init
N#define BIOS_RtsGateProxy_Instance_State ti_sysbios_BIOS_RtsGateProxy_Instance_State
N#define BIOS_RtsGateProxy_Proxy_abstract ti_sysbios_BIOS_RtsGateProxy_Proxy_abstract
N#define BIOS_RtsGateProxy_Proxy_delegate ti_sysbios_BIOS_RtsGateProxy_Proxy_delegate
N#define BIOS_RtsGateProxy_delete ti_sysbios_BIOS_RtsGateProxy_delete
N#define BIOS_RtsGateProxy_destruct ti_sysbios_BIOS_RtsGateProxy_destruct
N#define BIOS_RtsGateProxy_Module_upCast ti_sysbios_BIOS_RtsGateProxy_Module_upCast
N#define BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Module_to_xdc_runtime_IGateProvider
N#define BIOS_RtsGateProxy_Handle_upCast ti_sysbios_BIOS_RtsGateProxy_Handle_upCast
N#define BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_to_xdc_runtime_IGateProvider
N#define BIOS_RtsGateProxy_Handle_downCast ti_sysbios_BIOS_RtsGateProxy_Handle_downCast
N#define BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider ti_sysbios_BIOS_RtsGateProxy_Handle_from_xdc_runtime_IGateProvider
N
N#endif /* ti_sysbios_BIOS_RtsGateProxy__localnames__done */
N#endif
L 534 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/BIOS.h" 2
N
N#endif /* ti_sysbios_BIOS__localnames__done */
N#endif
L 39 "../bme280.c" 2
N#include <ti/sysbios/knl/Task.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Task__include
N#define ti_sysbios_knl_Task__include
N
N#ifndef __nested__
N#define __nested__
N#define ti_sysbios_knl_Task__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Task___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/knl/Task__prologue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task__prologue.h" 1
N/*
N * Copyright (c) 2012, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
L 58 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/package.defs.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N#ifndef ti_sysbios_knl__
N#define ti_sysbios_knl__
N
N
N/*
N * ======== module ti.sysbios.knl.Clock ========
N */
N
Ntypedef struct ti_sysbios_knl_Clock_Module_State ti_sysbios_knl_Clock_Module_State;
Ntypedef struct ti_sysbios_knl_Clock_Params ti_sysbios_knl_Clock_Params;
Ntypedef struct ti_sysbios_knl_Clock_Object ti_sysbios_knl_Clock_Object;
Ntypedef struct ti_sysbios_knl_Clock_Struct ti_sysbios_knl_Clock_Struct;
Ntypedef ti_sysbios_knl_Clock_Object* ti_sysbios_knl_Clock_Handle;
Ntypedef struct ti_sysbios_knl_Clock_Object__ ti_sysbios_knl_Clock_Instance_State;
Ntypedef ti_sysbios_knl_Clock_Object* ti_sysbios_knl_Clock_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Idle ========
N */
N
N
N/*
N * ======== module ti.sysbios.knl.Intrinsics ========
N */
N
Ntypedef struct ti_sysbios_knl_Intrinsics_Fxns__ ti_sysbios_knl_Intrinsics_Fxns__;
Ntypedef const ti_sysbios_knl_Intrinsics_Fxns__* ti_sysbios_knl_Intrinsics_Module;
N
N/*
N * ======== module ti.sysbios.knl.Event ========
N */
N
Ntypedef struct ti_sysbios_knl_Event_PendElem ti_sysbios_knl_Event_PendElem;
Ntypedef struct ti_sysbios_knl_Event_Params ti_sysbios_knl_Event_Params;
Ntypedef struct ti_sysbios_knl_Event_Object ti_sysbios_knl_Event_Object;
Ntypedef struct ti_sysbios_knl_Event_Struct ti_sysbios_knl_Event_Struct;
Ntypedef ti_sysbios_knl_Event_Object* ti_sysbios_knl_Event_Handle;
Ntypedef struct ti_sysbios_knl_Event_Object__ ti_sysbios_knl_Event_Instance_State;
Ntypedef ti_sysbios_knl_Event_Object* ti_sysbios_knl_Event_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Mailbox ========
N */
N
Ntypedef struct ti_sysbios_knl_Mailbox_MbxElem ti_sysbios_knl_Mailbox_MbxElem;
Ntypedef struct ti_sysbios_knl_Mailbox_Params ti_sysbios_knl_Mailbox_Params;
Ntypedef struct ti_sysbios_knl_Mailbox_Object ti_sysbios_knl_Mailbox_Object;
Ntypedef struct ti_sysbios_knl_Mailbox_Struct ti_sysbios_knl_Mailbox_Struct;
Ntypedef ti_sysbios_knl_Mailbox_Object* ti_sysbios_knl_Mailbox_Handle;
Ntypedef struct ti_sysbios_knl_Mailbox_Object__ ti_sysbios_knl_Mailbox_Instance_State;
Ntypedef ti_sysbios_knl_Mailbox_Object* ti_sysbios_knl_Mailbox_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Queue ========
N */
N
Ntypedef struct ti_sysbios_knl_Queue_Elem ti_sysbios_knl_Queue_Elem;
Ntypedef struct ti_sysbios_knl_Queue_Params ti_sysbios_knl_Queue_Params;
Ntypedef struct ti_sysbios_knl_Queue_Object ti_sysbios_knl_Queue_Object;
Ntypedef struct ti_sysbios_knl_Queue_Struct ti_sysbios_knl_Queue_Struct;
Ntypedef ti_sysbios_knl_Queue_Object* ti_sysbios_knl_Queue_Handle;
Ntypedef struct ti_sysbios_knl_Queue_Object__ ti_sysbios_knl_Queue_Instance_State;
Ntypedef ti_sysbios_knl_Queue_Object* ti_sysbios_knl_Queue_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Semaphore ========
N */
N
Ntypedef struct ti_sysbios_knl_Semaphore_PendElem ti_sysbios_knl_Semaphore_PendElem;
Ntypedef struct ti_sysbios_knl_Semaphore_Params ti_sysbios_knl_Semaphore_Params;
Ntypedef struct ti_sysbios_knl_Semaphore_Object ti_sysbios_knl_Semaphore_Object;
Ntypedef struct ti_sysbios_knl_Semaphore_Struct ti_sysbios_knl_Semaphore_Struct;
Ntypedef ti_sysbios_knl_Semaphore_Object* ti_sysbios_knl_Semaphore_Handle;
Ntypedef struct ti_sysbios_knl_Semaphore_Object__ ti_sysbios_knl_Semaphore_Instance_State;
Ntypedef ti_sysbios_knl_Semaphore_Object* ti_sysbios_knl_Semaphore_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Swi ========
N */
N
Ntypedef struct ti_sysbios_knl_Swi_HookSet ti_sysbios_knl_Swi_HookSet;
Ntypedef struct ti_sysbios_knl_Swi_Module_State ti_sysbios_knl_Swi_Module_State;
Ntypedef struct ti_sysbios_knl_Swi_Params ti_sysbios_knl_Swi_Params;
Ntypedef struct ti_sysbios_knl_Swi_Object ti_sysbios_knl_Swi_Object;
Ntypedef struct ti_sysbios_knl_Swi_Struct ti_sysbios_knl_Swi_Struct;
Ntypedef ti_sysbios_knl_Swi_Object* ti_sysbios_knl_Swi_Handle;
Ntypedef struct ti_sysbios_knl_Swi_Object__ ti_sysbios_knl_Swi_Instance_State;
Ntypedef ti_sysbios_knl_Swi_Object* ti_sysbios_knl_Swi_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Task ========
N */
N
Ntypedef struct ti_sysbios_knl_Task_Stat ti_sysbios_knl_Task_Stat;
Ntypedef struct ti_sysbios_knl_Task_HookSet ti_sysbios_knl_Task_HookSet;
Ntypedef struct ti_sysbios_knl_Task_PendElem ti_sysbios_knl_Task_PendElem;
Ntypedef struct ti_sysbios_knl_Task_Module_State ti_sysbios_knl_Task_Module_State;
Ntypedef struct ti_sysbios_knl_Task_RunQEntry ti_sysbios_knl_Task_RunQEntry;
Ntypedef struct ti_sysbios_knl_Task_Module_StateSmp ti_sysbios_knl_Task_Module_StateSmp;
Ntypedef struct ti_sysbios_knl_Task_Params ti_sysbios_knl_Task_Params;
Ntypedef struct ti_sysbios_knl_Task_Object ti_sysbios_knl_Task_Object;
Ntypedef struct ti_sysbios_knl_Task_Struct ti_sysbios_knl_Task_Struct;
Ntypedef ti_sysbios_knl_Task_Object* ti_sysbios_knl_Task_Handle;
Ntypedef struct ti_sysbios_knl_Task_Object__ ti_sysbios_knl_Task_Instance_State;
Ntypedef ti_sysbios_knl_Task_Object* ti_sysbios_knl_Task_Instance;
N
N/*
N * ======== module ti.sysbios.knl.Clock_TimerProxy ========
N */
N
Ntypedef struct ti_sysbios_knl_Clock_TimerProxy_Fxns__ ti_sysbios_knl_Clock_TimerProxy_Fxns__;
Ntypedef const ti_sysbios_knl_Clock_TimerProxy_Fxns__* ti_sysbios_knl_Clock_TimerProxy_Module;
Ntypedef struct ti_sysbios_knl_Clock_TimerProxy_Params ti_sysbios_knl_Clock_TimerProxy_Params;
Ntypedef struct ti_sysbios_interfaces_ITimer___Object *ti_sysbios_knl_Clock_TimerProxy_Handle;
N
N/*
N * ======== module ti.sysbios.knl.Intrinsics_SupportProxy ========
N */
N
Ntypedef struct ti_sysbios_knl_Intrinsics_SupportProxy_Fxns__ ti_sysbios_knl_Intrinsics_SupportProxy_Fxns__;
Ntypedef const ti_sysbios_knl_Intrinsics_SupportProxy_Fxns__* ti_sysbios_knl_Intrinsics_SupportProxy_Module;
N
N/*
N * ======== module ti.sysbios.knl.Task_SupportProxy ========
N */
N
Ntypedef struct ti_sysbios_knl_Task_SupportProxy_Fxns__ ti_sysbios_knl_Task_SupportProxy_Fxns__;
Ntypedef const ti_sysbios_knl_Task_SupportProxy_Fxns__* ti_sysbios_knl_Task_SupportProxy_Module;
N
N
N#endif /* ti_sysbios_knl__ */ 
L 59 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/Assert.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Assert__include
N#define xdc_runtime_Assert__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Assert__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Assert___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N#include <xdc/runtime/Assert__prologue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert__prologue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Assert__prologue__include
N#define xdc_runtime_Assert__prologue__include
N
N/*
N *  ======== Assert__prologue.h ========
N */
N#include <xdc/runtime/Main.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Main__include
S#define xdc_runtime_Main__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Main__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Main___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/IGateProvider.h>
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Main_Module__diagsEnabled__CR
S#define xdc_runtime_Main_Module__diagsEnabled__C (*((CT__xdc_runtime_Main_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsEnabled (xdc_runtime_Main_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Main_Module__diagsIncluded__CR
S#define xdc_runtime_Main_Module__diagsIncluded__C (*((CT__xdc_runtime_Main_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsIncluded (xdc_runtime_Main_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Main_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C;
S#ifdef xdc_runtime_Main_Module__diagsMask__CR
S#define xdc_runtime_Main_Module__diagsMask__C (*((CT__xdc_runtime_Main_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsMask (xdc_runtime_Main_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C;
S#ifdef xdc_runtime_Main_Module__gateObj__CR
S#define xdc_runtime_Main_Module__gateObj__C (*((CT__xdc_runtime_Main_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gateObj (xdc_runtime_Main_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C;
S#ifdef xdc_runtime_Main_Module__gatePrms__CR
S#define xdc_runtime_Main_Module__gatePrms__C (*((CT__xdc_runtime_Main_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Main_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gatePrms (xdc_runtime_Main_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Main_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C;
S#ifdef xdc_runtime_Main_Module__id__CR
S#define xdc_runtime_Main_Module__id__C (*((CT__xdc_runtime_Main_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module__id__C_offset)))
S#else
S#define xdc_runtime_Main_Module__id (xdc_runtime_Main_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Main_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C;
S#ifdef xdc_runtime_Main_Module__loggerDefined__CR
S#define xdc_runtime_Main_Module__loggerDefined__C (*((CT__xdc_runtime_Main_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerDefined (xdc_runtime_Main_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C;
S#ifdef xdc_runtime_Main_Module__loggerObj__CR
S#define xdc_runtime_Main_Module__loggerObj__C (*((CT__xdc_runtime_Main_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerObj (xdc_runtime_Main_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Main_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn0 xdc_runtime_Main_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn0__CR
S#define xdc_runtime_Main_Module__loggerFxn0__C (*((CT__xdc_runtime_Main_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn0 (xdc_runtime_Main_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Main_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn1 xdc_runtime_Main_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn1__CR
S#define xdc_runtime_Main_Module__loggerFxn1__C (*((CT__xdc_runtime_Main_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn1 (xdc_runtime_Main_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Main_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn2 xdc_runtime_Main_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn2__CR
S#define xdc_runtime_Main_Module__loggerFxn2__C (*((CT__xdc_runtime_Main_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn2 (xdc_runtime_Main_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Main_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn4__CR
S#define xdc_runtime_Main_Module__loggerFxn4__C (*((CT__xdc_runtime_Main_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn4 (xdc_runtime_Main_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Main_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn8__CR
S#define xdc_runtime_Main_Module__loggerFxn8__C (*((CT__xdc_runtime_Main_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn8 (xdc_runtime_Main_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Main_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C;
S#ifdef xdc_runtime_Main_Object__count__CR
S#define xdc_runtime_Main_Object__count__C (*((CT__xdc_runtime_Main_Object__count*)(xdcRomConstPtr + xdc_runtime_Main_Object__count__C_offset)))
S#else
S#define xdc_runtime_Main_Object__count (xdc_runtime_Main_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Main_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C;
S#ifdef xdc_runtime_Main_Object__heap__CR
S#define xdc_runtime_Main_Object__heap__C (*((CT__xdc_runtime_Main_Object__heap*)(xdcRomConstPtr + xdc_runtime_Main_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Main_Object__heap (xdc_runtime_Main_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Main_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C;
S#ifdef xdc_runtime_Main_Object__sizeof__CR
S#define xdc_runtime_Main_Object__sizeof__C (*((CT__xdc_runtime_Main_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Main_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Main_Object__sizeof (xdc_runtime_Main_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C;
S#ifdef xdc_runtime_Main_Object__table__CR
S#define xdc_runtime_Main_Object__table__C (*((CT__xdc_runtime_Main_Object__table*)(xdcRomConstPtr + xdc_runtime_Main_Object__table__C_offset)))
S#else
S#define xdc_runtime_Main_Object__table (xdc_runtime_Main_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Main_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Main_Module__startupDone__S, "xdc_runtime_Main_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Main_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Main_Module_startupDone() xdc_runtime_Main_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Main_Object_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Main_Module_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id(void);
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id( void ) 
S{
S    return xdc_runtime_Main_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void)
S{
S    return (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) ? *xdc_runtime_Main_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) {
S        *xdc_runtime_Main_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_Main__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Main__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Main__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Main__include_state
S#define xdc_runtime_Main__include_state
S
S
S#endif /* xdc_runtime_Main__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Main__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Main__localnames__done
S#define xdc_runtime_Main__localnames__done
S
S/* module prefix */
S#define Main_Module_name xdc_runtime_Main_Module_name
S#define Main_Module_id xdc_runtime_Main_Module_id
S#define Main_Module_startup xdc_runtime_Main_Module_startup
S#define Main_Module_startupDone xdc_runtime_Main_Module_startupDone
S#define Main_Module_hasMask xdc_runtime_Main_Module_hasMask
S#define Main_Module_getMask xdc_runtime_Main_Module_getMask
S#define Main_Module_setMask xdc_runtime_Main_Module_setMask
S#define Main_Object_heap xdc_runtime_Main_Object_heap
S#define Main_Module_heap xdc_runtime_Main_Module_heap
S
S/* proxies */
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S#endif /* xdc_runtime_Main__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 21 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert__prologue.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
N#define xdc_runtime_Diags__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Diags___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 2
N#include <xdc/runtime/Diags__prologue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags__prologue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Diags__prologue__include
N#define xdc_runtime_Diags__prologue__include
N
N/*
N *  ======== Diags__prologue.h ========
N *
N *  This header defines Module__* symbols for every Module__* value used
N *  by the Diags module's headers.  This allows non-module code to
N *  use the Diags module.  These symbols are normally defined in
N *  module internal headers (i.e., package/internal/<mod>.xdc.h) and they
N *  define a "current module context".
N */
N#include <xdc/runtime/Main.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Main__include
S#define xdc_runtime_Main__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Main__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Main___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/IGateProvider.h>
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Main_Module__diagsEnabled__CR
S#define xdc_runtime_Main_Module__diagsEnabled__C (*((CT__xdc_runtime_Main_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsEnabled (xdc_runtime_Main_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Main_Module__diagsIncluded__CR
S#define xdc_runtime_Main_Module__diagsIncluded__C (*((CT__xdc_runtime_Main_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsIncluded (xdc_runtime_Main_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Main_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C;
S#ifdef xdc_runtime_Main_Module__diagsMask__CR
S#define xdc_runtime_Main_Module__diagsMask__C (*((CT__xdc_runtime_Main_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsMask (xdc_runtime_Main_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C;
S#ifdef xdc_runtime_Main_Module__gateObj__CR
S#define xdc_runtime_Main_Module__gateObj__C (*((CT__xdc_runtime_Main_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gateObj (xdc_runtime_Main_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C;
S#ifdef xdc_runtime_Main_Module__gatePrms__CR
S#define xdc_runtime_Main_Module__gatePrms__C (*((CT__xdc_runtime_Main_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Main_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gatePrms (xdc_runtime_Main_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Main_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C;
S#ifdef xdc_runtime_Main_Module__id__CR
S#define xdc_runtime_Main_Module__id__C (*((CT__xdc_runtime_Main_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module__id__C_offset)))
S#else
S#define xdc_runtime_Main_Module__id (xdc_runtime_Main_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Main_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C;
S#ifdef xdc_runtime_Main_Module__loggerDefined__CR
S#define xdc_runtime_Main_Module__loggerDefined__C (*((CT__xdc_runtime_Main_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerDefined (xdc_runtime_Main_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C;
S#ifdef xdc_runtime_Main_Module__loggerObj__CR
S#define xdc_runtime_Main_Module__loggerObj__C (*((CT__xdc_runtime_Main_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerObj (xdc_runtime_Main_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Main_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn0 xdc_runtime_Main_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn0__CR
S#define xdc_runtime_Main_Module__loggerFxn0__C (*((CT__xdc_runtime_Main_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn0 (xdc_runtime_Main_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Main_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn1 xdc_runtime_Main_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn1__CR
S#define xdc_runtime_Main_Module__loggerFxn1__C (*((CT__xdc_runtime_Main_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn1 (xdc_runtime_Main_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Main_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn2 xdc_runtime_Main_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn2__CR
S#define xdc_runtime_Main_Module__loggerFxn2__C (*((CT__xdc_runtime_Main_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn2 (xdc_runtime_Main_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Main_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn4__CR
S#define xdc_runtime_Main_Module__loggerFxn4__C (*((CT__xdc_runtime_Main_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn4 (xdc_runtime_Main_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Main_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn8__CR
S#define xdc_runtime_Main_Module__loggerFxn8__C (*((CT__xdc_runtime_Main_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn8 (xdc_runtime_Main_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Main_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C;
S#ifdef xdc_runtime_Main_Object__count__CR
S#define xdc_runtime_Main_Object__count__C (*((CT__xdc_runtime_Main_Object__count*)(xdcRomConstPtr + xdc_runtime_Main_Object__count__C_offset)))
S#else
S#define xdc_runtime_Main_Object__count (xdc_runtime_Main_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Main_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C;
S#ifdef xdc_runtime_Main_Object__heap__CR
S#define xdc_runtime_Main_Object__heap__C (*((CT__xdc_runtime_Main_Object__heap*)(xdcRomConstPtr + xdc_runtime_Main_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Main_Object__heap (xdc_runtime_Main_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Main_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C;
S#ifdef xdc_runtime_Main_Object__sizeof__CR
S#define xdc_runtime_Main_Object__sizeof__C (*((CT__xdc_runtime_Main_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Main_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Main_Object__sizeof (xdc_runtime_Main_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C;
S#ifdef xdc_runtime_Main_Object__table__CR
S#define xdc_runtime_Main_Object__table__C (*((CT__xdc_runtime_Main_Object__table*)(xdcRomConstPtr + xdc_runtime_Main_Object__table__C_offset)))
S#else
S#define xdc_runtime_Main_Object__table (xdc_runtime_Main_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Main_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Main_Module__startupDone__S, "xdc_runtime_Main_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Main_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Main_Module_startupDone() xdc_runtime_Main_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Main_Object_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Main_Module_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id(void);
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id( void ) 
S{
S    return xdc_runtime_Main_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void)
S{
S    return (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) ? *xdc_runtime_Main_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) {
S        *xdc_runtime_Main_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_Main__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Main__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Main__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Main__include_state
S#define xdc_runtime_Main__include_state
S
S
S#endif /* xdc_runtime_Main__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Main__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Main__localnames__done
S#define xdc_runtime_Main__localnames__done
S
S/* module prefix */
S#define Main_Module_name xdc_runtime_Main_Module_name
S#define Main_Module_id xdc_runtime_Main_Module_id
S#define Main_Module_startup xdc_runtime_Main_Module_startup
S#define Main_Module_startupDone xdc_runtime_Main_Module_startupDone
S#define Main_Module_hasMask xdc_runtime_Main_Module_hasMask
S#define Main_Module_getMask xdc_runtime_Main_Module_getMask
S#define Main_Module_setMask xdc_runtime_Main_Module_setMask
S#define Main_Object_heap xdc_runtime_Main_Object_heap
S#define Main_Module_heap xdc_runtime_Main_Module_heap
S
S/* proxies */
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S#endif /* xdc_runtime_Main__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 27 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags__prologue.h" 2
N
N/*
N * Only define these symbols for xdc.runtime.Main if this file is not one that
N * will be included in the Registry. This check ensures that Registry.h (which
N * similarly defines these Module__* symbols) can be included in any order
N * relative to other xdc.runtime headers.
N */
N#ifndef Registry_CURDESC
N
N/*
N *  ======== Module__DGSINCL ========
N *  The set of diags categories that are runtime controllable _or_ always on
N *
N *  This costant is computed at config time and enables us to eliminate
N *  expensive runtime time checks and unnecessary data (the module's diags
N *  mask) when whole program optimization is used.
N */
N#undef Module__DGSINCL
N#ifdef xdc_runtime_Main_Module__diagsIncluded__CR
S#define Module__DGSINCL (*((CT__xdc_runtime_Main_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsIncluded__R_offset)))
N#else
N#define Module__DGSINCL xdc_runtime_Main_Module__diagsIncluded__C
N#endif
N
N/*
N *  ======== Module__DGSENAB ========
N *  The set of diags categories that are _always_ enabled
N *
N *  This costant is computed at config time and enables us to eliminate
N *  expensive runtime time checks and unnecessary data (the module's diags
N *  mask) when whole program optimization is used.
N */
N#undef Module__DGSENAB
N#ifdef xdc_runtime_Main_Module__diagsEnabled__CR
S#define Module__DGSENAB (*((CT__xdc_runtime_Main_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsEnabled__R_offset)))
N#else
N#define Module__DGSENAB xdc_runtime_Main_Module__diagsEnabled__C
N#endif
N
N/*
N *  ======== Module__DGSMASK ========
N *  Pointer to the set of diags categories that are runtime controllable
N */
N#undef Module__DGSMASK
N#ifdef xdc_runtime_Main_Module__diagsMask__CR
S#define Module__DGSMASK (*((CT__xdc_runtime_Main_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsMask__R_offset)))
N#else
N#define Module__DGSMASK xdc_runtime_Main_Module__diagsMask__C
N#endif
N
N/*
N *  ======== Module__MID ========
N */
N#undef Module__MID
N#ifdef xdc_runtime_Main_Module__id__CR
S#define Module__MID (*((CT__xdc_runtime_Main_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module__id__R_offset)))
N#else
N#define Module__MID xdc_runtime_Main_Module__id__C
N#endif
N
N#endif
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Mask */
Ntypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
N
N/* ENTRY */
N#define xdc_runtime_Diags_ENTRY (0x0001U)
N
N/* EXIT */
N#define xdc_runtime_Diags_EXIT (0x0002U)
N
N/* LIFECYCLE */
N#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
N
N/* INTERNAL */
N#define xdc_runtime_Diags_INTERNAL (0x0008U)
N
N/* ASSERT */
N#define xdc_runtime_Diags_ASSERT (0x0010U)
N
N/* STATUS */
N#define xdc_runtime_Diags_STATUS (0x0080U)
N
N/* LEVEL */
N#define xdc_runtime_Diags_LEVEL (0x0060U)
N
N/* USER1 */
N#define xdc_runtime_Diags_USER1 (0x0100U)
N
N/* USER2 */
N#define xdc_runtime_Diags_USER2 (0x0200U)
N
N/* USER3 */
N#define xdc_runtime_Diags_USER3 (0x0400U)
N
N/* USER4 */
N#define xdc_runtime_Diags_USER4 (0x0800U)
N
N/* USER5 */
N#define xdc_runtime_Diags_USER5 (0x1000U)
N
N/* USER6 */
N#define xdc_runtime_Diags_USER6 (0x2000U)
N
N/* USER7 */
N#define xdc_runtime_Diags_USER7 (0x4000U)
N
N/* INFO */
N#define xdc_runtime_Diags_INFO (0x4000U)
N
N/* USER8 */
N#define xdc_runtime_Diags_USER8 (0x8000U)
N
N/* ANALYSIS */
N#define xdc_runtime_Diags_ANALYSIS (0x8000U)
N
N/* ALL */
N#define xdc_runtime_Diags_ALL (0xFF9FU)
N
N/* ALL_LOGGING */
N#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
N
N/* EventLevel */
Nenum xdc_runtime_Diags_EventLevel {
N    xdc_runtime_Diags_LEVEL1 = 0x0,
N    xdc_runtime_Diags_LEVEL2 = 0x20,
N    xdc_runtime_Diags_LEVEL3 = 0x40,
N    xdc_runtime_Diags_LEVEL4 = 0x60
N};
Ntypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
N
N/* EMERGENCY */
N#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
N
N/* CRITICAL */
N#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
N
N/* ERROR */
N#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
N
N/* WARNING */
N#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* DictElem */
Nstruct xdc_runtime_Diags_DictElem {
N    xdc_runtime_Types_ModuleId modId;
N    xdc_runtime_Diags_Mask *maskAddr;
N};
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
N#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
N#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
N#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
Xextern  const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
N#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
N#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
N#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
Xextern  const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
N#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
N#else
N#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
Xextern  const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
N#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
N#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
Xextern  const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
N#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
N#else
N#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
N#endif
N
N/* setMaskEnabled */
Ntypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
N__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
Xextern  const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
N#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
N#else
N#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
N#else
N#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
N#endif
N#endif
N
N/* dictBase */
Ntypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
N__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
Xextern  const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
N#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
N#else
N#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Diags_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
N
N/* setMask__E */
N#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Nxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
X
N__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
Xextern void xdc_runtime_Diags_setMask__E( xdc_CString control );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Nstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
N{
N    return xdc_runtime_Diags_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
N{
N    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)0) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
X    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)0) {
N        *xdc_runtime_Diags_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <xdc/runtime/Diags__epilogue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags__epilogue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Diags__epilogue__include
N#define xdc_runtime_Diags__epilogue__include
N
N/*
N *  ======== xdc_runtime_Diags_query ========
N *  Returns true iff:
N *      1. the current module's included diags intersect evt's mask, and
N *      2. either the permanently enabled diags intersect evt's mask or
N *         the runtime controllable diags intersect evt's mask.
N *
N *  This macro relies on three "internal" macros which are defined in each
N *  module's internal header (e.g., package/internal/System.xdc.h):
N *      Module__DGSINCL - a const bit mask of bits that are _not_ ALWAYS_OFF
N *      Module__DGSENAB - a const bit mask of bits that are ALWAYS_ON
N *      Module__DGSMASK - a const pointer to a bit mask of currently enabled
N *                        diagnostics
N *  These macros reference module-specific variables generated at config
N *  time, when we know the value of these constants.
N *
N */
N#define xdc_runtime_Diags_query(evt) \
N    ((Module__DGSINCL & (evt)) != 0U \
N        && ((Module__DGSENAB & (evt)) != 0U || (*Module__DGSMASK & (evt)) != 0U))
X#define xdc_runtime_Diags_query(evt)     ((Module__DGSINCL & (evt)) != 0U         && ((Module__DGSENAB & (evt)) != 0U || (*Module__DGSMASK & (evt)) != 0U))
N
N/*
N *  ======== xdc_runtime_Diags_getLevel ========
N *  Returns the event level set in the given diags mask. The level is a value
N *  stored using two bits of the diags mask.
N */
N#define xdc_runtime_Diags_getLevel(mask) \
N    (xdc_runtime_Diags_LEVEL & (mask))
X#define xdc_runtime_Diags_getLevel(mask)     (xdc_runtime_Diags_LEVEL & (mask))
N
N/*
N *  ======== xdc_runtime_Diags_compareLevels ========
N *  The definition of the diags levels assigns the value '0' to the highest
N *  priority events and '3' to the lowest, so the comparison is done backwards.
N *  For example, for (LEVEL4 (0), LEVEL1 (3)) this must return false.
N */
N#define xdc_runtime_Diags_compareLevels(levelA, levelB) \
N    ((levelA) > (levelB))
X#define xdc_runtime_Diags_compareLevels(levelA, levelB)     ((levelA) > (levelB))
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 404 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 2
N
N#ifdef xdc_runtime_Diags__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 22 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert__prologue.h" 2
N
N/*
N *  ======== xdc_runtime_Assert_Id ========
N */
Ntypedef xdc_Bits32 xdc_runtime_Assert_Id;
N
N/*
N *  ======== Module__MID ========
N *  This definition allows non-module code to
N *  use the Assert module.  This symbol is normally defined in each
N *  module internal header (i.e., package/internal/<mod>.xdc.h).
N *
N *  Only do this if this file is not one that will be included in the Registry.
N *  This check ensures that Registry.h (which similarly defines these Module__*
N *  symbols) can be included in any order relative to other xdc.runtime
N *  headers.
N */
N#ifndef Registry_CURDESC
N
N#undef Module__MID
N#define Module__MID xdc_runtime_Main_Module__id__C
N
N#endif
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Assert_Module__diagsEnabled__CR
S#define xdc_runtime_Assert_Module__diagsEnabled__C (*((CT__xdc_runtime_Assert_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__diagsEnabled (xdc_runtime_Assert_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Assert_Module__diagsIncluded__CR
S#define xdc_runtime_Assert_Module__diagsIncluded__C (*((CT__xdc_runtime_Assert_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__diagsIncluded (xdc_runtime_Assert_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Assert_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
N#ifdef xdc_runtime_Assert_Module__diagsMask__CR
S#define xdc_runtime_Assert_Module__diagsMask__C (*((CT__xdc_runtime_Assert_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__diagsMask (xdc_runtime_Assert_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
N#ifdef xdc_runtime_Assert_Module__gateObj__CR
S#define xdc_runtime_Assert_Module__gateObj__C (*((CT__xdc_runtime_Assert_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__gateObj (xdc_runtime_Assert_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
N#ifdef xdc_runtime_Assert_Module__gatePrms__CR
S#define xdc_runtime_Assert_Module__gatePrms__C (*((CT__xdc_runtime_Assert_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__gatePrms (xdc_runtime_Assert_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Assert_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
Xextern  const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
N#ifdef xdc_runtime_Assert_Module__id__CR
S#define xdc_runtime_Assert_Module__id__C (*((CT__xdc_runtime_Assert_Module__id*)(xdcRomConstPtr + xdc_runtime_Assert_Module__id__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__id (xdc_runtime_Assert_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Assert_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
N#ifdef xdc_runtime_Assert_Module__loggerDefined__CR
S#define xdc_runtime_Assert_Module__loggerDefined__C (*((CT__xdc_runtime_Assert_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerDefined (xdc_runtime_Assert_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Assert_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
N#ifdef xdc_runtime_Assert_Module__loggerObj__CR
S#define xdc_runtime_Assert_Module__loggerObj__C (*((CT__xdc_runtime_Assert_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerObj (xdc_runtime_Assert_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Assert_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Assert_Module__loggerFxn0__CR
S#define xdc_runtime_Assert_Module__loggerFxn0__C (*((CT__xdc_runtime_Assert_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerFxn0 (xdc_runtime_Assert_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Assert_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Assert_Module__loggerFxn1__CR
S#define xdc_runtime_Assert_Module__loggerFxn1__C (*((CT__xdc_runtime_Assert_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerFxn1 (xdc_runtime_Assert_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Assert_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Assert_Module__loggerFxn2__CR
S#define xdc_runtime_Assert_Module__loggerFxn2__C (*((CT__xdc_runtime_Assert_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerFxn2 (xdc_runtime_Assert_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Assert_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Assert_Module__loggerFxn4__CR
S#define xdc_runtime_Assert_Module__loggerFxn4__C (*((CT__xdc_runtime_Assert_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerFxn4 (xdc_runtime_Assert_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Assert_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Assert_Module__loggerFxn8__CR
S#define xdc_runtime_Assert_Module__loggerFxn8__C (*((CT__xdc_runtime_Assert_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Assert_Module__loggerFxn8 (xdc_runtime_Assert_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Assert_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
Xextern  const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
N#ifdef xdc_runtime_Assert_Object__count__CR
S#define xdc_runtime_Assert_Object__count__C (*((CT__xdc_runtime_Assert_Object__count*)(xdcRomConstPtr + xdc_runtime_Assert_Object__count__C_offset)))
N#else
N#define xdc_runtime_Assert_Object__count (xdc_runtime_Assert_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Assert_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
Xextern  const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
N#ifdef xdc_runtime_Assert_Object__heap__CR
S#define xdc_runtime_Assert_Object__heap__C (*((CT__xdc_runtime_Assert_Object__heap*)(xdcRomConstPtr + xdc_runtime_Assert_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Assert_Object__heap (xdc_runtime_Assert_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Assert_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
N#ifdef xdc_runtime_Assert_Object__sizeof__CR
S#define xdc_runtime_Assert_Object__sizeof__C (*((CT__xdc_runtime_Assert_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Assert_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Assert_Object__sizeof (xdc_runtime_Assert_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Assert_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
Xextern  const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
N#ifdef xdc_runtime_Assert_Object__table__CR
S#define xdc_runtime_Assert_Object__table__C (*((CT__xdc_runtime_Assert_Object__table*)(xdcRomConstPtr + xdc_runtime_Assert_Object__table__C_offset)))
N#else
N#define xdc_runtime_Assert_Object__table (xdc_runtime_Assert_Object__table__C)
N#endif
N
N/* E_assertFailed */
Ntypedef xdc_runtime_Error_Id CT__xdc_runtime_Assert_E_assertFailed;
N__extern __FAR__ const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
Xextern  const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
N#ifdef xdc_runtime_Assert_E_assertFailed__CR
S#define xdc_runtime_Assert_E_assertFailed (*((CT__xdc_runtime_Assert_E_assertFailed*)(xdcRomConstPtr + xdc_runtime_Assert_E_assertFailed__C_offset)))
N#else
N#define xdc_runtime_Assert_E_assertFailed (xdc_runtime_Assert_E_assertFailed__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Assert_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Assert_Module__startupDone__S, "xdc_runtime_Assert_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
N
N/* raise__I */
N#define xdc_runtime_Assert_raise xdc_runtime_Assert_raise__I
Nxdc__CODESECT(xdc_runtime_Assert_raise__I, "xdc_runtime_Assert_raise")
X
N__extern xdc_Void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
Xextern void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Assert_Module_startupDone() xdc_runtime_Assert_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Assert_Object_heap() xdc_runtime_Assert_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Assert_Module_heap() xdc_runtime_Assert_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id(void);
Nstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id( void ) 
N{
N    return xdc_runtime_Assert_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void)
N{
N    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)0) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) {
X    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)0) {
N        *xdc_runtime_Assert_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <xdc/runtime/Assert__epilogue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert__epilogue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Assert__epilogue__include
N#define xdc_runtime_Assert__epilogue__include
N
N/*
N *  ======== xdc_runtime_Assert_getMask ========
N *  Convert an id into a mask
N */
N#define xdc_runtime_Assert_getMask(id) ( \
N    (id != 0U) ? ((id) & 0x0000FFFFU & ~xdc_runtime_Diags_ASSERT) \
N         : xdc_runtime_Diags_INTERNAL \
N)
X#define xdc_runtime_Assert_getMask(id) (     (id != 0U) ? ((id) & 0x0000FFFFU & ~xdc_runtime_Diags_ASSERT)          : xdc_runtime_Diags_INTERNAL )
N
N/*
N *  ======== xdc_runtime_Assert_isTrue ========
N */
N#ifndef xdc_runtime_Assert_DISABLE_ALL
N#ifdef xdc_runtime_Assert_DISABLE_CONDITIONAL_ASSERT
S
S#define xdc_runtime_Assert_isTrue(expr, id) (\
S    !(expr) ? \
S        xdc_runtime_Assert_raise__I(Module__MID, xdc_FILE__, __LINE__, ((xdc_runtime_Assert_Id)(id))) \
S        : (void)0)
X#define xdc_runtime_Assert_isTrue(expr, id) (    !(expr) ?         xdc_runtime_Assert_raise__I(Module__MID, xdc_FILE__, __LINE__, ((xdc_runtime_Assert_Id)(id)))         : (void)0)
S
S
N#else
N
N#define xdc_runtime_Assert_isTrue(expr, id) (\
N    (xdc_runtime_Diags_query(xdc_runtime_Diags_ASSERT)) ? ( \
N        ((((xdc_runtime_Assert_getMask((xdc_runtime_Assert_Id)(id)) == 0U) || xdc_runtime_Diags_query(xdc_runtime_Assert_getMask((xdc_runtime_Assert_Id)(id)))) && !(expr)) ? \
N         xdc_runtime_Assert_raise__I(Module__MID, xdc_FILE__, __LINE__, ((xdc_runtime_Assert_Id)(id))) : (void)0) \
N    ) : (void)0)
X#define xdc_runtime_Assert_isTrue(expr, id) (    (xdc_runtime_Diags_query(xdc_runtime_Diags_ASSERT)) ? (         ((((xdc_runtime_Assert_getMask((xdc_runtime_Assert_Id)(id)) == 0U) || xdc_runtime_Diags_query(xdc_runtime_Assert_getMask((xdc_runtime_Assert_Id)(id)))) && !(expr)) ?          xdc_runtime_Assert_raise__I(Module__MID, xdc_FILE__, __LINE__, ((xdc_runtime_Assert_Id)(id))) : (void)0)     ) : (void)0)
N
N#endif  /* xdc_runtime_Assert_DISABLE_CONDITIONAL_ASERT */
N
N#else
S
S#define xdc_runtime_Assert_isTrue(expr, id)
S
N#endif  /* xdc_runtime_Assert_DISABLE_ALL */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 306 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 2
N
N#ifdef xdc_runtime_Assert__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Assert__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Assert__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Assert__include_state
S#define xdc_runtime_Assert__include_state
S
S
S#endif /* xdc_runtime_Assert__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Assert__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Assert__localnames__done
S#define xdc_runtime_Assert__localnames__done
S
S/* module prefix */
S#define Assert_Id xdc_runtime_Assert_Id
S#define Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed
S#define Assert_isTrue xdc_runtime_Assert_isTrue
S#define Assert_Module_name xdc_runtime_Assert_Module_name
S#define Assert_Module_id xdc_runtime_Assert_Module_id
S#define Assert_Module_startup xdc_runtime_Assert_Module_startup
S#define Assert_Module_startupDone xdc_runtime_Assert_Module_startupDone
S#define Assert_Module_hasMask xdc_runtime_Assert_Module_hasMask
S#define Assert_Module_getMask xdc_runtime_Assert_Module_getMask
S#define Assert_Module_setMask xdc_runtime_Assert_Module_setMask
S#define Assert_Object_heap xdc_runtime_Assert_Object_heap
S#define Assert_Module_heap xdc_runtime_Assert_Module_heap
S
S#endif /* xdc_runtime_Assert__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 63 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/Log.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Log__include
N#define xdc_runtime_Log__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Log__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Log___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N#include <xdc/runtime/Log__prologue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log__prologue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Log__prologue__include
N#define xdc_runtime_Log__prologue__include
N
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 18 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log__prologue.h" 2
N#include <xdc/runtime/Main.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Main.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Main__include
S#define xdc_runtime_Main__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Main__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Main___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/IGateProvider.h>
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Main_Module__diagsEnabled__CR
S#define xdc_runtime_Main_Module__diagsEnabled__C (*((CT__xdc_runtime_Main_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsEnabled (xdc_runtime_Main_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Main_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Main_Module__diagsIncluded__CR
S#define xdc_runtime_Main_Module__diagsIncluded__C (*((CT__xdc_runtime_Main_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsIncluded (xdc_runtime_Main_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Main_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C;
S#ifdef xdc_runtime_Main_Module__diagsMask__CR
S#define xdc_runtime_Main_Module__diagsMask__C (*((CT__xdc_runtime_Main_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Main_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Main_Module__diagsMask (xdc_runtime_Main_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C;
S#ifdef xdc_runtime_Main_Module__gateObj__CR
S#define xdc_runtime_Main_Module__gateObj__C (*((CT__xdc_runtime_Main_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gateObj (xdc_runtime_Main_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C;
S#ifdef xdc_runtime_Main_Module__gatePrms__CR
S#define xdc_runtime_Main_Module__gatePrms__C (*((CT__xdc_runtime_Main_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Main_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Main_Module__gatePrms (xdc_runtime_Main_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Main_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C;
S#ifdef xdc_runtime_Main_Module__id__CR
S#define xdc_runtime_Main_Module__id__C (*((CT__xdc_runtime_Main_Module__id*)(xdcRomConstPtr + xdc_runtime_Main_Module__id__C_offset)))
S#else
S#define xdc_runtime_Main_Module__id (xdc_runtime_Main_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Main_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C;
S#ifdef xdc_runtime_Main_Module__loggerDefined__CR
S#define xdc_runtime_Main_Module__loggerDefined__C (*((CT__xdc_runtime_Main_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerDefined (xdc_runtime_Main_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C;
S#ifdef xdc_runtime_Main_Module__loggerObj__CR
S#define xdc_runtime_Main_Module__loggerObj__C (*((CT__xdc_runtime_Main_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerObj (xdc_runtime_Main_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Main_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn0 xdc_runtime_Main_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn0__CR
S#define xdc_runtime_Main_Module__loggerFxn0__C (*((CT__xdc_runtime_Main_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn0 (xdc_runtime_Main_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Main_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn1 xdc_runtime_Main_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn1__CR
S#define xdc_runtime_Main_Module__loggerFxn1__C (*((CT__xdc_runtime_Main_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn1 (xdc_runtime_Main_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Main_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn2 xdc_runtime_Main_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn2__CR
S#define xdc_runtime_Main_Module__loggerFxn2__C (*((CT__xdc_runtime_Main_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn2 (xdc_runtime_Main_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Main_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn4__CR
S#define xdc_runtime_Main_Module__loggerFxn4__C (*((CT__xdc_runtime_Main_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn4 (xdc_runtime_Main_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Main_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Main_Module__loggerFxn8__CR
S#define xdc_runtime_Main_Module__loggerFxn8__C (*((CT__xdc_runtime_Main_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Main_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Main_Module__loggerFxn8 (xdc_runtime_Main_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Main_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C;
S#ifdef xdc_runtime_Main_Object__count__CR
S#define xdc_runtime_Main_Object__count__C (*((CT__xdc_runtime_Main_Object__count*)(xdcRomConstPtr + xdc_runtime_Main_Object__count__C_offset)))
S#else
S#define xdc_runtime_Main_Object__count (xdc_runtime_Main_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Main_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C;
S#ifdef xdc_runtime_Main_Object__heap__CR
S#define xdc_runtime_Main_Object__heap__C (*((CT__xdc_runtime_Main_Object__heap*)(xdcRomConstPtr + xdc_runtime_Main_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Main_Object__heap (xdc_runtime_Main_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Main_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C;
S#ifdef xdc_runtime_Main_Object__sizeof__CR
S#define xdc_runtime_Main_Object__sizeof__C (*((CT__xdc_runtime_Main_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Main_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Main_Object__sizeof (xdc_runtime_Main_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Main_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C;
S#ifdef xdc_runtime_Main_Object__table__CR
S#define xdc_runtime_Main_Object__table__C (*((CT__xdc_runtime_Main_Object__table*)(xdcRomConstPtr + xdc_runtime_Main_Object__table__C_offset)))
S#else
S#define xdc_runtime_Main_Object__table (xdc_runtime_Main_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Main_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Main_Module__startupDone__S, "xdc_runtime_Main_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Main_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Main_Module_startupDone() xdc_runtime_Main_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Main_Object_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Main_Module_heap() xdc_runtime_Main_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id(void);
Sstatic inline CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module_id( void ) 
S{
S    return xdc_runtime_Main_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Main_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Main_Module_getMask(void)
S{
S    return (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) ? *xdc_runtime_Main_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Main_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Main_Module__diagsMask__C != (CT__xdc_runtime_Main_Module__diagsMask)NULL) {
S        *xdc_runtime_Main_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_Main__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Main__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Main__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Main__include_state
S#define xdc_runtime_Main__include_state
S
S
S#endif /* xdc_runtime_Main__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Main__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Main__localnames__done
S#define xdc_runtime_Main__localnames__done
S
S/* module prefix */
S#define Main_Module_name xdc_runtime_Main_Module_name
S#define Main_Module_id xdc_runtime_Main_Module_id
S#define Main_Module_startup xdc_runtime_Main_Module_startup
S#define Main_Module_startupDone xdc_runtime_Main_Module_startupDone
S#define Main_Module_hasMask xdc_runtime_Main_Module_hasMask
S#define Main_Module_getMask xdc_runtime_Main_Module_getMask
S#define Main_Module_setMask xdc_runtime_Main_Module_setMask
S#define Main_Object_heap xdc_runtime_Main_Object_heap
S#define Main_Module_heap xdc_runtime_Main_Module_heap
S
S/* proxies */
S#include <xdc/runtime/package/Main_Module_GateProxy.h>
S
S#endif /* xdc_runtime_Main__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 19 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log__prologue.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 20 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log__prologue.h" 2
N
N/*
N *  ======== xdc_runtime_Log_Event ========
N *  Log_Event is an encoded type.  Log Events are encoded on the target as
N *  a 32-bit value:
N *
N *      | format rope | module ID or mask |
N *      | 31 ----- 16 | 15 ------------ 0 |
N *
N *  The lower 16-bits contain either a mask or a module ID; when the event
N *  is statically declared this field has a mask, when the event is passed
N *  to an ILogger this field is the module ID of the module that generated
N *  the event.
N *
N *  The upper 16-bits are an ID (rope) that that identifies the format
N *  string to use to render the event (and its arguments).
N */
Ntypedef xdc_Bits32 xdc_runtime_Log_Event;
N
N/*
N *  The following macros establish xdc.runtime.Main as the "default"
N *  module for all sources files not part of a module.
N *
N *      Module__MID     - the module's ID (see Text.xs)
N *      Module__LOGOBJ  - the module's logger object
N *      Module__LOGFXN0 - the module's logger's write0 function
N *      Module__LOGFXN1 - the module's logger's write1 function
N *      Module__LOGFXN2 - the module's logger's write2 function
N *      Module__LOGFXN4 - the module's logger's write4 function
N *      Module__LOGFXN8 - the module's logger's write8 function
N *      Module__LOGDEF  - 0 if the module has a logger, non-zero otherwise
N *
N *  Only define these symbols for xdc.runtime.Main if this file is not one that
N *  will be included in the Registry. This check ensures that Registry.h (which
N *  similarly defines these Module__* symbols) can be included in any order
N *  relative to other xdc.runtime headers.
N */
N#ifndef Registry_CURDESC
N 
N#undef Module__LOGDEF
N#define Module__LOGDEF xdc_runtime_Main_Module__loggerDefined__C
N#undef Module__LOGOBJ
N#define Module__LOGOBJ xdc_runtime_Main_Module__loggerObj__C
N#undef Module__LOGFXN0
N#define Module__LOGFXN0 xdc_runtime_Main_Module__loggerFxn0__C
N#undef Module__LOGFXN1
N#define Module__LOGFXN1 xdc_runtime_Main_Module__loggerFxn1__C
N#undef Module__LOGFXN2
N#define Module__LOGFXN2 xdc_runtime_Main_Module__loggerFxn2__C
N#undef Module__LOGFXN4
N#define Module__LOGFXN4 xdc_runtime_Main_Module__loggerFxn4__C
N#undef Module__LOGFXN8
N#define Module__LOGFXN8 xdc_runtime_Main_Module__loggerFxn8__C
N
N#undef Module__MID
N#define Module__MID xdc_runtime_Main_Module__id__C
N
N#endif
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N#include <xdc/runtime/Text.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Text.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Text__include
N#define xdc_runtime_Text__include
N
N#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Text__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define xdc_runtime_Text___VERS 200
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Text.h" 2
N#include <xdc/runtime/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Text.h" 2
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Text.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* CordAddr */
Ntypedef xdc_runtime_Types_CordAddr xdc_runtime_Text_CordAddr;
N
N/* Label */
Ntypedef xdc_runtime_Types_Label xdc_runtime_Text_Label;
N
N/* RopeId */
Ntypedef xdc_runtime_Types_RopeId xdc_runtime_Text_RopeId;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* Node */
Nstruct xdc_runtime_Text_Node {
N    xdc_runtime_Types_RopeId left;
N    xdc_runtime_Types_RopeId right;
N};
N
N/* RopeVisitor */
Ntypedef xdc_Bool (*xdc_runtime_Text_RopeVisitor)(xdc_Ptr arg1, xdc_CString arg2);
N
N/* MatchVisState */
Nstruct xdc_runtime_Text_MatchVisState {
N    xdc_CString pat;
N    xdc_UShort *lenp;
N    xdc_Int res;
N};
N
N/* PrintVisState */
Nstruct xdc_runtime_Text_PrintVisState {
N    xdc_Char **bufp;
N    xdc_UShort len;
N    xdc_Int res;
N};
N
N/* VisitRopeFxn */
Ntypedef xdc_Void (*xdc_runtime_Text_VisitRopeFxn)(xdc_runtime_Text_RopeId arg1, xdc_Fxn arg2, xdc_Ptr arg3);
Xtypedef void (*xdc_runtime_Text_VisitRopeFxn)(xdc_runtime_Text_RopeId arg1, xdc_Fxn arg2, xdc_Ptr arg3);
N
N/* VisitRopeFxn2 */
Ntypedef xdc_Void (*xdc_runtime_Text_VisitRopeFxn2)(xdc_runtime_Text_RopeId arg1, xdc_Fxn arg2, xdc_Ptr arg3, xdc_CString arg4[]);
Xtypedef void (*xdc_runtime_Text_VisitRopeFxn2)(xdc_runtime_Text_RopeId arg1, xdc_Fxn arg2, xdc_Ptr arg3, xdc_CString arg4[]);
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Text_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__diagsEnabled xdc_runtime_Text_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Text_Module__diagsEnabled xdc_runtime_Text_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Text_Module__diagsEnabled__CR
S#define xdc_runtime_Text_Module__diagsEnabled__C (*((CT__xdc_runtime_Text_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Text_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Text_Module__diagsEnabled (xdc_runtime_Text_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Text_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__diagsIncluded xdc_runtime_Text_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Text_Module__diagsIncluded xdc_runtime_Text_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Text_Module__diagsIncluded__CR
S#define xdc_runtime_Text_Module__diagsIncluded__C (*((CT__xdc_runtime_Text_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Text_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Text_Module__diagsIncluded (xdc_runtime_Text_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Text_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__diagsMask xdc_runtime_Text_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Text_Module__diagsMask xdc_runtime_Text_Module__diagsMask__C;
N#ifdef xdc_runtime_Text_Module__diagsMask__CR
S#define xdc_runtime_Text_Module__diagsMask__C (*((CT__xdc_runtime_Text_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Text_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Text_Module__diagsMask (xdc_runtime_Text_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Text_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__gateObj xdc_runtime_Text_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Text_Module__gateObj xdc_runtime_Text_Module__gateObj__C;
N#ifdef xdc_runtime_Text_Module__gateObj__CR
S#define xdc_runtime_Text_Module__gateObj__C (*((CT__xdc_runtime_Text_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Text_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Text_Module__gateObj (xdc_runtime_Text_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Text_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__gatePrms xdc_runtime_Text_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Text_Module__gatePrms xdc_runtime_Text_Module__gatePrms__C;
N#ifdef xdc_runtime_Text_Module__gatePrms__CR
S#define xdc_runtime_Text_Module__gatePrms__C (*((CT__xdc_runtime_Text_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Text_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Text_Module__gatePrms (xdc_runtime_Text_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Text_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__id xdc_runtime_Text_Module__id__C;
Xextern  const CT__xdc_runtime_Text_Module__id xdc_runtime_Text_Module__id__C;
N#ifdef xdc_runtime_Text_Module__id__CR
S#define xdc_runtime_Text_Module__id__C (*((CT__xdc_runtime_Text_Module__id*)(xdcRomConstPtr + xdc_runtime_Text_Module__id__C_offset)))
N#else
N#define xdc_runtime_Text_Module__id (xdc_runtime_Text_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Text_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerDefined xdc_runtime_Text_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerDefined xdc_runtime_Text_Module__loggerDefined__C;
N#ifdef xdc_runtime_Text_Module__loggerDefined__CR
S#define xdc_runtime_Text_Module__loggerDefined__C (*((CT__xdc_runtime_Text_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerDefined (xdc_runtime_Text_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Text_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerObj xdc_runtime_Text_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerObj xdc_runtime_Text_Module__loggerObj__C;
N#ifdef xdc_runtime_Text_Module__loggerObj__CR
S#define xdc_runtime_Text_Module__loggerObj__C (*((CT__xdc_runtime_Text_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerObj (xdc_runtime_Text_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Text_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerFxn0 xdc_runtime_Text_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerFxn0 xdc_runtime_Text_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Text_Module__loggerFxn0__CR
S#define xdc_runtime_Text_Module__loggerFxn0__C (*((CT__xdc_runtime_Text_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerFxn0 (xdc_runtime_Text_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Text_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerFxn1 xdc_runtime_Text_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerFxn1 xdc_runtime_Text_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Text_Module__loggerFxn1__CR
S#define xdc_runtime_Text_Module__loggerFxn1__C (*((CT__xdc_runtime_Text_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerFxn1 (xdc_runtime_Text_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Text_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerFxn2 xdc_runtime_Text_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerFxn2 xdc_runtime_Text_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Text_Module__loggerFxn2__CR
S#define xdc_runtime_Text_Module__loggerFxn2__C (*((CT__xdc_runtime_Text_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerFxn2 (xdc_runtime_Text_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Text_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerFxn4 xdc_runtime_Text_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerFxn4 xdc_runtime_Text_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Text_Module__loggerFxn4__CR
S#define xdc_runtime_Text_Module__loggerFxn4__C (*((CT__xdc_runtime_Text_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerFxn4 (xdc_runtime_Text_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Text_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Text_Module__loggerFxn8 xdc_runtime_Text_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Text_Module__loggerFxn8 xdc_runtime_Text_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Text_Module__loggerFxn8__CR
S#define xdc_runtime_Text_Module__loggerFxn8__C (*((CT__xdc_runtime_Text_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Text_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Text_Module__loggerFxn8 (xdc_runtime_Text_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Text_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Text_Object__count xdc_runtime_Text_Object__count__C;
Xextern  const CT__xdc_runtime_Text_Object__count xdc_runtime_Text_Object__count__C;
N#ifdef xdc_runtime_Text_Object__count__CR
S#define xdc_runtime_Text_Object__count__C (*((CT__xdc_runtime_Text_Object__count*)(xdcRomConstPtr + xdc_runtime_Text_Object__count__C_offset)))
N#else
N#define xdc_runtime_Text_Object__count (xdc_runtime_Text_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Text_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Text_Object__heap xdc_runtime_Text_Object__heap__C;
Xextern  const CT__xdc_runtime_Text_Object__heap xdc_runtime_Text_Object__heap__C;
N#ifdef xdc_runtime_Text_Object__heap__CR
S#define xdc_runtime_Text_Object__heap__C (*((CT__xdc_runtime_Text_Object__heap*)(xdcRomConstPtr + xdc_runtime_Text_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Text_Object__heap (xdc_runtime_Text_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Text_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Text_Object__sizeof xdc_runtime_Text_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Text_Object__sizeof xdc_runtime_Text_Object__sizeof__C;
N#ifdef xdc_runtime_Text_Object__sizeof__CR
S#define xdc_runtime_Text_Object__sizeof__C (*((CT__xdc_runtime_Text_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Text_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Text_Object__sizeof (xdc_runtime_Text_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Text_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Text_Object__table xdc_runtime_Text_Object__table__C;
Xextern  const CT__xdc_runtime_Text_Object__table xdc_runtime_Text_Object__table__C;
N#ifdef xdc_runtime_Text_Object__table__CR
S#define xdc_runtime_Text_Object__table__C (*((CT__xdc_runtime_Text_Object__table*)(xdcRomConstPtr + xdc_runtime_Text_Object__table__C_offset)))
N#else
N#define xdc_runtime_Text_Object__table (xdc_runtime_Text_Object__table__C)
N#endif
N
N/* nameUnknown */
Ntypedef xdc_String CT__xdc_runtime_Text_nameUnknown;
N__extern __FAR__ const CT__xdc_runtime_Text_nameUnknown xdc_runtime_Text_nameUnknown__C;
Xextern  const CT__xdc_runtime_Text_nameUnknown xdc_runtime_Text_nameUnknown__C;
N#ifdef xdc_runtime_Text_nameUnknown__CR
S#define xdc_runtime_Text_nameUnknown (*((CT__xdc_runtime_Text_nameUnknown*)(xdcRomConstPtr + xdc_runtime_Text_nameUnknown__C_offset)))
N#else
N#define xdc_runtime_Text_nameUnknown (xdc_runtime_Text_nameUnknown__C)
N#endif
N
N/* nameEmpty */
Ntypedef xdc_String CT__xdc_runtime_Text_nameEmpty;
N__extern __FAR__ const CT__xdc_runtime_Text_nameEmpty xdc_runtime_Text_nameEmpty__C;
Xextern  const CT__xdc_runtime_Text_nameEmpty xdc_runtime_Text_nameEmpty__C;
N#ifdef xdc_runtime_Text_nameEmpty__CR
S#define xdc_runtime_Text_nameEmpty (*((CT__xdc_runtime_Text_nameEmpty*)(xdcRomConstPtr + xdc_runtime_Text_nameEmpty__C_offset)))
N#else
N#define xdc_runtime_Text_nameEmpty (xdc_runtime_Text_nameEmpty__C)
N#endif
N
N/* nameStatic */
Ntypedef xdc_String CT__xdc_runtime_Text_nameStatic;
N__extern __FAR__ const CT__xdc_runtime_Text_nameStatic xdc_runtime_Text_nameStatic__C;
Xextern  const CT__xdc_runtime_Text_nameStatic xdc_runtime_Text_nameStatic__C;
N#ifdef xdc_runtime_Text_nameStatic__CR
S#define xdc_runtime_Text_nameStatic (*((CT__xdc_runtime_Text_nameStatic*)(xdcRomConstPtr + xdc_runtime_Text_nameStatic__C_offset)))
N#else
N#define xdc_runtime_Text_nameStatic (xdc_runtime_Text_nameStatic__C)
N#endif
N
N/* isLoaded */
Ntypedef xdc_Bool CT__xdc_runtime_Text_isLoaded;
N__extern __FAR__ const CT__xdc_runtime_Text_isLoaded xdc_runtime_Text_isLoaded__C;
Xextern  const CT__xdc_runtime_Text_isLoaded xdc_runtime_Text_isLoaded__C;
N#ifdef xdc_runtime_Text_isLoaded__CR
S#define xdc_runtime_Text_isLoaded (*((CT__xdc_runtime_Text_isLoaded*)(xdcRomConstPtr + xdc_runtime_Text_isLoaded__C_offset)))
N#else
N#ifdef xdc_runtime_Text_isLoaded__D
S#define xdc_runtime_Text_isLoaded (xdc_runtime_Text_isLoaded__D)
N#else
N#define xdc_runtime_Text_isLoaded (xdc_runtime_Text_isLoaded__C)
N#endif
N#endif
N
N/* charTab */
Ntypedef xdc_Char __T1_xdc_runtime_Text_charTab;
Ntypedef xdc_Char *ARRAY1_xdc_runtime_Text_charTab;
Ntypedef const xdc_Char *CARRAY1_xdc_runtime_Text_charTab;
Ntypedef CARRAY1_xdc_runtime_Text_charTab __TA_xdc_runtime_Text_charTab;
Ntypedef CARRAY1_xdc_runtime_Text_charTab CT__xdc_runtime_Text_charTab;
N__extern __FAR__ const CT__xdc_runtime_Text_charTab xdc_runtime_Text_charTab__C;
Xextern  const CT__xdc_runtime_Text_charTab xdc_runtime_Text_charTab__C;
N#ifdef xdc_runtime_Text_charTab__CR
S#define xdc_runtime_Text_charTab (*((CT__xdc_runtime_Text_charTab*)(xdcRomConstPtr + xdc_runtime_Text_charTab__C_offset)))
N#else
N#define xdc_runtime_Text_charTab (xdc_runtime_Text_charTab__C)
N#endif
N
N/* nodeTab */
Ntypedef xdc_runtime_Text_Node __T1_xdc_runtime_Text_nodeTab;
Ntypedef xdc_runtime_Text_Node *ARRAY1_xdc_runtime_Text_nodeTab;
Ntypedef const xdc_runtime_Text_Node *CARRAY1_xdc_runtime_Text_nodeTab;
Ntypedef CARRAY1_xdc_runtime_Text_nodeTab __TA_xdc_runtime_Text_nodeTab;
Ntypedef CARRAY1_xdc_runtime_Text_nodeTab CT__xdc_runtime_Text_nodeTab;
N__extern __FAR__ const CT__xdc_runtime_Text_nodeTab xdc_runtime_Text_nodeTab__C;
Xextern  const CT__xdc_runtime_Text_nodeTab xdc_runtime_Text_nodeTab__C;
N#ifdef xdc_runtime_Text_nodeTab__CR
S#define xdc_runtime_Text_nodeTab (*((CT__xdc_runtime_Text_nodeTab*)(xdcRomConstPtr + xdc_runtime_Text_nodeTab__C_offset)))
N#else
N#define xdc_runtime_Text_nodeTab (xdc_runtime_Text_nodeTab__C)
N#endif
N
N/* charCnt */
Ntypedef xdc_Int16 CT__xdc_runtime_Text_charCnt;
N__extern __FAR__ const CT__xdc_runtime_Text_charCnt xdc_runtime_Text_charCnt__C;
Xextern  const CT__xdc_runtime_Text_charCnt xdc_runtime_Text_charCnt__C;
N#ifdef xdc_runtime_Text_charCnt__CR
S#define xdc_runtime_Text_charCnt (*((CT__xdc_runtime_Text_charCnt*)(xdcRomConstPtr + xdc_runtime_Text_charCnt__C_offset)))
N#else
N#ifdef xdc_runtime_Text_charCnt__D
S#define xdc_runtime_Text_charCnt (xdc_runtime_Text_charCnt__D)
N#else
N#define xdc_runtime_Text_charCnt (xdc_runtime_Text_charCnt__C)
N#endif
N#endif
N
N/* nodeCnt */
Ntypedef xdc_Int16 CT__xdc_runtime_Text_nodeCnt;
N__extern __FAR__ const CT__xdc_runtime_Text_nodeCnt xdc_runtime_Text_nodeCnt__C;
Xextern  const CT__xdc_runtime_Text_nodeCnt xdc_runtime_Text_nodeCnt__C;
N#ifdef xdc_runtime_Text_nodeCnt__CR
S#define xdc_runtime_Text_nodeCnt (*((CT__xdc_runtime_Text_nodeCnt*)(xdcRomConstPtr + xdc_runtime_Text_nodeCnt__C_offset)))
N#else
N#ifdef xdc_runtime_Text_nodeCnt__D
S#define xdc_runtime_Text_nodeCnt (xdc_runtime_Text_nodeCnt__D)
N#else
N#define xdc_runtime_Text_nodeCnt (xdc_runtime_Text_nodeCnt__C)
N#endif
N#endif
N
N/* unnamedModsLastId */
Ntypedef xdc_UInt16 CT__xdc_runtime_Text_unnamedModsLastId;
N__extern __FAR__ const CT__xdc_runtime_Text_unnamedModsLastId xdc_runtime_Text_unnamedModsLastId__C;
Xextern  const CT__xdc_runtime_Text_unnamedModsLastId xdc_runtime_Text_unnamedModsLastId__C;
N#ifdef xdc_runtime_Text_unnamedModsLastId__CR
S#define xdc_runtime_Text_unnamedModsLastId (*((CT__xdc_runtime_Text_unnamedModsLastId*)(xdcRomConstPtr + xdc_runtime_Text_unnamedModsLastId__C_offset)))
N#else
N#ifdef xdc_runtime_Text_unnamedModsLastId__D
S#define xdc_runtime_Text_unnamedModsLastId (xdc_runtime_Text_unnamedModsLastId__D)
N#else
N#define xdc_runtime_Text_unnamedModsLastId (xdc_runtime_Text_unnamedModsLastId__C)
N#endif
N#endif
N
N/* registryModsLastId */
Ntypedef xdc_UInt16 CT__xdc_runtime_Text_registryModsLastId;
N__extern __FAR__ const CT__xdc_runtime_Text_registryModsLastId xdc_runtime_Text_registryModsLastId__C;
Xextern  const CT__xdc_runtime_Text_registryModsLastId xdc_runtime_Text_registryModsLastId__C;
N#ifdef xdc_runtime_Text_registryModsLastId__CR
S#define xdc_runtime_Text_registryModsLastId (*((CT__xdc_runtime_Text_registryModsLastId*)(xdcRomConstPtr + xdc_runtime_Text_registryModsLastId__C_offset)))
N#else
N#ifdef xdc_runtime_Text_registryModsLastId__D
S#define xdc_runtime_Text_registryModsLastId (xdc_runtime_Text_registryModsLastId__D)
N#else
N#define xdc_runtime_Text_registryModsLastId (xdc_runtime_Text_registryModsLastId__C)
N#endif
N#endif
N
N/* visitRopeFxn */
Ntypedef xdc_runtime_Text_VisitRopeFxn CT__xdc_runtime_Text_visitRopeFxn;
N__extern __FAR__ const CT__xdc_runtime_Text_visitRopeFxn xdc_runtime_Text_visitRopeFxn__C;
Xextern  const CT__xdc_runtime_Text_visitRopeFxn xdc_runtime_Text_visitRopeFxn__C;
N#ifdef xdc_runtime_Text_visitRopeFxn__CR
S#define xdc_runtime_Text_visitRopeFxn (*((CT__xdc_runtime_Text_visitRopeFxn*)(xdcRomConstPtr + xdc_runtime_Text_visitRopeFxn__C_offset)))
N#else
N#define xdc_runtime_Text_visitRopeFxn (xdc_runtime_Text_visitRopeFxn__C)
N#endif
N
N/* visitRopeFxn2 */
Ntypedef xdc_runtime_Text_VisitRopeFxn2 CT__xdc_runtime_Text_visitRopeFxn2;
N__extern __FAR__ const CT__xdc_runtime_Text_visitRopeFxn2 xdc_runtime_Text_visitRopeFxn2__C;
Xextern  const CT__xdc_runtime_Text_visitRopeFxn2 xdc_runtime_Text_visitRopeFxn2__C;
N#ifdef xdc_runtime_Text_visitRopeFxn2__CR
S#define xdc_runtime_Text_visitRopeFxn2 (*((CT__xdc_runtime_Text_visitRopeFxn2*)(xdcRomConstPtr + xdc_runtime_Text_visitRopeFxn2__C_offset)))
N#else
N#define xdc_runtime_Text_visitRopeFxn2 (xdc_runtime_Text_visitRopeFxn2__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Text_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Text_Module__startupDone__S, "xdc_runtime_Text_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Text_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Text_Module__startupDone__S( void );
N
N/* cordText__E */
N#define xdc_runtime_Text_cordText xdc_runtime_Text_cordText__E
Nxdc__CODESECT(xdc_runtime_Text_cordText__E, "xdc_runtime_Text_cordText")
X
N__extern xdc_String xdc_runtime_Text_cordText__E( xdc_runtime_Text_CordAddr cord );
Xextern xdc_String xdc_runtime_Text_cordText__E( xdc_runtime_Text_CordAddr cord );
N
N/* ropeText__E */
N#define xdc_runtime_Text_ropeText xdc_runtime_Text_ropeText__E
Nxdc__CODESECT(xdc_runtime_Text_ropeText__E, "xdc_runtime_Text_ropeText")
X
N__extern xdc_CString xdc_runtime_Text_ropeText__E( xdc_runtime_Text_RopeId rope );
Xextern xdc_CString xdc_runtime_Text_ropeText__E( xdc_runtime_Text_RopeId rope );
N
N/* matchRope__E */
N#define xdc_runtime_Text_matchRope xdc_runtime_Text_matchRope__E
Nxdc__CODESECT(xdc_runtime_Text_matchRope__E, "xdc_runtime_Text_matchRope")
X
N__extern xdc_Int xdc_runtime_Text_matchRope__E( xdc_runtime_Text_RopeId rope, xdc_CString pat, xdc_UShort *lenp );
Xextern xdc_Int xdc_runtime_Text_matchRope__E( xdc_runtime_Text_RopeId rope, xdc_CString pat, xdc_UShort *lenp );
N
N/* putLab__E */
N#define xdc_runtime_Text_putLab xdc_runtime_Text_putLab__E
Nxdc__CODESECT(xdc_runtime_Text_putLab__E, "xdc_runtime_Text_putLab")
X
N__extern xdc_Int xdc_runtime_Text_putLab__E( xdc_runtime_Types_Label *lab, xdc_Char **bufp, xdc_Int len );
Xextern xdc_Int xdc_runtime_Text_putLab__E( xdc_runtime_Types_Label *lab, xdc_Char **bufp, xdc_Int len );
N
N/* putMod__E */
N#define xdc_runtime_Text_putMod xdc_runtime_Text_putMod__E
Nxdc__CODESECT(xdc_runtime_Text_putMod__E, "xdc_runtime_Text_putMod")
X
N__extern xdc_Int xdc_runtime_Text_putMod__E( xdc_runtime_Types_ModuleId mid, xdc_Char **bufp, xdc_Int len );
Xextern xdc_Int xdc_runtime_Text_putMod__E( xdc_runtime_Types_ModuleId mid, xdc_Char **bufp, xdc_Int len );
N
N/* putSite__E */
N#define xdc_runtime_Text_putSite xdc_runtime_Text_putSite__E
Nxdc__CODESECT(xdc_runtime_Text_putSite__E, "xdc_runtime_Text_putSite")
X
N__extern xdc_Int xdc_runtime_Text_putSite__E( xdc_runtime_Types_Site *site, xdc_Char **bufp, xdc_Int len );
Xextern xdc_Int xdc_runtime_Text_putSite__E( xdc_runtime_Types_Site *site, xdc_Char **bufp, xdc_Int len );
N
N/* matchVisFxn__I */
N#define xdc_runtime_Text_matchVisFxn xdc_runtime_Text_matchVisFxn__I
Nxdc__CODESECT(xdc_runtime_Text_matchVisFxn__I, "xdc_runtime_Text_matchVisFxn")
X
N__extern xdc_Bool xdc_runtime_Text_matchVisFxn__I( xdc_Ptr p, xdc_CString s );
Xextern xdc_Bool xdc_runtime_Text_matchVisFxn__I( xdc_Ptr p, xdc_CString s );
N
N/* printVisFxn__I */
N#define xdc_runtime_Text_printVisFxn xdc_runtime_Text_printVisFxn__I
Nxdc__CODESECT(xdc_runtime_Text_printVisFxn__I, "xdc_runtime_Text_printVisFxn")
X
N__extern xdc_Bool xdc_runtime_Text_printVisFxn__I( xdc_Ptr p, xdc_CString s );
Xextern xdc_Bool xdc_runtime_Text_printVisFxn__I( xdc_Ptr p, xdc_CString s );
N
N/* visitRope__I */
N#define xdc_runtime_Text_visitRope xdc_runtime_Text_visitRope__I
Nxdc__CODESECT(xdc_runtime_Text_visitRope__I, "xdc_runtime_Text_visitRope")
X
N__extern xdc_Void xdc_runtime_Text_visitRope__I( xdc_runtime_Text_RopeId rope, xdc_Fxn visFxn, xdc_Ptr visState );
Xextern void xdc_runtime_Text_visitRope__I( xdc_runtime_Text_RopeId rope, xdc_Fxn visFxn, xdc_Ptr visState );
N
N/* visitRope2__I */
N#define xdc_runtime_Text_visitRope2 xdc_runtime_Text_visitRope2__I
Nxdc__CODESECT(xdc_runtime_Text_visitRope2__I, "xdc_runtime_Text_visitRope2")
X
N__extern xdc_Void xdc_runtime_Text_visitRope2__I( xdc_runtime_Text_RopeId rope, xdc_Fxn visFxn, xdc_Ptr visState, xdc_CString stack[] );
Xextern void xdc_runtime_Text_visitRope2__I( xdc_runtime_Text_RopeId rope, xdc_Fxn visFxn, xdc_Ptr visState, xdc_CString stack[] );
N
N/* xprintf__I */
N#define xdc_runtime_Text_xprintf xdc_runtime_Text_xprintf__I
Nxdc__CODESECT(xdc_runtime_Text_xprintf__I, "xdc_runtime_Text_xprintf")
X
N__extern xdc_Int xdc_runtime_Text_xprintf__I( xdc_Char **bufp, xdc_SizeT len, xdc_CString fmt, ... );
Xextern xdc_Int xdc_runtime_Text_xprintf__I( xdc_Char **bufp, xdc_SizeT len, xdc_CString fmt, ... );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Text_Module_startupDone() xdc_runtime_Text_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Text_Object_heap() xdc_runtime_Text_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Text_Module_heap() xdc_runtime_Text_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Text_Module__id xdc_runtime_Text_Module_id(void);
Nstatic inline CT__xdc_runtime_Text_Module__id xdc_runtime_Text_Module_id( void ) 
N{
N    return xdc_runtime_Text_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Text_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Text_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Text_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Text_Module_getMask(void)
N{
N    return (xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)NULL) ? *xdc_runtime_Text_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)0) ? *xdc_runtime_Text_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Text_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Text_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Text_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Text_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)NULL) {
X    if (xdc_runtime_Text_Module__diagsMask__C != (CT__xdc_runtime_Text_Module__diagsMask)0) {
N        *xdc_runtime_Text_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef xdc_runtime_Text__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Text__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Text__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Text__include_state
S#define xdc_runtime_Text__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Text_Module_State {
S    xdc_CPtr charBase;
S    xdc_CPtr nodeBase;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Text_Module__state__VR
Sextern struct xdc_runtime_Text_Module_State__ xdc_runtime_Text_Module__state__V;
S#else
S#define xdc_runtime_Text_Module__state__V (*((struct xdc_runtime_Text_Module_State__*)(xdcRomStatePtr + xdc_runtime_Text_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Text__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Text__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Text__localnames__done
S#define xdc_runtime_Text__localnames__done
S
S/* module prefix */
S#define Text_CordAddr xdc_runtime_Text_CordAddr
S#define Text_Label xdc_runtime_Text_Label
S#define Text_RopeId xdc_runtime_Text_RopeId
S#define Text_Node xdc_runtime_Text_Node
S#define Text_RopeVisitor xdc_runtime_Text_RopeVisitor
S#define Text_MatchVisState xdc_runtime_Text_MatchVisState
S#define Text_PrintVisState xdc_runtime_Text_PrintVisState
S#define Text_VisitRopeFxn xdc_runtime_Text_VisitRopeFxn
S#define Text_VisitRopeFxn2 xdc_runtime_Text_VisitRopeFxn2
S#define Text_Module_State xdc_runtime_Text_Module_State
S#define Text_nameUnknown xdc_runtime_Text_nameUnknown
S#define Text_nameEmpty xdc_runtime_Text_nameEmpty
S#define Text_nameStatic xdc_runtime_Text_nameStatic
S#define Text_isLoaded xdc_runtime_Text_isLoaded
S#define Text_charTab xdc_runtime_Text_charTab
S#define Text_nodeTab xdc_runtime_Text_nodeTab
S#define Text_charCnt xdc_runtime_Text_charCnt
S#define Text_nodeCnt xdc_runtime_Text_nodeCnt
S#define Text_unnamedModsLastId xdc_runtime_Text_unnamedModsLastId
S#define Text_registryModsLastId xdc_runtime_Text_registryModsLastId
S#define Text_visitRopeFxn xdc_runtime_Text_visitRopeFxn
S#define Text_visitRopeFxn2 xdc_runtime_Text_visitRopeFxn2
S#define Text_cordText xdc_runtime_Text_cordText
S#define Text_ropeText xdc_runtime_Text_ropeText
S#define Text_matchRope xdc_runtime_Text_matchRope
S#define Text_putLab xdc_runtime_Text_putLab
S#define Text_putMod xdc_runtime_Text_putMod
S#define Text_putSite xdc_runtime_Text_putSite
S#define Text_Module_name xdc_runtime_Text_Module_name
S#define Text_Module_id xdc_runtime_Text_Module_id
S#define Text_Module_startup xdc_runtime_Text_Module_startup
S#define Text_Module_startupDone xdc_runtime_Text_Module_startupDone
S#define Text_Module_hasMask xdc_runtime_Text_Module_hasMask
S#define Text_Module_getMask xdc_runtime_Text_Module_getMask
S#define Text_Module_setMask xdc_runtime_Text_Module_setMask
S#define Text_Object_heap xdc_runtime_Text_Object_heap
S#define Text_Module_heap xdc_runtime_Text_Module_heap
S
S#endif /* xdc_runtime_Text__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* NUMARGS */
N#define xdc_runtime_Log_NUMARGS (8)
N
N/* PRINTFID */
N#define xdc_runtime_Log_PRINTFID (0)
N
N/* EventRec */
Ntypedef xdc_IArg __T1_xdc_runtime_Log_EventRec__arg;
Ntypedef xdc_IArg ARRAY1_xdc_runtime_Log_EventRec__arg[8];
Ntypedef xdc_IArg CARRAY1_xdc_runtime_Log_EventRec__arg[8];
Ntypedef CARRAY1_xdc_runtime_Log_EventRec__arg __TA_xdc_runtime_Log_EventRec__arg;
Nstruct xdc_runtime_Log_EventRec {
N    xdc_runtime_Types_Timestamp64 tstamp;
N    xdc_Bits32 serial;
N    xdc_runtime_Types_Event evt;
N    __TA_xdc_runtime_Log_EventRec__arg arg;
N};
N
N/* EventId */
Ntypedef xdc_runtime_Types_RopeId xdc_runtime_Log_EventId;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsEnabled;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
Xextern  const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
N#ifdef xdc_runtime_Log_Module__diagsEnabled__CR
S#define xdc_runtime_Log_Module__diagsEnabled__C (*((CT__xdc_runtime_Log_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsEnabled__C_offset)))
N#else
N#define xdc_runtime_Log_Module__diagsEnabled (xdc_runtime_Log_Module__diagsEnabled__C)
N#endif
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsIncluded;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
Xextern  const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
N#ifdef xdc_runtime_Log_Module__diagsIncluded__CR
S#define xdc_runtime_Log_Module__diagsIncluded__C (*((CT__xdc_runtime_Log_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsIncluded__C_offset)))
N#else
N#define xdc_runtime_Log_Module__diagsIncluded (xdc_runtime_Log_Module__diagsIncluded__C)
N#endif
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__xdc_runtime_Log_Module__diagsMask;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
Xextern  const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
N#ifdef xdc_runtime_Log_Module__diagsMask__CR
S#define xdc_runtime_Log_Module__diagsMask__C (*((CT__xdc_runtime_Log_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsMask__C_offset)))
N#else
N#define xdc_runtime_Log_Module__diagsMask (xdc_runtime_Log_Module__diagsMask__C)
N#endif
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Log_Module__gateObj;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
Xextern  const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
N#ifdef xdc_runtime_Log_Module__gateObj__CR
S#define xdc_runtime_Log_Module__gateObj__C (*((CT__xdc_runtime_Log_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__gateObj__C_offset)))
N#else
N#define xdc_runtime_Log_Module__gateObj (xdc_runtime_Log_Module__gateObj__C)
N#endif
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__xdc_runtime_Log_Module__gatePrms;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
Xextern  const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
N#ifdef xdc_runtime_Log_Module__gatePrms__CR
S#define xdc_runtime_Log_Module__gatePrms__C (*((CT__xdc_runtime_Log_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Log_Module__gatePrms__C_offset)))
N#else
N#define xdc_runtime_Log_Module__gatePrms (xdc_runtime_Log_Module__gatePrms__C)
N#endif
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Log_Module__id;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
Xextern  const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
N#ifdef xdc_runtime_Log_Module__id__CR
S#define xdc_runtime_Log_Module__id__C (*((CT__xdc_runtime_Log_Module__id*)(xdcRomConstPtr + xdc_runtime_Log_Module__id__C_offset)))
N#else
N#define xdc_runtime_Log_Module__id (xdc_runtime_Log_Module__id__C)
N#endif
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__xdc_runtime_Log_Module__loggerDefined;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
N#ifdef xdc_runtime_Log_Module__loggerDefined__CR
S#define xdc_runtime_Log_Module__loggerDefined__C (*((CT__xdc_runtime_Log_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerDefined__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerDefined (xdc_runtime_Log_Module__loggerDefined__C)
N#endif
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__xdc_runtime_Log_Module__loggerObj;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
N#ifdef xdc_runtime_Log_Module__loggerObj__CR
S#define xdc_runtime_Log_Module__loggerObj__C (*((CT__xdc_runtime_Log_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerObj__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerObj (xdc_runtime_Log_Module__loggerObj__C)
N#endif
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Log_Module__loggerFxn0;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
N#ifdef xdc_runtime_Log_Module__loggerFxn0__CR
S#define xdc_runtime_Log_Module__loggerFxn0__C (*((CT__xdc_runtime_Log_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn0__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerFxn0 (xdc_runtime_Log_Module__loggerFxn0__C)
N#endif
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Log_Module__loggerFxn1;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
N#ifdef xdc_runtime_Log_Module__loggerFxn1__CR
S#define xdc_runtime_Log_Module__loggerFxn1__C (*((CT__xdc_runtime_Log_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn1__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerFxn1 (xdc_runtime_Log_Module__loggerFxn1__C)
N#endif
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Log_Module__loggerFxn2;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
N#ifdef xdc_runtime_Log_Module__loggerFxn2__CR
S#define xdc_runtime_Log_Module__loggerFxn2__C (*((CT__xdc_runtime_Log_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn2__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerFxn2 (xdc_runtime_Log_Module__loggerFxn2__C)
N#endif
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Log_Module__loggerFxn4;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
N#ifdef xdc_runtime_Log_Module__loggerFxn4__CR
S#define xdc_runtime_Log_Module__loggerFxn4__C (*((CT__xdc_runtime_Log_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn4__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerFxn4 (xdc_runtime_Log_Module__loggerFxn4__C)
N#endif
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Log_Module__loggerFxn8;
N__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
Xextern  const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
N#ifdef xdc_runtime_Log_Module__loggerFxn8__CR
S#define xdc_runtime_Log_Module__loggerFxn8__C (*((CT__xdc_runtime_Log_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn8__C_offset)))
N#else
N#define xdc_runtime_Log_Module__loggerFxn8 (xdc_runtime_Log_Module__loggerFxn8__C)
N#endif
N
N/* Object__count */
Ntypedef xdc_Int CT__xdc_runtime_Log_Object__count;
N__extern __FAR__ const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
Xextern  const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
N#ifdef xdc_runtime_Log_Object__count__CR
S#define xdc_runtime_Log_Object__count__C (*((CT__xdc_runtime_Log_Object__count*)(xdcRomConstPtr + xdc_runtime_Log_Object__count__C_offset)))
N#else
N#define xdc_runtime_Log_Object__count (xdc_runtime_Log_Object__count__C)
N#endif
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Log_Object__heap;
N__extern __FAR__ const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
Xextern  const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
N#ifdef xdc_runtime_Log_Object__heap__CR
S#define xdc_runtime_Log_Object__heap__C (*((CT__xdc_runtime_Log_Object__heap*)(xdcRomConstPtr + xdc_runtime_Log_Object__heap__C_offset)))
N#else
N#define xdc_runtime_Log_Object__heap (xdc_runtime_Log_Object__heap__C)
N#endif
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__xdc_runtime_Log_Object__sizeof;
N__extern __FAR__ const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
Xextern  const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
N#ifdef xdc_runtime_Log_Object__sizeof__CR
S#define xdc_runtime_Log_Object__sizeof__C (*((CT__xdc_runtime_Log_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Log_Object__sizeof__C_offset)))
N#else
N#define xdc_runtime_Log_Object__sizeof (xdc_runtime_Log_Object__sizeof__C)
N#endif
N
N/* Object__table */
Ntypedef xdc_Ptr CT__xdc_runtime_Log_Object__table;
N__extern __FAR__ const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
Xextern  const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
N#ifdef xdc_runtime_Log_Object__table__CR
S#define xdc_runtime_Log_Object__table__C (*((CT__xdc_runtime_Log_Object__table*)(xdcRomConstPtr + xdc_runtime_Log_Object__table__C_offset)))
N#else
N#define xdc_runtime_Log_Object__table (xdc_runtime_Log_Object__table__C)
N#endif
N
N/* L_construct */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_construct;
N__extern __FAR__ const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
Xextern  const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
N#ifdef xdc_runtime_Log_L_construct__CR
S#define xdc_runtime_Log_L_construct (*((CT__xdc_runtime_Log_L_construct*)(xdcRomConstPtr + xdc_runtime_Log_L_construct__C_offset)))
N#else
N#define xdc_runtime_Log_L_construct (xdc_runtime_Log_L_construct__C)
N#endif
N
N/* L_create */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_create;
N__extern __FAR__ const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
Xextern  const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
N#ifdef xdc_runtime_Log_L_create__CR
S#define xdc_runtime_Log_L_create (*((CT__xdc_runtime_Log_L_create*)(xdcRomConstPtr + xdc_runtime_Log_L_create__C_offset)))
N#else
N#define xdc_runtime_Log_L_create (xdc_runtime_Log_L_create__C)
N#endif
N
N/* L_destruct */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_destruct;
N__extern __FAR__ const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
Xextern  const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
N#ifdef xdc_runtime_Log_L_destruct__CR
S#define xdc_runtime_Log_L_destruct (*((CT__xdc_runtime_Log_L_destruct*)(xdcRomConstPtr + xdc_runtime_Log_L_destruct__C_offset)))
N#else
N#define xdc_runtime_Log_L_destruct (xdc_runtime_Log_L_destruct__C)
N#endif
N
N/* L_delete */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_delete;
N__extern __FAR__ const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
Xextern  const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
N#ifdef xdc_runtime_Log_L_delete__CR
S#define xdc_runtime_Log_L_delete (*((CT__xdc_runtime_Log_L_delete*)(xdcRomConstPtr + xdc_runtime_Log_L_delete__C_offset)))
N#else
N#define xdc_runtime_Log_L_delete (xdc_runtime_Log_L_delete__C)
N#endif
N
N/* L_error */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_error;
N__extern __FAR__ const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
Xextern  const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
N#ifdef xdc_runtime_Log_L_error__CR
S#define xdc_runtime_Log_L_error (*((CT__xdc_runtime_Log_L_error*)(xdcRomConstPtr + xdc_runtime_Log_L_error__C_offset)))
N#else
N#define xdc_runtime_Log_L_error (xdc_runtime_Log_L_error__C)
N#endif
N
N/* L_warning */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_warning;
N__extern __FAR__ const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
Xextern  const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
N#ifdef xdc_runtime_Log_L_warning__CR
S#define xdc_runtime_Log_L_warning (*((CT__xdc_runtime_Log_L_warning*)(xdcRomConstPtr + xdc_runtime_Log_L_warning__C_offset)))
N#else
N#define xdc_runtime_Log_L_warning (xdc_runtime_Log_L_warning__C)
N#endif
N
N/* L_info */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_info;
N__extern __FAR__ const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
Xextern  const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
N#ifdef xdc_runtime_Log_L_info__CR
S#define xdc_runtime_Log_L_info (*((CT__xdc_runtime_Log_L_info*)(xdcRomConstPtr + xdc_runtime_Log_L_info__C_offset)))
N#else
N#define xdc_runtime_Log_L_info (xdc_runtime_Log_L_info__C)
N#endif
N
N/* L_start */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_start;
N__extern __FAR__ const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
Xextern  const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
N#ifdef xdc_runtime_Log_L_start__CR
S#define xdc_runtime_Log_L_start (*((CT__xdc_runtime_Log_L_start*)(xdcRomConstPtr + xdc_runtime_Log_L_start__C_offset)))
N#else
N#define xdc_runtime_Log_L_start (xdc_runtime_Log_L_start__C)
N#endif
N
N/* L_stop */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stop;
N__extern __FAR__ const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
Xextern  const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
N#ifdef xdc_runtime_Log_L_stop__CR
S#define xdc_runtime_Log_L_stop (*((CT__xdc_runtime_Log_L_stop*)(xdcRomConstPtr + xdc_runtime_Log_L_stop__C_offset)))
N#else
N#define xdc_runtime_Log_L_stop (xdc_runtime_Log_L_stop__C)
N#endif
N
N/* L_startInstance */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_startInstance;
N__extern __FAR__ const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
Xextern  const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
N#ifdef xdc_runtime_Log_L_startInstance__CR
S#define xdc_runtime_Log_L_startInstance (*((CT__xdc_runtime_Log_L_startInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_startInstance__C_offset)))
N#else
N#define xdc_runtime_Log_L_startInstance (xdc_runtime_Log_L_startInstance__C)
N#endif
N
N/* L_stopInstance */
Ntypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stopInstance;
N__extern __FAR__ const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
Xextern  const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
N#ifdef xdc_runtime_Log_L_stopInstance__CR
S#define xdc_runtime_Log_L_stopInstance (*((CT__xdc_runtime_Log_L_stopInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_stopInstance__C_offset)))
N#else
N#define xdc_runtime_Log_L_stopInstance (xdc_runtime_Log_L_stopInstance__C)
N#endif
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define xdc_runtime_Log_Module_startup( state ) (-1)
N
N/* Module__startupDone__S */
Nxdc__CODESECT(xdc_runtime_Log_Module__startupDone__S, "xdc_runtime_Log_Module__startupDone__S")
X
N__extern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
Xextern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
N
N/* doPrint__E */
N#define xdc_runtime_Log_doPrint xdc_runtime_Log_doPrint__E
Nxdc__CODESECT(xdc_runtime_Log_doPrint__E, "xdc_runtime_Log_doPrint")
X
N__extern xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
Xextern void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define xdc_runtime_Log_Module_startupDone() xdc_runtime_Log_Module__startupDone__S()
N
N/* Object_heap */
N#define xdc_runtime_Log_Object_heap() xdc_runtime_Log_Object__heap__C
N
N/* Module_heap */
N#define xdc_runtime_Log_Module_heap() xdc_runtime_Log_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id(void);
Nstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id( void ) 
N{
N    return xdc_runtime_Log_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void);
Nstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void)
N{
N    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL);
X    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)0);
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void);
Nstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void)
N{
N    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
X    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)0) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Xstatic inline void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Nstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
Xstatic inline void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
N{
N    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) {
X    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)0) {
N        *xdc_runtime_Log_Module__diagsMask__C = mask;
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <xdc/runtime/Log__epilogue.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log__epilogue.h" 1
N/* 
N *  Copyright (c) 2008-2017 Texas Instruments Incorporated
N *  This program and the accompanying materials are made available under the
N *  terms of the Eclipse Public License v1.0 and Eclipse Distribution License
N *  v. 1.0 which accompanies this distribution. The Eclipse Public License is
N *  available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse
N *  Distribution License is available at
N *  http://www.eclipse.org/org/documents/edl-v10.php.
N *
N *  Contributors:
N *      Texas Instruments - initial implementation
N * */
N
N#ifndef xdc_runtime_Log__epilogue__include
N#define xdc_runtime_Log__epilogue__include
N
N/*
N *  ======== Log__epilogue.h ========
N *  Implementation of the Log_* macros
N *
N *  The implementation below relies on eight symbols defined by every module
N *  header.  Each of these symbols is a reference to a constant defined in a
N *  separate compilation unit.  The values of these constants are as follows:
N *
N *      Module__MID     - the module's ID (see Text.xs)
N *      Module__LOGOBJ  - the module's logger instance object
N *      Module__LOGFXN0 - the module's logger's write0 function
N *      Module__LOGFXN1 - the module's logger's write1 function
N *      Module__LOGFXN2 - the module's logger's write2 function
N *      Module__LOGFXN4 - the module's logger's write4 function
N *      Module__LOGFXN8 - the module's logger's write8 function
N *      Module__LOGDEF  - 0 if the module has a logger, non-zero otherwise
N */
N
N/*
N *  Define flags for compiling out all Log calls
N *
N *  The intent of these flags is to allow users to completely optimize logging
N *  out of their code even when not using whole program optimization. This is
N *  implemented by controlling the definitions of the Log macros. This will
N *  only affect code compiled with the flag(s) set, so it will not disable
N *  logging in any precompiled libraries.
N *
N *  The DISABLE_ALL flag will have the effect of disabling all Log put, write,
N *  print, error, warning, and info log calls. The flag just has to be defined,
N *  we give it a value of zero or one to use in the macros.
N *
N *  There are additional flags which can be used to disable all log calls
N *  "except for". We use the presence of the DISABLE_ALL flag and the presence
N *  of any ENABLE_ERROR, ENABLE_INFO, or ENABLE_WARNING flags to compute the
N *  value of ENABLE_ERROR, etc., as zero or one.
N *
N *  We ensure that all of the flags are ultimately defined and given a zero or
N *  one value. Then the macro definitions are conditional on the value of the
N *  appropriate flag.
N */
N
N/*
N * If DISABLE_ALL is defined, give it the value 1, and assign values to all
N * of the ENABLE flags based on whether they've been defined or not.
N */
N#ifdef xdc_runtime_Log_DISABLE_ALL
S
S#define xdc_runtime_Log_DISABLE_ALL 1
S
S#ifndef xdc_runtime_Log_ENABLE_ERROR
S#define xdc_runtime_Log_ENABLE_ERROR 0
S#else
S#define xdc_runtime_Log_ENABLE_ERROR 1
S#endif
S
S#ifndef xdc_runtime_Log_ENABLE_WARNING
S#define xdc_runtime_Log_ENABLE_WARNING 0
S#else
S#define xdc_runtime_Log_ENABLE_WARNING 1
S#endif
S
S#ifndef xdc_runtime_Log_ENABLE_INFO
S#define xdc_runtime_Log_ENABLE_INFO 0
S#else
S#define xdc_runtime_Log_ENABLE_INFO 1
S#endif
S
S/*
S * If DISABLE_ALL has not been defined, just define it to 0 and define
S * all of the ENABLE flags to 1.
S */
N#else
N#define xdc_runtime_Log_DISABLE_ALL     0
N#define xdc_runtime_Log_ENABLE_ERROR    1
N#define xdc_runtime_Log_ENABLE_WARNING  1
N#define xdc_runtime_Log_ENABLE_INFO     1
N#endif
N
N/*
N *  ======== xdc_runtime_Log_getMask ========
N */
N#define xdc_runtime_Log_getMask(evt) ((xdc_runtime_Diags_Mask)((evt) & 0x0000ffffU))
N
N/*
N *  ======== xdc_runtime_Log_getRope ========
N */
N#define xdc_runtime_Log_getRope(evt) ((xdc_runtime_Types_RopeId)((evt) >> 16))
N
N/*
N *  ======== xdc_runtime_Log_getEventId ========
N */
N#define xdc_runtime_Log_getEventId(evt) \
N    ((xdc_runtime_Log_EventId)((evt) >> 16))
X#define xdc_runtime_Log_getEventId(evt)     ((xdc_runtime_Log_EventId)((evt) >> 16))
N
N/*
N *  ======== xdc_runtime_Log_doPut* ========
N *  The 'doPut' macros are the real implementation of the Log_put* APIs.
N *  The Log_put* macros are just stubs which point to these definitions. We do
N *  this so that we can disable the Log_put* APIs but still leave their
N *  functionality available for any other Log macros which use them.
N *
N *  For example, if the flags DISABLE_ALL and ENABLE_ERROR are set, we want
N *  to disable the Log_put* macros, but not the Log_error* macros which are
N *  also built on top of these 'doPut' macros.
N */
N#define xdc_runtime_Log_doPut0(evt, mid) \
N    Module__LOGFXN0(Module__LOGOBJ, (evt), (mid))
X#define xdc_runtime_Log_doPut0(evt, mid)     Module__LOGFXN0(Module__LOGOBJ, (evt), (mid))
N
N#define xdc_runtime_Log_doPut1(evt, mid, a1) \
N    Module__LOGFXN1(Module__LOGOBJ, (evt), (mid), (a1))
X#define xdc_runtime_Log_doPut1(evt, mid, a1)     Module__LOGFXN1(Module__LOGOBJ, (evt), (mid), (a1))
N
N#define xdc_runtime_Log_doPut2(evt, mid, a1, a2) \
N    Module__LOGFXN2(Module__LOGOBJ, (evt), (mid), (a1), (a2)) 
X#define xdc_runtime_Log_doPut2(evt, mid, a1, a2)     Module__LOGFXN2(Module__LOGOBJ, (evt), (mid), (a1), (a2)) 
N
N#define xdc_runtime_Log_doPut4(evt, mid, a1, a2, a3, a4) \
N    Module__LOGFXN4(Module__LOGOBJ, (evt), (mid), (a1), (a2), (a3), (a4))
X#define xdc_runtime_Log_doPut4(evt, mid, a1, a2, a3, a4)     Module__LOGFXN4(Module__LOGOBJ, (evt), (mid), (a1), (a2), (a3), (a4))
N
N#define xdc_runtime_Log_doPut8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8) \
N    Module__LOGFXN8(Module__LOGOBJ, (evt), (mid), (a1), (a2), (a3), (a4), \
N                    (a5), (a6), (a7), (a8))
X#define xdc_runtime_Log_doPut8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8)     Module__LOGFXN8(Module__LOGOBJ, (evt), (mid), (a1), (a2), (a3), (a4),                     (a5), (a6), (a7), (a8))
N
N/*
N *  ======== xdc_runtime_Log_put* ========
N *  See Log_doPut*
N */
N#if (!xdc_runtime_Log_DISABLE_ALL)
X#if (!0)
N
N#define xdc_runtime_Log_put0(evt, mid) \
N    xdc_runtime_Log_doPut0(evt, mid)
X#define xdc_runtime_Log_put0(evt, mid)     xdc_runtime_Log_doPut0(evt, mid)
N
N#define xdc_runtime_Log_put1(evt, mid, a1) \
N    xdc_runtime_Log_doPut1(evt, mid, a1)
X#define xdc_runtime_Log_put1(evt, mid, a1)     xdc_runtime_Log_doPut1(evt, mid, a1)
N
N#define xdc_runtime_Log_put2(evt, mid, a1, a2) \
N    xdc_runtime_Log_doPut2(evt, mid, a1, a2)
X#define xdc_runtime_Log_put2(evt, mid, a1, a2)     xdc_runtime_Log_doPut2(evt, mid, a1, a2)
N
N#define xdc_runtime_Log_put4(evt, mid, a1, a2, a3, a4) \
N    xdc_runtime_Log_doPut4(evt, mid, a1, a2, a3, a4)
X#define xdc_runtime_Log_put4(evt, mid, a1, a2, a3, a4)     xdc_runtime_Log_doPut4(evt, mid, a1, a2, a3, a4)
N
N#define xdc_runtime_Log_put8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8) \
N    xdc_runtime_Log_doPut8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8)
X#define xdc_runtime_Log_put8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8)     xdc_runtime_Log_doPut8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8)
N
N# else
S
S#define xdc_runtime_Log_put0(evt, mid)
S#define xdc_runtime_Log_put1(evt, mid, a1)
S#define xdc_runtime_Log_put2(evt, mid, a1, a2)
S#define xdc_runtime_Log_put4(evt, mid, a1, a2, a3, a4)
S#define xdc_runtime_Log_put8(evt, mid, a1, a2, a3, a4, a5, a6, a7, a8)
S
N#endif
N
N/*
N *  ======== xdc_runtime_Log_doWrite* ========
N *  The real implementations of the Log_write* APIs. See Log_doPut* for an
N *  explanation of why we stub-out the Log_put* and Log_write* APIs.
N */
N
N#define xdc_runtime_Log_doWrite0(evt) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ? \
N        (xdc_runtime_Log_doPut0((evt), Module__MID)) : (void)0 \
N    )
X#define xdc_runtime_Log_doWrite0(evt)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ?         (xdc_runtime_Log_doPut0((evt), Module__MID)) : (void)0     )
N
N#define xdc_runtime_Log_doWrite1(evt, a1) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ? \
N        (xdc_runtime_Log_doPut1((evt), Module__MID, (a1))) : (void)0 \
N    )
X#define xdc_runtime_Log_doWrite1(evt, a1)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ?         (xdc_runtime_Log_doPut1((evt), Module__MID, (a1))) : (void)0     )
N
N#define xdc_runtime_Log_doWrite2(evt, a1, a2) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ? \
N        (xdc_runtime_Log_doPut2((evt), Module__MID, (a1), (a2))) : (void)0 \
N    )
X#define xdc_runtime_Log_doWrite2(evt, a1, a2)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ?         (xdc_runtime_Log_doPut2((evt), Module__MID, (a1), (a2))) : (void)0     )
N
N#define xdc_runtime_Log_doWrite3(evt, a1, a2, a3) \
N    xdc_runtime_Log_doWrite4(evt, a1, a2, a3, 0)
X#define xdc_runtime_Log_doWrite3(evt, a1, a2, a3)     xdc_runtime_Log_doWrite4(evt, a1, a2, a3, 0)
N
N#define xdc_runtime_Log_doWrite4(evt, a1, a2, a3, a4) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ? \
N        xdc_runtime_Log_doPut4((evt), Module__MID, (a1), (a2), \
N            (a3), (a4)) : (void)0 \
N    )
X#define xdc_runtime_Log_doWrite4(evt, a1, a2, a3, a4)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ?         xdc_runtime_Log_doPut4((evt), Module__MID, (a1), (a2),             (a3), (a4)) : (void)0     )
N
N#define xdc_runtime_Log_doWrite5(evt, a1, a2, a3, a4, a5) \
N    xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, 0, 0, 0)
X#define xdc_runtime_Log_doWrite5(evt, a1, a2, a3, a4, a5)     xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, 0, 0, 0)
N#define xdc_runtime_Log_doWrite6(evt, a1, a2, a3, a4, a5, a6) \
N    xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, 0, 0)
X#define xdc_runtime_Log_doWrite6(evt, a1, a2, a3, a4, a5, a6)     xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, 0, 0)
N#define xdc_runtime_Log_doWrite7(evt, a1, a2, a3, a4, a5, a6, a7) \
N    xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, 0)
X#define xdc_runtime_Log_doWrite7(evt, a1, a2, a3, a4, a5, a6, a7)     xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, 0)
N
N#define xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, a8) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ? \
N        xdc_runtime_Log_doPut8((evt), Module__MID, \
N            (a1), (a2), (a3), (a4), (a5), (a6), (a7), (a8)) : (void)0 \
N    )
X#define xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, a8)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(evt)) ?         xdc_runtime_Log_doPut8((evt), Module__MID,             (a1), (a2), (a3), (a4), (a5), (a6), (a7), (a8)) : (void)0     )
N
N/*
N *  ======== xdc_runtime_Log_write* ========
N *  See Log_doWrite*
N */
N#if (!xdc_runtime_Log_DISABLE_ALL)
X#if (!0)
N
N#define xdc_runtime_Log_write0(evt) \
N    xdc_runtime_Log_doWrite0(evt)
X#define xdc_runtime_Log_write0(evt)     xdc_runtime_Log_doWrite0(evt)
N
N#define xdc_runtime_Log_write1(evt, a1) \
N    xdc_runtime_Log_doWrite1(evt, a1)
X#define xdc_runtime_Log_write1(evt, a1)     xdc_runtime_Log_doWrite1(evt, a1)
N
N#define xdc_runtime_Log_write2(evt, a1, a2) \
N    xdc_runtime_Log_doWrite2(evt, a1, a2)
X#define xdc_runtime_Log_write2(evt, a1, a2)     xdc_runtime_Log_doWrite2(evt, a1, a2)
N
N#define xdc_runtime_Log_write3(evt, a1, a2, a3) \
N    xdc_runtime_Log_doWrite3(evt, a1, a2, a3)
X#define xdc_runtime_Log_write3(evt, a1, a2, a3)     xdc_runtime_Log_doWrite3(evt, a1, a2, a3)
N
N#define xdc_runtime_Log_write4(evt, a1, a2, a3, a4) \
N    xdc_runtime_Log_doWrite4(evt, a1, a2, a3, a4)
X#define xdc_runtime_Log_write4(evt, a1, a2, a3, a4)     xdc_runtime_Log_doWrite4(evt, a1, a2, a3, a4)
N
N#define xdc_runtime_Log_write5(evt, a1, a2, a3, a4, a5) \
N    xdc_runtime_Log_doWrite5(evt, a1, a2, a3, a4, a5)
X#define xdc_runtime_Log_write5(evt, a1, a2, a3, a4, a5)     xdc_runtime_Log_doWrite5(evt, a1, a2, a3, a4, a5)
N
N#define xdc_runtime_Log_write6(evt, a1, a2, a3, a4, a5, a6) \
N    xdc_runtime_Log_doWrite6(evt, a1, a2, a3, a4, a5, a6)
X#define xdc_runtime_Log_write6(evt, a1, a2, a3, a4, a5, a6)     xdc_runtime_Log_doWrite6(evt, a1, a2, a3, a4, a5, a6)
N
N#define xdc_runtime_Log_write7(evt, a1, a2, a3, a4, a5, a6, a7) \
N    xdc_runtime_Log_doWrite7(evt, a1, a2, a3, a4, a5, a6, a7)
X#define xdc_runtime_Log_write7(evt, a1, a2, a3, a4, a5, a6, a7)     xdc_runtime_Log_doWrite7(evt, a1, a2, a3, a4, a5, a6, a7)
N
N#define xdc_runtime_Log_write8(evt, a1, a2, a3, a4, a5, a6, a7, a8) \
N    xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, a8)
X#define xdc_runtime_Log_write8(evt, a1, a2, a3, a4, a5, a6, a7, a8)     xdc_runtime_Log_doWrite8(evt, a1, a2, a3, a4, a5, a6, a7, a8)
N
N#else
S
S#define xdc_runtime_Log_write0(evt)
S#define xdc_runtime_Log_write1(evt, a1)  
S#define xdc_runtime_Log_write2(evt, a1, a2)
S#define xdc_runtime_Log_write3(evt, a1, a2, a3)
S#define xdc_runtime_Log_write4(evt, a1, a2, a3, a4)
S#define xdc_runtime_Log_write5(evt, a1, a2, a3, a4, a5)
S#define xdc_runtime_Log_write6(evt, a1, a2, a3, a4, a5, a6)
S#define xdc_runtime_Log_write7(evt, a1, a2, a3, a4, a5, a6, a7)
S#define xdc_runtime_Log_write8(evt, a1, a2, a3, a4, a5, a6, a7, a8)
S
N#endif
N
N/*
N *  ======== xdc_runtime_Log_print* ========
N *  Since "print" events do not have a rope, we use 0 (an invalid rope value)
N *  as the event Id and construct a Log_Event to pass to Log_put. This has the
N *  benefit that the Log_Event is equal to just the mask: (0 | mask). For this
N *  reason, we simply pass the 'mask' as the first argument to 'put'.
N *
N *  Each print function is mapped to a call to appropriate 'put' function.
N *  print0 -> put1
N *  print1 -> put2
N *  print2 -> print3 -> put4
N *  print3 -> put4
N *  print4 -> print6 -> put8
N *  print5 -> print6 -> put8
N *  print6 -> put8
N */
N#if (!xdc_runtime_Log_DISABLE_ALL)
X#if (!0)
N
N#define xdc_runtime_Log_print0(mask, fmt) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ? \
N        xdc_runtime_Log_doPut1(mask, Module__MID, (IArg) fmt) : (void)0 \
N    )
X#define xdc_runtime_Log_print0(mask, fmt)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ?         xdc_runtime_Log_doPut1(mask, Module__MID, (IArg) fmt) : (void)0     )
N
N#define xdc_runtime_Log_print1(mask, fmt, a1) \
N    ( (Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ? \
N        xdc_runtime_Log_doPut2(mask, Module__MID, (IArg) fmt, (a1)) : (void)0 \
N    )
X#define xdc_runtime_Log_print1(mask, fmt, a1)     ( (Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ?         xdc_runtime_Log_doPut2(mask, Module__MID, (IArg) fmt, (a1)) : (void)0     )
N
N#define xdc_runtime_Log_print2(mask, fmt, a1, a2) \
N    xdc_runtime_Log_print3(mask, fmt, a1, a2, 0)
X#define xdc_runtime_Log_print2(mask, fmt, a1, a2)     xdc_runtime_Log_print3(mask, fmt, a1, a2, 0)
N
N#define xdc_runtime_Log_print3(mask, fmt, a1, a2, a3) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ? \
N        xdc_runtime_Log_doPut4(mask, Module__MID, (IArg) fmt, \
N                             (a1), (a2), (a3)) : (void)0 \
N    )
X#define xdc_runtime_Log_print3(mask, fmt, a1, a2, a3)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ?         xdc_runtime_Log_doPut4(mask, Module__MID, (IArg) fmt,                              (a1), (a2), (a3)) : (void)0     )
N
N#define xdc_runtime_Log_print4(mask, fmt, a1, a2, a3, a4) \
N    xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, 0, 0)
X#define xdc_runtime_Log_print4(mask, fmt, a1, a2, a3, a4)     xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, 0, 0)
N#define xdc_runtime_Log_print5(mask, fmt, a1, a2, a3, a4, a5) \
N    xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, a5, 0)
X#define xdc_runtime_Log_print5(mask, fmt, a1, a2, a3, a4, a5)     xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, a5, 0)
N
N#define xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, a5, a6) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ?    \
N        xdc_runtime_Log_doPut8(mask, Module__MID, \
N            (IArg)fmt, (a1), (a2), (a3), (a4), (a5), (a6), 0) : (void)0  \
N    )
X#define xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, a5, a6)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(mask)) ?            xdc_runtime_Log_doPut8(mask, Module__MID,             (IArg)fmt, (a1), (a2), (a3), (a4), (a5), (a6), 0) : (void)0      )
N
N#else
S
S#define xdc_runtime_Log_print0(mask, fmt)
S#define xdc_runtime_Log_print1(mask, fmt, a1)
S#define xdc_runtime_Log_print2(mask, fmt, a1, a2)
S#define xdc_runtime_Log_print3(mask, fmt, a1, a2, a3)
S#define xdc_runtime_Log_print4(mask, fmt, a1, a2, a3, a4)
S#define xdc_runtime_Log_print5(mask, fmt, a1, a2, a3, a4, a5)
S#define xdc_runtime_Log_print6(mask, fmt, a1, a2, a3, a4, a5, a6)
S
N#endif
N
N/*
N *  ======== xdc_runtime_Log_error* ========
N *  Log an error event
N */
N#if xdc_runtime_Log_ENABLE_ERROR
X#if 1
N
N#define xdc_runtime_Log_error0(fmt) \
N    xdc_runtime_Log_error1(fmt,0)
X#define xdc_runtime_Log_error0(fmt)     xdc_runtime_Log_error1(fmt,0)
N
N#define xdc_runtime_Log_error1(fmt, a1) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_error)) ? \
N        xdc_runtime_Log_doPut4((Log_L_error), Module__MID, \
N            (IArg) xdc_FILE__, (IArg)__LINE__, (IArg)fmt, (a1)) : (void)0 \
N    )
X#define xdc_runtime_Log_error1(fmt, a1)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_error)) ?         xdc_runtime_Log_doPut4((Log_L_error), Module__MID,             (IArg) xdc_FILE__, (IArg)__LINE__, (IArg)fmt, (a1)) : (void)0     )
N
N#define xdc_runtime_Log_error2(fmt, a1, a2) \
N    xdc_runtime_Log_error5(fmt, a1, a2, 0, 0, 0)
X#define xdc_runtime_Log_error2(fmt, a1, a2)     xdc_runtime_Log_error5(fmt, a1, a2, 0, 0, 0)
N#define xdc_runtime_Log_error3(fmt, a1, a2, a3) \
N    xdc_runtime_Log_error5(fmt, a1, a2, a3, 0, 0)
X#define xdc_runtime_Log_error3(fmt, a1, a2, a3)     xdc_runtime_Log_error5(fmt, a1, a2, a3, 0, 0)
N#define xdc_runtime_Log_error4(fmt, a1, a2, a3, a4) \
N    xdc_runtime_Log_error5(fmt, a1, a2, a3, a4, 0)
X#define xdc_runtime_Log_error4(fmt, a1, a2, a3, a4)     xdc_runtime_Log_error5(fmt, a1, a2, a3, a4, 0)
N
N#define xdc_runtime_Log_error5(fmt, a1, a2, a3, a4, a5) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_error)) ? \
N        xdc_runtime_Log_doPut8((Log_L_error), Module__MID, (IArg) xdc_FILE__, \
N             (IArg)__LINE__, (IArg)fmt, (a1), (a2), (a3), \
N             (a4), (a5)) : (void)0 \
N    )
X#define xdc_runtime_Log_error5(fmt, a1, a2, a3, a4, a5)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_error)) ?         xdc_runtime_Log_doPut8((Log_L_error), Module__MID, (IArg) xdc_FILE__,              (IArg)__LINE__, (IArg)fmt, (a1), (a2), (a3),              (a4), (a5)) : (void)0     )
N
N#else
S
S#define xdc_runtime_Log_error0(fmt)
S#define xdc_runtime_Log_error1(fmt, a1)
S#define xdc_runtime_Log_error2(fmt, a1, a2)
S#define xdc_runtime_Log_error3(fmt, a1, a2, a3)
S#define xdc_runtime_Log_error4(fmt, a1, a2, a3, a4)
S#define xdc_runtime_Log_error5(fmt, a1, a2, a3, a4, a5)
S
N#endif
N
N/*
N *  ======== xdc_runtime_Log_warning* ========
N *  Log a warning event
N */
N#if xdc_runtime_Log_ENABLE_WARNING
X#if 1
N
N#define xdc_runtime_Log_warning0(fmt) \
N    xdc_runtime_Log_warning1(fmt,0)
X#define xdc_runtime_Log_warning0(fmt)     xdc_runtime_Log_warning1(fmt,0)
N
N#define xdc_runtime_Log_warning1(fmt, a1) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_warning)) ? \
N        xdc_runtime_Log_doPut4((Log_L_warning), Module__MID, \
N            (IArg) xdc_FILE__, (IArg) __LINE__, (IArg) fmt, a1) : (void)0 \
N    )
X#define xdc_runtime_Log_warning1(fmt, a1)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_warning)) ?         xdc_runtime_Log_doPut4((Log_L_warning), Module__MID,             (IArg) xdc_FILE__, (IArg) __LINE__, (IArg) fmt, a1) : (void)0     )
N
N#define xdc_runtime_Log_warning2(fmt, a1, a2) \
N    xdc_runtime_Log_warning5(fmt, a1, a2, 0, 0, 0)
X#define xdc_runtime_Log_warning2(fmt, a1, a2)     xdc_runtime_Log_warning5(fmt, a1, a2, 0, 0, 0)
N#define xdc_runtime_Log_warning3(fmt, a1, a2, a3) \
N    xdc_runtime_Log_warning5(fmt, a1, a2, a3, 0, 0)
X#define xdc_runtime_Log_warning3(fmt, a1, a2, a3)     xdc_runtime_Log_warning5(fmt, a1, a2, a3, 0, 0)
N#define xdc_runtime_Log_warning4(fmt, a1, a2, a3, a4) \
N    xdc_runtime_Log_warning5(fmt, a1, a2, a3, a4, 0)
X#define xdc_runtime_Log_warning4(fmt, a1, a2, a3, a4)     xdc_runtime_Log_warning5(fmt, a1, a2, a3, a4, 0)
N
N#define xdc_runtime_Log_warning5(fmt, a1, a2, a3, a4, a5) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_warning)) ? \
N        xdc_runtime_Log_doPut8((Log_L_warning), Module__MID, (IArg) xdc_FILE__, \
N            (IArg) __LINE__, (IArg) fmt, (a1), (a2), (a3), \
N            (a4), (a5)) : (void)0 \
N    )
X#define xdc_runtime_Log_warning5(fmt, a1, a2, a3, a4, a5)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_warning)) ?         xdc_runtime_Log_doPut8((Log_L_warning), Module__MID, (IArg) xdc_FILE__,             (IArg) __LINE__, (IArg) fmt, (a1), (a2), (a3),             (a4), (a5)) : (void)0     )
N
N#else
S
S#define xdc_runtime_Log_warning0(fmt)
S#define xdc_runtime_Log_warning1(fmt, a1)
S#define xdc_runtime_Log_warning2(fmt, a1, a2)
S#define xdc_runtime_Log_warning3(fmt, a1, a2, a3)
S#define xdc_runtime_Log_warning4(fmt, a1, a2, a3, a4)
S#define xdc_runtime_Log_warning5(fmt, a1, a2, a3, a4, a5)
S
N#endif
N
N/*
N *  ======== xdc_runtime_Log_info* ========
N *  Log an informational event
N */
N#if xdc_runtime_Log_ENABLE_INFO
X#if 1
N
N#define xdc_runtime_Log_info0(fmt) \
N    xdc_runtime_Log_info1(fmt,0)
X#define xdc_runtime_Log_info0(fmt)     xdc_runtime_Log_info1(fmt,0)
N
N#define xdc_runtime_Log_info1(fmt, a1) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_info)) ? \
N        xdc_runtime_Log_doPut4((Log_L_info), Module__MID, (IArg) xdc_FILE__, \
N             (IArg) __LINE__, (IArg) fmt, (a1)) : (void)0 \
N    )
X#define xdc_runtime_Log_info1(fmt, a1)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_info)) ?         xdc_runtime_Log_doPut4((Log_L_info), Module__MID, (IArg) xdc_FILE__,              (IArg) __LINE__, (IArg) fmt, (a1)) : (void)0     )
N
N#define xdc_runtime_Log_info2(fmt, a1, a2) \
N    xdc_runtime_Log_info5(fmt, a1, a2, 0, 0, 0)
X#define xdc_runtime_Log_info2(fmt, a1, a2)     xdc_runtime_Log_info5(fmt, a1, a2, 0, 0, 0)
N#define xdc_runtime_Log_info3(fmt, a1, a2, a3) \
N    xdc_runtime_Log_info5(fmt, a1, a2, a3, 0, 0)
X#define xdc_runtime_Log_info3(fmt, a1, a2, a3)     xdc_runtime_Log_info5(fmt, a1, a2, a3, 0, 0)
N#define xdc_runtime_Log_info4(fmt, a1, a2, a3, a4) \
N    xdc_runtime_Log_info5(fmt, a1, a2, a3, a4, 0)
X#define xdc_runtime_Log_info4(fmt, a1, a2, a3, a4)     xdc_runtime_Log_info5(fmt, a1, a2, a3, a4, 0)
N
N#define xdc_runtime_Log_info5(fmt, a1, a2, a3, a4, a5) \
N    ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_info)) ? \
N        xdc_runtime_Log_doPut8((Log_L_info), Module__MID, (IArg) xdc_FILE__, \
N            (IArg) __LINE__, (IArg) fmt, (a1), (a2), (a3), \
N            (a4), (a5)) : (void)0 \
N    )
X#define xdc_runtime_Log_info5(fmt, a1, a2, a3, a4, a5)     ((Module__LOGDEF == TRUE && xdc_runtime_Diags_query(Log_L_info)) ?         xdc_runtime_Log_doPut8((Log_L_info), Module__MID, (IArg) xdc_FILE__,             (IArg) __LINE__, (IArg) fmt, (a1), (a2), (a3),             (a4), (a5)) : (void)0     )
N
N#else
S
S#define xdc_runtime_Log_info0(fmt)
S#define xdc_runtime_Log_info1(fmt, a1)
S#define xdc_runtime_Log_info2(fmt, a1, a2)
S#define xdc_runtime_Log_info3(fmt, a1, a2, a3)
S#define xdc_runtime_Log_info4(fmt, a1, a2, a3, a4)
S#define xdc_runtime_Log_info5(fmt, a1, a2, a3, a4, a5)
S
N#endif
N#endif
N
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 417 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 2
N
N#ifdef xdc_runtime_Log__top__
S#undef __nested__
N#endif
N
N#endif /* xdc_runtime_Log__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Log__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Log__include_state
S#define xdc_runtime_Log__include_state
S
S
S#endif /* xdc_runtime_Log__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Log__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Log__localnames__done
S#define xdc_runtime_Log__localnames__done
S
S/* module prefix */
S#define Log_NUMARGS xdc_runtime_Log_NUMARGS
S#define Log_PRINTFID xdc_runtime_Log_PRINTFID
S#define Log_EventRec xdc_runtime_Log_EventRec
S#define Log_Event xdc_runtime_Log_Event
S#define Log_EventId xdc_runtime_Log_EventId
S#define Log_L_construct xdc_runtime_Log_L_construct
S#define Log_L_create xdc_runtime_Log_L_create
S#define Log_L_destruct xdc_runtime_Log_L_destruct
S#define Log_L_delete xdc_runtime_Log_L_delete
S#define Log_L_error xdc_runtime_Log_L_error
S#define Log_L_warning xdc_runtime_Log_L_warning
S#define Log_L_info xdc_runtime_Log_L_info
S#define Log_L_start xdc_runtime_Log_L_start
S#define Log_L_stop xdc_runtime_Log_L_stop
S#define Log_L_startInstance xdc_runtime_Log_L_startInstance
S#define Log_L_stopInstance xdc_runtime_Log_L_stopInstance
S#define Log_getMask xdc_runtime_Log_getMask
S#define Log_getRope xdc_runtime_Log_getRope
S#define Log_getEventId xdc_runtime_Log_getEventId
S#define Log_print0 xdc_runtime_Log_print0
S#define Log_print1 xdc_runtime_Log_print1
S#define Log_print2 xdc_runtime_Log_print2
S#define Log_print3 xdc_runtime_Log_print3
S#define Log_print4 xdc_runtime_Log_print4
S#define Log_print5 xdc_runtime_Log_print5
S#define Log_print6 xdc_runtime_Log_print6
S#define Log_error0 xdc_runtime_Log_error0
S#define Log_error1 xdc_runtime_Log_error1
S#define Log_error2 xdc_runtime_Log_error2
S#define Log_error3 xdc_runtime_Log_error3
S#define Log_error4 xdc_runtime_Log_error4
S#define Log_error5 xdc_runtime_Log_error5
S#define Log_warning0 xdc_runtime_Log_warning0
S#define Log_warning1 xdc_runtime_Log_warning1
S#define Log_warning2 xdc_runtime_Log_warning2
S#define Log_warning3 xdc_runtime_Log_warning3
S#define Log_warning4 xdc_runtime_Log_warning4
S#define Log_warning5 xdc_runtime_Log_warning5
S#define Log_info0 xdc_runtime_Log_info0
S#define Log_info1 xdc_runtime_Log_info1
S#define Log_info2 xdc_runtime_Log_info2
S#define Log_info3 xdc_runtime_Log_info3
S#define Log_info4 xdc_runtime_Log_info4
S#define Log_info5 xdc_runtime_Log_info5
S#define Log_put0 xdc_runtime_Log_put0
S#define Log_put1 xdc_runtime_Log_put1
S#define Log_put2 xdc_runtime_Log_put2
S#define Log_put4 xdc_runtime_Log_put4
S#define Log_put8 xdc_runtime_Log_put8
S#define Log_write0 xdc_runtime_Log_write0
S#define Log_write1 xdc_runtime_Log_write1
S#define Log_write2 xdc_runtime_Log_write2
S#define Log_write3 xdc_runtime_Log_write3
S#define Log_write4 xdc_runtime_Log_write4
S#define Log_write5 xdc_runtime_Log_write5
S#define Log_write6 xdc_runtime_Log_write6
S#define Log_write7 xdc_runtime_Log_write7
S#define Log_write8 xdc_runtime_Log_write8
S#define Log_doPrint xdc_runtime_Log_doPrint
S#define Log_Module_name xdc_runtime_Log_Module_name
S#define Log_Module_id xdc_runtime_Log_Module_id
S#define Log_Module_startup xdc_runtime_Log_Module_startup
S#define Log_Module_startupDone xdc_runtime_Log_Module_startupDone
S#define Log_Module_hasMask xdc_runtime_Log_Module_hasMask
S#define Log_Module_getMask xdc_runtime_Log_Module_getMask
S#define Log_Module_setMask xdc_runtime_Log_Module_setMask
S#define Log_Object_heap xdc_runtime_Log_Object_heap
S#define Log_Module_heap xdc_runtime_Log_Module_heap
S
S#endif /* xdc_runtime_Log__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 64 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/IHeap.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IHeap.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IHeap__include
S#define xdc_runtime_IHeap__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IHeap__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IHeap___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Memory.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IHeap_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IHeap_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_Ptr (*alloc)(void* inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
S    xdc_Void (*free)(void* inst, xdc_Ptr block, xdc_SizeT size);
S    xdc_Bool (*isBlocking)(void* inst);
S    xdc_Void (*getStats)(void* inst, xdc_runtime_Memory_Stats* stats);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IHeap_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C;
S#else
S#define xdc_runtime_IHeap_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IHeap_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IHeap_create, "xdc_runtime_IHeap_create")
S__extern xdc_runtime_IHeap_Handle xdc_runtime_IHeap_create(xdc_runtime_IHeap_Module mod, const xdc_runtime_IHeap_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IHeap_delete, "xdc_runtime_IHeap_delete")
S__extern xdc_Void xdc_runtime_IHeap_delete(xdc_runtime_IHeap_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_Module xdc_runtime_IHeap_Handle_to_Module(xdc_runtime_IHeap_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IHeap_Handle_label(xdc_runtime_IHeap_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IHeap_Module_id(xdc_runtime_IHeap_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S/* alloc */
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc(xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb);
Sstatic inline xdc_Ptr xdc_runtime_IHeap_alloc( xdc_runtime_IHeap_Handle inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block *eb )
S{
S    return inst->__fxns->alloc((void*)inst, size, align, eb);
S}
S
S/* free */
Sstatic inline xdc_Void xdc_runtime_IHeap_free(xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_Void xdc_runtime_IHeap_free( xdc_runtime_IHeap_Handle inst, xdc_Ptr block, xdc_SizeT size )
S{
S    inst->__fxns->free((void*)inst, block, size);
S}
S
S/* isBlocking */
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_Bool xdc_runtime_IHeap_isBlocking( xdc_runtime_IHeap_Handle inst )
S{
S    return inst->__fxns->isBlocking((void*)inst);
S}
S
S/* getStats */
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats(xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats);
Sstatic inline xdc_Void xdc_runtime_IHeap_getStats( xdc_runtime_IHeap_Handle inst, xdc_runtime_Memory_Stats *stats )
S{
S    inst->__fxns->getStats((void*)inst, stats);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* alloc_{FxnT,fxnP} */
Stypedef xdc_Ptr (*xdc_runtime_IHeap_alloc_FxnT)(xdc_Void *inst, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_alloc_FxnT)inst->__fxns->alloc;
S}
S
S/* free_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_free_FxnT)(xdc_Void *inst, xdc_Ptr block, xdc_SizeT size);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_free_FxnT xdc_runtime_IHeap_free_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_free_FxnT)inst->__fxns->free;
S}
S
S/* isBlocking_{FxnT,fxnP} */
Stypedef xdc_Bool (*xdc_runtime_IHeap_isBlocking_FxnT)(xdc_Void *inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_isBlocking_FxnT)inst->__fxns->isBlocking;
S}
S
S/* getStats_{FxnT,fxnP} */
Stypedef xdc_Void (*xdc_runtime_IHeap_getStats_FxnT)(xdc_Void *inst, xdc_runtime_Memory_Stats* stats);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst);
Sstatic inline xdc_runtime_IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_fxnP(xdc_runtime_IHeap_Handle inst)
S{
S    return (xdc_runtime_IHeap_getStats_FxnT)inst->__fxns->getStats;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IHeap__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IHeap__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IHeap__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IHeap__localnames__done
S#define xdc_runtime_IHeap__localnames__done
S
S/* module prefix */
S#define IHeap_Instance xdc_runtime_IHeap_Instance
S#define IHeap_Handle xdc_runtime_IHeap_Handle
S#define IHeap_Module xdc_runtime_IHeap_Module
S#define IHeap_Params xdc_runtime_IHeap_Params
S#define IHeap_alloc xdc_runtime_IHeap_alloc
S#define IHeap_alloc_fxnP xdc_runtime_IHeap_alloc_fxnP
S#define IHeap_alloc_FxnT xdc_runtime_IHeap_alloc_FxnT
S#define IHeap_free xdc_runtime_IHeap_free
S#define IHeap_free_fxnP xdc_runtime_IHeap_free_fxnP
S#define IHeap_free_FxnT xdc_runtime_IHeap_free_FxnT
S#define IHeap_isBlocking xdc_runtime_IHeap_isBlocking
S#define IHeap_isBlocking_fxnP xdc_runtime_IHeap_isBlocking_fxnP
S#define IHeap_isBlocking_FxnT xdc_runtime_IHeap_isBlocking_FxnT
S#define IHeap_getStats xdc_runtime_IHeap_getStats
S#define IHeap_getStats_fxnP xdc_runtime_IHeap_getStats_fxnP
S#define IHeap_getStats_FxnT xdc_runtime_IHeap_getStats_FxnT
S#define IHeap_Module_name xdc_runtime_IHeap_Module_name
S#define IHeap_create xdc_runtime_IHeap_create
S#define IHeap_delete xdc_runtime_IHeap_delete
S#define IHeap_Handle_label xdc_runtime_IHeap_Handle_label
S#define IHeap_Handle_to_Module xdc_runtime_IHeap_Handle_to_Module
S
S#endif /* xdc_runtime_IHeap__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 65 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/knl/Queue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Queue__include
N#define ti_sysbios_knl_Queue__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Queue__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Queue___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Elem */
Nstruct ti_sysbios_knl_Queue_Elem {
N    ti_sysbios_knl_Queue_Elem *volatile next;
N    ti_sysbios_knl_Queue_Elem *volatile prev;
N};
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Queue_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Queue_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Queue_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Queue_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Queue_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Queue_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Queue_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Queue_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Queue_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Queue_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Queue_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Queue_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Queue_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Queue_Struct {
N    ti_sysbios_knl_Queue_Elem __f0;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Queue_Module_startup( state ) (-1)
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Instance_init__E, "ti_sysbios_knl_Queue_Instance_init")
X
N__extern xdc_Void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
Xextern void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Handle__label__S, "ti_sysbios_knl_Queue_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Module__startupDone__S, "ti_sysbios_knl_Queue_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__create__S, "ti_sysbios_knl_Queue_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Queue_create, "ti_sysbios_knl_Queue_create")
X
N__extern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Queue_construct, "ti_sysbios_knl_Queue_construct")
X
N__extern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
Xextern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__delete__S, "ti_sysbios_knl_Queue_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Queue_delete, "ti_sysbios_knl_Queue_delete")
X
N__extern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
Xextern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__destruct__S, "ti_sysbios_knl_Queue_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Queue_destruct, "ti_sysbios_knl_Queue_destruct")
X
N__extern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
Xextern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__get__S, "ti_sysbios_knl_Queue_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__first__S, "ti_sysbios_knl_Queue_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Object__next__S, "ti_sysbios_knl_Queue_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Queue_Params__init__S, "ti_sysbios_knl_Queue_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* elemClear__E */
N#define ti_sysbios_knl_Queue_elemClear ti_sysbios_knl_Queue_elemClear__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_elemClear__E, "ti_sysbios_knl_Queue_elemClear")
X
N__extern xdc_Void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
Xextern void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
N
N/* insert__E */
N#define ti_sysbios_knl_Queue_insert ti_sysbios_knl_Queue_insert__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_insert__E, "ti_sysbios_knl_Queue_insert")
X
N__extern xdc_Void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
Xextern void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
N
N/* next__E */
N#define ti_sysbios_knl_Queue_next ti_sysbios_knl_Queue_next__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_next__E, "ti_sysbios_knl_Queue_next")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
Xextern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
N
N/* prev__E */
N#define ti_sysbios_knl_Queue_prev ti_sysbios_knl_Queue_prev__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_prev__E, "ti_sysbios_knl_Queue_prev")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
Xextern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
N
N/* remove__E */
N#define ti_sysbios_knl_Queue_remove ti_sysbios_knl_Queue_remove__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_remove__E, "ti_sysbios_knl_Queue_remove")
X
N__extern xdc_Void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
Xextern void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
N
N/* isQueued__E */
N#define ti_sysbios_knl_Queue_isQueued ti_sysbios_knl_Queue_isQueued__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_isQueued__E, "ti_sysbios_knl_Queue_isQueued")
X
N__extern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
Xextern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
N
N/* dequeue__E */
N#define ti_sysbios_knl_Queue_dequeue ti_sysbios_knl_Queue_dequeue__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_dequeue__E, "ti_sysbios_knl_Queue_dequeue")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
Xextern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
N
N/* empty__E */
N#define ti_sysbios_knl_Queue_empty ti_sysbios_knl_Queue_empty__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_empty__E, "ti_sysbios_knl_Queue_empty")
X
N__extern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
Xextern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
N
N/* enqueue__E */
N#define ti_sysbios_knl_Queue_enqueue ti_sysbios_knl_Queue_enqueue__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_enqueue__E, "ti_sysbios_knl_Queue_enqueue")
X
N__extern xdc_Void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
Xextern void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
N
N/* get__E */
N#define ti_sysbios_knl_Queue_get ti_sysbios_knl_Queue_get__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_get__E, "ti_sysbios_knl_Queue_get")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
Xextern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
N
N/* getTail__E */
N#define ti_sysbios_knl_Queue_getTail ti_sysbios_knl_Queue_getTail__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_getTail__E, "ti_sysbios_knl_Queue_getTail")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
Xextern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
N
N/* head__E */
N#define ti_sysbios_knl_Queue_head ti_sysbios_knl_Queue_head__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_head__E, "ti_sysbios_knl_Queue_head")
X
N__extern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
Xextern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
N
N/* put__E */
N#define ti_sysbios_knl_Queue_put ti_sysbios_knl_Queue_put__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_put__E, "ti_sysbios_knl_Queue_put")
X
N__extern xdc_Void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
Xextern void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
N
N/* putHead__E */
N#define ti_sysbios_knl_Queue_putHead ti_sysbios_knl_Queue_putHead__E
Nxdc__CODESECT(ti_sysbios_knl_Queue_putHead__E, "ti_sysbios_knl_Queue_putHead")
X
N__extern xdc_Void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
Xextern void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Queue_Module_startupDone() ti_sysbios_knl_Queue_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Queue_Object_heap() ti_sysbios_knl_Queue_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Queue_Module_heap() ti_sysbios_knl_Queue_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module_id( void ) 
N{
N    return ti_sysbios_knl_Queue_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Queue_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Queue_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Queue_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Queue_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Queue_Module__diagsMask__C != NULL) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Queue_Module__diagsMask__C != 0) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Queue_Params_init( ti_sysbios_knl_Queue_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Queue_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Queue_Params_copy(ti_sysbios_knl_Queue_Params *dst, const ti_sysbios_knl_Queue_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Queue_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Queue_Object_count() ti_sysbios_knl_Queue_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Queue_Object_sizeof() ti_sysbios_knl_Queue_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_get(ti_sysbios_knl_Queue_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_first( void )
N{
N    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_next( ti_sysbios_knl_Queue_Object *obj )
N{
N    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle_label( ti_sysbios_knl_Queue_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Queue_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Queue_Handle_name( ti_sysbios_knl_Queue_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Queue_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_handle( ti_sysbios_knl_Queue_Struct *str )
N{
N    return (ti_sysbios_knl_Queue_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Queue_Struct *ti_sysbios_knl_Queue_struct( ti_sysbios_knl_Queue_Handle inst )
N{
N    return (ti_sysbios_knl_Queue_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Queue__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Queue__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Queue__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Queue__include_state
S#define ti_sysbios_knl_Queue__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Queue_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S};
S
S#endif /* ti_sysbios_knl_Queue__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Queue__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Queue__localnames__done
S#define ti_sysbios_knl_Queue__localnames__done
S
S/* module prefix */
S#define Queue_Instance ti_sysbios_knl_Queue_Instance
S#define Queue_Handle ti_sysbios_knl_Queue_Handle
S#define Queue_Module ti_sysbios_knl_Queue_Module
S#define Queue_Object ti_sysbios_knl_Queue_Object
S#define Queue_Struct ti_sysbios_knl_Queue_Struct
S#define Queue_Elem ti_sysbios_knl_Queue_Elem
S#define Queue_Instance_State ti_sysbios_knl_Queue_Instance_State
S#define Queue_Params ti_sysbios_knl_Queue_Params
S#define Queue_elemClear ti_sysbios_knl_Queue_elemClear
S#define Queue_insert ti_sysbios_knl_Queue_insert
S#define Queue_next ti_sysbios_knl_Queue_next
S#define Queue_prev ti_sysbios_knl_Queue_prev
S#define Queue_remove ti_sysbios_knl_Queue_remove
S#define Queue_isQueued ti_sysbios_knl_Queue_isQueued
S#define Queue_dequeue ti_sysbios_knl_Queue_dequeue
S#define Queue_empty ti_sysbios_knl_Queue_empty
S#define Queue_enqueue ti_sysbios_knl_Queue_enqueue
S#define Queue_get ti_sysbios_knl_Queue_get
S#define Queue_getTail ti_sysbios_knl_Queue_getTail
S#define Queue_head ti_sysbios_knl_Queue_head
S#define Queue_put ti_sysbios_knl_Queue_put
S#define Queue_putHead ti_sysbios_knl_Queue_putHead
S#define Queue_Module_name ti_sysbios_knl_Queue_Module_name
S#define Queue_Module_id ti_sysbios_knl_Queue_Module_id
S#define Queue_Module_startup ti_sysbios_knl_Queue_Module_startup
S#define Queue_Module_startupDone ti_sysbios_knl_Queue_Module_startupDone
S#define Queue_Module_hasMask ti_sysbios_knl_Queue_Module_hasMask
S#define Queue_Module_getMask ti_sysbios_knl_Queue_Module_getMask
S#define Queue_Module_setMask ti_sysbios_knl_Queue_Module_setMask
S#define Queue_Object_heap ti_sysbios_knl_Queue_Object_heap
S#define Queue_Module_heap ti_sysbios_knl_Queue_Module_heap
S#define Queue_construct ti_sysbios_knl_Queue_construct
S#define Queue_create ti_sysbios_knl_Queue_create
S#define Queue_handle ti_sysbios_knl_Queue_handle
S#define Queue_struct ti_sysbios_knl_Queue_struct
S#define Queue_Handle_label ti_sysbios_knl_Queue_Handle_label
S#define Queue_Handle_name ti_sysbios_knl_Queue_Handle_name
S#define Queue_Instance_init ti_sysbios_knl_Queue_Instance_init
S#define Queue_Object_count ti_sysbios_knl_Queue_Object_count
S#define Queue_Object_get ti_sysbios_knl_Queue_Object_get
S#define Queue_Object_first ti_sysbios_knl_Queue_Object_first
S#define Queue_Object_next ti_sysbios_knl_Queue_Object_next
S#define Queue_Object_sizeof ti_sysbios_knl_Queue_Object_sizeof
S#define Queue_Params_copy ti_sysbios_knl_Queue_Params_copy
S#define Queue_Params_init ti_sysbios_knl_Queue_Params_init
S#define Queue_delete ti_sysbios_knl_Queue_delete
S#define Queue_destruct ti_sysbios_knl_Queue_destruct
S
S#endif /* ti_sysbios_knl_Queue__localnames__done */
N#endif
L 66 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 67 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/interfaces/ITaskSupport.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_interfaces_ITaskSupport__include
N#define ti_sysbios_interfaces_ITaskSupport__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_interfaces_ITaskSupport__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_interfaces_ITaskSupport___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 52 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 2
N#include <ti/sysbios/interfaces/package/package.defs.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/package/package.defs.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N#ifndef ti_sysbios_interfaces__
N#define ti_sysbios_interfaces__
N
N
N/*
N * ======== interface ti.sysbios.interfaces.ICore ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ICore_Fxns__ ti_sysbios_interfaces_ICore_Fxns__;
Ntypedef const ti_sysbios_interfaces_ICore_Fxns__* ti_sysbios_interfaces_ICore_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.IHwi ========
N */
N
Ntypedef struct ti_sysbios_interfaces_IHwi_HookSet ti_sysbios_interfaces_IHwi_HookSet;
Ntypedef struct ti_sysbios_interfaces_IHwi_StackInfo ti_sysbios_interfaces_IHwi_StackInfo;
Ntypedef struct ti_sysbios_interfaces_IHwi_Fxns__ ti_sysbios_interfaces_IHwi_Fxns__;
Ntypedef const ti_sysbios_interfaces_IHwi_Fxns__* ti_sysbios_interfaces_IHwi_Module;
Ntypedef struct ti_sysbios_interfaces_IHwi_Params ti_sysbios_interfaces_IHwi_Params;
Ntypedef struct ti_sysbios_interfaces_IHwi___Object { ti_sysbios_interfaces_IHwi_Fxns__* __fxns; xdc_Bits32 __label; } *ti_sysbios_interfaces_IHwi_Handle;
N
N/*
N * ======== interface ti.sysbios.interfaces.ITaskSupport ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ITaskSupport_Fxns__ ti_sysbios_interfaces_ITaskSupport_Fxns__;
Ntypedef const ti_sysbios_interfaces_ITaskSupport_Fxns__* ti_sysbios_interfaces_ITaskSupport_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.ITimer ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ITimer_Fxns__ ti_sysbios_interfaces_ITimer_Fxns__;
Ntypedef const ti_sysbios_interfaces_ITimer_Fxns__* ti_sysbios_interfaces_ITimer_Module;
Ntypedef struct ti_sysbios_interfaces_ITimer_Params ti_sysbios_interfaces_ITimer_Params;
Ntypedef struct ti_sysbios_interfaces_ITimer___Object { ti_sysbios_interfaces_ITimer_Fxns__* __fxns; xdc_Bits32 __label; } *ti_sysbios_interfaces_ITimer_Handle;
N
N/*
N * ======== interface ti.sysbios.interfaces.ITimerSupport ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ITimerSupport_Fxns__ ti_sysbios_interfaces_ITimerSupport_Fxns__;
Ntypedef const ti_sysbios_interfaces_ITimerSupport_Fxns__* ti_sysbios_interfaces_ITimerSupport_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.ITimestamp ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ITimestamp_Fxns__ ti_sysbios_interfaces_ITimestamp_Fxns__;
Ntypedef const ti_sysbios_interfaces_ITimestamp_Fxns__* ti_sysbios_interfaces_ITimestamp_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.IIntrinsicsSupport ========
N */
N
Ntypedef struct ti_sysbios_interfaces_IIntrinsicsSupport_Fxns__ ti_sysbios_interfaces_IIntrinsicsSupport_Fxns__;
Ntypedef const ti_sysbios_interfaces_IIntrinsicsSupport_Fxns__* ti_sysbios_interfaces_IIntrinsicsSupport_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.ICache ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ICache_Fxns__ ti_sysbios_interfaces_ICache_Fxns__;
Ntypedef const ti_sysbios_interfaces_ICache_Fxns__* ti_sysbios_interfaces_ICache_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.IPower ========
N */
N
Ntypedef struct ti_sysbios_interfaces_IPower_Fxns__ ti_sysbios_interfaces_IPower_Fxns__;
Ntypedef const ti_sysbios_interfaces_IPower_Fxns__* ti_sysbios_interfaces_IPower_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.IRomDevice ========
N */
N
Ntypedef struct ti_sysbios_interfaces_IRomDevice_Fxns__ ti_sysbios_interfaces_IRomDevice_Fxns__;
Ntypedef const ti_sysbios_interfaces_IRomDevice_Fxns__* ti_sysbios_interfaces_IRomDevice_Module;
N
N/*
N * ======== interface ti.sysbios.interfaces.ISeconds ========
N */
N
Ntypedef struct ti_sysbios_interfaces_ISeconds_Time ti_sysbios_interfaces_ISeconds_Time;
Ntypedef struct ti_sysbios_interfaces_ISeconds_Fxns__ ti_sysbios_interfaces_ISeconds_Fxns__;
Ntypedef const ti_sysbios_interfaces_ISeconds_Fxns__* ti_sysbios_interfaces_ISeconds_Module;
N
N
N#endif /* ti_sysbios_interfaces__ */ 
L 53 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 2
N
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITaskSupport_FuncPtr)(void);
Xtypedef void (*ti_sysbios_interfaces_ITaskSupport_FuncPtr)(void);
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct ti_sysbios_interfaces_ITaskSupport_Fxns__ {
N    xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2 *__sysp;
N    xdc_Ptr (*start)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
N    xdc_Void (*swap)(xdc_Ptr*, xdc_Ptr*);
X    void (*swap)(xdc_Ptr*, xdc_Ptr*);
N    xdc_Bool (*checkStack)(xdc_Char*, xdc_SizeT);
N    xdc_SizeT (*stackUsed)(xdc_Char*, xdc_SizeT);
N    xdc_UInt (*getStackAlignment)(void);
N    xdc_SizeT (*getDefaultStackSize)(void);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITaskSupport_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITaskSupport_Interface__BASE__C;
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId ti_sysbios_interfaces_ITaskSupport_Module_id( ti_sysbios_interfaces_ITaskSupport_Module mod )
N{
N    return mod->__sysp->__mid;
N}
N
N/* start */
Nstatic inline xdc_Ptr ti_sysbios_interfaces_ITaskSupport_start( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Ptr curTask, ti_sysbios_interfaces_ITaskSupport_FuncPtr enter, ti_sysbios_interfaces_ITaskSupport_FuncPtr exit, xdc_runtime_Error_Block *eb )
N{
N    return __inst->start(curTask, enter, exit, eb);
N}
N
N/* swap */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITaskSupport_swap( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext )
Xstatic inline void ti_sysbios_interfaces_ITaskSupport_swap( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext )
N{
N    __inst->swap(oldtskContext, newtskContext);
N}
N
N/* checkStack */
Nstatic inline xdc_Bool ti_sysbios_interfaces_ITaskSupport_checkStack( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Char *stack, xdc_SizeT size )
N{
N    return __inst->checkStack(stack, size);
N}
N
N/* stackUsed */
Nstatic inline xdc_SizeT ti_sysbios_interfaces_ITaskSupport_stackUsed( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Char *stack, xdc_SizeT size )
N{
N    return __inst->stackUsed(stack, size);
N}
N
N/* getStackAlignment */
Nstatic inline xdc_UInt ti_sysbios_interfaces_ITaskSupport_getStackAlignment( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return __inst->getStackAlignment();
N}
N
N/* getDefaultStackSize */
Nstatic inline xdc_SizeT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return __inst->getDefaultStackSize();
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N/* These functions return function pointers for module and instance functions.
N * The functions accept modules and instances declared as types defined in this
N * interface, but they return functions defined for the actual objects passed
N * as parameters. These functions are not invoked by any generated code or
N * XDCtools internal code.
N */
N
N/* start_{FxnT,fxnP} */
Ntypedef xdc_Ptr (*ti_sysbios_interfaces_ITaskSupport_start_FxnT)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_start_FxnT ti_sysbios_interfaces_ITaskSupport_start_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_start_FxnT)__inst->start;
N}
N
N/* swap_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITaskSupport_swap_FxnT)(xdc_Ptr*, xdc_Ptr*);
Xtypedef void (*ti_sysbios_interfaces_ITaskSupport_swap_FxnT)(xdc_Ptr*, xdc_Ptr*);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_swap_FxnT ti_sysbios_interfaces_ITaskSupport_swap_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_swap_FxnT)__inst->swap;
N}
N
N/* checkStack_{FxnT,fxnP} */
Ntypedef xdc_Bool (*ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT)(xdc_Char*, xdc_SizeT);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT ti_sysbios_interfaces_ITaskSupport_checkStack_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT)__inst->checkStack;
N}
N
N/* stackUsed_{FxnT,fxnP} */
Ntypedef xdc_SizeT (*ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT)(xdc_Char*, xdc_SizeT);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT ti_sysbios_interfaces_ITaskSupport_stackUsed_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT)__inst->stackUsed;
N}
N
N/* getStackAlignment_{FxnT,fxnP} */
Ntypedef xdc_UInt (*ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT)(void);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT ti_sysbios_interfaces_ITaskSupport_getStackAlignment_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT)__inst->getStackAlignment;
N}
N
N/* getDefaultStackSize_{FxnT,fxnP} */
Ntypedef xdc_SizeT (*ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT)(void);
Nstatic inline ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT)__inst->getDefaultStackSize;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_interfaces_ITaskSupport__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_interfaces_ITaskSupport__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_interfaces_ITaskSupport__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_interfaces_ITaskSupport__localnames__done
S#define ti_sysbios_interfaces_ITaskSupport__localnames__done
S
S/* module prefix */
S#define ITaskSupport_Module ti_sysbios_interfaces_ITaskSupport_Module
S#define ITaskSupport_FuncPtr ti_sysbios_interfaces_ITaskSupport_FuncPtr
S#define ITaskSupport_start ti_sysbios_interfaces_ITaskSupport_start
S#define ITaskSupport_start_fxnP ti_sysbios_interfaces_ITaskSupport_start_fxnP
S#define ITaskSupport_start_FxnT ti_sysbios_interfaces_ITaskSupport_start_FxnT
S#define ITaskSupport_swap ti_sysbios_interfaces_ITaskSupport_swap
S#define ITaskSupport_swap_fxnP ti_sysbios_interfaces_ITaskSupport_swap_fxnP
S#define ITaskSupport_swap_FxnT ti_sysbios_interfaces_ITaskSupport_swap_FxnT
S#define ITaskSupport_checkStack ti_sysbios_interfaces_ITaskSupport_checkStack
S#define ITaskSupport_checkStack_fxnP ti_sysbios_interfaces_ITaskSupport_checkStack_fxnP
S#define ITaskSupport_checkStack_FxnT ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT
S#define ITaskSupport_stackUsed ti_sysbios_interfaces_ITaskSupport_stackUsed
S#define ITaskSupport_stackUsed_fxnP ti_sysbios_interfaces_ITaskSupport_stackUsed_fxnP
S#define ITaskSupport_stackUsed_FxnT ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT
S#define ITaskSupport_getStackAlignment ti_sysbios_interfaces_ITaskSupport_getStackAlignment
S#define ITaskSupport_getStackAlignment_fxnP ti_sysbios_interfaces_ITaskSupport_getStackAlignment_fxnP
S#define ITaskSupport_getStackAlignment_FxnT ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT
S#define ITaskSupport_getDefaultStackSize ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize
S#define ITaskSupport_getDefaultStackSize_fxnP ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_fxnP
S#define ITaskSupport_getDefaultStackSize_FxnT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT
S#define ITaskSupport_Module_name ti_sysbios_interfaces_ITaskSupport_Module_name
S
S#endif /* ti_sysbios_interfaces_ITaskSupport__localnames__done */
N#endif
L 68 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/knl/Clock.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock__include
N#define ti_sysbios_knl_Clock__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Clock___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <xdc/runtime/Assert.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Assert__include
S#define xdc_runtime_Assert__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Assert__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Assert___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Assert__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Assert_Module__diagsEnabled__CR
S#define xdc_runtime_Assert_Module__diagsEnabled__C (*((CT__xdc_runtime_Assert_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsEnabled (xdc_runtime_Assert_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Assert_Module__diagsIncluded__CR
S#define xdc_runtime_Assert_Module__diagsIncluded__C (*((CT__xdc_runtime_Assert_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsIncluded (xdc_runtime_Assert_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Assert_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
S#ifdef xdc_runtime_Assert_Module__diagsMask__CR
S#define xdc_runtime_Assert_Module__diagsMask__C (*((CT__xdc_runtime_Assert_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsMask (xdc_runtime_Assert_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
S#ifdef xdc_runtime_Assert_Module__gateObj__CR
S#define xdc_runtime_Assert_Module__gateObj__C (*((CT__xdc_runtime_Assert_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gateObj (xdc_runtime_Assert_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
S#ifdef xdc_runtime_Assert_Module__gatePrms__CR
S#define xdc_runtime_Assert_Module__gatePrms__C (*((CT__xdc_runtime_Assert_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gatePrms (xdc_runtime_Assert_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Assert_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
S#ifdef xdc_runtime_Assert_Module__id__CR
S#define xdc_runtime_Assert_Module__id__C (*((CT__xdc_runtime_Assert_Module__id*)(xdcRomConstPtr + xdc_runtime_Assert_Module__id__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__id (xdc_runtime_Assert_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Assert_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
S#ifdef xdc_runtime_Assert_Module__loggerDefined__CR
S#define xdc_runtime_Assert_Module__loggerDefined__C (*((CT__xdc_runtime_Assert_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerDefined (xdc_runtime_Assert_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
S#ifdef xdc_runtime_Assert_Module__loggerObj__CR
S#define xdc_runtime_Assert_Module__loggerObj__C (*((CT__xdc_runtime_Assert_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerObj (xdc_runtime_Assert_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Assert_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn0__CR
S#define xdc_runtime_Assert_Module__loggerFxn0__C (*((CT__xdc_runtime_Assert_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn0 (xdc_runtime_Assert_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Assert_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn1__CR
S#define xdc_runtime_Assert_Module__loggerFxn1__C (*((CT__xdc_runtime_Assert_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn1 (xdc_runtime_Assert_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Assert_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn2__CR
S#define xdc_runtime_Assert_Module__loggerFxn2__C (*((CT__xdc_runtime_Assert_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn2 (xdc_runtime_Assert_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Assert_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn4__CR
S#define xdc_runtime_Assert_Module__loggerFxn4__C (*((CT__xdc_runtime_Assert_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn4 (xdc_runtime_Assert_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Assert_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn8__CR
S#define xdc_runtime_Assert_Module__loggerFxn8__C (*((CT__xdc_runtime_Assert_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn8 (xdc_runtime_Assert_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Assert_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
S#ifdef xdc_runtime_Assert_Object__count__CR
S#define xdc_runtime_Assert_Object__count__C (*((CT__xdc_runtime_Assert_Object__count*)(xdcRomConstPtr + xdc_runtime_Assert_Object__count__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__count (xdc_runtime_Assert_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Assert_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
S#ifdef xdc_runtime_Assert_Object__heap__CR
S#define xdc_runtime_Assert_Object__heap__C (*((CT__xdc_runtime_Assert_Object__heap*)(xdcRomConstPtr + xdc_runtime_Assert_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__heap (xdc_runtime_Assert_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Assert_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
S#ifdef xdc_runtime_Assert_Object__sizeof__CR
S#define xdc_runtime_Assert_Object__sizeof__C (*((CT__xdc_runtime_Assert_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Assert_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__sizeof (xdc_runtime_Assert_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
S#ifdef xdc_runtime_Assert_Object__table__CR
S#define xdc_runtime_Assert_Object__table__C (*((CT__xdc_runtime_Assert_Object__table*)(xdcRomConstPtr + xdc_runtime_Assert_Object__table__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__table (xdc_runtime_Assert_Object__table__C)
S#endif
S
S/* E_assertFailed */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Assert_E_assertFailed;
S__extern __FAR__ const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
S#ifdef xdc_runtime_Assert_E_assertFailed__CR
S#define xdc_runtime_Assert_E_assertFailed (*((CT__xdc_runtime_Assert_E_assertFailed*)(xdcRomConstPtr + xdc_runtime_Assert_E_assertFailed__C_offset)))
S#else
S#define xdc_runtime_Assert_E_assertFailed (xdc_runtime_Assert_E_assertFailed__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Assert_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Assert_Module__startupDone__S, "xdc_runtime_Assert_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
S
S/* raise__I */
S#define xdc_runtime_Assert_raise xdc_runtime_Assert_raise__I
Sxdc__CODESECT(xdc_runtime_Assert_raise__I, "xdc_runtime_Assert_raise")
S__extern xdc_Void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Assert_Module_startupDone() xdc_runtime_Assert_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Assert_Object_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Assert_Module_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id(void);
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id( void ) 
S{
S    return xdc_runtime_Assert_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void)
S{
S    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) {
S        *xdc_runtime_Assert_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Assert__epilogue.h>
S
S#ifdef xdc_runtime_Assert__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Assert__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Assert__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Assert__include_state
S#define xdc_runtime_Assert__include_state
S
S
S#endif /* xdc_runtime_Assert__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Assert__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Assert__localnames__done
S#define xdc_runtime_Assert__localnames__done
S
S/* module prefix */
S#define Assert_Id xdc_runtime_Assert_Id
S#define Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed
S#define Assert_isTrue xdc_runtime_Assert_isTrue
S#define Assert_Module_name xdc_runtime_Assert_Module_name
S#define Assert_Module_id xdc_runtime_Assert_Module_id
S#define Assert_Module_startup xdc_runtime_Assert_Module_startup
S#define Assert_Module_startupDone xdc_runtime_Assert_Module_startupDone
S#define Assert_Module_hasMask xdc_runtime_Assert_Module_hasMask
S#define Assert_Module_getMask xdc_runtime_Assert_Module_getMask
S#define Assert_Module_setMask xdc_runtime_Assert_Module_setMask
S#define Assert_Object_heap xdc_runtime_Assert_Object_heap
S#define Assert_Module_heap xdc_runtime_Assert_Module_heap
S
S#endif /* xdc_runtime_Assert__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <xdc/runtime/Log.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Log__include
S#define xdc_runtime_Log__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Log__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Log___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Log__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Text.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* NUMARGS */
S#define xdc_runtime_Log_NUMARGS (8)
S
S/* PRINTFID */
S#define xdc_runtime_Log_PRINTFID (0)
S
S/* EventRec */
Stypedef xdc_IArg __T1_xdc_runtime_Log_EventRec__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef CARRAY1_xdc_runtime_Log_EventRec__arg __TA_xdc_runtime_Log_EventRec__arg;
Sstruct xdc_runtime_Log_EventRec {
S    xdc_runtime_Types_Timestamp64 tstamp;
S    xdc_Bits32 serial;
S    xdc_runtime_Types_Event evt;
S    __TA_xdc_runtime_Log_EventRec__arg arg;
S};
S
S/* EventId */
Stypedef xdc_runtime_Types_RopeId xdc_runtime_Log_EventId;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Log_Module__diagsEnabled__CR
S#define xdc_runtime_Log_Module__diagsEnabled__C (*((CT__xdc_runtime_Log_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsEnabled (xdc_runtime_Log_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Log_Module__diagsIncluded__CR
S#define xdc_runtime_Log_Module__diagsIncluded__C (*((CT__xdc_runtime_Log_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsIncluded (xdc_runtime_Log_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Log_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
S#ifdef xdc_runtime_Log_Module__diagsMask__CR
S#define xdc_runtime_Log_Module__diagsMask__C (*((CT__xdc_runtime_Log_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsMask (xdc_runtime_Log_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
S#ifdef xdc_runtime_Log_Module__gateObj__CR
S#define xdc_runtime_Log_Module__gateObj__C (*((CT__xdc_runtime_Log_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gateObj (xdc_runtime_Log_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
S#ifdef xdc_runtime_Log_Module__gatePrms__CR
S#define xdc_runtime_Log_Module__gatePrms__C (*((CT__xdc_runtime_Log_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Log_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gatePrms (xdc_runtime_Log_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Log_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
S#ifdef xdc_runtime_Log_Module__id__CR
S#define xdc_runtime_Log_Module__id__C (*((CT__xdc_runtime_Log_Module__id*)(xdcRomConstPtr + xdc_runtime_Log_Module__id__C_offset)))
S#else
S#define xdc_runtime_Log_Module__id (xdc_runtime_Log_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Log_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
S#ifdef xdc_runtime_Log_Module__loggerDefined__CR
S#define xdc_runtime_Log_Module__loggerDefined__C (*((CT__xdc_runtime_Log_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerDefined (xdc_runtime_Log_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
S#ifdef xdc_runtime_Log_Module__loggerObj__CR
S#define xdc_runtime_Log_Module__loggerObj__C (*((CT__xdc_runtime_Log_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerObj (xdc_runtime_Log_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Log_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn0__CR
S#define xdc_runtime_Log_Module__loggerFxn0__C (*((CT__xdc_runtime_Log_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn0 (xdc_runtime_Log_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Log_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn1__CR
S#define xdc_runtime_Log_Module__loggerFxn1__C (*((CT__xdc_runtime_Log_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn1 (xdc_runtime_Log_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Log_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn2__CR
S#define xdc_runtime_Log_Module__loggerFxn2__C (*((CT__xdc_runtime_Log_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn2 (xdc_runtime_Log_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Log_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn4__CR
S#define xdc_runtime_Log_Module__loggerFxn4__C (*((CT__xdc_runtime_Log_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn4 (xdc_runtime_Log_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Log_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn8__CR
S#define xdc_runtime_Log_Module__loggerFxn8__C (*((CT__xdc_runtime_Log_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn8 (xdc_runtime_Log_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Log_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
S#ifdef xdc_runtime_Log_Object__count__CR
S#define xdc_runtime_Log_Object__count__C (*((CT__xdc_runtime_Log_Object__count*)(xdcRomConstPtr + xdc_runtime_Log_Object__count__C_offset)))
S#else
S#define xdc_runtime_Log_Object__count (xdc_runtime_Log_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Log_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
S#ifdef xdc_runtime_Log_Object__heap__CR
S#define xdc_runtime_Log_Object__heap__C (*((CT__xdc_runtime_Log_Object__heap*)(xdcRomConstPtr + xdc_runtime_Log_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Log_Object__heap (xdc_runtime_Log_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Log_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
S#ifdef xdc_runtime_Log_Object__sizeof__CR
S#define xdc_runtime_Log_Object__sizeof__C (*((CT__xdc_runtime_Log_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Log_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Log_Object__sizeof (xdc_runtime_Log_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
S#ifdef xdc_runtime_Log_Object__table__CR
S#define xdc_runtime_Log_Object__table__C (*((CT__xdc_runtime_Log_Object__table*)(xdcRomConstPtr + xdc_runtime_Log_Object__table__C_offset)))
S#else
S#define xdc_runtime_Log_Object__table (xdc_runtime_Log_Object__table__C)
S#endif
S
S/* L_construct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_construct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
S#ifdef xdc_runtime_Log_L_construct__CR
S#define xdc_runtime_Log_L_construct (*((CT__xdc_runtime_Log_L_construct*)(xdcRomConstPtr + xdc_runtime_Log_L_construct__C_offset)))
S#else
S#define xdc_runtime_Log_L_construct (xdc_runtime_Log_L_construct__C)
S#endif
S
S/* L_create */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_create;
S__extern __FAR__ const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
S#ifdef xdc_runtime_Log_L_create__CR
S#define xdc_runtime_Log_L_create (*((CT__xdc_runtime_Log_L_create*)(xdcRomConstPtr + xdc_runtime_Log_L_create__C_offset)))
S#else
S#define xdc_runtime_Log_L_create (xdc_runtime_Log_L_create__C)
S#endif
S
S/* L_destruct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_destruct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
S#ifdef xdc_runtime_Log_L_destruct__CR
S#define xdc_runtime_Log_L_destruct (*((CT__xdc_runtime_Log_L_destruct*)(xdcRomConstPtr + xdc_runtime_Log_L_destruct__C_offset)))
S#else
S#define xdc_runtime_Log_L_destruct (xdc_runtime_Log_L_destruct__C)
S#endif
S
S/* L_delete */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_delete;
S__extern __FAR__ const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
S#ifdef xdc_runtime_Log_L_delete__CR
S#define xdc_runtime_Log_L_delete (*((CT__xdc_runtime_Log_L_delete*)(xdcRomConstPtr + xdc_runtime_Log_L_delete__C_offset)))
S#else
S#define xdc_runtime_Log_L_delete (xdc_runtime_Log_L_delete__C)
S#endif
S
S/* L_error */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_error;
S__extern __FAR__ const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
S#ifdef xdc_runtime_Log_L_error__CR
S#define xdc_runtime_Log_L_error (*((CT__xdc_runtime_Log_L_error*)(xdcRomConstPtr + xdc_runtime_Log_L_error__C_offset)))
S#else
S#define xdc_runtime_Log_L_error (xdc_runtime_Log_L_error__C)
S#endif
S
S/* L_warning */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_warning;
S__extern __FAR__ const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
S#ifdef xdc_runtime_Log_L_warning__CR
S#define xdc_runtime_Log_L_warning (*((CT__xdc_runtime_Log_L_warning*)(xdcRomConstPtr + xdc_runtime_Log_L_warning__C_offset)))
S#else
S#define xdc_runtime_Log_L_warning (xdc_runtime_Log_L_warning__C)
S#endif
S
S/* L_info */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_info;
S__extern __FAR__ const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
S#ifdef xdc_runtime_Log_L_info__CR
S#define xdc_runtime_Log_L_info (*((CT__xdc_runtime_Log_L_info*)(xdcRomConstPtr + xdc_runtime_Log_L_info__C_offset)))
S#else
S#define xdc_runtime_Log_L_info (xdc_runtime_Log_L_info__C)
S#endif
S
S/* L_start */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_start;
S__extern __FAR__ const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
S#ifdef xdc_runtime_Log_L_start__CR
S#define xdc_runtime_Log_L_start (*((CT__xdc_runtime_Log_L_start*)(xdcRomConstPtr + xdc_runtime_Log_L_start__C_offset)))
S#else
S#define xdc_runtime_Log_L_start (xdc_runtime_Log_L_start__C)
S#endif
S
S/* L_stop */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stop;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
S#ifdef xdc_runtime_Log_L_stop__CR
S#define xdc_runtime_Log_L_stop (*((CT__xdc_runtime_Log_L_stop*)(xdcRomConstPtr + xdc_runtime_Log_L_stop__C_offset)))
S#else
S#define xdc_runtime_Log_L_stop (xdc_runtime_Log_L_stop__C)
S#endif
S
S/* L_startInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_startInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
S#ifdef xdc_runtime_Log_L_startInstance__CR
S#define xdc_runtime_Log_L_startInstance (*((CT__xdc_runtime_Log_L_startInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_startInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_startInstance (xdc_runtime_Log_L_startInstance__C)
S#endif
S
S/* L_stopInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stopInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
S#ifdef xdc_runtime_Log_L_stopInstance__CR
S#define xdc_runtime_Log_L_stopInstance (*((CT__xdc_runtime_Log_L_stopInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_stopInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_stopInstance (xdc_runtime_Log_L_stopInstance__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Log_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Log_Module__startupDone__S, "xdc_runtime_Log_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
S
S/* doPrint__E */
S#define xdc_runtime_Log_doPrint xdc_runtime_Log_doPrint__E
Sxdc__CODESECT(xdc_runtime_Log_doPrint__E, "xdc_runtime_Log_doPrint")
S__extern xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Log_Module_startupDone() xdc_runtime_Log_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Log_Object_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Log_Module_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id(void);
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id( void ) 
S{
S    return xdc_runtime_Log_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void)
S{
S    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) {
S        *xdc_runtime_Log_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Log__epilogue.h>
S
S#ifdef xdc_runtime_Log__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Log__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Log__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Log__include_state
S#define xdc_runtime_Log__include_state
S
S
S#endif /* xdc_runtime_Log__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Log__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Log__localnames__done
S#define xdc_runtime_Log__localnames__done
S
S/* module prefix */
S#define Log_NUMARGS xdc_runtime_Log_NUMARGS
S#define Log_PRINTFID xdc_runtime_Log_PRINTFID
S#define Log_EventRec xdc_runtime_Log_EventRec
S#define Log_Event xdc_runtime_Log_Event
S#define Log_EventId xdc_runtime_Log_EventId
S#define Log_L_construct xdc_runtime_Log_L_construct
S#define Log_L_create xdc_runtime_Log_L_create
S#define Log_L_destruct xdc_runtime_Log_L_destruct
S#define Log_L_delete xdc_runtime_Log_L_delete
S#define Log_L_error xdc_runtime_Log_L_error
S#define Log_L_warning xdc_runtime_Log_L_warning
S#define Log_L_info xdc_runtime_Log_L_info
S#define Log_L_start xdc_runtime_Log_L_start
S#define Log_L_stop xdc_runtime_Log_L_stop
S#define Log_L_startInstance xdc_runtime_Log_L_startInstance
S#define Log_L_stopInstance xdc_runtime_Log_L_stopInstance
S#define Log_getMask xdc_runtime_Log_getMask
S#define Log_getRope xdc_runtime_Log_getRope
S#define Log_getEventId xdc_runtime_Log_getEventId
S#define Log_print0 xdc_runtime_Log_print0
S#define Log_print1 xdc_runtime_Log_print1
S#define Log_print2 xdc_runtime_Log_print2
S#define Log_print3 xdc_runtime_Log_print3
S#define Log_print4 xdc_runtime_Log_print4
S#define Log_print5 xdc_runtime_Log_print5
S#define Log_print6 xdc_runtime_Log_print6
S#define Log_error0 xdc_runtime_Log_error0
S#define Log_error1 xdc_runtime_Log_error1
S#define Log_error2 xdc_runtime_Log_error2
S#define Log_error3 xdc_runtime_Log_error3
S#define Log_error4 xdc_runtime_Log_error4
S#define Log_error5 xdc_runtime_Log_error5
S#define Log_warning0 xdc_runtime_Log_warning0
S#define Log_warning1 xdc_runtime_Log_warning1
S#define Log_warning2 xdc_runtime_Log_warning2
S#define Log_warning3 xdc_runtime_Log_warning3
S#define Log_warning4 xdc_runtime_Log_warning4
S#define Log_warning5 xdc_runtime_Log_warning5
S#define Log_info0 xdc_runtime_Log_info0
S#define Log_info1 xdc_runtime_Log_info1
S#define Log_info2 xdc_runtime_Log_info2
S#define Log_info3 xdc_runtime_Log_info3
S#define Log_info4 xdc_runtime_Log_info4
S#define Log_info5 xdc_runtime_Log_info5
S#define Log_put0 xdc_runtime_Log_put0
S#define Log_put1 xdc_runtime_Log_put1
S#define Log_put2 xdc_runtime_Log_put2
S#define Log_put4 xdc_runtime_Log_put4
S#define Log_put8 xdc_runtime_Log_put8
S#define Log_write0 xdc_runtime_Log_write0
S#define Log_write1 xdc_runtime_Log_write1
S#define Log_write2 xdc_runtime_Log_write2
S#define Log_write3 xdc_runtime_Log_write3
S#define Log_write4 xdc_runtime_Log_write4
S#define Log_write5 xdc_runtime_Log_write5
S#define Log_write6 xdc_runtime_Log_write6
S#define Log_write7 xdc_runtime_Log_write7
S#define Log_write8 xdc_runtime_Log_write8
S#define Log_doPrint xdc_runtime_Log_doPrint
S#define Log_Module_name xdc_runtime_Log_Module_name
S#define Log_Module_id xdc_runtime_Log_Module_id
S#define Log_Module_startup xdc_runtime_Log_Module_startup
S#define Log_Module_startupDone xdc_runtime_Log_Module_startupDone
S#define Log_Module_hasMask xdc_runtime_Log_Module_hasMask
S#define Log_Module_getMask xdc_runtime_Log_Module_getMask
S#define Log_Module_setMask xdc_runtime_Log_Module_setMask
S#define Log_Object_heap xdc_runtime_Log_Object_heap
S#define Log_Module_heap xdc_runtime_Log_Module_heap
S
S#endif /* xdc_runtime_Log__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 63 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <ti/sysbios/interfaces/ITimer.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_interfaces_ITimer__include
N#define ti_sysbios_interfaces_ITimer__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_interfaces_ITimer__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_interfaces_ITimer___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 2
N#include <ti/sysbios/interfaces/package/package.defs.h>
N
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 58 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 59 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_FuncPtr)(xdc_UArg);
Xtypedef void (*ti_sysbios_interfaces_ITimer_FuncPtr)(xdc_UArg);
N
N/* ANY */
N#define ti_sysbios_interfaces_ITimer_ANY (~0)
N
N/* StartMode */
Nenum ti_sysbios_interfaces_ITimer_StartMode {
N    ti_sysbios_interfaces_ITimer_StartMode_AUTO,
N    ti_sysbios_interfaces_ITimer_StartMode_USER
N};
Ntypedef enum ti_sysbios_interfaces_ITimer_StartMode ti_sysbios_interfaces_ITimer_StartMode;
N
N/* RunMode */
Nenum ti_sysbios_interfaces_ITimer_RunMode {
N    ti_sysbios_interfaces_ITimer_RunMode_CONTINUOUS,
N    ti_sysbios_interfaces_ITimer_RunMode_ONESHOT,
N    ti_sysbios_interfaces_ITimer_RunMode_DYNAMIC
N};
Ntypedef enum ti_sysbios_interfaces_ITimer_RunMode ti_sysbios_interfaces_ITimer_RunMode;
N
N/* Status */
Nenum ti_sysbios_interfaces_ITimer_Status {
N    ti_sysbios_interfaces_ITimer_Status_INUSE,
N    ti_sysbios_interfaces_ITimer_Status_FREE
N};
Ntypedef enum ti_sysbios_interfaces_ITimer_Status ti_sysbios_interfaces_ITimer_Status;
N
N/* PeriodType */
Nenum ti_sysbios_interfaces_ITimer_PeriodType {
N    ti_sysbios_interfaces_ITimer_PeriodType_MICROSECS,
N    ti_sysbios_interfaces_ITimer_PeriodType_COUNTS
N};
Ntypedef enum ti_sysbios_interfaces_ITimer_PeriodType ti_sysbios_interfaces_ITimer_PeriodType;
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_interfaces_ITimer_Args__create {
N    xdc_Int id;
N    ti_sysbios_interfaces_ITimer_FuncPtr tickFxn;
N} ti_sysbios_interfaces_ITimer_Args__create;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_interfaces_ITimer_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    ti_sysbios_interfaces_ITimer_RunMode runMode;
N    ti_sysbios_interfaces_ITimer_StartMode startMode;
N    xdc_UArg arg;
N    xdc_UInt32 period;
N    ti_sysbios_interfaces_ITimer_PeriodType periodType;
N    xdc_runtime_Types_FreqHz extFreq;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct ti_sysbios_interfaces_ITimer_Fxns__ {
N    xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2 *__sysp;
N    xdc_UInt (*getNumTimers)(void);
N    ti_sysbios_interfaces_ITimer_Status (*getStatus)(xdc_UInt);
N    xdc_Void (*startup)(void);
X    void (*startup)(void);
N    xdc_UInt32 (*getMaxTicks)(void*);
N    xdc_Void (*setNextTick)(void*, xdc_UInt32);
X    void (*setNextTick)(void*, xdc_UInt32);
N    xdc_Void (*start)(void*);
X    void (*start)(void*);
N    xdc_Void (*stop)(void*);
X    void (*stop)(void*);
N    xdc_Void (*setPeriod)(void*, xdc_UInt32);
X    void (*setPeriod)(void*, xdc_UInt32);
N    xdc_Bool (*setPeriodMicroSecs)(void*, xdc_UInt32);
N    xdc_UInt32 (*getPeriod)(void*);
N    xdc_UInt32 (*getCount)(void*);
N    xdc_Void (*getFreq)(void*, xdc_runtime_Types_FreqHz*);
X    void (*getFreq)(void*, xdc_runtime_Types_FreqHz*);
N    ti_sysbios_interfaces_ITimer_FuncPtr (*getFunc)(void*, xdc_UArg*);
N    xdc_Void (*setFunc)(void*, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
X    void (*setFunc)(void*, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
N    xdc_Void (*trigger)(void*, xdc_UInt32);
X    void (*trigger)(void*, xdc_UInt32);
N    xdc_UInt32 (*getExpiredCounts)(void*);
N    xdc_UInt32 (*getExpiredTicks)(void*, xdc_UInt32);
N    xdc_UInt32 (*getCurrentTick)(void*, xdc_Bool);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N
N/* Interface__BASE__C */
N__extern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITimer_Interface__BASE__C;
Xextern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITimer_Interface__BASE__C;
N
N
N/*
N * ======== FUNCTION STUBS ========
N */
N
N/* create */
Nxdc__CODESECT(ti_sysbios_interfaces_ITimer_create, "ti_sysbios_interfaces_ITimer_create")
X
N__extern ti_sysbios_interfaces_ITimer_Handle ti_sysbios_interfaces_ITimer_create(ti_sysbios_interfaces_ITimer_Module, xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_interfaces_ITimer_Params *, xdc_runtime_Error_Block *__eb);
Xextern ti_sysbios_interfaces_ITimer_Handle ti_sysbios_interfaces_ITimer_create(ti_sysbios_interfaces_ITimer_Module, xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_interfaces_ITimer_Params *, xdc_runtime_Error_Block *__eb);
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_interfaces_ITimer_delete, "ti_sysbios_interfaces_ITimer_delete")
X
N__extern xdc_Void ti_sysbios_interfaces_ITimer_delete(ti_sysbios_interfaces_ITimer_Handle *);
Xextern void ti_sysbios_interfaces_ITimer_delete(ti_sysbios_interfaces_ITimer_Handle *);
N
N/* Handle_to_Module */
Nstatic inline ti_sysbios_interfaces_ITimer_Module ti_sysbios_interfaces_ITimer_Handle_to_Module( ti_sysbios_interfaces_ITimer_Handle inst )
N{
N    return inst->__fxns;
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_interfaces_ITimer_Handle_label( ti_sysbios_interfaces_ITimer_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return inst->__fxns->__sysp->__label(inst, lab);
N}
N
N/* Module_id */
Nstatic inline xdc_runtime_Types_ModuleId ti_sysbios_interfaces_ITimer_Module_id( ti_sysbios_interfaces_ITimer_Module mod )
N{
N    return mod->__sysp->__mid;
N}
N
N/* getNumTimers */
Nstatic inline xdc_UInt ti_sysbios_interfaces_ITimer_getNumTimers( ti_sysbios_interfaces_ITimer_Module __inst )
N{
N    return __inst->getNumTimers();
N}
N
N/* getStatus */
Nstatic inline ti_sysbios_interfaces_ITimer_Status ti_sysbios_interfaces_ITimer_getStatus( ti_sysbios_interfaces_ITimer_Module __inst, xdc_UInt id )
N{
N    return __inst->getStatus(id);
N}
N
N/* startup */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_startup( ti_sysbios_interfaces_ITimer_Module __inst )
Xstatic inline void ti_sysbios_interfaces_ITimer_startup( ti_sysbios_interfaces_ITimer_Module __inst )
N{
N    __inst->startup();
N}
N
N/* getMaxTicks */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getMaxTicks( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return __inst->__fxns->getMaxTicks((void*)__inst);
N}
N
N/* setNextTick */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setNextTick( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 ticks )
Xstatic inline void ti_sysbios_interfaces_ITimer_setNextTick( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 ticks )
N{
N    __inst->__fxns->setNextTick((void*)__inst, ticks);
N}
N
N/* start */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_start( ti_sysbios_interfaces_ITimer_Handle __inst )
Xstatic inline void ti_sysbios_interfaces_ITimer_start( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    __inst->__fxns->start((void*)__inst);
N}
N
N/* stop */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_stop( ti_sysbios_interfaces_ITimer_Handle __inst )
Xstatic inline void ti_sysbios_interfaces_ITimer_stop( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    __inst->__fxns->stop((void*)__inst);
N}
N
N/* setPeriod */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setPeriod( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 period )
Xstatic inline void ti_sysbios_interfaces_ITimer_setPeriod( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 period )
N{
N    __inst->__fxns->setPeriod((void*)__inst, period);
N}
N
N/* setPeriodMicroSecs */
Nstatic inline xdc_Bool ti_sysbios_interfaces_ITimer_setPeriodMicroSecs( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 microsecs )
N{
N    return __inst->__fxns->setPeriodMicroSecs((void*)__inst, microsecs);
N}
N
N/* getPeriod */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getPeriod( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return __inst->__fxns->getPeriod((void*)__inst);
N}
N
N/* getCount */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getCount( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return __inst->__fxns->getCount((void*)__inst);
N}
N
N/* getFreq */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_getFreq( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_runtime_Types_FreqHz *freq )
Xstatic inline void ti_sysbios_interfaces_ITimer_getFreq( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_runtime_Types_FreqHz *freq )
N{
N    __inst->__fxns->getFreq((void*)__inst, freq);
N}
N
N/* getFunc */
Nstatic inline ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_interfaces_ITimer_getFunc( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UArg *arg )
N{
N    return __inst->__fxns->getFunc((void*)__inst, arg);
N}
N
N/* setFunc */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setFunc( ti_sysbios_interfaces_ITimer_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg )
Xstatic inline void ti_sysbios_interfaces_ITimer_setFunc( ti_sysbios_interfaces_ITimer_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg )
N{
N    __inst->__fxns->setFunc((void*)__inst, fxn, arg);
N}
N
N/* trigger */
Nstatic inline xdc_Void ti_sysbios_interfaces_ITimer_trigger( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 cycles )
Xstatic inline void ti_sysbios_interfaces_ITimer_trigger( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 cycles )
N{
N    __inst->__fxns->trigger((void*)__inst, cycles);
N}
N
N/* getExpiredCounts */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getExpiredCounts( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return __inst->__fxns->getExpiredCounts((void*)__inst);
N}
N
N/* getExpiredTicks */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getExpiredTicks( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 tickPeriod )
N{
N    return __inst->__fxns->getExpiredTicks((void*)__inst, tickPeriod);
N}
N
N/* getCurrentTick */
Nstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getCurrentTick( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_Bool save )
N{
N    return __inst->__fxns->getCurrentTick((void*)__inst, save);
N}
N
N
N/*
N * ======== FUNCTION SELECTORS ========
N */
N
N/* These functions return function pointers for module and instance functions.
N * The functions accept modules and instances declared as types defined in this
N * interface, but they return functions defined for the actual objects passed
N * as parameters. These functions are not invoked by any generated code or
N * XDCtools internal code.
N */
N
N/* getNumTimers_{FxnT,fxnP} */
Ntypedef xdc_UInt (*ti_sysbios_interfaces_ITimer_getNumTimers_FxnT)(void);
Nstatic inline ti_sysbios_interfaces_ITimer_getNumTimers_FxnT ti_sysbios_interfaces_ITimer_getNumTimers_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getNumTimers_FxnT)__inst->getNumTimers;
N}
N
N/* getStatus_{FxnT,fxnP} */
Ntypedef ti_sysbios_interfaces_ITimer_Status (*ti_sysbios_interfaces_ITimer_getStatus_FxnT)(xdc_UInt);
Nstatic inline ti_sysbios_interfaces_ITimer_getStatus_FxnT ti_sysbios_interfaces_ITimer_getStatus_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getStatus_FxnT)__inst->getStatus;
N}
N
N/* startup_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_startup_FxnT)(void);
Xtypedef void (*ti_sysbios_interfaces_ITimer_startup_FxnT)(void);
Nstatic inline ti_sysbios_interfaces_ITimer_startup_FxnT ti_sysbios_interfaces_ITimer_startup_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_startup_FxnT)__inst->startup;
N}
N
N/* getMaxTicks_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT)(xdc_Void *);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT ti_sysbios_interfaces_ITimer_getMaxTicks_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT)__inst->__fxns->getMaxTicks;
N}
N
N/* setNextTick_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setNextTick_FxnT)(xdc_Void *, xdc_UInt32);
Xtypedef void (*ti_sysbios_interfaces_ITimer_setNextTick_FxnT)(void *, xdc_UInt32);
Nstatic inline ti_sysbios_interfaces_ITimer_setNextTick_FxnT ti_sysbios_interfaces_ITimer_setNextTick_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_setNextTick_FxnT)__inst->__fxns->setNextTick;
N}
N
N/* start_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_start_FxnT)(xdc_Void *);
Xtypedef void (*ti_sysbios_interfaces_ITimer_start_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_start_FxnT ti_sysbios_interfaces_ITimer_start_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_start_FxnT)__inst->__fxns->start;
N}
N
N/* stop_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_stop_FxnT)(xdc_Void *);
Xtypedef void (*ti_sysbios_interfaces_ITimer_stop_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_stop_FxnT ti_sysbios_interfaces_ITimer_stop_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_stop_FxnT)__inst->__fxns->stop;
N}
N
N/* setPeriod_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setPeriod_FxnT)(xdc_Void *, xdc_UInt32);
Xtypedef void (*ti_sysbios_interfaces_ITimer_setPeriod_FxnT)(void *, xdc_UInt32);
Nstatic inline ti_sysbios_interfaces_ITimer_setPeriod_FxnT ti_sysbios_interfaces_ITimer_setPeriod_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_setPeriod_FxnT)__inst->__fxns->setPeriod;
N}
N
N/* setPeriodMicroSecs_{FxnT,fxnP} */
Ntypedef xdc_Bool (*ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT)(xdc_Void *, xdc_UInt32);
Xtypedef xdc_Bool (*ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT)(void *, xdc_UInt32);
Nstatic inline ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT)__inst->__fxns->setPeriodMicroSecs;
N}
N
N/* getPeriod_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getPeriod_FxnT)(xdc_Void *);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getPeriod_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_getPeriod_FxnT ti_sysbios_interfaces_ITimer_getPeriod_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getPeriod_FxnT)__inst->__fxns->getPeriod;
N}
N
N/* getCount_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCount_FxnT)(xdc_Void *);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCount_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_getCount_FxnT ti_sysbios_interfaces_ITimer_getCount_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getCount_FxnT)__inst->__fxns->getCount;
N}
N
N/* getFreq_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_getFreq_FxnT)(xdc_Void *, xdc_runtime_Types_FreqHz*);
Xtypedef void (*ti_sysbios_interfaces_ITimer_getFreq_FxnT)(void *, xdc_runtime_Types_FreqHz*);
Nstatic inline ti_sysbios_interfaces_ITimer_getFreq_FxnT ti_sysbios_interfaces_ITimer_getFreq_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getFreq_FxnT)__inst->__fxns->getFreq;
N}
N
N/* getFunc_{FxnT,fxnP} */
Ntypedef ti_sysbios_interfaces_ITimer_FuncPtr (*ti_sysbios_interfaces_ITimer_getFunc_FxnT)(xdc_Void *, xdc_UArg*);
Xtypedef ti_sysbios_interfaces_ITimer_FuncPtr (*ti_sysbios_interfaces_ITimer_getFunc_FxnT)(void *, xdc_UArg*);
Nstatic inline ti_sysbios_interfaces_ITimer_getFunc_FxnT ti_sysbios_interfaces_ITimer_getFunc_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getFunc_FxnT)__inst->__fxns->getFunc;
N}
N
N/* setFunc_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setFunc_FxnT)(xdc_Void *, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
Xtypedef void (*ti_sysbios_interfaces_ITimer_setFunc_FxnT)(void *, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
Nstatic inline ti_sysbios_interfaces_ITimer_setFunc_FxnT ti_sysbios_interfaces_ITimer_setFunc_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_setFunc_FxnT)__inst->__fxns->setFunc;
N}
N
N/* trigger_{FxnT,fxnP} */
Ntypedef xdc_Void (*ti_sysbios_interfaces_ITimer_trigger_FxnT)(xdc_Void *, xdc_UInt32);
Xtypedef void (*ti_sysbios_interfaces_ITimer_trigger_FxnT)(void *, xdc_UInt32);
Nstatic inline ti_sysbios_interfaces_ITimer_trigger_FxnT ti_sysbios_interfaces_ITimer_trigger_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_trigger_FxnT)__inst->__fxns->trigger;
N}
N
N/* getExpiredCounts_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT)(xdc_Void *);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT)(void *);
Nstatic inline ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT ti_sysbios_interfaces_ITimer_getExpiredCounts_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT)__inst->__fxns->getExpiredCounts;
N}
N
N/* getExpiredTicks_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT)(xdc_Void *, xdc_UInt32);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT)(void *, xdc_UInt32);
Nstatic inline ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT ti_sysbios_interfaces_ITimer_getExpiredTicks_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT)__inst->__fxns->getExpiredTicks;
N}
N
N/* getCurrentTick_{FxnT,fxnP} */
Ntypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT)(xdc_Void *, xdc_Bool);
Xtypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT)(void *, xdc_Bool);
Nstatic inline ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT ti_sysbios_interfaces_ITimer_getCurrentTick_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
N{
N    return (ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT)__inst->__fxns->getCurrentTick;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_interfaces_ITimer__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_interfaces_ITimer__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_interfaces_ITimer__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_interfaces_ITimer__localnames__done
S#define ti_sysbios_interfaces_ITimer__localnames__done
S
S/* module prefix */
S#define ITimer_Instance ti_sysbios_interfaces_ITimer_Instance
S#define ITimer_Handle ti_sysbios_interfaces_ITimer_Handle
S#define ITimer_Module ti_sysbios_interfaces_ITimer_Module
S#define ITimer_FuncPtr ti_sysbios_interfaces_ITimer_FuncPtr
S#define ITimer_ANY ti_sysbios_interfaces_ITimer_ANY
S#define ITimer_StartMode ti_sysbios_interfaces_ITimer_StartMode
S#define ITimer_RunMode ti_sysbios_interfaces_ITimer_RunMode
S#define ITimer_Status ti_sysbios_interfaces_ITimer_Status
S#define ITimer_PeriodType ti_sysbios_interfaces_ITimer_PeriodType
S#define ITimer_StartMode_AUTO ti_sysbios_interfaces_ITimer_StartMode_AUTO
S#define ITimer_StartMode_USER ti_sysbios_interfaces_ITimer_StartMode_USER
S#define ITimer_RunMode_CONTINUOUS ti_sysbios_interfaces_ITimer_RunMode_CONTINUOUS
S#define ITimer_RunMode_ONESHOT ti_sysbios_interfaces_ITimer_RunMode_ONESHOT
S#define ITimer_RunMode_DYNAMIC ti_sysbios_interfaces_ITimer_RunMode_DYNAMIC
S#define ITimer_Status_INUSE ti_sysbios_interfaces_ITimer_Status_INUSE
S#define ITimer_Status_FREE ti_sysbios_interfaces_ITimer_Status_FREE
S#define ITimer_PeriodType_MICROSECS ti_sysbios_interfaces_ITimer_PeriodType_MICROSECS
S#define ITimer_PeriodType_COUNTS ti_sysbios_interfaces_ITimer_PeriodType_COUNTS
S#define ITimer_Params ti_sysbios_interfaces_ITimer_Params
S#define ITimer_getNumTimers ti_sysbios_interfaces_ITimer_getNumTimers
S#define ITimer_getNumTimers_fxnP ti_sysbios_interfaces_ITimer_getNumTimers_fxnP
S#define ITimer_getNumTimers_FxnT ti_sysbios_interfaces_ITimer_getNumTimers_FxnT
S#define ITimer_getStatus ti_sysbios_interfaces_ITimer_getStatus
S#define ITimer_getStatus_fxnP ti_sysbios_interfaces_ITimer_getStatus_fxnP
S#define ITimer_getStatus_FxnT ti_sysbios_interfaces_ITimer_getStatus_FxnT
S#define ITimer_startup ti_sysbios_interfaces_ITimer_startup
S#define ITimer_startup_fxnP ti_sysbios_interfaces_ITimer_startup_fxnP
S#define ITimer_startup_FxnT ti_sysbios_interfaces_ITimer_startup_FxnT
S#define ITimer_getMaxTicks ti_sysbios_interfaces_ITimer_getMaxTicks
S#define ITimer_getMaxTicks_fxnP ti_sysbios_interfaces_ITimer_getMaxTicks_fxnP
S#define ITimer_getMaxTicks_FxnT ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT
S#define ITimer_setNextTick ti_sysbios_interfaces_ITimer_setNextTick
S#define ITimer_setNextTick_fxnP ti_sysbios_interfaces_ITimer_setNextTick_fxnP
S#define ITimer_setNextTick_FxnT ti_sysbios_interfaces_ITimer_setNextTick_FxnT
S#define ITimer_start ti_sysbios_interfaces_ITimer_start
S#define ITimer_start_fxnP ti_sysbios_interfaces_ITimer_start_fxnP
S#define ITimer_start_FxnT ti_sysbios_interfaces_ITimer_start_FxnT
S#define ITimer_stop ti_sysbios_interfaces_ITimer_stop
S#define ITimer_stop_fxnP ti_sysbios_interfaces_ITimer_stop_fxnP
S#define ITimer_stop_FxnT ti_sysbios_interfaces_ITimer_stop_FxnT
S#define ITimer_setPeriod ti_sysbios_interfaces_ITimer_setPeriod
S#define ITimer_setPeriod_fxnP ti_sysbios_interfaces_ITimer_setPeriod_fxnP
S#define ITimer_setPeriod_FxnT ti_sysbios_interfaces_ITimer_setPeriod_FxnT
S#define ITimer_setPeriodMicroSecs ti_sysbios_interfaces_ITimer_setPeriodMicroSecs
S#define ITimer_setPeriodMicroSecs_fxnP ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_fxnP
S#define ITimer_setPeriodMicroSecs_FxnT ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT
S#define ITimer_getPeriod ti_sysbios_interfaces_ITimer_getPeriod
S#define ITimer_getPeriod_fxnP ti_sysbios_interfaces_ITimer_getPeriod_fxnP
S#define ITimer_getPeriod_FxnT ti_sysbios_interfaces_ITimer_getPeriod_FxnT
S#define ITimer_getCount ti_sysbios_interfaces_ITimer_getCount
S#define ITimer_getCount_fxnP ti_sysbios_interfaces_ITimer_getCount_fxnP
S#define ITimer_getCount_FxnT ti_sysbios_interfaces_ITimer_getCount_FxnT
S#define ITimer_getFreq ti_sysbios_interfaces_ITimer_getFreq
S#define ITimer_getFreq_fxnP ti_sysbios_interfaces_ITimer_getFreq_fxnP
S#define ITimer_getFreq_FxnT ti_sysbios_interfaces_ITimer_getFreq_FxnT
S#define ITimer_getFunc ti_sysbios_interfaces_ITimer_getFunc
S#define ITimer_getFunc_fxnP ti_sysbios_interfaces_ITimer_getFunc_fxnP
S#define ITimer_getFunc_FxnT ti_sysbios_interfaces_ITimer_getFunc_FxnT
S#define ITimer_setFunc ti_sysbios_interfaces_ITimer_setFunc
S#define ITimer_setFunc_fxnP ti_sysbios_interfaces_ITimer_setFunc_fxnP
S#define ITimer_setFunc_FxnT ti_sysbios_interfaces_ITimer_setFunc_FxnT
S#define ITimer_trigger ti_sysbios_interfaces_ITimer_trigger
S#define ITimer_trigger_fxnP ti_sysbios_interfaces_ITimer_trigger_fxnP
S#define ITimer_trigger_FxnT ti_sysbios_interfaces_ITimer_trigger_FxnT
S#define ITimer_getExpiredCounts ti_sysbios_interfaces_ITimer_getExpiredCounts
S#define ITimer_getExpiredCounts_fxnP ti_sysbios_interfaces_ITimer_getExpiredCounts_fxnP
S#define ITimer_getExpiredCounts_FxnT ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT
S#define ITimer_getExpiredTicks ti_sysbios_interfaces_ITimer_getExpiredTicks
S#define ITimer_getExpiredTicks_fxnP ti_sysbios_interfaces_ITimer_getExpiredTicks_fxnP
S#define ITimer_getExpiredTicks_FxnT ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT
S#define ITimer_getCurrentTick ti_sysbios_interfaces_ITimer_getCurrentTick
S#define ITimer_getCurrentTick_fxnP ti_sysbios_interfaces_ITimer_getCurrentTick_fxnP
S#define ITimer_getCurrentTick_FxnT ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT
S#define ITimer_Module_name ti_sysbios_interfaces_ITimer_Module_name
S#define ITimer_create ti_sysbios_interfaces_ITimer_create
S#define ITimer_delete ti_sysbios_interfaces_ITimer_delete
S#define ITimer_Handle_label ti_sysbios_interfaces_ITimer_Handle_label
S#define ITimer_Handle_to_Module ti_sysbios_interfaces_ITimer_Handle_to_Module
S
S#endif /* ti_sysbios_interfaces_ITimer__localnames__done */
N#endif
L 64 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <ti/sysbios/knl/Queue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Queue__include
S#define ti_sysbios_knl_Queue__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Queue__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Queue___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Elem */
Sstruct ti_sysbios_knl_Queue_Elem {
S    ti_sysbios_knl_Queue_Elem *volatile next;
S    ti_sysbios_knl_Queue_Elem *volatile prev;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Queue_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Queue_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Queue_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Queue_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Queue_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Queue_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Queue_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Queue_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Queue_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Queue_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Queue_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Queue_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Queue_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Queue_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Queue_Module_startup( state ) (-1)
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Instance_init__E, "ti_sysbios_knl_Queue_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Handle__label__S, "ti_sysbios_knl_Queue_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Module__startupDone__S, "ti_sysbios_knl_Queue_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__create__S, "ti_sysbios_knl_Queue_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Queue_create, "ti_sysbios_knl_Queue_create")
S__extern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_construct, "ti_sysbios_knl_Queue_construct")
S__extern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__delete__S, "ti_sysbios_knl_Queue_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Queue_delete, "ti_sysbios_knl_Queue_delete")
S__extern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__destruct__S, "ti_sysbios_knl_Queue_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_destruct, "ti_sysbios_knl_Queue_destruct")
S__extern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__get__S, "ti_sysbios_knl_Queue_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__first__S, "ti_sysbios_knl_Queue_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__next__S, "ti_sysbios_knl_Queue_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Params__init__S, "ti_sysbios_knl_Queue_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* elemClear__E */
S#define ti_sysbios_knl_Queue_elemClear ti_sysbios_knl_Queue_elemClear__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_elemClear__E, "ti_sysbios_knl_Queue_elemClear")
S__extern xdc_Void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* insert__E */
S#define ti_sysbios_knl_Queue_insert ti_sysbios_knl_Queue_insert__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_insert__E, "ti_sysbios_knl_Queue_insert")
S__extern xdc_Void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
S
S/* next__E */
S#define ti_sysbios_knl_Queue_next ti_sysbios_knl_Queue_next__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_next__E, "ti_sysbios_knl_Queue_next")
S__extern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* prev__E */
S#define ti_sysbios_knl_Queue_prev ti_sysbios_knl_Queue_prev__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_prev__E, "ti_sysbios_knl_Queue_prev")
S__extern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* remove__E */
S#define ti_sysbios_knl_Queue_remove ti_sysbios_knl_Queue_remove__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_remove__E, "ti_sysbios_knl_Queue_remove")
S__extern xdc_Void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* isQueued__E */
S#define ti_sysbios_knl_Queue_isQueued ti_sysbios_knl_Queue_isQueued__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_isQueued__E, "ti_sysbios_knl_Queue_isQueued")
S__extern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* dequeue__E */
S#define ti_sysbios_knl_Queue_dequeue ti_sysbios_knl_Queue_dequeue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_dequeue__E, "ti_sysbios_knl_Queue_dequeue")
S__extern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* empty__E */
S#define ti_sysbios_knl_Queue_empty ti_sysbios_knl_Queue_empty__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_empty__E, "ti_sysbios_knl_Queue_empty")
S__extern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* enqueue__E */
S#define ti_sysbios_knl_Queue_enqueue ti_sysbios_knl_Queue_enqueue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_enqueue__E, "ti_sysbios_knl_Queue_enqueue")
S__extern xdc_Void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* get__E */
S#define ti_sysbios_knl_Queue_get ti_sysbios_knl_Queue_get__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_get__E, "ti_sysbios_knl_Queue_get")
S__extern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* getTail__E */
S#define ti_sysbios_knl_Queue_getTail ti_sysbios_knl_Queue_getTail__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_getTail__E, "ti_sysbios_knl_Queue_getTail")
S__extern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* head__E */
S#define ti_sysbios_knl_Queue_head ti_sysbios_knl_Queue_head__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_head__E, "ti_sysbios_knl_Queue_head")
S__extern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* put__E */
S#define ti_sysbios_knl_Queue_put ti_sysbios_knl_Queue_put__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_put__E, "ti_sysbios_knl_Queue_put")
S__extern xdc_Void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* putHead__E */
S#define ti_sysbios_knl_Queue_putHead ti_sysbios_knl_Queue_putHead__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_putHead__E, "ti_sysbios_knl_Queue_putHead")
S__extern xdc_Void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Queue_Module_startupDone() ti_sysbios_knl_Queue_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Queue_Object_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Queue_Module_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module_id( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Queue_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Queue_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Queue_Module__diagsMask__C != NULL) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Queue_Params_init( ti_sysbios_knl_Queue_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Queue_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Queue_Params_copy(ti_sysbios_knl_Queue_Params *dst, const ti_sysbios_knl_Queue_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Queue_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Queue_Object_count() ti_sysbios_knl_Queue_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Queue_Object_sizeof() ti_sysbios_knl_Queue_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_get(ti_sysbios_knl_Queue_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_first( void )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_next( ti_sysbios_knl_Queue_Object *obj )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle_label( ti_sysbios_knl_Queue_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Queue_Handle_name( ti_sysbios_knl_Queue_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_handle( ti_sysbios_knl_Queue_Struct *str )
S{
S    return (ti_sysbios_knl_Queue_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Queue_Struct *ti_sysbios_knl_Queue_struct( ti_sysbios_knl_Queue_Handle inst )
S{
S    return (ti_sysbios_knl_Queue_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Queue__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Queue__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Queue__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Queue__include_state
S#define ti_sysbios_knl_Queue__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Queue_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S};
S
S#endif /* ti_sysbios_knl_Queue__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Queue__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Queue__localnames__done
S#define ti_sysbios_knl_Queue__localnames__done
S
S/* module prefix */
S#define Queue_Instance ti_sysbios_knl_Queue_Instance
S#define Queue_Handle ti_sysbios_knl_Queue_Handle
S#define Queue_Module ti_sysbios_knl_Queue_Module
S#define Queue_Object ti_sysbios_knl_Queue_Object
S#define Queue_Struct ti_sysbios_knl_Queue_Struct
S#define Queue_Elem ti_sysbios_knl_Queue_Elem
S#define Queue_Instance_State ti_sysbios_knl_Queue_Instance_State
S#define Queue_Params ti_sysbios_knl_Queue_Params
S#define Queue_elemClear ti_sysbios_knl_Queue_elemClear
S#define Queue_insert ti_sysbios_knl_Queue_insert
S#define Queue_next ti_sysbios_knl_Queue_next
S#define Queue_prev ti_sysbios_knl_Queue_prev
S#define Queue_remove ti_sysbios_knl_Queue_remove
S#define Queue_isQueued ti_sysbios_knl_Queue_isQueued
S#define Queue_dequeue ti_sysbios_knl_Queue_dequeue
S#define Queue_empty ti_sysbios_knl_Queue_empty
S#define Queue_enqueue ti_sysbios_knl_Queue_enqueue
S#define Queue_get ti_sysbios_knl_Queue_get
S#define Queue_getTail ti_sysbios_knl_Queue_getTail
S#define Queue_head ti_sysbios_knl_Queue_head
S#define Queue_put ti_sysbios_knl_Queue_put
S#define Queue_putHead ti_sysbios_knl_Queue_putHead
S#define Queue_Module_name ti_sysbios_knl_Queue_Module_name
S#define Queue_Module_id ti_sysbios_knl_Queue_Module_id
S#define Queue_Module_startup ti_sysbios_knl_Queue_Module_startup
S#define Queue_Module_startupDone ti_sysbios_knl_Queue_Module_startupDone
S#define Queue_Module_hasMask ti_sysbios_knl_Queue_Module_hasMask
S#define Queue_Module_getMask ti_sysbios_knl_Queue_Module_getMask
S#define Queue_Module_setMask ti_sysbios_knl_Queue_Module_setMask
S#define Queue_Object_heap ti_sysbios_knl_Queue_Object_heap
S#define Queue_Module_heap ti_sysbios_knl_Queue_Module_heap
S#define Queue_construct ti_sysbios_knl_Queue_construct
S#define Queue_create ti_sysbios_knl_Queue_create
S#define Queue_handle ti_sysbios_knl_Queue_handle
S#define Queue_struct ti_sysbios_knl_Queue_struct
S#define Queue_Handle_label ti_sysbios_knl_Queue_Handle_label
S#define Queue_Handle_name ti_sysbios_knl_Queue_Handle_name
S#define Queue_Instance_init ti_sysbios_knl_Queue_Instance_init
S#define Queue_Object_count ti_sysbios_knl_Queue_Object_count
S#define Queue_Object_get ti_sysbios_knl_Queue_Object_get
S#define Queue_Object_first ti_sysbios_knl_Queue_Object_first
S#define Queue_Object_next ti_sysbios_knl_Queue_Object_next
S#define Queue_Object_sizeof ti_sysbios_knl_Queue_Object_sizeof
S#define Queue_Params_copy ti_sysbios_knl_Queue_Params_copy
S#define Queue_Params_init ti_sysbios_knl_Queue_Params_init
S#define Queue_delete ti_sysbios_knl_Queue_delete
S#define Queue_destruct ti_sysbios_knl_Queue_destruct
S
S#endif /* ti_sysbios_knl_Queue__localnames__done */
N#endif
L 65 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <ti/sysbios/knl/Swi.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Swi__include
N#define ti_sysbios_knl_Swi__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Swi__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Swi___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <xdc/runtime/Error.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Error.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Error__include
S#define xdc_runtime_Error__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Error__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Error___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Error__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Policy */
Senum xdc_runtime_Error_Policy {
S    xdc_runtime_Error_TERMINATE,
S    xdc_runtime_Error_UNWIND
S};
Stypedef enum xdc_runtime_Error_Policy xdc_runtime_Error_Policy;
S
S/* HookFxn */
Stypedef xdc_Void (*xdc_runtime_Error_HookFxn)(xdc_runtime_Error_Block* arg1);
S
S/* NUMARGS */
S#define xdc_runtime_Error_NUMARGS (2)
S
S/* Data */
Stypedef xdc_IArg __T1_xdc_runtime_Error_Data__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Error_Data__arg[2];
Stypedef CARRAY1_xdc_runtime_Error_Data__arg __TA_xdc_runtime_Error_Data__arg;
Sstruct xdc_runtime_Error_Data {
S    __TA_xdc_runtime_Error_Data__arg arg;
S};
S
S/* Block */
Sstruct xdc_runtime_Error_Block {
S    xdc_UInt16 unused;
S    xdc_runtime_Error_Data data;
S    xdc_runtime_Error_Id id;
S    xdc_CString msg;
S    xdc_runtime_Types_Site site;
S};
S
S/* IGNORE */
S
S/* ABORT */
S
S/* PolicyFxn */
Stypedef xdc_Void (*xdc_runtime_Error_PolicyFxn)(xdc_runtime_Error_Block* arg1, xdc_runtime_Types_ModuleId arg2, xdc_CString arg3, xdc_Int arg4, xdc_runtime_Error_Id arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Error_Module__diagsEnabled__CR
S#define xdc_runtime_Error_Module__diagsEnabled__C (*((CT__xdc_runtime_Error_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsEnabled (xdc_runtime_Error_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Error_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Error_Module__diagsIncluded__CR
S#define xdc_runtime_Error_Module__diagsIncluded__C (*((CT__xdc_runtime_Error_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsIncluded (xdc_runtime_Error_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Error_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C;
S#ifdef xdc_runtime_Error_Module__diagsMask__CR
S#define xdc_runtime_Error_Module__diagsMask__C (*((CT__xdc_runtime_Error_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Error_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Error_Module__diagsMask (xdc_runtime_Error_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C;
S#ifdef xdc_runtime_Error_Module__gateObj__CR
S#define xdc_runtime_Error_Module__gateObj__C (*((CT__xdc_runtime_Error_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gateObj (xdc_runtime_Error_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C;
S#ifdef xdc_runtime_Error_Module__gatePrms__CR
S#define xdc_runtime_Error_Module__gatePrms__C (*((CT__xdc_runtime_Error_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Error_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Error_Module__gatePrms (xdc_runtime_Error_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Error_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C;
S#ifdef xdc_runtime_Error_Module__id__CR
S#define xdc_runtime_Error_Module__id__C (*((CT__xdc_runtime_Error_Module__id*)(xdcRomConstPtr + xdc_runtime_Error_Module__id__C_offset)))
S#else
S#define xdc_runtime_Error_Module__id (xdc_runtime_Error_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Error_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C;
S#ifdef xdc_runtime_Error_Module__loggerDefined__CR
S#define xdc_runtime_Error_Module__loggerDefined__C (*((CT__xdc_runtime_Error_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerDefined (xdc_runtime_Error_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C;
S#ifdef xdc_runtime_Error_Module__loggerObj__CR
S#define xdc_runtime_Error_Module__loggerObj__C (*((CT__xdc_runtime_Error_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerObj (xdc_runtime_Error_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Error_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn0 xdc_runtime_Error_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn0__CR
S#define xdc_runtime_Error_Module__loggerFxn0__C (*((CT__xdc_runtime_Error_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn0 (xdc_runtime_Error_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Error_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn1 xdc_runtime_Error_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn1__CR
S#define xdc_runtime_Error_Module__loggerFxn1__C (*((CT__xdc_runtime_Error_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn1 (xdc_runtime_Error_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Error_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn2 xdc_runtime_Error_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn2__CR
S#define xdc_runtime_Error_Module__loggerFxn2__C (*((CT__xdc_runtime_Error_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn2 (xdc_runtime_Error_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Error_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn4__CR
S#define xdc_runtime_Error_Module__loggerFxn4__C (*((CT__xdc_runtime_Error_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn4 (xdc_runtime_Error_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Error_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Error_Module__loggerFxn8__CR
S#define xdc_runtime_Error_Module__loggerFxn8__C (*((CT__xdc_runtime_Error_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Error_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Error_Module__loggerFxn8 (xdc_runtime_Error_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Error_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C;
S#ifdef xdc_runtime_Error_Object__count__CR
S#define xdc_runtime_Error_Object__count__C (*((CT__xdc_runtime_Error_Object__count*)(xdcRomConstPtr + xdc_runtime_Error_Object__count__C_offset)))
S#else
S#define xdc_runtime_Error_Object__count (xdc_runtime_Error_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Error_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C;
S#ifdef xdc_runtime_Error_Object__heap__CR
S#define xdc_runtime_Error_Object__heap__C (*((CT__xdc_runtime_Error_Object__heap*)(xdcRomConstPtr + xdc_runtime_Error_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Error_Object__heap (xdc_runtime_Error_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Error_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C;
S#ifdef xdc_runtime_Error_Object__sizeof__CR
S#define xdc_runtime_Error_Object__sizeof__C (*((CT__xdc_runtime_Error_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Error_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Error_Object__sizeof (xdc_runtime_Error_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Error_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C;
S#ifdef xdc_runtime_Error_Object__table__CR
S#define xdc_runtime_Error_Object__table__C (*((CT__xdc_runtime_Error_Object__table*)(xdcRomConstPtr + xdc_runtime_Error_Object__table__C_offset)))
S#else
S#define xdc_runtime_Error_Object__table (xdc_runtime_Error_Object__table__C)
S#endif
S
S/* policyFxn */
Stypedef xdc_runtime_Error_PolicyFxn CT__xdc_runtime_Error_policyFxn;
S__extern __FAR__ const CT__xdc_runtime_Error_policyFxn xdc_runtime_Error_policyFxn__C;
S#ifdef xdc_runtime_Error_policyFxn__CR
S#define xdc_runtime_Error_policyFxn (*((CT__xdc_runtime_Error_policyFxn*)(xdcRomConstPtr + xdc_runtime_Error_policyFxn__C_offset)))
S#else
S#define xdc_runtime_Error_policyFxn (xdc_runtime_Error_policyFxn__C)
S#endif
S
S/* E_generic */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_generic;
S__extern __FAR__ const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C;
S#ifdef xdc_runtime_Error_E_generic__CR
S#define xdc_runtime_Error_E_generic (*((CT__xdc_runtime_Error_E_generic*)(xdcRomConstPtr + xdc_runtime_Error_E_generic__C_offset)))
S#else
S#define xdc_runtime_Error_E_generic (xdc_runtime_Error_E_generic__C)
S#endif
S
S/* E_memory */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_memory;
S__extern __FAR__ const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C;
S#ifdef xdc_runtime_Error_E_memory__CR
S#define xdc_runtime_Error_E_memory (*((CT__xdc_runtime_Error_E_memory*)(xdcRomConstPtr + xdc_runtime_Error_E_memory__C_offset)))
S#else
S#define xdc_runtime_Error_E_memory (xdc_runtime_Error_E_memory__C)
S#endif
S
S/* E_msgCode */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Error_E_msgCode;
S__extern __FAR__ const CT__xdc_runtime_Error_E_msgCode xdc_runtime_Error_E_msgCode__C;
S#ifdef xdc_runtime_Error_E_msgCode__CR
S#define xdc_runtime_Error_E_msgCode (*((CT__xdc_runtime_Error_E_msgCode*)(xdcRomConstPtr + xdc_runtime_Error_E_msgCode__C_offset)))
S#else
S#define xdc_runtime_Error_E_msgCode (xdc_runtime_Error_E_msgCode__C)
S#endif
S
S/* policy */
Stypedef xdc_runtime_Error_Policy CT__xdc_runtime_Error_policy;
S__extern __FAR__ const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C;
S#ifdef xdc_runtime_Error_policy__CR
S#define xdc_runtime_Error_policy (*((CT__xdc_runtime_Error_policy*)(xdcRomConstPtr + xdc_runtime_Error_policy__C_offset)))
S#else
S#define xdc_runtime_Error_policy (xdc_runtime_Error_policy__C)
S#endif
S
S/* raiseHook */
Stypedef xdc_runtime_Error_HookFxn CT__xdc_runtime_Error_raiseHook;
S__extern __FAR__ const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C;
S#ifdef xdc_runtime_Error_raiseHook__CR
S#define xdc_runtime_Error_raiseHook (*((CT__xdc_runtime_Error_raiseHook*)(xdcRomConstPtr + xdc_runtime_Error_raiseHook__C_offset)))
S#else
S#define xdc_runtime_Error_raiseHook (xdc_runtime_Error_raiseHook__C)
S#endif
S
S/* maxDepth */
Stypedef xdc_UInt16 CT__xdc_runtime_Error_maxDepth;
S__extern __FAR__ const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C;
S#ifdef xdc_runtime_Error_maxDepth__CR
S#define xdc_runtime_Error_maxDepth (*((CT__xdc_runtime_Error_maxDepth*)(xdcRomConstPtr + xdc_runtime_Error_maxDepth__C_offset)))
S#else
S#ifdef xdc_runtime_Error_maxDepth__D
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__D)
S#else
S#define xdc_runtime_Error_maxDepth (xdc_runtime_Error_maxDepth__C)
S#endif
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Error_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Error_Module__startupDone__S, "xdc_runtime_Error_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Error_Module__startupDone__S( void );
S
S/* check__E */
S#define xdc_runtime_Error_check xdc_runtime_Error_check__E
Sxdc__CODESECT(xdc_runtime_Error_check__E, "xdc_runtime_Error_check")
S__extern xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block *eb );
S
S/* getData__E */
S#define xdc_runtime_Error_getData xdc_runtime_Error_getData__E
Sxdc__CODESECT(xdc_runtime_Error_getData__E, "xdc_runtime_Error_getData")
S__extern xdc_runtime_Error_Data *xdc_runtime_Error_getData__E( xdc_runtime_Error_Block *eb );
S
S/* getCode__E */
S#define xdc_runtime_Error_getCode xdc_runtime_Error_getCode__E
Sxdc__CODESECT(xdc_runtime_Error_getCode__E, "xdc_runtime_Error_getCode")
S__extern xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block *eb );
S
S/* getId__E */
S#define xdc_runtime_Error_getId xdc_runtime_Error_getId__E
Sxdc__CODESECT(xdc_runtime_Error_getId__E, "xdc_runtime_Error_getId")
S__extern xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block *eb );
S
S/* getMsg__E */
S#define xdc_runtime_Error_getMsg xdc_runtime_Error_getMsg__E
Sxdc__CODESECT(xdc_runtime_Error_getMsg__E, "xdc_runtime_Error_getMsg")
S__extern xdc_CString xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block *eb );
S
S/* getSite__E */
S#define xdc_runtime_Error_getSite xdc_runtime_Error_getSite__E
Sxdc__CODESECT(xdc_runtime_Error_getSite__E, "xdc_runtime_Error_getSite")
S__extern xdc_runtime_Types_Site *xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block *eb );
S
S/* init__E */
S#define xdc_runtime_Error_init xdc_runtime_Error_init__E
Sxdc__CODESECT(xdc_runtime_Error_init__E, "xdc_runtime_Error_init")
S__extern xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block *eb );
S
S/* print__E */
S#define xdc_runtime_Error_print xdc_runtime_Error_print__E
Sxdc__CODESECT(xdc_runtime_Error_print__E, "xdc_runtime_Error_print")
S__extern xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block *eb );
S
S/* policyDefault__E */
S#define xdc_runtime_Error_policyDefault xdc_runtime_Error_policyDefault__E
Sxdc__CODESECT(xdc_runtime_Error_policyDefault__E, "xdc_runtime_Error_policyDefault")
S__extern xdc_Void xdc_runtime_Error_policyDefault__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policyMin__E */
S#define xdc_runtime_Error_policyMin xdc_runtime_Error_policyMin__E
Sxdc__CODESECT(xdc_runtime_Error_policyMin__E, "xdc_runtime_Error_policyMin")
S__extern xdc_Void xdc_runtime_Error_policyMin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* policySpin__E */
S#define xdc_runtime_Error_policySpin xdc_runtime_Error_policySpin__E
Sxdc__CODESECT(xdc_runtime_Error_policySpin__E, "xdc_runtime_Error_policySpin")
S__extern xdc_Void xdc_runtime_Error_policySpin__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* raiseX__E */
S#define xdc_runtime_Error_raiseX xdc_runtime_Error_raiseX__E
Sxdc__CODESECT(xdc_runtime_Error_raiseX__E, "xdc_runtime_Error_raiseX")
S__extern xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S/* setX__E */
S#define xdc_runtime_Error_setX xdc_runtime_Error_setX__E
Sxdc__CODESECT(xdc_runtime_Error_setX__E, "xdc_runtime_Error_setX")
S__extern xdc_Void xdc_runtime_Error_setX__E( xdc_runtime_Error_Block *eb, xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Error_Module_startupDone() xdc_runtime_Error_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Error_Object_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Error_Module_heap() xdc_runtime_Error_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id(void);
Sstatic inline CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module_id( void ) 
S{
S    return xdc_runtime_Error_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Error_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Error_Module_getMask(void)
S{
S    return (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) ? *xdc_runtime_Error_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Error_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Error_Module__diagsMask__C != (CT__xdc_runtime_Error_Module__diagsMask)NULL) {
S        *xdc_runtime_Error_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Error__epilogue.h>
S
S#ifdef xdc_runtime_Error__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Error__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Error__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Error__include_state
S#define xdc_runtime_Error__include_state
S
S/* Module_State */
Sstruct xdc_runtime_Error_Module_State {
S    xdc_UInt16 count;
S};
S
S/* Module__state__V */
S#ifndef xdc_runtime_Error_Module__state__VR
Sextern struct xdc_runtime_Error_Module_State__ xdc_runtime_Error_Module__state__V;
S#else
S#define xdc_runtime_Error_Module__state__V (*((struct xdc_runtime_Error_Module_State__*)(xdcRomStatePtr + xdc_runtime_Error_Module__state__V_offset)))
S#endif
S
S#endif /* xdc_runtime_Error__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Error__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Error__localnames__done
S#define xdc_runtime_Error__localnames__done
S
S/* module prefix */
S#define Error_Policy xdc_runtime_Error_Policy
S#define Error_Id xdc_runtime_Error_Id
S#define Error_HookFxn xdc_runtime_Error_HookFxn
S#define Error_NUMARGS xdc_runtime_Error_NUMARGS
S#define Error_Data xdc_runtime_Error_Data
S#define Error_Block xdc_runtime_Error_Block
S#define Error_IGNORE xdc_runtime_Error_IGNORE
S#define Error_ABORT xdc_runtime_Error_ABORT
S#define Error_PolicyFxn xdc_runtime_Error_PolicyFxn
S#define Error_Module_State xdc_runtime_Error_Module_State
S#define Error_TERMINATE xdc_runtime_Error_TERMINATE
S#define Error_UNWIND xdc_runtime_Error_UNWIND
S#define Error_policyFxn xdc_runtime_Error_policyFxn
S#define Error_E_generic xdc_runtime_Error_E_generic
S#define Error_E_memory xdc_runtime_Error_E_memory
S#define Error_E_msgCode xdc_runtime_Error_E_msgCode
S#define Error_policy xdc_runtime_Error_policy
S#define Error_raiseHook xdc_runtime_Error_raiseHook
S#define Error_maxDepth xdc_runtime_Error_maxDepth
S#define Error_check xdc_runtime_Error_check
S#define Error_getData xdc_runtime_Error_getData
S#define Error_getCode xdc_runtime_Error_getCode
S#define Error_getId xdc_runtime_Error_getId
S#define Error_getMsg xdc_runtime_Error_getMsg
S#define Error_getSite xdc_runtime_Error_getSite
S#define Error_idToCode xdc_runtime_Error_idToCode
S#define Error_idToUid xdc_runtime_Error_idToUid
S#define Error_init xdc_runtime_Error_init
S#define Error_print xdc_runtime_Error_print
S#define Error_policyDefault xdc_runtime_Error_policyDefault
S#define Error_policyMin xdc_runtime_Error_policyMin
S#define Error_policySpin xdc_runtime_Error_policySpin
S#define Error_raise xdc_runtime_Error_raise
S#define Error_raiseX xdc_runtime_Error_raiseX
S#define Error_setX xdc_runtime_Error_setX
S#define Error_Module_name xdc_runtime_Error_Module_name
S#define Error_Module_id xdc_runtime_Error_Module_id
S#define Error_Module_startup xdc_runtime_Error_Module_startup
S#define Error_Module_startupDone xdc_runtime_Error_Module_startupDone
S#define Error_Module_hasMask xdc_runtime_Error_Module_hasMask
S#define Error_Module_getMask xdc_runtime_Error_Module_getMask
S#define Error_Module_setMask xdc_runtime_Error_Module_setMask
S#define Error_Object_heap xdc_runtime_Error_Object_heap
S#define Error_Module_heap xdc_runtime_Error_Module_heap
S
S#endif /* xdc_runtime_Error__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <xdc/runtime/Assert.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Assert__include
S#define xdc_runtime_Assert__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Assert__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Assert___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Assert__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Assert_Module__diagsEnabled__CR
S#define xdc_runtime_Assert_Module__diagsEnabled__C (*((CT__xdc_runtime_Assert_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsEnabled (xdc_runtime_Assert_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Assert_Module__diagsIncluded__CR
S#define xdc_runtime_Assert_Module__diagsIncluded__C (*((CT__xdc_runtime_Assert_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsIncluded (xdc_runtime_Assert_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Assert_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
S#ifdef xdc_runtime_Assert_Module__diagsMask__CR
S#define xdc_runtime_Assert_Module__diagsMask__C (*((CT__xdc_runtime_Assert_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsMask (xdc_runtime_Assert_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
S#ifdef xdc_runtime_Assert_Module__gateObj__CR
S#define xdc_runtime_Assert_Module__gateObj__C (*((CT__xdc_runtime_Assert_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gateObj (xdc_runtime_Assert_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
S#ifdef xdc_runtime_Assert_Module__gatePrms__CR
S#define xdc_runtime_Assert_Module__gatePrms__C (*((CT__xdc_runtime_Assert_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gatePrms (xdc_runtime_Assert_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Assert_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
S#ifdef xdc_runtime_Assert_Module__id__CR
S#define xdc_runtime_Assert_Module__id__C (*((CT__xdc_runtime_Assert_Module__id*)(xdcRomConstPtr + xdc_runtime_Assert_Module__id__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__id (xdc_runtime_Assert_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Assert_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
S#ifdef xdc_runtime_Assert_Module__loggerDefined__CR
S#define xdc_runtime_Assert_Module__loggerDefined__C (*((CT__xdc_runtime_Assert_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerDefined (xdc_runtime_Assert_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
S#ifdef xdc_runtime_Assert_Module__loggerObj__CR
S#define xdc_runtime_Assert_Module__loggerObj__C (*((CT__xdc_runtime_Assert_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerObj (xdc_runtime_Assert_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Assert_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn0__CR
S#define xdc_runtime_Assert_Module__loggerFxn0__C (*((CT__xdc_runtime_Assert_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn0 (xdc_runtime_Assert_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Assert_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn1__CR
S#define xdc_runtime_Assert_Module__loggerFxn1__C (*((CT__xdc_runtime_Assert_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn1 (xdc_runtime_Assert_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Assert_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn2__CR
S#define xdc_runtime_Assert_Module__loggerFxn2__C (*((CT__xdc_runtime_Assert_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn2 (xdc_runtime_Assert_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Assert_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn4__CR
S#define xdc_runtime_Assert_Module__loggerFxn4__C (*((CT__xdc_runtime_Assert_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn4 (xdc_runtime_Assert_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Assert_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn8__CR
S#define xdc_runtime_Assert_Module__loggerFxn8__C (*((CT__xdc_runtime_Assert_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn8 (xdc_runtime_Assert_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Assert_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
S#ifdef xdc_runtime_Assert_Object__count__CR
S#define xdc_runtime_Assert_Object__count__C (*((CT__xdc_runtime_Assert_Object__count*)(xdcRomConstPtr + xdc_runtime_Assert_Object__count__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__count (xdc_runtime_Assert_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Assert_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
S#ifdef xdc_runtime_Assert_Object__heap__CR
S#define xdc_runtime_Assert_Object__heap__C (*((CT__xdc_runtime_Assert_Object__heap*)(xdcRomConstPtr + xdc_runtime_Assert_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__heap (xdc_runtime_Assert_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Assert_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
S#ifdef xdc_runtime_Assert_Object__sizeof__CR
S#define xdc_runtime_Assert_Object__sizeof__C (*((CT__xdc_runtime_Assert_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Assert_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__sizeof (xdc_runtime_Assert_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
S#ifdef xdc_runtime_Assert_Object__table__CR
S#define xdc_runtime_Assert_Object__table__C (*((CT__xdc_runtime_Assert_Object__table*)(xdcRomConstPtr + xdc_runtime_Assert_Object__table__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__table (xdc_runtime_Assert_Object__table__C)
S#endif
S
S/* E_assertFailed */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Assert_E_assertFailed;
S__extern __FAR__ const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
S#ifdef xdc_runtime_Assert_E_assertFailed__CR
S#define xdc_runtime_Assert_E_assertFailed (*((CT__xdc_runtime_Assert_E_assertFailed*)(xdcRomConstPtr + xdc_runtime_Assert_E_assertFailed__C_offset)))
S#else
S#define xdc_runtime_Assert_E_assertFailed (xdc_runtime_Assert_E_assertFailed__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Assert_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Assert_Module__startupDone__S, "xdc_runtime_Assert_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
S
S/* raise__I */
S#define xdc_runtime_Assert_raise xdc_runtime_Assert_raise__I
Sxdc__CODESECT(xdc_runtime_Assert_raise__I, "xdc_runtime_Assert_raise")
S__extern xdc_Void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Assert_Module_startupDone() xdc_runtime_Assert_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Assert_Object_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Assert_Module_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id(void);
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id( void ) 
S{
S    return xdc_runtime_Assert_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void)
S{
S    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) {
S        *xdc_runtime_Assert_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Assert__epilogue.h>
S
S#ifdef xdc_runtime_Assert__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Assert__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Assert__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Assert__include_state
S#define xdc_runtime_Assert__include_state
S
S
S#endif /* xdc_runtime_Assert__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Assert__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Assert__localnames__done
S#define xdc_runtime_Assert__localnames__done
S
S/* module prefix */
S#define Assert_Id xdc_runtime_Assert_Id
S#define Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed
S#define Assert_isTrue xdc_runtime_Assert_isTrue
S#define Assert_Module_name xdc_runtime_Assert_Module_name
S#define Assert_Module_id xdc_runtime_Assert_Module_id
S#define Assert_Module_startup xdc_runtime_Assert_Module_startup
S#define Assert_Module_startupDone xdc_runtime_Assert_Module_startupDone
S#define Assert_Module_hasMask xdc_runtime_Assert_Module_hasMask
S#define Assert_Module_getMask xdc_runtime_Assert_Module_getMask
S#define Assert_Module_setMask xdc_runtime_Assert_Module_setMask
S#define Assert_Object_heap xdc_runtime_Assert_Object_heap
S#define Assert_Module_heap xdc_runtime_Assert_Module_heap
S
S#endif /* xdc_runtime_Assert__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <xdc/runtime/Log.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Log__include
S#define xdc_runtime_Log__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Log__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Log___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Log__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Text.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* NUMARGS */
S#define xdc_runtime_Log_NUMARGS (8)
S
S/* PRINTFID */
S#define xdc_runtime_Log_PRINTFID (0)
S
S/* EventRec */
Stypedef xdc_IArg __T1_xdc_runtime_Log_EventRec__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef CARRAY1_xdc_runtime_Log_EventRec__arg __TA_xdc_runtime_Log_EventRec__arg;
Sstruct xdc_runtime_Log_EventRec {
S    xdc_runtime_Types_Timestamp64 tstamp;
S    xdc_Bits32 serial;
S    xdc_runtime_Types_Event evt;
S    __TA_xdc_runtime_Log_EventRec__arg arg;
S};
S
S/* EventId */
Stypedef xdc_runtime_Types_RopeId xdc_runtime_Log_EventId;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Log_Module__diagsEnabled__CR
S#define xdc_runtime_Log_Module__diagsEnabled__C (*((CT__xdc_runtime_Log_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsEnabled (xdc_runtime_Log_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Log_Module__diagsIncluded__CR
S#define xdc_runtime_Log_Module__diagsIncluded__C (*((CT__xdc_runtime_Log_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsIncluded (xdc_runtime_Log_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Log_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
S#ifdef xdc_runtime_Log_Module__diagsMask__CR
S#define xdc_runtime_Log_Module__diagsMask__C (*((CT__xdc_runtime_Log_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsMask (xdc_runtime_Log_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
S#ifdef xdc_runtime_Log_Module__gateObj__CR
S#define xdc_runtime_Log_Module__gateObj__C (*((CT__xdc_runtime_Log_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gateObj (xdc_runtime_Log_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
S#ifdef xdc_runtime_Log_Module__gatePrms__CR
S#define xdc_runtime_Log_Module__gatePrms__C (*((CT__xdc_runtime_Log_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Log_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gatePrms (xdc_runtime_Log_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Log_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
S#ifdef xdc_runtime_Log_Module__id__CR
S#define xdc_runtime_Log_Module__id__C (*((CT__xdc_runtime_Log_Module__id*)(xdcRomConstPtr + xdc_runtime_Log_Module__id__C_offset)))
S#else
S#define xdc_runtime_Log_Module__id (xdc_runtime_Log_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Log_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
S#ifdef xdc_runtime_Log_Module__loggerDefined__CR
S#define xdc_runtime_Log_Module__loggerDefined__C (*((CT__xdc_runtime_Log_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerDefined (xdc_runtime_Log_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
S#ifdef xdc_runtime_Log_Module__loggerObj__CR
S#define xdc_runtime_Log_Module__loggerObj__C (*((CT__xdc_runtime_Log_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerObj (xdc_runtime_Log_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Log_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn0__CR
S#define xdc_runtime_Log_Module__loggerFxn0__C (*((CT__xdc_runtime_Log_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn0 (xdc_runtime_Log_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Log_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn1__CR
S#define xdc_runtime_Log_Module__loggerFxn1__C (*((CT__xdc_runtime_Log_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn1 (xdc_runtime_Log_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Log_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn2__CR
S#define xdc_runtime_Log_Module__loggerFxn2__C (*((CT__xdc_runtime_Log_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn2 (xdc_runtime_Log_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Log_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn4__CR
S#define xdc_runtime_Log_Module__loggerFxn4__C (*((CT__xdc_runtime_Log_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn4 (xdc_runtime_Log_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Log_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn8__CR
S#define xdc_runtime_Log_Module__loggerFxn8__C (*((CT__xdc_runtime_Log_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn8 (xdc_runtime_Log_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Log_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
S#ifdef xdc_runtime_Log_Object__count__CR
S#define xdc_runtime_Log_Object__count__C (*((CT__xdc_runtime_Log_Object__count*)(xdcRomConstPtr + xdc_runtime_Log_Object__count__C_offset)))
S#else
S#define xdc_runtime_Log_Object__count (xdc_runtime_Log_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Log_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
S#ifdef xdc_runtime_Log_Object__heap__CR
S#define xdc_runtime_Log_Object__heap__C (*((CT__xdc_runtime_Log_Object__heap*)(xdcRomConstPtr + xdc_runtime_Log_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Log_Object__heap (xdc_runtime_Log_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Log_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
S#ifdef xdc_runtime_Log_Object__sizeof__CR
S#define xdc_runtime_Log_Object__sizeof__C (*((CT__xdc_runtime_Log_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Log_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Log_Object__sizeof (xdc_runtime_Log_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
S#ifdef xdc_runtime_Log_Object__table__CR
S#define xdc_runtime_Log_Object__table__C (*((CT__xdc_runtime_Log_Object__table*)(xdcRomConstPtr + xdc_runtime_Log_Object__table__C_offset)))
S#else
S#define xdc_runtime_Log_Object__table (xdc_runtime_Log_Object__table__C)
S#endif
S
S/* L_construct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_construct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
S#ifdef xdc_runtime_Log_L_construct__CR
S#define xdc_runtime_Log_L_construct (*((CT__xdc_runtime_Log_L_construct*)(xdcRomConstPtr + xdc_runtime_Log_L_construct__C_offset)))
S#else
S#define xdc_runtime_Log_L_construct (xdc_runtime_Log_L_construct__C)
S#endif
S
S/* L_create */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_create;
S__extern __FAR__ const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
S#ifdef xdc_runtime_Log_L_create__CR
S#define xdc_runtime_Log_L_create (*((CT__xdc_runtime_Log_L_create*)(xdcRomConstPtr + xdc_runtime_Log_L_create__C_offset)))
S#else
S#define xdc_runtime_Log_L_create (xdc_runtime_Log_L_create__C)
S#endif
S
S/* L_destruct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_destruct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
S#ifdef xdc_runtime_Log_L_destruct__CR
S#define xdc_runtime_Log_L_destruct (*((CT__xdc_runtime_Log_L_destruct*)(xdcRomConstPtr + xdc_runtime_Log_L_destruct__C_offset)))
S#else
S#define xdc_runtime_Log_L_destruct (xdc_runtime_Log_L_destruct__C)
S#endif
S
S/* L_delete */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_delete;
S__extern __FAR__ const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
S#ifdef xdc_runtime_Log_L_delete__CR
S#define xdc_runtime_Log_L_delete (*((CT__xdc_runtime_Log_L_delete*)(xdcRomConstPtr + xdc_runtime_Log_L_delete__C_offset)))
S#else
S#define xdc_runtime_Log_L_delete (xdc_runtime_Log_L_delete__C)
S#endif
S
S/* L_error */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_error;
S__extern __FAR__ const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
S#ifdef xdc_runtime_Log_L_error__CR
S#define xdc_runtime_Log_L_error (*((CT__xdc_runtime_Log_L_error*)(xdcRomConstPtr + xdc_runtime_Log_L_error__C_offset)))
S#else
S#define xdc_runtime_Log_L_error (xdc_runtime_Log_L_error__C)
S#endif
S
S/* L_warning */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_warning;
S__extern __FAR__ const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
S#ifdef xdc_runtime_Log_L_warning__CR
S#define xdc_runtime_Log_L_warning (*((CT__xdc_runtime_Log_L_warning*)(xdcRomConstPtr + xdc_runtime_Log_L_warning__C_offset)))
S#else
S#define xdc_runtime_Log_L_warning (xdc_runtime_Log_L_warning__C)
S#endif
S
S/* L_info */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_info;
S__extern __FAR__ const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
S#ifdef xdc_runtime_Log_L_info__CR
S#define xdc_runtime_Log_L_info (*((CT__xdc_runtime_Log_L_info*)(xdcRomConstPtr + xdc_runtime_Log_L_info__C_offset)))
S#else
S#define xdc_runtime_Log_L_info (xdc_runtime_Log_L_info__C)
S#endif
S
S/* L_start */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_start;
S__extern __FAR__ const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
S#ifdef xdc_runtime_Log_L_start__CR
S#define xdc_runtime_Log_L_start (*((CT__xdc_runtime_Log_L_start*)(xdcRomConstPtr + xdc_runtime_Log_L_start__C_offset)))
S#else
S#define xdc_runtime_Log_L_start (xdc_runtime_Log_L_start__C)
S#endif
S
S/* L_stop */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stop;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
S#ifdef xdc_runtime_Log_L_stop__CR
S#define xdc_runtime_Log_L_stop (*((CT__xdc_runtime_Log_L_stop*)(xdcRomConstPtr + xdc_runtime_Log_L_stop__C_offset)))
S#else
S#define xdc_runtime_Log_L_stop (xdc_runtime_Log_L_stop__C)
S#endif
S
S/* L_startInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_startInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
S#ifdef xdc_runtime_Log_L_startInstance__CR
S#define xdc_runtime_Log_L_startInstance (*((CT__xdc_runtime_Log_L_startInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_startInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_startInstance (xdc_runtime_Log_L_startInstance__C)
S#endif
S
S/* L_stopInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stopInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
S#ifdef xdc_runtime_Log_L_stopInstance__CR
S#define xdc_runtime_Log_L_stopInstance (*((CT__xdc_runtime_Log_L_stopInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_stopInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_stopInstance (xdc_runtime_Log_L_stopInstance__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Log_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Log_Module__startupDone__S, "xdc_runtime_Log_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
S
S/* doPrint__E */
S#define xdc_runtime_Log_doPrint xdc_runtime_Log_doPrint__E
Sxdc__CODESECT(xdc_runtime_Log_doPrint__E, "xdc_runtime_Log_doPrint")
S__extern xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Log_Module_startupDone() xdc_runtime_Log_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Log_Object_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Log_Module_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id(void);
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id( void ) 
S{
S    return xdc_runtime_Log_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void)
S{
S    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) {
S        *xdc_runtime_Log_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Log__epilogue.h>
S
S#ifdef xdc_runtime_Log__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Log__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Log__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Log__include_state
S#define xdc_runtime_Log__include_state
S
S
S#endif /* xdc_runtime_Log__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Log__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Log__localnames__done
S#define xdc_runtime_Log__localnames__done
S
S/* module prefix */
S#define Log_NUMARGS xdc_runtime_Log_NUMARGS
S#define Log_PRINTFID xdc_runtime_Log_PRINTFID
S#define Log_EventRec xdc_runtime_Log_EventRec
S#define Log_Event xdc_runtime_Log_Event
S#define Log_EventId xdc_runtime_Log_EventId
S#define Log_L_construct xdc_runtime_Log_L_construct
S#define Log_L_create xdc_runtime_Log_L_create
S#define Log_L_destruct xdc_runtime_Log_L_destruct
S#define Log_L_delete xdc_runtime_Log_L_delete
S#define Log_L_error xdc_runtime_Log_L_error
S#define Log_L_warning xdc_runtime_Log_L_warning
S#define Log_L_info xdc_runtime_Log_L_info
S#define Log_L_start xdc_runtime_Log_L_start
S#define Log_L_stop xdc_runtime_Log_L_stop
S#define Log_L_startInstance xdc_runtime_Log_L_startInstance
S#define Log_L_stopInstance xdc_runtime_Log_L_stopInstance
S#define Log_getMask xdc_runtime_Log_getMask
S#define Log_getRope xdc_runtime_Log_getRope
S#define Log_getEventId xdc_runtime_Log_getEventId
S#define Log_print0 xdc_runtime_Log_print0
S#define Log_print1 xdc_runtime_Log_print1
S#define Log_print2 xdc_runtime_Log_print2
S#define Log_print3 xdc_runtime_Log_print3
S#define Log_print4 xdc_runtime_Log_print4
S#define Log_print5 xdc_runtime_Log_print5
S#define Log_print6 xdc_runtime_Log_print6
S#define Log_error0 xdc_runtime_Log_error0
S#define Log_error1 xdc_runtime_Log_error1
S#define Log_error2 xdc_runtime_Log_error2
S#define Log_error3 xdc_runtime_Log_error3
S#define Log_error4 xdc_runtime_Log_error4
S#define Log_error5 xdc_runtime_Log_error5
S#define Log_warning0 xdc_runtime_Log_warning0
S#define Log_warning1 xdc_runtime_Log_warning1
S#define Log_warning2 xdc_runtime_Log_warning2
S#define Log_warning3 xdc_runtime_Log_warning3
S#define Log_warning4 xdc_runtime_Log_warning4
S#define Log_warning5 xdc_runtime_Log_warning5
S#define Log_info0 xdc_runtime_Log_info0
S#define Log_info1 xdc_runtime_Log_info1
S#define Log_info2 xdc_runtime_Log_info2
S#define Log_info3 xdc_runtime_Log_info3
S#define Log_info4 xdc_runtime_Log_info4
S#define Log_info5 xdc_runtime_Log_info5
S#define Log_put0 xdc_runtime_Log_put0
S#define Log_put1 xdc_runtime_Log_put1
S#define Log_put2 xdc_runtime_Log_put2
S#define Log_put4 xdc_runtime_Log_put4
S#define Log_put8 xdc_runtime_Log_put8
S#define Log_write0 xdc_runtime_Log_write0
S#define Log_write1 xdc_runtime_Log_write1
S#define Log_write2 xdc_runtime_Log_write2
S#define Log_write3 xdc_runtime_Log_write3
S#define Log_write4 xdc_runtime_Log_write4
S#define Log_write5 xdc_runtime_Log_write5
S#define Log_write6 xdc_runtime_Log_write6
S#define Log_write7 xdc_runtime_Log_write7
S#define Log_write8 xdc_runtime_Log_write8
S#define Log_doPrint xdc_runtime_Log_doPrint
S#define Log_Module_name xdc_runtime_Log_Module_name
S#define Log_Module_id xdc_runtime_Log_Module_id
S#define Log_Module_startup xdc_runtime_Log_Module_startup
S#define Log_Module_startupDone xdc_runtime_Log_Module_startupDone
S#define Log_Module_hasMask xdc_runtime_Log_Module_hasMask
S#define Log_Module_getMask xdc_runtime_Log_Module_getMask
S#define Log_Module_setMask xdc_runtime_Log_Module_setMask
S#define Log_Object_heap xdc_runtime_Log_Object_heap
S#define Log_Module_heap xdc_runtime_Log_Module_heap
S
S#endif /* xdc_runtime_Log__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 63 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <ti/sysbios/knl/Queue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Queue__include
S#define ti_sysbios_knl_Queue__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Queue__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Queue___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Elem */
Sstruct ti_sysbios_knl_Queue_Elem {
S    ti_sysbios_knl_Queue_Elem *volatile next;
S    ti_sysbios_knl_Queue_Elem *volatile prev;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Queue_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Queue_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Queue_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Queue_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Queue_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Queue_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Queue_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Queue_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Queue_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Queue_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Queue_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Queue_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Queue_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Queue_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Queue_Module_startup( state ) (-1)
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Instance_init__E, "ti_sysbios_knl_Queue_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Handle__label__S, "ti_sysbios_knl_Queue_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Module__startupDone__S, "ti_sysbios_knl_Queue_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__create__S, "ti_sysbios_knl_Queue_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Queue_create, "ti_sysbios_knl_Queue_create")
S__extern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_construct, "ti_sysbios_knl_Queue_construct")
S__extern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__delete__S, "ti_sysbios_knl_Queue_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Queue_delete, "ti_sysbios_knl_Queue_delete")
S__extern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__destruct__S, "ti_sysbios_knl_Queue_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_destruct, "ti_sysbios_knl_Queue_destruct")
S__extern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__get__S, "ti_sysbios_knl_Queue_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__first__S, "ti_sysbios_knl_Queue_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__next__S, "ti_sysbios_knl_Queue_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Params__init__S, "ti_sysbios_knl_Queue_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* elemClear__E */
S#define ti_sysbios_knl_Queue_elemClear ti_sysbios_knl_Queue_elemClear__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_elemClear__E, "ti_sysbios_knl_Queue_elemClear")
S__extern xdc_Void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* insert__E */
S#define ti_sysbios_knl_Queue_insert ti_sysbios_knl_Queue_insert__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_insert__E, "ti_sysbios_knl_Queue_insert")
S__extern xdc_Void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
S
S/* next__E */
S#define ti_sysbios_knl_Queue_next ti_sysbios_knl_Queue_next__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_next__E, "ti_sysbios_knl_Queue_next")
S__extern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* prev__E */
S#define ti_sysbios_knl_Queue_prev ti_sysbios_knl_Queue_prev__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_prev__E, "ti_sysbios_knl_Queue_prev")
S__extern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* remove__E */
S#define ti_sysbios_knl_Queue_remove ti_sysbios_knl_Queue_remove__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_remove__E, "ti_sysbios_knl_Queue_remove")
S__extern xdc_Void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* isQueued__E */
S#define ti_sysbios_knl_Queue_isQueued ti_sysbios_knl_Queue_isQueued__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_isQueued__E, "ti_sysbios_knl_Queue_isQueued")
S__extern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* dequeue__E */
S#define ti_sysbios_knl_Queue_dequeue ti_sysbios_knl_Queue_dequeue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_dequeue__E, "ti_sysbios_knl_Queue_dequeue")
S__extern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* empty__E */
S#define ti_sysbios_knl_Queue_empty ti_sysbios_knl_Queue_empty__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_empty__E, "ti_sysbios_knl_Queue_empty")
S__extern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* enqueue__E */
S#define ti_sysbios_knl_Queue_enqueue ti_sysbios_knl_Queue_enqueue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_enqueue__E, "ti_sysbios_knl_Queue_enqueue")
S__extern xdc_Void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* get__E */
S#define ti_sysbios_knl_Queue_get ti_sysbios_knl_Queue_get__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_get__E, "ti_sysbios_knl_Queue_get")
S__extern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* getTail__E */
S#define ti_sysbios_knl_Queue_getTail ti_sysbios_knl_Queue_getTail__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_getTail__E, "ti_sysbios_knl_Queue_getTail")
S__extern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* head__E */
S#define ti_sysbios_knl_Queue_head ti_sysbios_knl_Queue_head__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_head__E, "ti_sysbios_knl_Queue_head")
S__extern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* put__E */
S#define ti_sysbios_knl_Queue_put ti_sysbios_knl_Queue_put__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_put__E, "ti_sysbios_knl_Queue_put")
S__extern xdc_Void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* putHead__E */
S#define ti_sysbios_knl_Queue_putHead ti_sysbios_knl_Queue_putHead__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_putHead__E, "ti_sysbios_knl_Queue_putHead")
S__extern xdc_Void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Queue_Module_startupDone() ti_sysbios_knl_Queue_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Queue_Object_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Queue_Module_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module_id( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Queue_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Queue_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Queue_Module__diagsMask__C != NULL) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Queue_Params_init( ti_sysbios_knl_Queue_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Queue_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Queue_Params_copy(ti_sysbios_knl_Queue_Params *dst, const ti_sysbios_knl_Queue_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Queue_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Queue_Object_count() ti_sysbios_knl_Queue_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Queue_Object_sizeof() ti_sysbios_knl_Queue_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_get(ti_sysbios_knl_Queue_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_first( void )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_next( ti_sysbios_knl_Queue_Object *obj )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle_label( ti_sysbios_knl_Queue_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Queue_Handle_name( ti_sysbios_knl_Queue_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_handle( ti_sysbios_knl_Queue_Struct *str )
S{
S    return (ti_sysbios_knl_Queue_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Queue_Struct *ti_sysbios_knl_Queue_struct( ti_sysbios_knl_Queue_Handle inst )
S{
S    return (ti_sysbios_knl_Queue_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Queue__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Queue__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Queue__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Queue__include_state
S#define ti_sysbios_knl_Queue__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Queue_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S};
S
S#endif /* ti_sysbios_knl_Queue__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Queue__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Queue__localnames__done
S#define ti_sysbios_knl_Queue__localnames__done
S
S/* module prefix */
S#define Queue_Instance ti_sysbios_knl_Queue_Instance
S#define Queue_Handle ti_sysbios_knl_Queue_Handle
S#define Queue_Module ti_sysbios_knl_Queue_Module
S#define Queue_Object ti_sysbios_knl_Queue_Object
S#define Queue_Struct ti_sysbios_knl_Queue_Struct
S#define Queue_Elem ti_sysbios_knl_Queue_Elem
S#define Queue_Instance_State ti_sysbios_knl_Queue_Instance_State
S#define Queue_Params ti_sysbios_knl_Queue_Params
S#define Queue_elemClear ti_sysbios_knl_Queue_elemClear
S#define Queue_insert ti_sysbios_knl_Queue_insert
S#define Queue_next ti_sysbios_knl_Queue_next
S#define Queue_prev ti_sysbios_knl_Queue_prev
S#define Queue_remove ti_sysbios_knl_Queue_remove
S#define Queue_isQueued ti_sysbios_knl_Queue_isQueued
S#define Queue_dequeue ti_sysbios_knl_Queue_dequeue
S#define Queue_empty ti_sysbios_knl_Queue_empty
S#define Queue_enqueue ti_sysbios_knl_Queue_enqueue
S#define Queue_get ti_sysbios_knl_Queue_get
S#define Queue_getTail ti_sysbios_knl_Queue_getTail
S#define Queue_head ti_sysbios_knl_Queue_head
S#define Queue_put ti_sysbios_knl_Queue_put
S#define Queue_putHead ti_sysbios_knl_Queue_putHead
S#define Queue_Module_name ti_sysbios_knl_Queue_Module_name
S#define Queue_Module_id ti_sysbios_knl_Queue_Module_id
S#define Queue_Module_startup ti_sysbios_knl_Queue_Module_startup
S#define Queue_Module_startupDone ti_sysbios_knl_Queue_Module_startupDone
S#define Queue_Module_hasMask ti_sysbios_knl_Queue_Module_hasMask
S#define Queue_Module_getMask ti_sysbios_knl_Queue_Module_getMask
S#define Queue_Module_setMask ti_sysbios_knl_Queue_Module_setMask
S#define Queue_Object_heap ti_sysbios_knl_Queue_Object_heap
S#define Queue_Module_heap ti_sysbios_knl_Queue_Module_heap
S#define Queue_construct ti_sysbios_knl_Queue_construct
S#define Queue_create ti_sysbios_knl_Queue_create
S#define Queue_handle ti_sysbios_knl_Queue_handle
S#define Queue_struct ti_sysbios_knl_Queue_struct
S#define Queue_Handle_label ti_sysbios_knl_Queue_Handle_label
S#define Queue_Handle_name ti_sysbios_knl_Queue_Handle_name
S#define Queue_Instance_init ti_sysbios_knl_Queue_Instance_init
S#define Queue_Object_count ti_sysbios_knl_Queue_Object_count
S#define Queue_Object_get ti_sysbios_knl_Queue_Object_get
S#define Queue_Object_first ti_sysbios_knl_Queue_Object_first
S#define Queue_Object_next ti_sysbios_knl_Queue_Object_next
S#define Queue_Object_sizeof ti_sysbios_knl_Queue_Object_sizeof
S#define Queue_Params_copy ti_sysbios_knl_Queue_Params_copy
S#define Queue_Params_init ti_sysbios_knl_Queue_Params_init
S#define Queue_delete ti_sysbios_knl_Queue_delete
S#define Queue_destruct ti_sysbios_knl_Queue_destruct
S
S#endif /* ti_sysbios_knl_Queue__localnames__done */
N#endif
L 64 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 65 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Swi.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef xdc_Void (*ti_sysbios_knl_Swi_FuncPtr)(xdc_UArg, xdc_UArg);
Xtypedef void (*ti_sysbios_knl_Swi_FuncPtr)(xdc_UArg, xdc_UArg);
N
N/* HookSet */
Nstruct ti_sysbios_knl_Swi_HookSet {
N    xdc_Void (*registerFxn)(xdc_Int);
X    void (*registerFxn)(xdc_Int);
N    xdc_Void (*createFxn)(ti_sysbios_knl_Swi_Handle, xdc_runtime_Error_Block*);
X    void (*createFxn)(ti_sysbios_knl_Swi_Handle, xdc_runtime_Error_Block*);
N    xdc_Void (*readyFxn)(ti_sysbios_knl_Swi_Handle);
X    void (*readyFxn)(ti_sysbios_knl_Swi_Handle);
N    xdc_Void (*beginFxn)(ti_sysbios_knl_Swi_Handle);
X    void (*beginFxn)(ti_sysbios_knl_Swi_Handle);
N    xdc_Void (*endFxn)(ti_sysbios_knl_Swi_Handle);
X    void (*endFxn)(ti_sysbios_knl_Swi_Handle);
N    xdc_Void (*deleteFxn)(ti_sysbios_knl_Swi_Handle);
X    void (*deleteFxn)(ti_sysbios_knl_Swi_Handle);
N};
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_knl_Swi_Args__create {
N    ti_sysbios_knl_Swi_FuncPtr swiFxn;
N} ti_sysbios_knl_Swi_Args__create;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* Instance_State */
Ntypedef xdc_Ptr __T1_ti_sysbios_knl_Swi_Instance_State__hookEnv;
Ntypedef xdc_Ptr *__ARRAY1_ti_sysbios_knl_Swi_Instance_State__hookEnv;
Ntypedef __ARRAY1_ti_sysbios_knl_Swi_Instance_State__hookEnv __TA_ti_sysbios_knl_Swi_Instance_State__hookEnv;
N
N/* Module_State */
Ntypedef ti_sysbios_knl_Queue_Instance_State __T1_ti_sysbios_knl_Swi_Module_State__readyQ;
Ntypedef ti_sysbios_knl_Queue_Instance_State *__ARRAY1_ti_sysbios_knl_Swi_Module_State__readyQ;
Ntypedef __ARRAY1_ti_sysbios_knl_Swi_Module_State__readyQ __TA_ti_sysbios_knl_Swi_Module_State__readyQ;
Ntypedef ti_sysbios_knl_Swi_Handle __T1_ti_sysbios_knl_Swi_Module_State__constructedSwis;
Ntypedef ti_sysbios_knl_Swi_Handle *__ARRAY1_ti_sysbios_knl_Swi_Module_State__constructedSwis;
Ntypedef __ARRAY1_ti_sysbios_knl_Swi_Module_State__constructedSwis __TA_ti_sysbios_knl_Swi_Module_State__constructedSwis;
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Swi_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__diagsEnabled ti_sysbios_knl_Swi_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__diagsEnabled ti_sysbios_knl_Swi_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Swi_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__diagsIncluded ti_sysbios_knl_Swi_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__diagsIncluded ti_sysbios_knl_Swi_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Swi_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__diagsMask ti_sysbios_knl_Swi_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__diagsMask ti_sysbios_knl_Swi_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Swi_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__gateObj ti_sysbios_knl_Swi_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__gateObj ti_sysbios_knl_Swi_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Swi_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__gatePrms ti_sysbios_knl_Swi_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__gatePrms ti_sysbios_knl_Swi_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Swi_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__id ti_sysbios_knl_Swi_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__id ti_sysbios_knl_Swi_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Swi_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerDefined ti_sysbios_knl_Swi_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerDefined ti_sysbios_knl_Swi_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Swi_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerObj ti_sysbios_knl_Swi_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerObj ti_sysbios_knl_Swi_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Swi_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerFxn0 ti_sysbios_knl_Swi_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerFxn0 ti_sysbios_knl_Swi_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Swi_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerFxn1 ti_sysbios_knl_Swi_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerFxn1 ti_sysbios_knl_Swi_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Swi_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerFxn2 ti_sysbios_knl_Swi_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerFxn2 ti_sysbios_knl_Swi_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Swi_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerFxn4 ti_sysbios_knl_Swi_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerFxn4 ti_sysbios_knl_Swi_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Swi_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__loggerFxn8 ti_sysbios_knl_Swi_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__loggerFxn8 ti_sysbios_knl_Swi_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Swi_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Module__startupDoneFxn ti_sysbios_knl_Swi_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Swi_Module__startupDoneFxn ti_sysbios_knl_Swi_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Swi_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Object__count ti_sysbios_knl_Swi_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Swi_Object__count ti_sysbios_knl_Swi_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Swi_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Object__heap ti_sysbios_knl_Swi_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Swi_Object__heap ti_sysbios_knl_Swi_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Swi_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Object__sizeof ti_sysbios_knl_Swi_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Swi_Object__sizeof ti_sysbios_knl_Swi_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Swi_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_Object__table ti_sysbios_knl_Swi_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Swi_Object__table ti_sysbios_knl_Swi_Object__table__C;
N
N/* LM_begin */
N#define ti_sysbios_knl_Swi_LM_begin (ti_sysbios_knl_Swi_LM_begin__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Swi_LM_begin;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_LM_begin ti_sysbios_knl_Swi_LM_begin__C;
Xextern  const CT__ti_sysbios_knl_Swi_LM_begin ti_sysbios_knl_Swi_LM_begin__C;
N
N/* LD_end */
N#define ti_sysbios_knl_Swi_LD_end (ti_sysbios_knl_Swi_LD_end__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Swi_LD_end;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_LD_end ti_sysbios_knl_Swi_LD_end__C;
Xextern  const CT__ti_sysbios_knl_Swi_LD_end ti_sysbios_knl_Swi_LD_end__C;
N
N/* LM_post */
N#define ti_sysbios_knl_Swi_LM_post (ti_sysbios_knl_Swi_LM_post__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Swi_LM_post;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_LM_post ti_sysbios_knl_Swi_LM_post__C;
Xextern  const CT__ti_sysbios_knl_Swi_LM_post ti_sysbios_knl_Swi_LM_post__C;
N
N/* A_swiDisabled */
N#define ti_sysbios_knl_Swi_A_swiDisabled (ti_sysbios_knl_Swi_A_swiDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Swi_A_swiDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_A_swiDisabled ti_sysbios_knl_Swi_A_swiDisabled__C;
Xextern  const CT__ti_sysbios_knl_Swi_A_swiDisabled ti_sysbios_knl_Swi_A_swiDisabled__C;
N
N/* A_badPriority */
N#define ti_sysbios_knl_Swi_A_badPriority (ti_sysbios_knl_Swi_A_badPriority__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Swi_A_badPriority;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_A_badPriority ti_sysbios_knl_Swi_A_badPriority__C;
Xextern  const CT__ti_sysbios_knl_Swi_A_badPriority ti_sysbios_knl_Swi_A_badPriority__C;
N
N/* numPriorities */
N#ifdef ti_sysbios_knl_Swi_numPriorities__D
S#define ti_sysbios_knl_Swi_numPriorities (ti_sysbios_knl_Swi_numPriorities__D)
N#else
N#define ti_sysbios_knl_Swi_numPriorities (ti_sysbios_knl_Swi_numPriorities__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Swi_numPriorities;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_numPriorities ti_sysbios_knl_Swi_numPriorities__C;
Xextern  const CT__ti_sysbios_knl_Swi_numPriorities ti_sysbios_knl_Swi_numPriorities__C;
N#endif
N
N/* hooks */
N#define ti_sysbios_knl_Swi_hooks (ti_sysbios_knl_Swi_hooks__C)
Ntypedef ti_sysbios_knl_Swi_HookSet __T1_ti_sysbios_knl_Swi_hooks;
Ntypedef struct { int length; ti_sysbios_knl_Swi_HookSet *elem; } __ARRAY1_ti_sysbios_knl_Swi_hooks;
Ntypedef __ARRAY1_ti_sysbios_knl_Swi_hooks __TA_ti_sysbios_knl_Swi_hooks;
Ntypedef __TA_ti_sysbios_knl_Swi_hooks CT__ti_sysbios_knl_Swi_hooks;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_hooks ti_sysbios_knl_Swi_hooks__C;
Xextern  const CT__ti_sysbios_knl_Swi_hooks ti_sysbios_knl_Swi_hooks__C;
N
N/* taskDisable */
N#define ti_sysbios_knl_Swi_taskDisable (ti_sysbios_knl_Swi_taskDisable__C)
Ntypedef xdc_UInt (*CT__ti_sysbios_knl_Swi_taskDisable)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_taskDisable ti_sysbios_knl_Swi_taskDisable__C;
Xextern  const CT__ti_sysbios_knl_Swi_taskDisable ti_sysbios_knl_Swi_taskDisable__C;
N
N/* taskRestore */
N#define ti_sysbios_knl_Swi_taskRestore (ti_sysbios_knl_Swi_taskRestore__C)
Ntypedef xdc_Void (*CT__ti_sysbios_knl_Swi_taskRestore)(xdc_UInt);
Xtypedef void (*CT__ti_sysbios_knl_Swi_taskRestore)(xdc_UInt);
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_taskRestore ti_sysbios_knl_Swi_taskRestore__C;
Xextern  const CT__ti_sysbios_knl_Swi_taskRestore ti_sysbios_knl_Swi_taskRestore__C;
N
N/* numConstructedSwis */
N#ifdef ti_sysbios_knl_Swi_numConstructedSwis__D
S#define ti_sysbios_knl_Swi_numConstructedSwis (ti_sysbios_knl_Swi_numConstructedSwis__D)
N#else
N#define ti_sysbios_knl_Swi_numConstructedSwis (ti_sysbios_knl_Swi_numConstructedSwis__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Swi_numConstructedSwis;
N__extern __FAR__ const CT__ti_sysbios_knl_Swi_numConstructedSwis ti_sysbios_knl_Swi_numConstructedSwis__C;
Xextern  const CT__ti_sysbios_knl_Swi_numConstructedSwis ti_sysbios_knl_Swi_numConstructedSwis__C;
N#endif
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Swi_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_UArg arg0;
N    xdc_UArg arg1;
N    xdc_UInt priority;
N    xdc_UInt trigger;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Swi_Struct {
N    ti_sysbios_knl_Queue_Elem __f0;
N    ti_sysbios_knl_Swi_FuncPtr __f1;
N    xdc_UArg __f2;
N    xdc_UArg __f3;
N    xdc_UInt __f4;
N    xdc_UInt __f5;
N    xdc_Bool __f6;
N    xdc_UInt __f7;
N    xdc_UInt __f8;
N    ti_sysbios_knl_Queue_Handle __f9;
N    __TA_ti_sysbios_knl_Swi_Instance_State__hookEnv __f10;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Swi_Module_startup ti_sysbios_knl_Swi_Module_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_Module_startup__E, "ti_sysbios_knl_Swi_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Swi_Module_startup__E( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Swi_Module_startup__E( xdc_Int state );
Nxdc__CODESECT(ti_sysbios_knl_Swi_Module_startup__F, "ti_sysbios_knl_Swi_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Swi_Module_startup__F( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Swi_Module_startup__F( xdc_Int state );
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Instance_init__E, "ti_sysbios_knl_Swi_Instance_init")
X
N__extern xdc_Int ti_sysbios_knl_Swi_Instance_init__E(ti_sysbios_knl_Swi_Object *, ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *, xdc_runtime_Error_Block *);
Xextern xdc_Int ti_sysbios_knl_Swi_Instance_init__E(ti_sysbios_knl_Swi_Object *, ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *, xdc_runtime_Error_Block *);
N
N/* Instance_finalize__E */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Instance_finalize__E, "ti_sysbios_knl_Swi_Instance_finalize")
X
N__extern void ti_sysbios_knl_Swi_Instance_finalize__E( ti_sysbios_knl_Swi_Object* , int );
Xextern void ti_sysbios_knl_Swi_Instance_finalize__E( ti_sysbios_knl_Swi_Object* , int );
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Handle__label__S, "ti_sysbios_knl_Swi_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Swi_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Swi_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Module__startupDone__S, "ti_sysbios_knl_Swi_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Swi_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Swi_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__create__S, "ti_sysbios_knl_Swi_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Swi_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Swi_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Swi_create, "ti_sysbios_knl_Swi_create")
X
N__extern ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_create( ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_create( ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Swi_construct, "ti_sysbios_knl_Swi_construct")
X
N__extern void ti_sysbios_knl_Swi_construct( ti_sysbios_knl_Swi_Struct *__obj, ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern void ti_sysbios_knl_Swi_construct( ti_sysbios_knl_Swi_Struct *__obj, ti_sysbios_knl_Swi_FuncPtr swiFxn, const ti_sysbios_knl_Swi_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__delete__S, "ti_sysbios_knl_Swi_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Swi_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Swi_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Swi_delete, "ti_sysbios_knl_Swi_delete")
X
N__extern void ti_sysbios_knl_Swi_delete(ti_sysbios_knl_Swi_Handle *instp);
Xextern void ti_sysbios_knl_Swi_delete(ti_sysbios_knl_Swi_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__destruct__S, "ti_sysbios_knl_Swi_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Swi_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Swi_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Swi_destruct, "ti_sysbios_knl_Swi_destruct")
X
N__extern void ti_sysbios_knl_Swi_destruct(ti_sysbios_knl_Swi_Struct *obj);
Xextern void ti_sysbios_knl_Swi_destruct(ti_sysbios_knl_Swi_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__get__S, "ti_sysbios_knl_Swi_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Swi_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Swi_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__first__S, "ti_sysbios_knl_Swi_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Swi_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Swi_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Object__next__S, "ti_sysbios_knl_Swi_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Swi_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Swi_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Swi_Params__init__S, "ti_sysbios_knl_Swi_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Swi_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Swi_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* startup__E */
N#define ti_sysbios_knl_Swi_startup ti_sysbios_knl_Swi_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_startup__E, "ti_sysbios_knl_Swi_startup")
X
N__extern xdc_Void ti_sysbios_knl_Swi_startup__E( void );
Xextern void ti_sysbios_knl_Swi_startup__E( void );
N
N/* enabled__E */
N#define ti_sysbios_knl_Swi_enabled ti_sysbios_knl_Swi_enabled__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_enabled__E, "ti_sysbios_knl_Swi_enabled")
X
N__extern xdc_Bool ti_sysbios_knl_Swi_enabled__E( void );
Xextern xdc_Bool ti_sysbios_knl_Swi_enabled__E( void );
N
N/* unlockSched__E */
N#define ti_sysbios_knl_Swi_unlockSched ti_sysbios_knl_Swi_unlockSched__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_unlockSched__E, "ti_sysbios_knl_Swi_unlockSched")
X
N__extern xdc_Void ti_sysbios_knl_Swi_unlockSched__E( void );
Xextern void ti_sysbios_knl_Swi_unlockSched__E( void );
N
N/* disable__E */
N#define ti_sysbios_knl_Swi_disable ti_sysbios_knl_Swi_disable__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_disable__E, "ti_sysbios_knl_Swi_disable")
X
N__extern xdc_UInt ti_sysbios_knl_Swi_disable__E( void );
Xextern xdc_UInt ti_sysbios_knl_Swi_disable__E( void );
N
N/* enable__E */
N#define ti_sysbios_knl_Swi_enable ti_sysbios_knl_Swi_enable__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_enable__E, "ti_sysbios_knl_Swi_enable")
X
N__extern xdc_Void ti_sysbios_knl_Swi_enable__E( void );
Xextern void ti_sysbios_knl_Swi_enable__E( void );
N
N/* restore__E */
N#define ti_sysbios_knl_Swi_restore ti_sysbios_knl_Swi_restore__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_restore__E, "ti_sysbios_knl_Swi_restore")
X
N__extern xdc_Void ti_sysbios_knl_Swi_restore__E( xdc_UInt key );
Xextern void ti_sysbios_knl_Swi_restore__E( xdc_UInt key );
N
N/* restoreHwi__E */
N#define ti_sysbios_knl_Swi_restoreHwi ti_sysbios_knl_Swi_restoreHwi__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_restoreHwi__E, "ti_sysbios_knl_Swi_restoreHwi")
X
N__extern xdc_Void ti_sysbios_knl_Swi_restoreHwi__E( xdc_UInt key );
Xextern void ti_sysbios_knl_Swi_restoreHwi__E( xdc_UInt key );
N
N/* self__E */
N#define ti_sysbios_knl_Swi_self ti_sysbios_knl_Swi_self__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_self__E, "ti_sysbios_knl_Swi_self")
X
N__extern ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_self__E( void );
Xextern ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_self__E( void );
N
N/* getTrigger__E */
N#define ti_sysbios_knl_Swi_getTrigger ti_sysbios_knl_Swi_getTrigger__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_getTrigger__E, "ti_sysbios_knl_Swi_getTrigger")
X
N__extern xdc_UInt ti_sysbios_knl_Swi_getTrigger__E( void );
Xextern xdc_UInt ti_sysbios_knl_Swi_getTrigger__E( void );
N
N/* raisePri__E */
N#define ti_sysbios_knl_Swi_raisePri ti_sysbios_knl_Swi_raisePri__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_raisePri__E, "ti_sysbios_knl_Swi_raisePri")
X
N__extern xdc_UInt ti_sysbios_knl_Swi_raisePri__E( xdc_UInt priority );
Xextern xdc_UInt ti_sysbios_knl_Swi_raisePri__E( xdc_UInt priority );
N
N/* restorePri__E */
N#define ti_sysbios_knl_Swi_restorePri ti_sysbios_knl_Swi_restorePri__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_restorePri__E, "ti_sysbios_knl_Swi_restorePri")
X
N__extern xdc_Void ti_sysbios_knl_Swi_restorePri__E( xdc_UInt key );
Xextern void ti_sysbios_knl_Swi_restorePri__E( xdc_UInt key );
N
N/* andn__E */
N#define ti_sysbios_knl_Swi_andn ti_sysbios_knl_Swi_andn__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_andn__E, "ti_sysbios_knl_Swi_andn")
X
N__extern xdc_Void ti_sysbios_knl_Swi_andn__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UInt mask );
Xextern void ti_sysbios_knl_Swi_andn__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UInt mask );
N
N/* dec__E */
N#define ti_sysbios_knl_Swi_dec ti_sysbios_knl_Swi_dec__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_dec__E, "ti_sysbios_knl_Swi_dec")
X
N__extern xdc_Void ti_sysbios_knl_Swi_dec__E( ti_sysbios_knl_Swi_Handle __inst );
Xextern void ti_sysbios_knl_Swi_dec__E( ti_sysbios_knl_Swi_Handle __inst );
N
N/* getHookContext__E */
N#define ti_sysbios_knl_Swi_getHookContext ti_sysbios_knl_Swi_getHookContext__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_getHookContext__E, "ti_sysbios_knl_Swi_getHookContext")
X
N__extern xdc_Ptr ti_sysbios_knl_Swi_getHookContext__E( ti_sysbios_knl_Swi_Handle __inst, xdc_Int id );
Xextern xdc_Ptr ti_sysbios_knl_Swi_getHookContext__E( ti_sysbios_knl_Swi_Handle __inst, xdc_Int id );
N
N/* setHookContext__E */
N#define ti_sysbios_knl_Swi_setHookContext ti_sysbios_knl_Swi_setHookContext__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_setHookContext__E, "ti_sysbios_knl_Swi_setHookContext")
X
N__extern xdc_Void ti_sysbios_knl_Swi_setHookContext__E( ti_sysbios_knl_Swi_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
Xextern void ti_sysbios_knl_Swi_setHookContext__E( ti_sysbios_knl_Swi_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
N
N/* getPri__E */
N#define ti_sysbios_knl_Swi_getPri ti_sysbios_knl_Swi_getPri__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_getPri__E, "ti_sysbios_knl_Swi_getPri")
X
N__extern xdc_UInt ti_sysbios_knl_Swi_getPri__E( ti_sysbios_knl_Swi_Handle __inst );
Xextern xdc_UInt ti_sysbios_knl_Swi_getPri__E( ti_sysbios_knl_Swi_Handle __inst );
N
N/* getFunc__E */
N#define ti_sysbios_knl_Swi_getFunc ti_sysbios_knl_Swi_getFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_getFunc__E, "ti_sysbios_knl_Swi_getFunc")
X
N__extern ti_sysbios_knl_Swi_FuncPtr ti_sysbios_knl_Swi_getFunc__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
Xextern ti_sysbios_knl_Swi_FuncPtr ti_sysbios_knl_Swi_getFunc__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
N
N/* getAttrs__E */
N#define ti_sysbios_knl_Swi_getAttrs ti_sysbios_knl_Swi_getAttrs__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_getAttrs__E, "ti_sysbios_knl_Swi_getAttrs")
X
N__extern xdc_Void ti_sysbios_knl_Swi_getAttrs__E( ti_sysbios_knl_Swi_Handle __inst, ti_sysbios_knl_Swi_FuncPtr *swiFxn, ti_sysbios_knl_Swi_Params *params );
Xextern void ti_sysbios_knl_Swi_getAttrs__E( ti_sysbios_knl_Swi_Handle __inst, ti_sysbios_knl_Swi_FuncPtr *swiFxn, ti_sysbios_knl_Swi_Params *params );
N
N/* setAttrs__E */
N#define ti_sysbios_knl_Swi_setAttrs ti_sysbios_knl_Swi_setAttrs__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_setAttrs__E, "ti_sysbios_knl_Swi_setAttrs")
X
N__extern xdc_Void ti_sysbios_knl_Swi_setAttrs__E( ti_sysbios_knl_Swi_Handle __inst, ti_sysbios_knl_Swi_FuncPtr swiFxn, ti_sysbios_knl_Swi_Params *params );
Xextern void ti_sysbios_knl_Swi_setAttrs__E( ti_sysbios_knl_Swi_Handle __inst, ti_sysbios_knl_Swi_FuncPtr swiFxn, ti_sysbios_knl_Swi_Params *params );
N
N/* inc__E */
N#define ti_sysbios_knl_Swi_inc ti_sysbios_knl_Swi_inc__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_inc__E, "ti_sysbios_knl_Swi_inc")
X
N__extern xdc_Void ti_sysbios_knl_Swi_inc__E( ti_sysbios_knl_Swi_Handle __inst );
Xextern void ti_sysbios_knl_Swi_inc__E( ti_sysbios_knl_Swi_Handle __inst );
N
N/* or__E */
N#define ti_sysbios_knl_Swi_or ti_sysbios_knl_Swi_or__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_or__E, "ti_sysbios_knl_Swi_or")
X
N__extern xdc_Void ti_sysbios_knl_Swi_or__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UInt mask );
Xextern void ti_sysbios_knl_Swi_or__E( ti_sysbios_knl_Swi_Handle __inst, xdc_UInt mask );
N
N/* post__E */
N#define ti_sysbios_knl_Swi_post ti_sysbios_knl_Swi_post__E
Nxdc__CODESECT(ti_sysbios_knl_Swi_post__E, "ti_sysbios_knl_Swi_post")
X
N__extern xdc_Void ti_sysbios_knl_Swi_post__E( ti_sysbios_knl_Swi_Handle __inst );
Xextern void ti_sysbios_knl_Swi_post__E( ti_sysbios_knl_Swi_Handle __inst );
N
N/* schedule__I */
N#define ti_sysbios_knl_Swi_schedule ti_sysbios_knl_Swi_schedule__I
Nxdc__CODESECT(ti_sysbios_knl_Swi_schedule__I, "ti_sysbios_knl_Swi_schedule")
X
N__extern xdc_Void ti_sysbios_knl_Swi_schedule__I( void );
Xextern void ti_sysbios_knl_Swi_schedule__I( void );
N
N/* runLoop__I */
N#define ti_sysbios_knl_Swi_runLoop ti_sysbios_knl_Swi_runLoop__I
Nxdc__CODESECT(ti_sysbios_knl_Swi_runLoop__I, "ti_sysbios_knl_Swi_runLoop")
X
N__extern xdc_Void ti_sysbios_knl_Swi_runLoop__I( void );
Xextern void ti_sysbios_knl_Swi_runLoop__I( void );
N
N/* run__I */
N#define ti_sysbios_knl_Swi_run ti_sysbios_knl_Swi_run__I
Nxdc__CODESECT(ti_sysbios_knl_Swi_run__I, "ti_sysbios_knl_Swi_run")
X
N__extern xdc_Void ti_sysbios_knl_Swi_run__I( ti_sysbios_knl_Swi_Object *swi );
Xextern void ti_sysbios_knl_Swi_run__I( ti_sysbios_knl_Swi_Object *swi );
N
N/* postInit__I */
N#define ti_sysbios_knl_Swi_postInit ti_sysbios_knl_Swi_postInit__I
Nxdc__CODESECT(ti_sysbios_knl_Swi_postInit__I, "ti_sysbios_knl_Swi_postInit")
X
N__extern xdc_Int ti_sysbios_knl_Swi_postInit__I( ti_sysbios_knl_Swi_Object *swi, xdc_runtime_Error_Block *eb );
Xextern xdc_Int ti_sysbios_knl_Swi_postInit__I( ti_sysbios_knl_Swi_Object *swi, xdc_runtime_Error_Block *eb );
N
N/* restoreSMP__I */
N#define ti_sysbios_knl_Swi_restoreSMP ti_sysbios_knl_Swi_restoreSMP__I
Nxdc__CODESECT(ti_sysbios_knl_Swi_restoreSMP__I, "ti_sysbios_knl_Swi_restoreSMP")
X
N__extern xdc_Void ti_sysbios_knl_Swi_restoreSMP__I( void );
Xextern void ti_sysbios_knl_Swi_restoreSMP__I( void );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Swi_Module_startupDone() ti_sysbios_knl_Swi_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Swi_Object_heap() ti_sysbios_knl_Swi_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Swi_Module_heap() ti_sysbios_knl_Swi_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Swi_Module__id ti_sysbios_knl_Swi_Module_id( void ) 
N{
N    return ti_sysbios_knl_Swi_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Swi_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Swi_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Swi_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Swi_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Swi_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Swi_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Swi_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Swi_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Swi_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Swi_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Swi_Module__diagsMask__C != NULL) *ti_sysbios_knl_Swi_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Swi_Module__diagsMask__C != 0) *ti_sysbios_knl_Swi_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Swi_Params_init( ti_sysbios_knl_Swi_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Swi_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Swi_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Swi_Params_copy(ti_sysbios_knl_Swi_Params *dst, const ti_sysbios_knl_Swi_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Swi_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Swi_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Swi_Object_count() ti_sysbios_knl_Swi_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Swi_Object_sizeof() ti_sysbios_knl_Swi_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_Object_get(ti_sysbios_knl_Swi_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Swi_Handle)ti_sysbios_knl_Swi_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_Object_first( void )
N{
N    return (ti_sysbios_knl_Swi_Handle)ti_sysbios_knl_Swi_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_Object_next( ti_sysbios_knl_Swi_Object *obj )
N{
N    return (ti_sysbios_knl_Swi_Handle)ti_sysbios_knl_Swi_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Swi_Handle_label( ti_sysbios_knl_Swi_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Swi_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Swi_Handle_name( ti_sysbios_knl_Swi_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Swi_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Swi_Handle ti_sysbios_knl_Swi_handle( ti_sysbios_knl_Swi_Struct *str )
N{
N    return (ti_sysbios_knl_Swi_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Swi_Struct *ti_sysbios_knl_Swi_struct( ti_sysbios_knl_Swi_Handle inst )
N{
N    return (ti_sysbios_knl_Swi_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Swi__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Swi__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Swi__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Swi__include_state
S#define ti_sysbios_knl_Swi__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Swi_Module_State {
S    volatile xdc_Bool locked;
S    xdc_UInt curSet;
S    xdc_UInt curTrigger;
S    ti_sysbios_knl_Swi_Handle curSwi;
S    ti_sysbios_knl_Queue_Handle curQ;
S    __TA_ti_sysbios_knl_Swi_Module_State__readyQ readyQ;
S    __TA_ti_sysbios_knl_Swi_Module_State__constructedSwis constructedSwis;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Swi_Module_State__ ti_sysbios_knl_Swi_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Swi_Object {
S    ti_sysbios_knl_Queue_Elem qElem;
S    ti_sysbios_knl_Swi_FuncPtr fxn;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_UInt priority;
S    xdc_UInt mask;
S    xdc_Bool posted;
S    xdc_UInt initTrigger;
S    xdc_UInt trigger;
S    ti_sysbios_knl_Queue_Handle readyQ;
S    __TA_ti_sysbios_knl_Swi_Instance_State__hookEnv hookEnv;
S};
S
S#endif /* ti_sysbios_knl_Swi__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Swi__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Swi__localnames__done
S#define ti_sysbios_knl_Swi__localnames__done
S
S/* module prefix */
S#define Swi_Instance ti_sysbios_knl_Swi_Instance
S#define Swi_Handle ti_sysbios_knl_Swi_Handle
S#define Swi_Module ti_sysbios_knl_Swi_Module
S#define Swi_Object ti_sysbios_knl_Swi_Object
S#define Swi_Struct ti_sysbios_knl_Swi_Struct
S#define Swi_FuncPtr ti_sysbios_knl_Swi_FuncPtr
S#define Swi_HookSet ti_sysbios_knl_Swi_HookSet
S#define Swi_Instance_State ti_sysbios_knl_Swi_Instance_State
S#define Swi_Module_State ti_sysbios_knl_Swi_Module_State
S#define Swi_LM_begin ti_sysbios_knl_Swi_LM_begin
S#define Swi_LD_end ti_sysbios_knl_Swi_LD_end
S#define Swi_LM_post ti_sysbios_knl_Swi_LM_post
S#define Swi_A_swiDisabled ti_sysbios_knl_Swi_A_swiDisabled
S#define Swi_A_badPriority ti_sysbios_knl_Swi_A_badPriority
S#define Swi_numPriorities ti_sysbios_knl_Swi_numPriorities
S#define Swi_hooks ti_sysbios_knl_Swi_hooks
S#define Swi_taskDisable ti_sysbios_knl_Swi_taskDisable
S#define Swi_taskRestore ti_sysbios_knl_Swi_taskRestore
S#define Swi_numConstructedSwis ti_sysbios_knl_Swi_numConstructedSwis
S#define Swi_Params ti_sysbios_knl_Swi_Params
S#define Swi_startup ti_sysbios_knl_Swi_startup
S#define Swi_enabled ti_sysbios_knl_Swi_enabled
S#define Swi_unlockSched ti_sysbios_knl_Swi_unlockSched
S#define Swi_disable ti_sysbios_knl_Swi_disable
S#define Swi_enable ti_sysbios_knl_Swi_enable
S#define Swi_restore ti_sysbios_knl_Swi_restore
S#define Swi_restoreHwi ti_sysbios_knl_Swi_restoreHwi
S#define Swi_self ti_sysbios_knl_Swi_self
S#define Swi_getTrigger ti_sysbios_knl_Swi_getTrigger
S#define Swi_raisePri ti_sysbios_knl_Swi_raisePri
S#define Swi_restorePri ti_sysbios_knl_Swi_restorePri
S#define Swi_andn ti_sysbios_knl_Swi_andn
S#define Swi_dec ti_sysbios_knl_Swi_dec
S#define Swi_getHookContext ti_sysbios_knl_Swi_getHookContext
S#define Swi_setHookContext ti_sysbios_knl_Swi_setHookContext
S#define Swi_getPri ti_sysbios_knl_Swi_getPri
S#define Swi_getFunc ti_sysbios_knl_Swi_getFunc
S#define Swi_getAttrs ti_sysbios_knl_Swi_getAttrs
S#define Swi_setAttrs ti_sysbios_knl_Swi_setAttrs
S#define Swi_inc ti_sysbios_knl_Swi_inc
S#define Swi_or ti_sysbios_knl_Swi_or
S#define Swi_post ti_sysbios_knl_Swi_post
S#define Swi_Module_name ti_sysbios_knl_Swi_Module_name
S#define Swi_Module_id ti_sysbios_knl_Swi_Module_id
S#define Swi_Module_startup ti_sysbios_knl_Swi_Module_startup
S#define Swi_Module_startupDone ti_sysbios_knl_Swi_Module_startupDone
S#define Swi_Module_hasMask ti_sysbios_knl_Swi_Module_hasMask
S#define Swi_Module_getMask ti_sysbios_knl_Swi_Module_getMask
S#define Swi_Module_setMask ti_sysbios_knl_Swi_Module_setMask
S#define Swi_Object_heap ti_sysbios_knl_Swi_Object_heap
S#define Swi_Module_heap ti_sysbios_knl_Swi_Module_heap
S#define Swi_construct ti_sysbios_knl_Swi_construct
S#define Swi_create ti_sysbios_knl_Swi_create
S#define Swi_handle ti_sysbios_knl_Swi_handle
S#define Swi_struct ti_sysbios_knl_Swi_struct
S#define Swi_Handle_label ti_sysbios_knl_Swi_Handle_label
S#define Swi_Handle_name ti_sysbios_knl_Swi_Handle_name
S#define Swi_Instance_init ti_sysbios_knl_Swi_Instance_init
S#define Swi_Object_count ti_sysbios_knl_Swi_Object_count
S#define Swi_Object_get ti_sysbios_knl_Swi_Object_get
S#define Swi_Object_first ti_sysbios_knl_Swi_Object_first
S#define Swi_Object_next ti_sysbios_knl_Swi_Object_next
S#define Swi_Object_sizeof ti_sysbios_knl_Swi_Object_sizeof
S#define Swi_Params_copy ti_sysbios_knl_Swi_Params_copy
S#define Swi_Params_init ti_sysbios_knl_Swi_Params_init
S#define Swi_Instance_finalize ti_sysbios_knl_Swi_Instance_finalize
S#define Swi_delete ti_sysbios_knl_Swi_delete
S#define Swi_destruct ti_sysbios_knl_Swi_destruct
S
S#endif /* ti_sysbios_knl_Swi__localnames__done */
N#endif
L 66 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Clock_TimerProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock_TimerProxy__include
N#define ti_sysbios_knl_Clock_TimerProxy__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock_TimerProxy__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Clock_TimerProxy___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Clock_TimerProxy.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Clock_TimerProxy.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <ti/sysbios/interfaces/ITimer.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITimer.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_interfaces_ITimer__include
S#define ti_sysbios_interfaces_ITimer__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_interfaces_ITimer__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_interfaces_ITimer___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/interfaces/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_FuncPtr)(xdc_UArg);
S
S/* ANY */
S#define ti_sysbios_interfaces_ITimer_ANY (~0)
S
S/* StartMode */
Senum ti_sysbios_interfaces_ITimer_StartMode {
S    ti_sysbios_interfaces_ITimer_StartMode_AUTO,
S    ti_sysbios_interfaces_ITimer_StartMode_USER
S};
Stypedef enum ti_sysbios_interfaces_ITimer_StartMode ti_sysbios_interfaces_ITimer_StartMode;
S
S/* RunMode */
Senum ti_sysbios_interfaces_ITimer_RunMode {
S    ti_sysbios_interfaces_ITimer_RunMode_CONTINUOUS,
S    ti_sysbios_interfaces_ITimer_RunMode_ONESHOT,
S    ti_sysbios_interfaces_ITimer_RunMode_DYNAMIC
S};
Stypedef enum ti_sysbios_interfaces_ITimer_RunMode ti_sysbios_interfaces_ITimer_RunMode;
S
S/* Status */
Senum ti_sysbios_interfaces_ITimer_Status {
S    ti_sysbios_interfaces_ITimer_Status_INUSE,
S    ti_sysbios_interfaces_ITimer_Status_FREE
S};
Stypedef enum ti_sysbios_interfaces_ITimer_Status ti_sysbios_interfaces_ITimer_Status;
S
S/* PeriodType */
Senum ti_sysbios_interfaces_ITimer_PeriodType {
S    ti_sysbios_interfaces_ITimer_PeriodType_MICROSECS,
S    ti_sysbios_interfaces_ITimer_PeriodType_COUNTS
S};
Stypedef enum ti_sysbios_interfaces_ITimer_PeriodType ti_sysbios_interfaces_ITimer_PeriodType;
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_interfaces_ITimer_Args__create {
S    xdc_Int id;
S    ti_sysbios_interfaces_ITimer_FuncPtr tickFxn;
S} ti_sysbios_interfaces_ITimer_Args__create;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_interfaces_ITimer_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    ti_sysbios_interfaces_ITimer_RunMode runMode;
S    ti_sysbios_interfaces_ITimer_StartMode startMode;
S    xdc_UArg arg;
S    xdc_UInt32 period;
S    ti_sysbios_interfaces_ITimer_PeriodType periodType;
S    xdc_runtime_Types_FreqHz extFreq;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct ti_sysbios_interfaces_ITimer_Fxns__ {
S    xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2 *__sysp;
S    xdc_UInt (*getNumTimers)(void);
S    ti_sysbios_interfaces_ITimer_Status (*getStatus)(xdc_UInt);
S    xdc_Void (*startup)(void);
S    xdc_UInt32 (*getMaxTicks)(void*);
S    xdc_Void (*setNextTick)(void*, xdc_UInt32);
S    xdc_Void (*start)(void*);
S    xdc_Void (*stop)(void*);
S    xdc_Void (*setPeriod)(void*, xdc_UInt32);
S    xdc_Bool (*setPeriodMicroSecs)(void*, xdc_UInt32);
S    xdc_UInt32 (*getPeriod)(void*);
S    xdc_UInt32 (*getCount)(void*);
S    xdc_Void (*getFreq)(void*, xdc_runtime_Types_FreqHz*);
S    ti_sysbios_interfaces_ITimer_FuncPtr (*getFunc)(void*, xdc_UArg*);
S    xdc_Void (*setFunc)(void*, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
S    xdc_Void (*trigger)(void*, xdc_UInt32);
S    xdc_UInt32 (*getExpiredCounts)(void*);
S    xdc_UInt32 (*getExpiredTicks)(void*, xdc_UInt32);
S    xdc_UInt32 (*getCurrentTick)(void*, xdc_Bool);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITimer_Interface__BASE__C;
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(ti_sysbios_interfaces_ITimer_create, "ti_sysbios_interfaces_ITimer_create")
S__extern ti_sysbios_interfaces_ITimer_Handle ti_sysbios_interfaces_ITimer_create(ti_sysbios_interfaces_ITimer_Module, xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_interfaces_ITimer_Params *, xdc_runtime_Error_Block *__eb);
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_interfaces_ITimer_delete, "ti_sysbios_interfaces_ITimer_delete")
S__extern xdc_Void ti_sysbios_interfaces_ITimer_delete(ti_sysbios_interfaces_ITimer_Handle *);
S
S/* Handle_to_Module */
Sstatic inline ti_sysbios_interfaces_ITimer_Module ti_sysbios_interfaces_ITimer_Handle_to_Module( ti_sysbios_interfaces_ITimer_Handle inst )
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_interfaces_ITimer_Handle_label( ti_sysbios_interfaces_ITimer_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId ti_sysbios_interfaces_ITimer_Module_id( ti_sysbios_interfaces_ITimer_Module mod )
S{
S    return mod->__sysp->__mid;
S}
S
S/* getNumTimers */
Sstatic inline xdc_UInt ti_sysbios_interfaces_ITimer_getNumTimers( ti_sysbios_interfaces_ITimer_Module __inst )
S{
S    return __inst->getNumTimers();
S}
S
S/* getStatus */
Sstatic inline ti_sysbios_interfaces_ITimer_Status ti_sysbios_interfaces_ITimer_getStatus( ti_sysbios_interfaces_ITimer_Module __inst, xdc_UInt id )
S{
S    return __inst->getStatus(id);
S}
S
S/* startup */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_startup( ti_sysbios_interfaces_ITimer_Module __inst )
S{
S    __inst->startup();
S}
S
S/* getMaxTicks */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getMaxTicks( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return __inst->__fxns->getMaxTicks((void*)__inst);
S}
S
S/* setNextTick */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setNextTick( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 ticks )
S{
S    __inst->__fxns->setNextTick((void*)__inst, ticks);
S}
S
S/* start */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_start( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    __inst->__fxns->start((void*)__inst);
S}
S
S/* stop */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_stop( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    __inst->__fxns->stop((void*)__inst);
S}
S
S/* setPeriod */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setPeriod( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 period )
S{
S    __inst->__fxns->setPeriod((void*)__inst, period);
S}
S
S/* setPeriodMicroSecs */
Sstatic inline xdc_Bool ti_sysbios_interfaces_ITimer_setPeriodMicroSecs( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 microsecs )
S{
S    return __inst->__fxns->setPeriodMicroSecs((void*)__inst, microsecs);
S}
S
S/* getPeriod */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getPeriod( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return __inst->__fxns->getPeriod((void*)__inst);
S}
S
S/* getCount */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getCount( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return __inst->__fxns->getCount((void*)__inst);
S}
S
S/* getFreq */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_getFreq( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_runtime_Types_FreqHz *freq )
S{
S    __inst->__fxns->getFreq((void*)__inst, freq);
S}
S
S/* getFunc */
Sstatic inline ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_interfaces_ITimer_getFunc( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UArg *arg )
S{
S    return __inst->__fxns->getFunc((void*)__inst, arg);
S}
S
S/* setFunc */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_setFunc( ti_sysbios_interfaces_ITimer_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg )
S{
S    __inst->__fxns->setFunc((void*)__inst, fxn, arg);
S}
S
S/* trigger */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITimer_trigger( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 cycles )
S{
S    __inst->__fxns->trigger((void*)__inst, cycles);
S}
S
S/* getExpiredCounts */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getExpiredCounts( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return __inst->__fxns->getExpiredCounts((void*)__inst);
S}
S
S/* getExpiredTicks */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getExpiredTicks( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_UInt32 tickPeriod )
S{
S    return __inst->__fxns->getExpiredTicks((void*)__inst, tickPeriod);
S}
S
S/* getCurrentTick */
Sstatic inline xdc_UInt32 ti_sysbios_interfaces_ITimer_getCurrentTick( ti_sysbios_interfaces_ITimer_Handle __inst, xdc_Bool save )
S{
S    return __inst->__fxns->getCurrentTick((void*)__inst, save);
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* getNumTimers_{FxnT,fxnP} */
Stypedef xdc_UInt (*ti_sysbios_interfaces_ITimer_getNumTimers_FxnT)(void);
Sstatic inline ti_sysbios_interfaces_ITimer_getNumTimers_FxnT ti_sysbios_interfaces_ITimer_getNumTimers_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getNumTimers_FxnT)__inst->getNumTimers;
S}
S
S/* getStatus_{FxnT,fxnP} */
Stypedef ti_sysbios_interfaces_ITimer_Status (*ti_sysbios_interfaces_ITimer_getStatus_FxnT)(xdc_UInt);
Sstatic inline ti_sysbios_interfaces_ITimer_getStatus_FxnT ti_sysbios_interfaces_ITimer_getStatus_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getStatus_FxnT)__inst->getStatus;
S}
S
S/* startup_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_startup_FxnT)(void);
Sstatic inline ti_sysbios_interfaces_ITimer_startup_FxnT ti_sysbios_interfaces_ITimer_startup_fxnP( ti_sysbios_interfaces_ITimer_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_startup_FxnT)__inst->startup;
S}
S
S/* getMaxTicks_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT ti_sysbios_interfaces_ITimer_getMaxTicks_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT)__inst->__fxns->getMaxTicks;
S}
S
S/* setNextTick_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setNextTick_FxnT)(xdc_Void *, xdc_UInt32);
Sstatic inline ti_sysbios_interfaces_ITimer_setNextTick_FxnT ti_sysbios_interfaces_ITimer_setNextTick_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_setNextTick_FxnT)__inst->__fxns->setNextTick;
S}
S
S/* start_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_start_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_start_FxnT ti_sysbios_interfaces_ITimer_start_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_start_FxnT)__inst->__fxns->start;
S}
S
S/* stop_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_stop_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_stop_FxnT ti_sysbios_interfaces_ITimer_stop_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_stop_FxnT)__inst->__fxns->stop;
S}
S
S/* setPeriod_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setPeriod_FxnT)(xdc_Void *, xdc_UInt32);
Sstatic inline ti_sysbios_interfaces_ITimer_setPeriod_FxnT ti_sysbios_interfaces_ITimer_setPeriod_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_setPeriod_FxnT)__inst->__fxns->setPeriod;
S}
S
S/* setPeriodMicroSecs_{FxnT,fxnP} */
Stypedef xdc_Bool (*ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT)(xdc_Void *, xdc_UInt32);
Sstatic inline ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT)__inst->__fxns->setPeriodMicroSecs;
S}
S
S/* getPeriod_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getPeriod_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_getPeriod_FxnT ti_sysbios_interfaces_ITimer_getPeriod_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getPeriod_FxnT)__inst->__fxns->getPeriod;
S}
S
S/* getCount_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCount_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_getCount_FxnT ti_sysbios_interfaces_ITimer_getCount_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getCount_FxnT)__inst->__fxns->getCount;
S}
S
S/* getFreq_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_getFreq_FxnT)(xdc_Void *, xdc_runtime_Types_FreqHz*);
Sstatic inline ti_sysbios_interfaces_ITimer_getFreq_FxnT ti_sysbios_interfaces_ITimer_getFreq_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getFreq_FxnT)__inst->__fxns->getFreq;
S}
S
S/* getFunc_{FxnT,fxnP} */
Stypedef ti_sysbios_interfaces_ITimer_FuncPtr (*ti_sysbios_interfaces_ITimer_getFunc_FxnT)(xdc_Void *, xdc_UArg*);
Sstatic inline ti_sysbios_interfaces_ITimer_getFunc_FxnT ti_sysbios_interfaces_ITimer_getFunc_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getFunc_FxnT)__inst->__fxns->getFunc;
S}
S
S/* setFunc_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_setFunc_FxnT)(xdc_Void *, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
Sstatic inline ti_sysbios_interfaces_ITimer_setFunc_FxnT ti_sysbios_interfaces_ITimer_setFunc_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_setFunc_FxnT)__inst->__fxns->setFunc;
S}
S
S/* trigger_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITimer_trigger_FxnT)(xdc_Void *, xdc_UInt32);
Sstatic inline ti_sysbios_interfaces_ITimer_trigger_FxnT ti_sysbios_interfaces_ITimer_trigger_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_trigger_FxnT)__inst->__fxns->trigger;
S}
S
S/* getExpiredCounts_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT)(xdc_Void *);
Sstatic inline ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT ti_sysbios_interfaces_ITimer_getExpiredCounts_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT)__inst->__fxns->getExpiredCounts;
S}
S
S/* getExpiredTicks_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT)(xdc_Void *, xdc_UInt32);
Sstatic inline ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT ti_sysbios_interfaces_ITimer_getExpiredTicks_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT)__inst->__fxns->getExpiredTicks;
S}
S
S/* getCurrentTick_{FxnT,fxnP} */
Stypedef xdc_UInt32 (*ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT)(xdc_Void *, xdc_Bool);
Sstatic inline ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT ti_sysbios_interfaces_ITimer_getCurrentTick_fxnP( ti_sysbios_interfaces_ITimer_Handle __inst )
S{
S    return (ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT)__inst->__fxns->getCurrentTick;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_interfaces_ITimer__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_interfaces_ITimer__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_interfaces_ITimer__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_interfaces_ITimer__localnames__done
S#define ti_sysbios_interfaces_ITimer__localnames__done
S
S/* module prefix */
S#define ITimer_Instance ti_sysbios_interfaces_ITimer_Instance
S#define ITimer_Handle ti_sysbios_interfaces_ITimer_Handle
S#define ITimer_Module ti_sysbios_interfaces_ITimer_Module
S#define ITimer_FuncPtr ti_sysbios_interfaces_ITimer_FuncPtr
S#define ITimer_ANY ti_sysbios_interfaces_ITimer_ANY
S#define ITimer_StartMode ti_sysbios_interfaces_ITimer_StartMode
S#define ITimer_RunMode ti_sysbios_interfaces_ITimer_RunMode
S#define ITimer_Status ti_sysbios_interfaces_ITimer_Status
S#define ITimer_PeriodType ti_sysbios_interfaces_ITimer_PeriodType
S#define ITimer_StartMode_AUTO ti_sysbios_interfaces_ITimer_StartMode_AUTO
S#define ITimer_StartMode_USER ti_sysbios_interfaces_ITimer_StartMode_USER
S#define ITimer_RunMode_CONTINUOUS ti_sysbios_interfaces_ITimer_RunMode_CONTINUOUS
S#define ITimer_RunMode_ONESHOT ti_sysbios_interfaces_ITimer_RunMode_ONESHOT
S#define ITimer_RunMode_DYNAMIC ti_sysbios_interfaces_ITimer_RunMode_DYNAMIC
S#define ITimer_Status_INUSE ti_sysbios_interfaces_ITimer_Status_INUSE
S#define ITimer_Status_FREE ti_sysbios_interfaces_ITimer_Status_FREE
S#define ITimer_PeriodType_MICROSECS ti_sysbios_interfaces_ITimer_PeriodType_MICROSECS
S#define ITimer_PeriodType_COUNTS ti_sysbios_interfaces_ITimer_PeriodType_COUNTS
S#define ITimer_Params ti_sysbios_interfaces_ITimer_Params
S#define ITimer_getNumTimers ti_sysbios_interfaces_ITimer_getNumTimers
S#define ITimer_getNumTimers_fxnP ti_sysbios_interfaces_ITimer_getNumTimers_fxnP
S#define ITimer_getNumTimers_FxnT ti_sysbios_interfaces_ITimer_getNumTimers_FxnT
S#define ITimer_getStatus ti_sysbios_interfaces_ITimer_getStatus
S#define ITimer_getStatus_fxnP ti_sysbios_interfaces_ITimer_getStatus_fxnP
S#define ITimer_getStatus_FxnT ti_sysbios_interfaces_ITimer_getStatus_FxnT
S#define ITimer_startup ti_sysbios_interfaces_ITimer_startup
S#define ITimer_startup_fxnP ti_sysbios_interfaces_ITimer_startup_fxnP
S#define ITimer_startup_FxnT ti_sysbios_interfaces_ITimer_startup_FxnT
S#define ITimer_getMaxTicks ti_sysbios_interfaces_ITimer_getMaxTicks
S#define ITimer_getMaxTicks_fxnP ti_sysbios_interfaces_ITimer_getMaxTicks_fxnP
S#define ITimer_getMaxTicks_FxnT ti_sysbios_interfaces_ITimer_getMaxTicks_FxnT
S#define ITimer_setNextTick ti_sysbios_interfaces_ITimer_setNextTick
S#define ITimer_setNextTick_fxnP ti_sysbios_interfaces_ITimer_setNextTick_fxnP
S#define ITimer_setNextTick_FxnT ti_sysbios_interfaces_ITimer_setNextTick_FxnT
S#define ITimer_start ti_sysbios_interfaces_ITimer_start
S#define ITimer_start_fxnP ti_sysbios_interfaces_ITimer_start_fxnP
S#define ITimer_start_FxnT ti_sysbios_interfaces_ITimer_start_FxnT
S#define ITimer_stop ti_sysbios_interfaces_ITimer_stop
S#define ITimer_stop_fxnP ti_sysbios_interfaces_ITimer_stop_fxnP
S#define ITimer_stop_FxnT ti_sysbios_interfaces_ITimer_stop_FxnT
S#define ITimer_setPeriod ti_sysbios_interfaces_ITimer_setPeriod
S#define ITimer_setPeriod_fxnP ti_sysbios_interfaces_ITimer_setPeriod_fxnP
S#define ITimer_setPeriod_FxnT ti_sysbios_interfaces_ITimer_setPeriod_FxnT
S#define ITimer_setPeriodMicroSecs ti_sysbios_interfaces_ITimer_setPeriodMicroSecs
S#define ITimer_setPeriodMicroSecs_fxnP ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_fxnP
S#define ITimer_setPeriodMicroSecs_FxnT ti_sysbios_interfaces_ITimer_setPeriodMicroSecs_FxnT
S#define ITimer_getPeriod ti_sysbios_interfaces_ITimer_getPeriod
S#define ITimer_getPeriod_fxnP ti_sysbios_interfaces_ITimer_getPeriod_fxnP
S#define ITimer_getPeriod_FxnT ti_sysbios_interfaces_ITimer_getPeriod_FxnT
S#define ITimer_getCount ti_sysbios_interfaces_ITimer_getCount
S#define ITimer_getCount_fxnP ti_sysbios_interfaces_ITimer_getCount_fxnP
S#define ITimer_getCount_FxnT ti_sysbios_interfaces_ITimer_getCount_FxnT
S#define ITimer_getFreq ti_sysbios_interfaces_ITimer_getFreq
S#define ITimer_getFreq_fxnP ti_sysbios_interfaces_ITimer_getFreq_fxnP
S#define ITimer_getFreq_FxnT ti_sysbios_interfaces_ITimer_getFreq_FxnT
S#define ITimer_getFunc ti_sysbios_interfaces_ITimer_getFunc
S#define ITimer_getFunc_fxnP ti_sysbios_interfaces_ITimer_getFunc_fxnP
S#define ITimer_getFunc_FxnT ti_sysbios_interfaces_ITimer_getFunc_FxnT
S#define ITimer_setFunc ti_sysbios_interfaces_ITimer_setFunc
S#define ITimer_setFunc_fxnP ti_sysbios_interfaces_ITimer_setFunc_fxnP
S#define ITimer_setFunc_FxnT ti_sysbios_interfaces_ITimer_setFunc_FxnT
S#define ITimer_trigger ti_sysbios_interfaces_ITimer_trigger
S#define ITimer_trigger_fxnP ti_sysbios_interfaces_ITimer_trigger_fxnP
S#define ITimer_trigger_FxnT ti_sysbios_interfaces_ITimer_trigger_FxnT
S#define ITimer_getExpiredCounts ti_sysbios_interfaces_ITimer_getExpiredCounts
S#define ITimer_getExpiredCounts_fxnP ti_sysbios_interfaces_ITimer_getExpiredCounts_fxnP
S#define ITimer_getExpiredCounts_FxnT ti_sysbios_interfaces_ITimer_getExpiredCounts_FxnT
S#define ITimer_getExpiredTicks ti_sysbios_interfaces_ITimer_getExpiredTicks
S#define ITimer_getExpiredTicks_fxnP ti_sysbios_interfaces_ITimer_getExpiredTicks_fxnP
S#define ITimer_getExpiredTicks_FxnT ti_sysbios_interfaces_ITimer_getExpiredTicks_FxnT
S#define ITimer_getCurrentTick ti_sysbios_interfaces_ITimer_getCurrentTick
S#define ITimer_getCurrentTick_fxnP ti_sysbios_interfaces_ITimer_getCurrentTick_fxnP
S#define ITimer_getCurrentTick_FxnT ti_sysbios_interfaces_ITimer_getCurrentTick_FxnT
S#define ITimer_Module_name ti_sysbios_interfaces_ITimer_Module_name
S#define ITimer_create ti_sysbios_interfaces_ITimer_create
S#define ITimer_delete ti_sysbios_interfaces_ITimer_delete
S#define ITimer_Handle_label ti_sysbios_interfaces_ITimer_Handle_label
S#define ITimer_Handle_to_Module ti_sysbios_interfaces_ITimer_Handle_to_Module
S
S#endif /* ti_sysbios_interfaces_ITimer__localnames__done */
N#endif
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Clock_TimerProxy.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_knl_Clock_TimerProxy_FuncPtr;
N
N/* ANY */
N#define ti_sysbios_knl_Clock_TimerProxy_ANY (~0)
N
N/* StartMode */
Ntypedef ti_sysbios_interfaces_ITimer_StartMode ti_sysbios_knl_Clock_TimerProxy_StartMode;
N
N/* RunMode */
Ntypedef ti_sysbios_interfaces_ITimer_RunMode ti_sysbios_knl_Clock_TimerProxy_RunMode;
N
N/* Status */
Ntypedef ti_sysbios_interfaces_ITimer_Status ti_sysbios_knl_Clock_TimerProxy_Status;
N
N/* PeriodType */
Ntypedef ti_sysbios_interfaces_ITimer_PeriodType ti_sysbios_knl_Clock_TimerProxy_PeriodType;
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_knl_Clock_TimerProxy_Args__create {
N    xdc_Int id;
N    ti_sysbios_interfaces_ITimer_FuncPtr tickFxn;
N} ti_sysbios_knl_Clock_TimerProxy_Args__create;
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gateObj ti_sysbios_knl_Clock_TimerProxy_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gateObj ti_sysbios_knl_Clock_TimerProxy_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_TimerProxy_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__id ti_sysbios_knl_Clock_TimerProxy_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__id ti_sysbios_knl_Clock_TimerProxy_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Clock_TimerProxy_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__count ti_sysbios_knl_Clock_TimerProxy_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Object__count ti_sysbios_knl_Clock_TimerProxy_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_TimerProxy_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__heap ti_sysbios_knl_Clock_TimerProxy_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Object__heap ti_sysbios_knl_Clock_TimerProxy_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Clock_TimerProxy_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__sizeof ti_sysbios_knl_Clock_TimerProxy_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Object__sizeof ti_sysbios_knl_Clock_TimerProxy_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__table ti_sysbios_knl_Clock_TimerProxy_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Clock_TimerProxy_Object__table ti_sysbios_knl_Clock_TimerProxy_Object__table__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Clock_TimerProxy_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    ti_sysbios_interfaces_ITimer_RunMode runMode;
N    ti_sysbios_interfaces_ITimer_StartMode startMode;
N    xdc_UArg arg;
N    xdc_UInt32 period;
N    ti_sysbios_interfaces_ITimer_PeriodType periodType;
N    xdc_runtime_Types_FreqHz extFreq;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Clock_TimerProxy_Struct {
N    const ti_sysbios_knl_Clock_TimerProxy_Fxns__ *__fxns;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct ti_sysbios_knl_Clock_TimerProxy_Fxns__ {
N    xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2 *__sysp;
N    xdc_UInt (*getNumTimers)(void);
N    ti_sysbios_interfaces_ITimer_Status (*getStatus)(xdc_UInt);
N    xdc_Void (*startup)(void);
X    void (*startup)(void);
N    xdc_UInt32 (*getMaxTicks)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_Void (*setNextTick)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
X    void (*setNextTick)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
N    xdc_Void (*start)(ti_sysbios_knl_Clock_TimerProxy_Handle);
X    void (*start)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_Void (*stop)(ti_sysbios_knl_Clock_TimerProxy_Handle);
X    void (*stop)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_Void (*setPeriod)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
X    void (*setPeriod)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
N    xdc_Bool (*setPeriodMicroSecs)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
N    xdc_UInt32 (*getPeriod)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_UInt32 (*getCount)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_Void (*getFreq)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_runtime_Types_FreqHz*);
X    void (*getFreq)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_runtime_Types_FreqHz*);
N    ti_sysbios_interfaces_ITimer_FuncPtr (*getFunc)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UArg*);
N    xdc_Void (*setFunc)(ti_sysbios_knl_Clock_TimerProxy_Handle, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
X    void (*setFunc)(ti_sysbios_knl_Clock_TimerProxy_Handle, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
N    xdc_Void (*trigger)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
X    void (*trigger)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
N    xdc_UInt32 (*getExpiredCounts)(ti_sysbios_knl_Clock_TimerProxy_Handle);
N    xdc_UInt32 (*getExpiredTicks)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
N    xdc_UInt32 (*getCurrentTick)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_Bool);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N
N/* Module__FXNS__C */
N__extern const ti_sysbios_knl_Clock_TimerProxy_Fxns__ ti_sysbios_knl_Clock_TimerProxy_Module__FXNS__C;
Xextern const ti_sysbios_knl_Clock_TimerProxy_Fxns__ ti_sysbios_knl_Clock_TimerProxy_Module__FXNS__C;
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Clock_TimerProxy_Module_startup( state ) (-1)
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Handle__label__S, "ti_sysbios_knl_Clock_TimerProxy_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_TimerProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_TimerProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S, "ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__create__S, "ti_sysbios_knl_Clock_TimerProxy_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_create, "ti_sysbios_knl_Clock_TimerProxy_create")
X
N__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_create( xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_knl_Clock_TimerProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_create( xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_knl_Clock_TimerProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__delete__S, "ti_sysbios_knl_Clock_TimerProxy_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Clock_TimerProxy_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_delete, "ti_sysbios_knl_Clock_TimerProxy_delete")
X
N__extern void ti_sysbios_knl_Clock_TimerProxy_delete(ti_sysbios_knl_Clock_TimerProxy_Handle *instp);
Xextern void ti_sysbios_knl_Clock_TimerProxy_delete(ti_sysbios_knl_Clock_TimerProxy_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S, "ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S( xdc_Ptr objp );
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__get__S, "ti_sysbios_knl_Clock_TimerProxy_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__first__S, "ti_sysbios_knl_Clock_TimerProxy_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__next__S, "ti_sysbios_knl_Clock_TimerProxy_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Params__init__S, "ti_sysbios_knl_Clock_TimerProxy_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Clock_TimerProxy_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* Proxy__abstract__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S, "ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S( void );
Xextern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S( void );
N
N/* Proxy__delegate__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S, "ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S( void );
N
N/* getNumTimers__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getNumTimers ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E, "ti_sysbios_knl_Clock_TimerProxy_getNumTimers")
X
N__extern xdc_UInt ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E( void );
Xextern xdc_UInt ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E( void );
N
N/* getStatus__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getStatus ti_sysbios_knl_Clock_TimerProxy_getStatus__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getStatus__E, "ti_sysbios_knl_Clock_TimerProxy_getStatus")
X
N__extern ti_sysbios_interfaces_ITimer_Status ti_sysbios_knl_Clock_TimerProxy_getStatus__E( xdc_UInt id );
Xextern ti_sysbios_interfaces_ITimer_Status ti_sysbios_knl_Clock_TimerProxy_getStatus__E( xdc_UInt id );
N
N/* startup__E */
N#define ti_sysbios_knl_Clock_TimerProxy_startup ti_sysbios_knl_Clock_TimerProxy_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_startup__E, "ti_sysbios_knl_Clock_TimerProxy_startup")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_startup__E( void );
Xextern void ti_sysbios_knl_Clock_TimerProxy_startup__E( void );
N
N/* getMaxTicks__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getMaxTicks ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E, "ti_sysbios_knl_Clock_TimerProxy_getMaxTicks")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* setNextTick__E */
N#define ti_sysbios_knl_Clock_TimerProxy_setNextTick ti_sysbios_knl_Clock_TimerProxy_setNextTick__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setNextTick__E, "ti_sysbios_knl_Clock_TimerProxy_setNextTick")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setNextTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 ticks );
Xextern void ti_sysbios_knl_Clock_TimerProxy_setNextTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 ticks );
N
N/* start__E */
N#define ti_sysbios_knl_Clock_TimerProxy_start ti_sysbios_knl_Clock_TimerProxy_start__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_start__E, "ti_sysbios_knl_Clock_TimerProxy_start")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_start__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern void ti_sysbios_knl_Clock_TimerProxy_start__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* stop__E */
N#define ti_sysbios_knl_Clock_TimerProxy_stop ti_sysbios_knl_Clock_TimerProxy_stop__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_stop__E, "ti_sysbios_knl_Clock_TimerProxy_stop")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_stop__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern void ti_sysbios_knl_Clock_TimerProxy_stop__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* setPeriod__E */
N#define ti_sysbios_knl_Clock_TimerProxy_setPeriod ti_sysbios_knl_Clock_TimerProxy_setPeriod__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setPeriod__E, "ti_sysbios_knl_Clock_TimerProxy_setPeriod")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 period );
Xextern void ti_sysbios_knl_Clock_TimerProxy_setPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 period );
N
N/* setPeriodMicroSecs__E */
N#define ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E, "ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 microsecs );
Xextern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 microsecs );
N
N/* getPeriod__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getPeriod ti_sysbios_knl_Clock_TimerProxy_getPeriod__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getPeriod__E, "ti_sysbios_knl_Clock_TimerProxy_getPeriod")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* getCount__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getCount ti_sysbios_knl_Clock_TimerProxy_getCount__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getCount__E, "ti_sysbios_knl_Clock_TimerProxy_getCount")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCount__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCount__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* getFreq__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getFreq ti_sysbios_knl_Clock_TimerProxy_getFreq__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getFreq__E, "ti_sysbios_knl_Clock_TimerProxy_getFreq")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_getFreq__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_runtime_Types_FreqHz *freq );
Xextern void ti_sysbios_knl_Clock_TimerProxy_getFreq__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_runtime_Types_FreqHz *freq );
N
N/* getFunc__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getFunc ti_sysbios_knl_Clock_TimerProxy_getFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getFunc__E, "ti_sysbios_knl_Clock_TimerProxy_getFunc")
X
N__extern ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_knl_Clock_TimerProxy_getFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UArg *arg );
Xextern ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_knl_Clock_TimerProxy_getFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UArg *arg );
N
N/* setFunc__E */
N#define ti_sysbios_knl_Clock_TimerProxy_setFunc ti_sysbios_knl_Clock_TimerProxy_setFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setFunc__E, "ti_sysbios_knl_Clock_TimerProxy_setFunc")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg );
Xextern void ti_sysbios_knl_Clock_TimerProxy_setFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg );
N
N/* trigger__E */
N#define ti_sysbios_knl_Clock_TimerProxy_trigger ti_sysbios_knl_Clock_TimerProxy_trigger__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_trigger__E, "ti_sysbios_knl_Clock_TimerProxy_trigger")
X
N__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_trigger__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 cycles );
Xextern void ti_sysbios_knl_Clock_TimerProxy_trigger__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 cycles );
N
N/* getExpiredCounts__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E, "ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
N
N/* getExpiredTicks__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E, "ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 tickPeriod );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 tickPeriod );
N
N/* getCurrentTick__E */
N#define ti_sysbios_knl_Clock_TimerProxy_getCurrentTick ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E, "ti_sysbios_knl_Clock_TimerProxy_getCurrentTick")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_Bool save );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_Bool save );
N
N
N/*
N * ======== CONVERTORS ========
N */
N
N/* Module_upCast */
Nstatic inline ti_sysbios_interfaces_ITimer_Module ti_sysbios_knl_Clock_TimerProxy_Module_upCast( void )
N{
N    return (ti_sysbios_interfaces_ITimer_Module)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S();
N}
N
N/* Module_to_ti_sysbios_interfaces_ITimer */
N#define ti_sysbios_knl_Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Module_upCast
N
N/* Handle_upCast */
Nstatic inline ti_sysbios_interfaces_ITimer_Handle ti_sysbios_knl_Clock_TimerProxy_Handle_upCast( ti_sysbios_knl_Clock_TimerProxy_Handle i )
N{
N    return (ti_sysbios_interfaces_ITimer_Handle)i;
N}
N
N/* Handle_to_ti_sysbios_interfaces_ITimer */
N#define ti_sysbios_knl_Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_upCast
N
N/* Handle_downCast */
Nstatic inline ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_Handle_downCast( ti_sysbios_interfaces_ITimer_Handle i )
N{
N    ti_sysbios_interfaces_ITimer_Handle i2 = (ti_sysbios_interfaces_ITimer_Handle)i;
Nif (ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S()) return (ti_sysbios_knl_Clock_TimerProxy_Handle)i;
N    return (void*)i2->__fxns == (void*)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S() ? (ti_sysbios_knl_Clock_TimerProxy_Handle)i : 0;
N}
N
N/* Handle_from_ti_sysbios_interfaces_ITimer */
N#define ti_sysbios_knl_Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_downCast
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Clock_TimerProxy_Module_startupDone() ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Clock_TimerProxy_Object_heap() ti_sysbios_knl_Clock_TimerProxy_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Clock_TimerProxy_Module_heap() ti_sysbios_knl_Clock_TimerProxy_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Clock_TimerProxy_Module__id ti_sysbios_knl_Clock_TimerProxy_Module_id( void ) 
N{
N    return ti_sysbios_knl_Clock_TimerProxy_Module__id__C;
N}
N
N/* Proxy_abstract */
N#define ti_sysbios_knl_Clock_TimerProxy_Proxy_abstract() ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S()
N
N/* Proxy_delegate */
N#define ti_sysbios_knl_Clock_TimerProxy_Proxy_delegate() ((ti_sysbios_interfaces_ITimer_Module)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S())
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Clock_TimerProxy_Params_init( ti_sysbios_knl_Clock_TimerProxy_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Clock_TimerProxy_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_TimerProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Clock_TimerProxy_Params_copy(ti_sysbios_knl_Clock_TimerProxy_Params *dst, const ti_sysbios_knl_Clock_TimerProxy_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Clock_TimerProxy_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_TimerProxy_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Clock_TimerProxy__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Clock_TimerProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock_TimerProxy__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Clock_TimerProxy__localnames__done
S#define ti_sysbios_knl_Clock_TimerProxy__localnames__done
S
S/* module prefix */
S#define Clock_TimerProxy_Instance ti_sysbios_knl_Clock_TimerProxy_Instance
S#define Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_Handle
S#define Clock_TimerProxy_Module ti_sysbios_knl_Clock_TimerProxy_Module
S#define Clock_TimerProxy_Object ti_sysbios_knl_Clock_TimerProxy_Object
S#define Clock_TimerProxy_Struct ti_sysbios_knl_Clock_TimerProxy_Struct
S#define Clock_TimerProxy_FuncPtr ti_sysbios_knl_Clock_TimerProxy_FuncPtr
S#define Clock_TimerProxy_ANY ti_sysbios_knl_Clock_TimerProxy_ANY
S#define Clock_TimerProxy_StartMode ti_sysbios_knl_Clock_TimerProxy_StartMode
S#define Clock_TimerProxy_RunMode ti_sysbios_knl_Clock_TimerProxy_RunMode
S#define Clock_TimerProxy_Status ti_sysbios_knl_Clock_TimerProxy_Status
S#define Clock_TimerProxy_PeriodType ti_sysbios_knl_Clock_TimerProxy_PeriodType
S#define Clock_TimerProxy_Params ti_sysbios_knl_Clock_TimerProxy_Params
S#define Clock_TimerProxy_getNumTimers ti_sysbios_knl_Clock_TimerProxy_getNumTimers
S#define Clock_TimerProxy_getStatus ti_sysbios_knl_Clock_TimerProxy_getStatus
S#define Clock_TimerProxy_startup ti_sysbios_knl_Clock_TimerProxy_startup
S#define Clock_TimerProxy_getMaxTicks ti_sysbios_knl_Clock_TimerProxy_getMaxTicks
S#define Clock_TimerProxy_setNextTick ti_sysbios_knl_Clock_TimerProxy_setNextTick
S#define Clock_TimerProxy_start ti_sysbios_knl_Clock_TimerProxy_start
S#define Clock_TimerProxy_stop ti_sysbios_knl_Clock_TimerProxy_stop
S#define Clock_TimerProxy_setPeriod ti_sysbios_knl_Clock_TimerProxy_setPeriod
S#define Clock_TimerProxy_setPeriodMicroSecs ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs
S#define Clock_TimerProxy_getPeriod ti_sysbios_knl_Clock_TimerProxy_getPeriod
S#define Clock_TimerProxy_getCount ti_sysbios_knl_Clock_TimerProxy_getCount
S#define Clock_TimerProxy_getFreq ti_sysbios_knl_Clock_TimerProxy_getFreq
S#define Clock_TimerProxy_getFunc ti_sysbios_knl_Clock_TimerProxy_getFunc
S#define Clock_TimerProxy_setFunc ti_sysbios_knl_Clock_TimerProxy_setFunc
S#define Clock_TimerProxy_trigger ti_sysbios_knl_Clock_TimerProxy_trigger
S#define Clock_TimerProxy_getExpiredCounts ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts
S#define Clock_TimerProxy_getExpiredTicks ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks
S#define Clock_TimerProxy_getCurrentTick ti_sysbios_knl_Clock_TimerProxy_getCurrentTick
S#define Clock_TimerProxy_Module_name ti_sysbios_knl_Clock_TimerProxy_Module_name
S#define Clock_TimerProxy_Module_id ti_sysbios_knl_Clock_TimerProxy_Module_id
S#define Clock_TimerProxy_Module_startup ti_sysbios_knl_Clock_TimerProxy_Module_startup
S#define Clock_TimerProxy_Module_startupDone ti_sysbios_knl_Clock_TimerProxy_Module_startupDone
S#define Clock_TimerProxy_Module_hasMask ti_sysbios_knl_Clock_TimerProxy_Module_hasMask
S#define Clock_TimerProxy_Module_getMask ti_sysbios_knl_Clock_TimerProxy_Module_getMask
S#define Clock_TimerProxy_Module_setMask ti_sysbios_knl_Clock_TimerProxy_Module_setMask
S#define Clock_TimerProxy_Object_heap ti_sysbios_knl_Clock_TimerProxy_Object_heap
S#define Clock_TimerProxy_Module_heap ti_sysbios_knl_Clock_TimerProxy_Module_heap
S#define Clock_TimerProxy_construct ti_sysbios_knl_Clock_TimerProxy_construct
S#define Clock_TimerProxy_create ti_sysbios_knl_Clock_TimerProxy_create
S#define Clock_TimerProxy_handle ti_sysbios_knl_Clock_TimerProxy_handle
S#define Clock_TimerProxy_struct ti_sysbios_knl_Clock_TimerProxy_struct
S#define Clock_TimerProxy_Handle_label ti_sysbios_knl_Clock_TimerProxy_Handle_label
S#define Clock_TimerProxy_Handle_name ti_sysbios_knl_Clock_TimerProxy_Handle_name
S#define Clock_TimerProxy_Instance_init ti_sysbios_knl_Clock_TimerProxy_Instance_init
S#define Clock_TimerProxy_Object_count ti_sysbios_knl_Clock_TimerProxy_Object_count
S#define Clock_TimerProxy_Object_get ti_sysbios_knl_Clock_TimerProxy_Object_get
S#define Clock_TimerProxy_Object_first ti_sysbios_knl_Clock_TimerProxy_Object_first
S#define Clock_TimerProxy_Object_next ti_sysbios_knl_Clock_TimerProxy_Object_next
S#define Clock_TimerProxy_Object_sizeof ti_sysbios_knl_Clock_TimerProxy_Object_sizeof
S#define Clock_TimerProxy_Params_copy ti_sysbios_knl_Clock_TimerProxy_Params_copy
S#define Clock_TimerProxy_Params_init ti_sysbios_knl_Clock_TimerProxy_Params_init
S#define Clock_TimerProxy_Instance_State ti_sysbios_knl_Clock_TimerProxy_Instance_State
S#define Clock_TimerProxy_Instance_finalize ti_sysbios_knl_Clock_TimerProxy_Instance_finalize
S#define Clock_TimerProxy_Proxy_abstract ti_sysbios_knl_Clock_TimerProxy_Proxy_abstract
S#define Clock_TimerProxy_Proxy_delegate ti_sysbios_knl_Clock_TimerProxy_Proxy_delegate
S#define Clock_TimerProxy_delete ti_sysbios_knl_Clock_TimerProxy_delete
S#define Clock_TimerProxy_destruct ti_sysbios_knl_Clock_TimerProxy_destruct
S#define Clock_TimerProxy_Module_upCast ti_sysbios_knl_Clock_TimerProxy_Module_upCast
S#define Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer
S#define Clock_TimerProxy_Handle_upCast ti_sysbios_knl_Clock_TimerProxy_Handle_upCast
S#define Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer
S#define Clock_TimerProxy_Handle_downCast ti_sysbios_knl_Clock_TimerProxy_Handle_downCast
S#define Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer
S
S#endif /* ti_sysbios_knl_Clock_TimerProxy__localnames__done */
N#endif
L 67 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* TickSource */
Nenum ti_sysbios_knl_Clock_TickSource {
N    ti_sysbios_knl_Clock_TickSource_TIMER,
N    ti_sysbios_knl_Clock_TickSource_USER,
N    ti_sysbios_knl_Clock_TickSource_NULL
N};
Ntypedef enum ti_sysbios_knl_Clock_TickSource ti_sysbios_knl_Clock_TickSource;
N
N/* TickMode */
Nenum ti_sysbios_knl_Clock_TickMode {
N    ti_sysbios_knl_Clock_TickMode_PERIODIC,
N    ti_sysbios_knl_Clock_TickMode_DYNAMIC
N};
Ntypedef enum ti_sysbios_knl_Clock_TickMode ti_sysbios_knl_Clock_TickMode;
N
N/* FuncPtr */
Ntypedef xdc_Void (*ti_sysbios_knl_Clock_FuncPtr)(xdc_UArg);
Xtypedef void (*ti_sysbios_knl_Clock_FuncPtr)(xdc_UArg);
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_knl_Clock_Args__create {
N    ti_sysbios_knl_Clock_FuncPtr clockFxn;
N    xdc_UInt timeout;
N} ti_sysbios_knl_Clock_Args__create;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsEnabled ti_sysbios_knl_Clock_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__diagsEnabled ti_sysbios_knl_Clock_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsIncluded ti_sysbios_knl_Clock_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__diagsIncluded ti_sysbios_knl_Clock_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsMask ti_sysbios_knl_Clock_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__diagsMask ti_sysbios_knl_Clock_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gateObj ti_sysbios_knl_Clock_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__gateObj ti_sysbios_knl_Clock_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gatePrms ti_sysbios_knl_Clock_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__gatePrms ti_sysbios_knl_Clock_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Clock_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerDefined ti_sysbios_knl_Clock_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerDefined ti_sysbios_knl_Clock_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerObj ti_sysbios_knl_Clock_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerObj ti_sysbios_knl_Clock_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn0 ti_sysbios_knl_Clock_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerFxn0 ti_sysbios_knl_Clock_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn1 ti_sysbios_knl_Clock_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerFxn1 ti_sysbios_knl_Clock_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn2 ti_sysbios_knl_Clock_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerFxn2 ti_sysbios_knl_Clock_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn4 ti_sysbios_knl_Clock_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerFxn4 ti_sysbios_knl_Clock_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn8 ti_sysbios_knl_Clock_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__loggerFxn8 ti_sysbios_knl_Clock_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__startupDoneFxn ti_sysbios_knl_Clock_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Clock_Module__startupDoneFxn ti_sysbios_knl_Clock_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Clock_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__count ti_sysbios_knl_Clock_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Clock_Object__count ti_sysbios_knl_Clock_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__heap ti_sysbios_knl_Clock_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Clock_Object__heap ti_sysbios_knl_Clock_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Clock_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__sizeof ti_sysbios_knl_Clock_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Clock_Object__sizeof ti_sysbios_knl_Clock_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__table ti_sysbios_knl_Clock_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Clock_Object__table ti_sysbios_knl_Clock_Object__table__C;
N
N/* LW_delayed */
N#define ti_sysbios_knl_Clock_LW_delayed (ti_sysbios_knl_Clock_LW_delayed__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LW_delayed;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed__C;
Xextern  const CT__ti_sysbios_knl_Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed__C;
N
N/* LM_tick */
N#define ti_sysbios_knl_Clock_LM_tick (ti_sysbios_knl_Clock_LM_tick__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_tick;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_tick ti_sysbios_knl_Clock_LM_tick__C;
Xextern  const CT__ti_sysbios_knl_Clock_LM_tick ti_sysbios_knl_Clock_LM_tick__C;
N
N/* LM_begin */
N#define ti_sysbios_knl_Clock_LM_begin (ti_sysbios_knl_Clock_LM_begin__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_begin;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_begin ti_sysbios_knl_Clock_LM_begin__C;
Xextern  const CT__ti_sysbios_knl_Clock_LM_begin ti_sysbios_knl_Clock_LM_begin__C;
N
N/* A_clockDisabled */
N#define ti_sysbios_knl_Clock_A_clockDisabled (ti_sysbios_knl_Clock_A_clockDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_clockDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled__C;
Xextern  const CT__ti_sysbios_knl_Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled__C;
N
N/* A_badThreadType */
N#define ti_sysbios_knl_Clock_A_badThreadType (ti_sysbios_knl_Clock_A_badThreadType__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_badThreadType;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType__C;
Xextern  const CT__ti_sysbios_knl_Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType__C;
N
N/* serviceMargin */
N#ifdef ti_sysbios_knl_Clock_serviceMargin__D
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__D)
N#else
N#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__C)
Ntypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_serviceMargin;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin__C;
Xextern  const CT__ti_sysbios_knl_Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin__C;
N#endif
N
N/* tickSource */
N#define ti_sysbios_knl_Clock_tickSource (ti_sysbios_knl_Clock_tickSource__C)
Ntypedef ti_sysbios_knl_Clock_TickSource CT__ti_sysbios_knl_Clock_tickSource;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickSource ti_sysbios_knl_Clock_tickSource__C;
Xextern  const CT__ti_sysbios_knl_Clock_tickSource ti_sysbios_knl_Clock_tickSource__C;
N
N/* tickMode */
N#define ti_sysbios_knl_Clock_tickMode (ti_sysbios_knl_Clock_tickMode__C)
Ntypedef ti_sysbios_knl_Clock_TickMode CT__ti_sysbios_knl_Clock_tickMode;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickMode ti_sysbios_knl_Clock_tickMode__C;
Xextern  const CT__ti_sysbios_knl_Clock_tickMode ti_sysbios_knl_Clock_tickMode__C;
N
N/* timerId */
N#ifdef ti_sysbios_knl_Clock_timerId__D
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__D)
N#else
N#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Clock_timerId;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_timerId ti_sysbios_knl_Clock_timerId__C;
Xextern  const CT__ti_sysbios_knl_Clock_timerId ti_sysbios_knl_Clock_timerId__C;
N#endif
N
N/* tickPeriod */
N#ifdef ti_sysbios_knl_Clock_tickPeriod__D
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__D)
N#else
N#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__C)
Ntypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_tickPeriod;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod__C;
Xextern  const CT__ti_sysbios_knl_Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod__C;
N#endif
N
N/* doTickFunc */
N#define ti_sysbios_knl_Clock_doTickFunc (ti_sysbios_knl_Clock_doTickFunc__C)
Ntypedef xdc_Void (*CT__ti_sysbios_knl_Clock_doTickFunc)(xdc_UArg);
Xtypedef void (*CT__ti_sysbios_knl_Clock_doTickFunc)(xdc_UArg);
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc__C;
Xextern  const CT__ti_sysbios_knl_Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc__C;
N
N/* triggerClock */
N#define ti_sysbios_knl_Clock_triggerClock (ti_sysbios_knl_Clock_triggerClock__C)
Ntypedef ti_sysbios_knl_Clock_Handle CT__ti_sysbios_knl_Clock_triggerClock;
N__extern __FAR__ const CT__ti_sysbios_knl_Clock_triggerClock ti_sysbios_knl_Clock_triggerClock__C;
Xextern  const CT__ti_sysbios_knl_Clock_triggerClock ti_sysbios_knl_Clock_triggerClock__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Clock_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_Bool startFlag;
N    xdc_UInt32 period;
N    xdc_UArg arg;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Clock_Struct {
N    ti_sysbios_knl_Queue_Elem __f0;
N    xdc_UInt32 __f1;
N    xdc_UInt32 __f2;
N    xdc_UInt32 __f3;
N    volatile xdc_Bool __f4;
N    ti_sysbios_knl_Clock_FuncPtr __f5;
N    xdc_UArg __f6;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Clock_Module_startup ti_sysbios_knl_Clock_Module_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__E, "ti_sysbios_knl_Clock_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__E( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Clock_Module_startup__E( xdc_Int state );
Nxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__F, "ti_sysbios_knl_Clock_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__F( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Clock_Module_startup__F( xdc_Int state );
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Instance_init__E, "ti_sysbios_knl_Clock_Instance_init")
X
N__extern xdc_Void ti_sysbios_knl_Clock_Instance_init__E(ti_sysbios_knl_Clock_Object *, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *);
Xextern void ti_sysbios_knl_Clock_Instance_init__E(ti_sysbios_knl_Clock_Object *, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *);
N
N/* Instance_finalize__E */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Instance_finalize__E, "ti_sysbios_knl_Clock_Instance_finalize")
X
N__extern void ti_sysbios_knl_Clock_Instance_finalize__E( ti_sysbios_knl_Clock_Object* );
Xextern void ti_sysbios_knl_Clock_Instance_finalize__E( ti_sysbios_knl_Clock_Object* );
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Handle__label__S, "ti_sysbios_knl_Clock_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Module__startupDone__S, "ti_sysbios_knl_Clock_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Clock_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__create__S, "ti_sysbios_knl_Clock_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Clock_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Clock_create, "ti_sysbios_knl_Clock_create")
X
N__extern ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_create( ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_create( ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Clock_construct, "ti_sysbios_knl_Clock_construct")
X
N__extern void ti_sysbios_knl_Clock_construct( ti_sysbios_knl_Clock_Struct *__obj, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms );
Xextern void ti_sysbios_knl_Clock_construct( ti_sysbios_knl_Clock_Struct *__obj, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__delete__S, "ti_sysbios_knl_Clock_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Clock_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Clock_delete, "ti_sysbios_knl_Clock_delete")
X
N__extern void ti_sysbios_knl_Clock_delete(ti_sysbios_knl_Clock_Handle *instp);
Xextern void ti_sysbios_knl_Clock_delete(ti_sysbios_knl_Clock_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__destruct__S, "ti_sysbios_knl_Clock_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Clock_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Clock_destruct, "ti_sysbios_knl_Clock_destruct")
X
N__extern void ti_sysbios_knl_Clock_destruct(ti_sysbios_knl_Clock_Struct *obj);
Xextern void ti_sysbios_knl_Clock_destruct(ti_sysbios_knl_Clock_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__get__S, "ti_sysbios_knl_Clock_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Clock_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__first__S, "ti_sysbios_knl_Clock_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Clock_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Object__next__S, "ti_sysbios_knl_Clock_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Clock_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Clock_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Clock_Params__init__S, "ti_sysbios_knl_Clock_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Clock_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Clock_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* getTicks__E */
N#define ti_sysbios_knl_Clock_getTicks ti_sysbios_knl_Clock_getTicks__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTicks__E, "ti_sysbios_knl_Clock_getTicks")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicks__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getTicks__E( void );
N
N/* getTimerHandle__E */
N#define ti_sysbios_knl_Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTimerHandle__E, "ti_sysbios_knl_Clock_getTimerHandle")
X
N__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_getTimerHandle__E( void );
Xextern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_getTimerHandle__E( void );
N
N/* setTicks__E */
N#define ti_sysbios_knl_Clock_setTicks ti_sysbios_knl_Clock_setTicks__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_setTicks__E, "ti_sysbios_knl_Clock_setTicks")
X
N__extern xdc_Void ti_sysbios_knl_Clock_setTicks__E( xdc_UInt32 ticks );
Xextern void ti_sysbios_knl_Clock_setTicks__E( xdc_UInt32 ticks );
N
N/* tickStop__E */
N#define ti_sysbios_knl_Clock_tickStop ti_sysbios_knl_Clock_tickStop__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_tickStop__E, "ti_sysbios_knl_Clock_tickStop")
X
N__extern xdc_Void ti_sysbios_knl_Clock_tickStop__E( void );
Xextern void ti_sysbios_knl_Clock_tickStop__E( void );
N
N/* tickReconfig__E */
N#define ti_sysbios_knl_Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_tickReconfig__E, "ti_sysbios_knl_Clock_tickReconfig")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_tickReconfig__E( void );
Xextern xdc_Bool ti_sysbios_knl_Clock_tickReconfig__E( void );
N
N/* tickStart__E */
N#define ti_sysbios_knl_Clock_tickStart ti_sysbios_knl_Clock_tickStart__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_tickStart__E, "ti_sysbios_knl_Clock_tickStart")
X
N__extern xdc_Void ti_sysbios_knl_Clock_tickStart__E( void );
Xextern void ti_sysbios_knl_Clock_tickStart__E( void );
N
N/* tick__E */
N#define ti_sysbios_knl_Clock_tick ti_sysbios_knl_Clock_tick__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_tick__E, "ti_sysbios_knl_Clock_tick")
X
N__extern xdc_Void ti_sysbios_knl_Clock_tick__E( void );
Xextern void ti_sysbios_knl_Clock_tick__E( void );
N
N/* workFunc__E */
N#define ti_sysbios_knl_Clock_workFunc ti_sysbios_knl_Clock_workFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_workFunc__E, "ti_sysbios_knl_Clock_workFunc")
X
N__extern xdc_Void ti_sysbios_knl_Clock_workFunc__E( xdc_UArg arg0, xdc_UArg arg1 );
Xextern void ti_sysbios_knl_Clock_workFunc__E( xdc_UArg arg0, xdc_UArg arg1 );
N
N/* workFuncDynamic__E */
N#define ti_sysbios_knl_Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_workFuncDynamic__E, "ti_sysbios_knl_Clock_workFuncDynamic")
X
N__extern xdc_Void ti_sysbios_knl_Clock_workFuncDynamic__E( xdc_UArg arg0, xdc_UArg arg1 );
Xextern void ti_sysbios_knl_Clock_workFuncDynamic__E( xdc_UArg arg0, xdc_UArg arg1 );
N
N/* logTick__E */
N#define ti_sysbios_knl_Clock_logTick ti_sysbios_knl_Clock_logTick__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_logTick__E, "ti_sysbios_knl_Clock_logTick")
X
N__extern xdc_Void ti_sysbios_knl_Clock_logTick__E( void );
Xextern void ti_sysbios_knl_Clock_logTick__E( void );
N
N/* getCompletedTicks__E */
N#define ti_sysbios_knl_Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getCompletedTicks__E, "ti_sysbios_knl_Clock_getCompletedTicks")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getCompletedTicks__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getCompletedTicks__E( void );
N
N/* getTickPeriod__E */
N#define ti_sysbios_knl_Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTickPeriod__E, "ti_sysbios_knl_Clock_getTickPeriod")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getTickPeriod__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getTickPeriod__E( void );
N
N/* getTicksUntilInterrupt__E */
N#define ti_sysbios_knl_Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilInterrupt__E, "ti_sysbios_knl_Clock_getTicksUntilInterrupt")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilInterrupt__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilInterrupt__E( void );
N
N/* getTicksUntilTimeout__E */
N#define ti_sysbios_knl_Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilTimeout__E, "ti_sysbios_knl_Clock_getTicksUntilTimeout")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilTimeout__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilTimeout__E( void );
N
N/* walkQueueDynamic__E */
N#define ti_sysbios_knl_Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_walkQueueDynamic__E, "ti_sysbios_knl_Clock_walkQueueDynamic")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueueDynamic__E( xdc_Bool service, xdc_UInt32 tick );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_walkQueueDynamic__E( xdc_Bool service, xdc_UInt32 tick );
N
N/* walkQueuePeriodic__E */
N#define ti_sysbios_knl_Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_walkQueuePeriodic__E, "ti_sysbios_knl_Clock_walkQueuePeriodic")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueuePeriodic__E( void );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_walkQueuePeriodic__E( void );
N
N/* scheduleNextTick__E */
N#define ti_sysbios_knl_Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_scheduleNextTick__E, "ti_sysbios_knl_Clock_scheduleNextTick")
X
N__extern xdc_Void ti_sysbios_knl_Clock_scheduleNextTick__E( xdc_UInt32 deltaTicks, xdc_UInt32 absTick );
Xextern void ti_sysbios_knl_Clock_scheduleNextTick__E( xdc_UInt32 deltaTicks, xdc_UInt32 absTick );
N
N/* addI__E */
N#define ti_sysbios_knl_Clock_addI ti_sysbios_knl_Clock_addI__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_addI__E, "ti_sysbios_knl_Clock_addI")
X
N__extern xdc_Void ti_sysbios_knl_Clock_addI__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt32 timeout, xdc_UArg arg );
Xextern void ti_sysbios_knl_Clock_addI__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt32 timeout, xdc_UArg arg );
N
N/* removeI__E */
N#define ti_sysbios_knl_Clock_removeI ti_sysbios_knl_Clock_removeI__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_removeI__E, "ti_sysbios_knl_Clock_removeI")
X
N__extern xdc_Void ti_sysbios_knl_Clock_removeI__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern void ti_sysbios_knl_Clock_removeI__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* start__E */
N#define ti_sysbios_knl_Clock_start ti_sysbios_knl_Clock_start__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_start__E, "ti_sysbios_knl_Clock_start")
X
N__extern xdc_Void ti_sysbios_knl_Clock_start__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern void ti_sysbios_knl_Clock_start__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* startI__E */
N#define ti_sysbios_knl_Clock_startI ti_sysbios_knl_Clock_startI__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_startI__E, "ti_sysbios_knl_Clock_startI")
X
N__extern xdc_Void ti_sysbios_knl_Clock_startI__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern void ti_sysbios_knl_Clock_startI__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* stop__E */
N#define ti_sysbios_knl_Clock_stop ti_sysbios_knl_Clock_stop__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_stop__E, "ti_sysbios_knl_Clock_stop")
X
N__extern xdc_Void ti_sysbios_knl_Clock_stop__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern void ti_sysbios_knl_Clock_stop__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* setPeriod__E */
N#define ti_sysbios_knl_Clock_setPeriod ti_sysbios_knl_Clock_setPeriod__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_setPeriod__E, "ti_sysbios_knl_Clock_setPeriod")
X
N__extern xdc_Void ti_sysbios_knl_Clock_setPeriod__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 period );
Xextern void ti_sysbios_knl_Clock_setPeriod__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 period );
N
N/* setTimeout__E */
N#define ti_sysbios_knl_Clock_setTimeout ti_sysbios_knl_Clock_setTimeout__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_setTimeout__E, "ti_sysbios_knl_Clock_setTimeout")
X
N__extern xdc_Void ti_sysbios_knl_Clock_setTimeout__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 timeout );
Xextern void ti_sysbios_knl_Clock_setTimeout__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 timeout );
N
N/* setFunc__E */
N#define ti_sysbios_knl_Clock_setFunc ti_sysbios_knl_Clock_setFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_setFunc__E, "ti_sysbios_knl_Clock_setFunc")
X
N__extern xdc_Void ti_sysbios_knl_Clock_setFunc__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr fxn, xdc_UArg arg );
Xextern void ti_sysbios_knl_Clock_setFunc__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr fxn, xdc_UArg arg );
N
N/* getPeriod__E */
N#define ti_sysbios_knl_Clock_getPeriod ti_sysbios_knl_Clock_getPeriod__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getPeriod__E, "ti_sysbios_knl_Clock_getPeriod")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getPeriod__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getPeriod__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* getTimeout__E */
N#define ti_sysbios_knl_Clock_getTimeout ti_sysbios_knl_Clock_getTimeout__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_getTimeout__E, "ti_sysbios_knl_Clock_getTimeout")
X
N__extern xdc_UInt32 ti_sysbios_knl_Clock_getTimeout__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern xdc_UInt32 ti_sysbios_knl_Clock_getTimeout__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* isActive__E */
N#define ti_sysbios_knl_Clock_isActive ti_sysbios_knl_Clock_isActive__E
Nxdc__CODESECT(ti_sysbios_knl_Clock_isActive__E, "ti_sysbios_knl_Clock_isActive")
X
N__extern xdc_Bool ti_sysbios_knl_Clock_isActive__E( ti_sysbios_knl_Clock_Handle __inst );
Xextern xdc_Bool ti_sysbios_knl_Clock_isActive__E( ti_sysbios_knl_Clock_Handle __inst );
N
N/* doTick__I */
N#define ti_sysbios_knl_Clock_doTick ti_sysbios_knl_Clock_doTick__I
Nxdc__CODESECT(ti_sysbios_knl_Clock_doTick__I, "ti_sysbios_knl_Clock_doTick")
X
N__extern xdc_Void ti_sysbios_knl_Clock_doTick__I( xdc_UArg arg );
Xextern void ti_sysbios_knl_Clock_doTick__I( xdc_UArg arg );
N
N/* triggerFunc__I */
N#define ti_sysbios_knl_Clock_triggerFunc ti_sysbios_knl_Clock_triggerFunc__I
Nxdc__CODESECT(ti_sysbios_knl_Clock_triggerFunc__I, "ti_sysbios_knl_Clock_triggerFunc")
X
N__extern xdc_Void ti_sysbios_knl_Clock_triggerFunc__I( xdc_UArg arg );
Xextern void ti_sysbios_knl_Clock_triggerFunc__I( xdc_UArg arg );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Clock_Module_startupDone() ti_sysbios_knl_Clock_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Clock_Object_heap() ti_sysbios_knl_Clock_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Clock_Module_heap() ti_sysbios_knl_Clock_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module_id( void ) 
N{
N    return ti_sysbios_knl_Clock_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Clock_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Clock_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Clock_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Clock_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Clock_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Clock_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Clock_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Clock_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Clock_Module__diagsMask__C != NULL) *ti_sysbios_knl_Clock_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Clock_Module__diagsMask__C != 0) *ti_sysbios_knl_Clock_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Clock_Params_init( ti_sysbios_knl_Clock_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Clock_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Clock_Params_copy(ti_sysbios_knl_Clock_Params *dst, const ti_sysbios_knl_Clock_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Clock_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Clock_Object_count() ti_sysbios_knl_Clock_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Clock_Object_sizeof() ti_sysbios_knl_Clock_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_get(ti_sysbios_knl_Clock_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_first( void )
N{
N    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_next( ti_sysbios_knl_Clock_Object *obj )
N{
N    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle_label( ti_sysbios_knl_Clock_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Clock_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Clock_Handle_name( ti_sysbios_knl_Clock_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Clock_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_handle( ti_sysbios_knl_Clock_Struct *str )
N{
N    return (ti_sysbios_knl_Clock_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Clock_Struct *ti_sysbios_knl_Clock_struct( ti_sysbios_knl_Clock_Handle inst )
N{
N    return (ti_sysbios_knl_Clock_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Clock__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Clock__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Clock__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Clock__include_state
S#define ti_sysbios_knl_Clock__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Clock_Module_State {
S    volatile xdc_UInt32 ticks;
S    xdc_UInt swiCount;
S    ti_sysbios_knl_Clock_TimerProxy_Handle timer;
S    ti_sysbios_knl_Swi_Handle swi;
S    volatile xdc_UInt numTickSkip;
S    xdc_UInt32 nextScheduledTick;
S    xdc_UInt32 maxSkippable;
S    xdc_Bool inWorkFunc;
S    xdc_Bool startDuringWorkFunc;
S    xdc_Bool ticking;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Clock_Module_State__ ti_sysbios_knl_Clock_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Clock_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt32 timeout;
S    xdc_UInt32 currTimeout;
S    xdc_UInt32 period;
S    volatile xdc_Bool active;
S    ti_sysbios_knl_Clock_FuncPtr fxn;
S    xdc_UArg arg;
S};
S
S/* Module_State_clockQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Clock_Module_State_clockQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Clock_Module_State_clockQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Clock_Module__state__V) + ti_sysbios_knl_Clock_Module_State_clockQ__O);
S}
S
S#endif /* ti_sysbios_knl_Clock__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Clock__localnames__done
S#define ti_sysbios_knl_Clock__localnames__done
S
S/* module prefix */
S#define Clock_Instance ti_sysbios_knl_Clock_Instance
S#define Clock_Handle ti_sysbios_knl_Clock_Handle
S#define Clock_Module ti_sysbios_knl_Clock_Module
S#define Clock_Object ti_sysbios_knl_Clock_Object
S#define Clock_Struct ti_sysbios_knl_Clock_Struct
S#define Clock_TickSource ti_sysbios_knl_Clock_TickSource
S#define Clock_TickMode ti_sysbios_knl_Clock_TickMode
S#define Clock_FuncPtr ti_sysbios_knl_Clock_FuncPtr
S#define Clock_Instance_State ti_sysbios_knl_Clock_Instance_State
S#define Clock_Module_State ti_sysbios_knl_Clock_Module_State
S#define Clock_TickSource_TIMER ti_sysbios_knl_Clock_TickSource_TIMER
S#define Clock_TickSource_USER ti_sysbios_knl_Clock_TickSource_USER
S#define Clock_TickSource_NULL ti_sysbios_knl_Clock_TickSource_NULL
S#define Clock_TickMode_PERIODIC ti_sysbios_knl_Clock_TickMode_PERIODIC
S#define Clock_TickMode_DYNAMIC ti_sysbios_knl_Clock_TickMode_DYNAMIC
S#define Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed
S#define Clock_LM_tick ti_sysbios_knl_Clock_LM_tick
S#define Clock_LM_begin ti_sysbios_knl_Clock_LM_begin
S#define Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled
S#define Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType
S#define Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin
S#define Clock_tickSource ti_sysbios_knl_Clock_tickSource
S#define Clock_tickMode ti_sysbios_knl_Clock_tickMode
S#define Clock_timerId ti_sysbios_knl_Clock_timerId
S#define Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod
S#define Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc
S#define Clock_triggerClock ti_sysbios_knl_Clock_triggerClock
S#define Clock_Module_State_clockQ ti_sysbios_knl_Clock_Module_State_clockQ
S#define Clock_Params ti_sysbios_knl_Clock_Params
S#define Clock_getTicks ti_sysbios_knl_Clock_getTicks
S#define Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle
S#define Clock_setTicks ti_sysbios_knl_Clock_setTicks
S#define Clock_tickStop ti_sysbios_knl_Clock_tickStop
S#define Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig
S#define Clock_tickStart ti_sysbios_knl_Clock_tickStart
S#define Clock_tick ti_sysbios_knl_Clock_tick
S#define Clock_workFunc ti_sysbios_knl_Clock_workFunc
S#define Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic
S#define Clock_logTick ti_sysbios_knl_Clock_logTick
S#define Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks
S#define Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod
S#define Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt
S#define Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout
S#define Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic
S#define Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic
S#define Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick
S#define Clock_addI ti_sysbios_knl_Clock_addI
S#define Clock_removeI ti_sysbios_knl_Clock_removeI
S#define Clock_start ti_sysbios_knl_Clock_start
S#define Clock_startI ti_sysbios_knl_Clock_startI
S#define Clock_stop ti_sysbios_knl_Clock_stop
S#define Clock_setPeriod ti_sysbios_knl_Clock_setPeriod
S#define Clock_setTimeout ti_sysbios_knl_Clock_setTimeout
S#define Clock_setFunc ti_sysbios_knl_Clock_setFunc
S#define Clock_getPeriod ti_sysbios_knl_Clock_getPeriod
S#define Clock_getTimeout ti_sysbios_knl_Clock_getTimeout
S#define Clock_isActive ti_sysbios_knl_Clock_isActive
S#define Clock_Module_name ti_sysbios_knl_Clock_Module_name
S#define Clock_Module_id ti_sysbios_knl_Clock_Module_id
S#define Clock_Module_startup ti_sysbios_knl_Clock_Module_startup
S#define Clock_Module_startupDone ti_sysbios_knl_Clock_Module_startupDone
S#define Clock_Module_hasMask ti_sysbios_knl_Clock_Module_hasMask
S#define Clock_Module_getMask ti_sysbios_knl_Clock_Module_getMask
S#define Clock_Module_setMask ti_sysbios_knl_Clock_Module_setMask
S#define Clock_Object_heap ti_sysbios_knl_Clock_Object_heap
S#define Clock_Module_heap ti_sysbios_knl_Clock_Module_heap
S#define Clock_construct ti_sysbios_knl_Clock_construct
S#define Clock_create ti_sysbios_knl_Clock_create
S#define Clock_handle ti_sysbios_knl_Clock_handle
S#define Clock_struct ti_sysbios_knl_Clock_struct
S#define Clock_Handle_label ti_sysbios_knl_Clock_Handle_label
S#define Clock_Handle_name ti_sysbios_knl_Clock_Handle_name
S#define Clock_Instance_init ti_sysbios_knl_Clock_Instance_init
S#define Clock_Object_count ti_sysbios_knl_Clock_Object_count
S#define Clock_Object_get ti_sysbios_knl_Clock_Object_get
S#define Clock_Object_first ti_sysbios_knl_Clock_Object_first
S#define Clock_Object_next ti_sysbios_knl_Clock_Object_next
S#define Clock_Object_sizeof ti_sysbios_knl_Clock_Object_sizeof
S#define Clock_Params_copy ti_sysbios_knl_Clock_Params_copy
S#define Clock_Params_init ti_sysbios_knl_Clock_Params_init
S#define Clock_Instance_finalize ti_sysbios_knl_Clock_Instance_finalize
S#define Clock_delete ti_sysbios_knl_Clock_delete
S#define Clock_destruct ti_sysbios_knl_Clock_destruct
S
S/* proxies */
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S#endif /* ti_sysbios_knl_Clock__localnames__done */
N#endif
L 69 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N#include <ti/sysbios/knl/package/Task_SupportProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Task_SupportProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     MODULE-WIDE CONFIGS
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Task_SupportProxy__include
N#define ti_sysbios_knl_Task_SupportProxy__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Task_SupportProxy__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Task_SupportProxy___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 54 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Task_SupportProxy.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <ti/sysbios/interfaces/ITaskSupport.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/interfaces/ITaskSupport.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_interfaces_ITaskSupport__include
S#define ti_sysbios_interfaces_ITaskSupport__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_interfaces_ITaskSupport__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_interfaces_ITaskSupport___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <ti/sysbios/interfaces/package/package.defs.h>
S
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITaskSupport_FuncPtr)(void);
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct ti_sysbios_interfaces_ITaskSupport_Fxns__ {
S    xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2 *__sysp;
S    xdc_Ptr (*start)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
S    xdc_Void (*swap)(xdc_Ptr*, xdc_Ptr*);
S    xdc_Bool (*checkStack)(xdc_Char*, xdc_SizeT);
S    xdc_SizeT (*stackUsed)(xdc_Char*, xdc_SizeT);
S    xdc_UInt (*getStackAlignment)(void);
S    xdc_SizeT (*getDefaultStackSize)(void);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base ti_sysbios_interfaces_ITaskSupport_Interface__BASE__C;
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId ti_sysbios_interfaces_ITaskSupport_Module_id( ti_sysbios_interfaces_ITaskSupport_Module mod )
S{
S    return mod->__sysp->__mid;
S}
S
S/* start */
Sstatic inline xdc_Ptr ti_sysbios_interfaces_ITaskSupport_start( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Ptr curTask, ti_sysbios_interfaces_ITaskSupport_FuncPtr enter, ti_sysbios_interfaces_ITaskSupport_FuncPtr exit, xdc_runtime_Error_Block *eb )
S{
S    return __inst->start(curTask, enter, exit, eb);
S}
S
S/* swap */
Sstatic inline xdc_Void ti_sysbios_interfaces_ITaskSupport_swap( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext )
S{
S    __inst->swap(oldtskContext, newtskContext);
S}
S
S/* checkStack */
Sstatic inline xdc_Bool ti_sysbios_interfaces_ITaskSupport_checkStack( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Char *stack, xdc_SizeT size )
S{
S    return __inst->checkStack(stack, size);
S}
S
S/* stackUsed */
Sstatic inline xdc_SizeT ti_sysbios_interfaces_ITaskSupport_stackUsed( ti_sysbios_interfaces_ITaskSupport_Module __inst, xdc_Char *stack, xdc_SizeT size )
S{
S    return __inst->stackUsed(stack, size);
S}
S
S/* getStackAlignment */
Sstatic inline xdc_UInt ti_sysbios_interfaces_ITaskSupport_getStackAlignment( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return __inst->getStackAlignment();
S}
S
S/* getDefaultStackSize */
Sstatic inline xdc_SizeT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return __inst->getDefaultStackSize();
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S/* These functions return function pointers for module and instance functions.
S * The functions accept modules and instances declared as types defined in this
S * interface, but they return functions defined for the actual objects passed
S * as parameters. These functions are not invoked by any generated code or
S * XDCtools internal code.
S */
S
S/* start_{FxnT,fxnP} */
Stypedef xdc_Ptr (*ti_sysbios_interfaces_ITaskSupport_start_FxnT)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_start_FxnT ti_sysbios_interfaces_ITaskSupport_start_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_start_FxnT)__inst->start;
S}
S
S/* swap_{FxnT,fxnP} */
Stypedef xdc_Void (*ti_sysbios_interfaces_ITaskSupport_swap_FxnT)(xdc_Ptr*, xdc_Ptr*);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_swap_FxnT ti_sysbios_interfaces_ITaskSupport_swap_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_swap_FxnT)__inst->swap;
S}
S
S/* checkStack_{FxnT,fxnP} */
Stypedef xdc_Bool (*ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT)(xdc_Char*, xdc_SizeT);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT ti_sysbios_interfaces_ITaskSupport_checkStack_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT)__inst->checkStack;
S}
S
S/* stackUsed_{FxnT,fxnP} */
Stypedef xdc_SizeT (*ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT)(xdc_Char*, xdc_SizeT);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT ti_sysbios_interfaces_ITaskSupport_stackUsed_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT)__inst->stackUsed;
S}
S
S/* getStackAlignment_{FxnT,fxnP} */
Stypedef xdc_UInt (*ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT)(void);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT ti_sysbios_interfaces_ITaskSupport_getStackAlignment_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT)__inst->getStackAlignment;
S}
S
S/* getDefaultStackSize_{FxnT,fxnP} */
Stypedef xdc_SizeT (*ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT)(void);
Sstatic inline ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_fxnP( ti_sysbios_interfaces_ITaskSupport_Module __inst )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT)__inst->getDefaultStackSize;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_interfaces_ITaskSupport__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_interfaces_ITaskSupport__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_interfaces_ITaskSupport__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_interfaces_ITaskSupport__localnames__done
S#define ti_sysbios_interfaces_ITaskSupport__localnames__done
S
S/* module prefix */
S#define ITaskSupport_Module ti_sysbios_interfaces_ITaskSupport_Module
S#define ITaskSupport_FuncPtr ti_sysbios_interfaces_ITaskSupport_FuncPtr
S#define ITaskSupport_start ti_sysbios_interfaces_ITaskSupport_start
S#define ITaskSupport_start_fxnP ti_sysbios_interfaces_ITaskSupport_start_fxnP
S#define ITaskSupport_start_FxnT ti_sysbios_interfaces_ITaskSupport_start_FxnT
S#define ITaskSupport_swap ti_sysbios_interfaces_ITaskSupport_swap
S#define ITaskSupport_swap_fxnP ti_sysbios_interfaces_ITaskSupport_swap_fxnP
S#define ITaskSupport_swap_FxnT ti_sysbios_interfaces_ITaskSupport_swap_FxnT
S#define ITaskSupport_checkStack ti_sysbios_interfaces_ITaskSupport_checkStack
S#define ITaskSupport_checkStack_fxnP ti_sysbios_interfaces_ITaskSupport_checkStack_fxnP
S#define ITaskSupport_checkStack_FxnT ti_sysbios_interfaces_ITaskSupport_checkStack_FxnT
S#define ITaskSupport_stackUsed ti_sysbios_interfaces_ITaskSupport_stackUsed
S#define ITaskSupport_stackUsed_fxnP ti_sysbios_interfaces_ITaskSupport_stackUsed_fxnP
S#define ITaskSupport_stackUsed_FxnT ti_sysbios_interfaces_ITaskSupport_stackUsed_FxnT
S#define ITaskSupport_getStackAlignment ti_sysbios_interfaces_ITaskSupport_getStackAlignment
S#define ITaskSupport_getStackAlignment_fxnP ti_sysbios_interfaces_ITaskSupport_getStackAlignment_fxnP
S#define ITaskSupport_getStackAlignment_FxnT ti_sysbios_interfaces_ITaskSupport_getStackAlignment_FxnT
S#define ITaskSupport_getDefaultStackSize ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize
S#define ITaskSupport_getDefaultStackSize_fxnP ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_fxnP
S#define ITaskSupport_getDefaultStackSize_FxnT ti_sysbios_interfaces_ITaskSupport_getDefaultStackSize_FxnT
S#define ITaskSupport_Module_name ti_sysbios_interfaces_ITaskSupport_Module_name
S
S#endif /* ti_sysbios_interfaces_ITaskSupport__localnames__done */
N#endif
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Task_SupportProxy.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef ti_sysbios_interfaces_ITaskSupport_FuncPtr ti_sysbios_knl_Task_SupportProxy_FuncPtr;
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsMask ti_sysbios_knl_Task_SupportProxy_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsMask ti_sysbios_knl_Task_SupportProxy_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__gateObj ti_sysbios_knl_Task_SupportProxy_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__gateObj ti_sysbios_knl_Task_SupportProxy_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__gatePrms ti_sysbios_knl_Task_SupportProxy_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__gatePrms ti_sysbios_knl_Task_SupportProxy_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Task_SupportProxy_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__id ti_sysbios_knl_Task_SupportProxy_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__id ti_sysbios_knl_Task_SupportProxy_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerObj ti_sysbios_knl_Task_SupportProxy_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerObj ti_sysbios_knl_Task_SupportProxy_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Task_SupportProxy_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__count ti_sysbios_knl_Task_SupportProxy_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Object__count ti_sysbios_knl_Task_SupportProxy_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_SupportProxy_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__heap ti_sysbios_knl_Task_SupportProxy_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Object__heap ti_sysbios_knl_Task_SupportProxy_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Task_SupportProxy_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__sizeof ti_sysbios_knl_Task_SupportProxy_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Object__sizeof ti_sysbios_knl_Task_SupportProxy_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__table ti_sysbios_knl_Task_SupportProxy_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_Object__table ti_sysbios_knl_Task_SupportProxy_Object__table__C;
N
N/* defaultStackSize */
N#ifdef ti_sysbios_knl_Task_SupportProxy_defaultStackSize__D
S#define ti_sysbios_knl_Task_SupportProxy_defaultStackSize (ti_sysbios_knl_Task_SupportProxy_defaultStackSize__D)
N#else
N#define ti_sysbios_knl_Task_SupportProxy_defaultStackSize (ti_sysbios_knl_Task_SupportProxy_defaultStackSize__C)
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Task_SupportProxy_defaultStackSize;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_defaultStackSize ti_sysbios_knl_Task_SupportProxy_defaultStackSize__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_defaultStackSize ti_sysbios_knl_Task_SupportProxy_defaultStackSize__C;
N#endif
N
N/* stackAlignment */
N#ifdef ti_sysbios_knl_Task_SupportProxy_stackAlignment__D
S#define ti_sysbios_knl_Task_SupportProxy_stackAlignment (ti_sysbios_knl_Task_SupportProxy_stackAlignment__D)
N#else
N#define ti_sysbios_knl_Task_SupportProxy_stackAlignment (ti_sysbios_knl_Task_SupportProxy_stackAlignment__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Task_SupportProxy_stackAlignment;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_stackAlignment ti_sysbios_knl_Task_SupportProxy_stackAlignment__C;
Xextern  const CT__ti_sysbios_knl_Task_SupportProxy_stackAlignment ti_sysbios_knl_Task_SupportProxy_stackAlignment__C;
N#endif
N
N
N/*
N * ======== VIRTUAL FUNCTIONS ========
N */
N
N/* Fxns__ */
Nstruct ti_sysbios_knl_Task_SupportProxy_Fxns__ {
N    xdc_runtime_Types_Base* __base;
N    const xdc_runtime_Types_SysFxns2 *__sysp;
N    xdc_Ptr (*start)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
N    xdc_Void (*swap)(xdc_Ptr*, xdc_Ptr*);
X    void (*swap)(xdc_Ptr*, xdc_Ptr*);
N    xdc_Bool (*checkStack)(xdc_Char*, xdc_SizeT);
N    xdc_SizeT (*stackUsed)(xdc_Char*, xdc_SizeT);
N    xdc_UInt (*getStackAlignment)(void);
N    xdc_SizeT (*getDefaultStackSize)(void);
N    xdc_runtime_Types_SysFxns2 __sfxns;
N};
N
N/* Module__FXNS__C */
N__extern const ti_sysbios_knl_Task_SupportProxy_Fxns__ ti_sysbios_knl_Task_SupportProxy_Module__FXNS__C;
Xextern const ti_sysbios_knl_Task_SupportProxy_Fxns__ ti_sysbios_knl_Task_SupportProxy_Module__FXNS__C;
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Task_SupportProxy_Module_startup( state ) (-1)
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Handle__label__S, "ti_sysbios_knl_Task_SupportProxy_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Task_SupportProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Task_SupportProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S, "ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__create__S, "ti_sysbios_knl_Task_SupportProxy_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__delete__S, "ti_sysbios_knl_Task_SupportProxy_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Task_SupportProxy_Object__delete__S( xdc_Ptr instp );
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__destruct__S, "ti_sysbios_knl_Task_SupportProxy_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Task_SupportProxy_Object__destruct__S( xdc_Ptr objp );
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__get__S, "ti_sysbios_knl_Task_SupportProxy_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__first__S, "ti_sysbios_knl_Task_SupportProxy_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__next__S, "ti_sysbios_knl_Task_SupportProxy_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Params__init__S, "ti_sysbios_knl_Task_SupportProxy_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Task_SupportProxy_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* Proxy__abstract__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S, "ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S")
X
N__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S( void );
Xextern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S( void );
N
N/* Proxy__delegate__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S, "ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S( void );
N
N/* start__E */
N#define ti_sysbios_knl_Task_SupportProxy_start ti_sysbios_knl_Task_SupportProxy_start__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_start__E, "ti_sysbios_knl_Task_SupportProxy_start")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_start__E( xdc_Ptr curTask, ti_sysbios_interfaces_ITaskSupport_FuncPtr enter, ti_sysbios_interfaces_ITaskSupport_FuncPtr exit, xdc_runtime_Error_Block *eb );
Xextern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_start__E( xdc_Ptr curTask, ti_sysbios_interfaces_ITaskSupport_FuncPtr enter, ti_sysbios_interfaces_ITaskSupport_FuncPtr exit, xdc_runtime_Error_Block *eb );
N
N/* swap__E */
N#define ti_sysbios_knl_Task_SupportProxy_swap ti_sysbios_knl_Task_SupportProxy_swap__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_swap__E, "ti_sysbios_knl_Task_SupportProxy_swap")
X
N__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_swap__E( xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext );
Xextern void ti_sysbios_knl_Task_SupportProxy_swap__E( xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext );
N
N/* checkStack__E */
N#define ti_sysbios_knl_Task_SupportProxy_checkStack ti_sysbios_knl_Task_SupportProxy_checkStack__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_checkStack__E, "ti_sysbios_knl_Task_SupportProxy_checkStack")
X
N__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_checkStack__E( xdc_Char *stack, xdc_SizeT size );
Xextern xdc_Bool ti_sysbios_knl_Task_SupportProxy_checkStack__E( xdc_Char *stack, xdc_SizeT size );
N
N/* stackUsed__E */
N#define ti_sysbios_knl_Task_SupportProxy_stackUsed ti_sysbios_knl_Task_SupportProxy_stackUsed__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_stackUsed__E, "ti_sysbios_knl_Task_SupportProxy_stackUsed")
X
N__extern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_stackUsed__E( xdc_Char *stack, xdc_SizeT size );
Xextern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_stackUsed__E( xdc_Char *stack, xdc_SizeT size );
N
N/* getStackAlignment__E */
N#define ti_sysbios_knl_Task_SupportProxy_getStackAlignment ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E, "ti_sysbios_knl_Task_SupportProxy_getStackAlignment")
X
N__extern xdc_UInt ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E( void );
Xextern xdc_UInt ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E( void );
N
N/* getDefaultStackSize__E */
N#define ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E
Nxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E, "ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize")
X
N__extern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E( void );
Xextern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E( void );
N
N
N/*
N * ======== CONVERTORS ========
N */
N
N/* Module_upCast */
Nstatic inline ti_sysbios_interfaces_ITaskSupport_Module ti_sysbios_knl_Task_SupportProxy_Module_upCast( void )
N{
N    return (ti_sysbios_interfaces_ITaskSupport_Module)ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S();
N}
N
N/* Module_to_ti_sysbios_interfaces_ITaskSupport */
N#define ti_sysbios_knl_Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport ti_sysbios_knl_Task_SupportProxy_Module_upCast
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Task_SupportProxy_Module_startupDone() ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Task_SupportProxy_Object_heap() ti_sysbios_knl_Task_SupportProxy_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Task_SupportProxy_Module_heap() ti_sysbios_knl_Task_SupportProxy_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Task_SupportProxy_Module__id ti_sysbios_knl_Task_SupportProxy_Module_id( void ) 
N{
N    return ti_sysbios_knl_Task_SupportProxy_Module__id__C;
N}
N
N/* Proxy_abstract */
N#define ti_sysbios_knl_Task_SupportProxy_Proxy_abstract() ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S()
N
N/* Proxy_delegate */
N#define ti_sysbios_knl_Task_SupportProxy_Proxy_delegate() ((ti_sysbios_interfaces_ITaskSupport_Module)ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S())
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Task_SupportProxy__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Task_SupportProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Task_SupportProxy__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Task_SupportProxy__localnames__done
S#define ti_sysbios_knl_Task_SupportProxy__localnames__done
S
S/* module prefix */
S#define Task_SupportProxy_FuncPtr ti_sysbios_knl_Task_SupportProxy_FuncPtr
S#define Task_SupportProxy_defaultStackSize ti_sysbios_knl_Task_SupportProxy_defaultStackSize
S#define Task_SupportProxy_stackAlignment ti_sysbios_knl_Task_SupportProxy_stackAlignment
S#define Task_SupportProxy_start ti_sysbios_knl_Task_SupportProxy_start
S#define Task_SupportProxy_swap ti_sysbios_knl_Task_SupportProxy_swap
S#define Task_SupportProxy_checkStack ti_sysbios_knl_Task_SupportProxy_checkStack
S#define Task_SupportProxy_stackUsed ti_sysbios_knl_Task_SupportProxy_stackUsed
S#define Task_SupportProxy_getStackAlignment ti_sysbios_knl_Task_SupportProxy_getStackAlignment
S#define Task_SupportProxy_getDefaultStackSize ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize
S#define Task_SupportProxy_Module_name ti_sysbios_knl_Task_SupportProxy_Module_name
S#define Task_SupportProxy_Module_id ti_sysbios_knl_Task_SupportProxy_Module_id
S#define Task_SupportProxy_Module_startup ti_sysbios_knl_Task_SupportProxy_Module_startup
S#define Task_SupportProxy_Module_startupDone ti_sysbios_knl_Task_SupportProxy_Module_startupDone
S#define Task_SupportProxy_Module_hasMask ti_sysbios_knl_Task_SupportProxy_Module_hasMask
S#define Task_SupportProxy_Module_getMask ti_sysbios_knl_Task_SupportProxy_Module_getMask
S#define Task_SupportProxy_Module_setMask ti_sysbios_knl_Task_SupportProxy_Module_setMask
S#define Task_SupportProxy_Object_heap ti_sysbios_knl_Task_SupportProxy_Object_heap
S#define Task_SupportProxy_Module_heap ti_sysbios_knl_Task_SupportProxy_Module_heap
S#define Task_SupportProxy_Proxy_abstract ti_sysbios_knl_Task_SupportProxy_Proxy_abstract
S#define Task_SupportProxy_Proxy_delegate ti_sysbios_knl_Task_SupportProxy_Proxy_delegate
S#define Task_SupportProxy_Module_upCast ti_sysbios_knl_Task_SupportProxy_Module_upCast
S#define Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport ti_sysbios_knl_Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport
S
S#endif /* ti_sysbios_knl_Task_SupportProxy__localnames__done */
N#endif
L 70 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* FuncPtr */
Ntypedef xdc_Void (*ti_sysbios_knl_Task_FuncPtr)(xdc_UArg, xdc_UArg);
Xtypedef void (*ti_sysbios_knl_Task_FuncPtr)(xdc_UArg, xdc_UArg);
N
N/* AllBlockedFuncPtr */
Ntypedef xdc_Void (*ti_sysbios_knl_Task_AllBlockedFuncPtr)(xdc_Void);
Xtypedef void (*ti_sysbios_knl_Task_AllBlockedFuncPtr)(void);
N
N/* Mode */
Nenum ti_sysbios_knl_Task_Mode {
N    ti_sysbios_knl_Task_Mode_RUNNING,
N    ti_sysbios_knl_Task_Mode_READY,
N    ti_sysbios_knl_Task_Mode_BLOCKED,
N    ti_sysbios_knl_Task_Mode_TERMINATED,
N    ti_sysbios_knl_Task_Mode_INACTIVE
N};
Ntypedef enum ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_Mode;
N
N/* Stat */
Nstruct ti_sysbios_knl_Task_Stat {
N    xdc_Int priority;
N    xdc_Ptr stack;
N    xdc_SizeT stackSize;
N    xdc_runtime_IHeap_Handle stackHeap;
N    xdc_Ptr env;
N    ti_sysbios_knl_Task_Mode mode;
N    xdc_Ptr sp;
N    xdc_SizeT used;
N};
N
N/* HookSet */
Nstruct ti_sysbios_knl_Task_HookSet {
N    xdc_Void (*registerFxn)(xdc_Int);
X    void (*registerFxn)(xdc_Int);
N    xdc_Void (*createFxn)(ti_sysbios_knl_Task_Handle, xdc_runtime_Error_Block*);
X    void (*createFxn)(ti_sysbios_knl_Task_Handle, xdc_runtime_Error_Block*);
N    xdc_Void (*readyFxn)(ti_sysbios_knl_Task_Handle);
X    void (*readyFxn)(ti_sysbios_knl_Task_Handle);
N    xdc_Void (*switchFxn)(ti_sysbios_knl_Task_Handle, ti_sysbios_knl_Task_Handle);
X    void (*switchFxn)(ti_sysbios_knl_Task_Handle, ti_sysbios_knl_Task_Handle);
N    xdc_Void (*exitFxn)(ti_sysbios_knl_Task_Handle);
X    void (*exitFxn)(ti_sysbios_knl_Task_Handle);
N    xdc_Void (*deleteFxn)(ti_sysbios_knl_Task_Handle);
X    void (*deleteFxn)(ti_sysbios_knl_Task_Handle);
N};
N
N/* AFFINITY_NONE */
N#define ti_sysbios_knl_Task_AFFINITY_NONE (~(0))
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_knl_Task_Args__create {
N    ti_sysbios_knl_Task_FuncPtr fxn;
N} ti_sysbios_knl_Task_Args__create;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* PendElem */
Nstruct ti_sysbios_knl_Task_PendElem {
N    ti_sysbios_knl_Queue_Elem qElem;
N    ti_sysbios_knl_Task_Handle task;
N    ti_sysbios_knl_Clock_Handle clock;
N};
N
N/* Instance_State */
Ntypedef xdc_Char __T1_ti_sysbios_knl_Task_Instance_State__stack;
Ntypedef xdc_Char *__ARRAY1_ti_sysbios_knl_Task_Instance_State__stack;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__stack __TA_ti_sysbios_knl_Task_Instance_State__stack;
Ntypedef xdc_Ptr __T1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Ntypedef xdc_Ptr *__ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv __TA_ti_sysbios_knl_Task_Instance_State__hookEnv;
N
N/* Module_State */
Ntypedef ti_sysbios_knl_Queue_Instance_State __T1_ti_sysbios_knl_Task_Module_State__readyQ;
Ntypedef ti_sysbios_knl_Queue_Instance_State *__ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ __TA_ti_sysbios_knl_Task_Module_State__readyQ;
Ntypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Ntypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet __TA_ti_sysbios_knl_Task_Module_State__smpCurSet;
Ntypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Ntypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask __TA_ti_sysbios_knl_Task_Module_State__smpCurMask;
Ntypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Ntypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask __TA_ti_sysbios_knl_Task_Module_State__smpCurTask;
Ntypedef ti_sysbios_knl_Queue_Handle __T1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Ntypedef ti_sysbios_knl_Queue_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Ntypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__idleTask;
Ntypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask __TA_ti_sysbios_knl_Task_Module_State__idleTask;
Ntypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Ntypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks __TA_ti_sysbios_knl_Task_Module_State__constructedTasks;
N
N/* RunQEntry */
Nstruct ti_sysbios_knl_Task_RunQEntry {
N    ti_sysbios_knl_Queue_Elem elem;
N    xdc_UInt coreId;
N    xdc_Int priority;
N};
N
N/* Module_StateSmp */
Ntypedef volatile ti_sysbios_knl_Task_RunQEntry __T1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Ntypedef volatile ti_sysbios_knl_Task_RunQEntry *__ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Nstruct ti_sysbios_knl_Task_Module_StateSmp {
N    ti_sysbios_knl_Queue_Object *sortedRunQ;
N    __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ smpRunQ;
N};
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsEnabled ti_sysbios_knl_Task_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__diagsEnabled ti_sysbios_knl_Task_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsIncluded ti_sysbios_knl_Task_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__diagsIncluded ti_sysbios_knl_Task_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Task_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsMask ti_sysbios_knl_Task_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__diagsMask ti_sysbios_knl_Task_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gateObj ti_sysbios_knl_Task_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__gateObj ti_sysbios_knl_Task_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gatePrms ti_sysbios_knl_Task_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__gatePrms ti_sysbios_knl_Task_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Task_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Task_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerDefined ti_sysbios_knl_Task_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerDefined ti_sysbios_knl_Task_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerObj ti_sysbios_knl_Task_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerObj ti_sysbios_knl_Task_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Task_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn0 ti_sysbios_knl_Task_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerFxn0 ti_sysbios_knl_Task_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Task_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn1 ti_sysbios_knl_Task_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerFxn1 ti_sysbios_knl_Task_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Task_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn2 ti_sysbios_knl_Task_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerFxn2 ti_sysbios_knl_Task_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Task_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn4 ti_sysbios_knl_Task_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerFxn4 ti_sysbios_knl_Task_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Task_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn8 ti_sysbios_knl_Task_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__loggerFxn8 ti_sysbios_knl_Task_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Task_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__startupDoneFxn ti_sysbios_knl_Task_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Task_Module__startupDoneFxn ti_sysbios_knl_Task_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Task_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__count ti_sysbios_knl_Task_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Task_Object__count ti_sysbios_knl_Task_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__heap ti_sysbios_knl_Task_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Task_Object__heap ti_sysbios_knl_Task_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Task_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__sizeof ti_sysbios_knl_Task_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Task_Object__sizeof ti_sysbios_knl_Task_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Task_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__table ti_sysbios_knl_Task_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Task_Object__table ti_sysbios_knl_Task_Object__table__C;
N
N/* LM_switch */
N#define ti_sysbios_knl_Task_LM_switch (ti_sysbios_knl_Task_LM_switch__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_switch;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_switch ti_sysbios_knl_Task_LM_switch__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_switch ti_sysbios_knl_Task_LM_switch__C;
N
N/* LM_sleep */
N#define ti_sysbios_knl_Task_LM_sleep (ti_sysbios_knl_Task_LM_sleep__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_sleep;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_sleep ti_sysbios_knl_Task_LM_sleep__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_sleep ti_sysbios_knl_Task_LM_sleep__C;
N
N/* LD_ready */
N#define ti_sysbios_knl_Task_LD_ready (ti_sysbios_knl_Task_LD_ready__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_ready;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_ready ti_sysbios_knl_Task_LD_ready__C;
Xextern  const CT__ti_sysbios_knl_Task_LD_ready ti_sysbios_knl_Task_LD_ready__C;
N
N/* LD_block */
N#define ti_sysbios_knl_Task_LD_block (ti_sysbios_knl_Task_LD_block__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_block;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_block ti_sysbios_knl_Task_LD_block__C;
Xextern  const CT__ti_sysbios_knl_Task_LD_block ti_sysbios_knl_Task_LD_block__C;
N
N/* LM_yield */
N#define ti_sysbios_knl_Task_LM_yield (ti_sysbios_knl_Task_LM_yield__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_yield;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_yield ti_sysbios_knl_Task_LM_yield__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_yield ti_sysbios_knl_Task_LM_yield__C;
N
N/* LM_setPri */
N#define ti_sysbios_knl_Task_LM_setPri (ti_sysbios_knl_Task_LM_setPri__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setPri;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setPri ti_sysbios_knl_Task_LM_setPri__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_setPri ti_sysbios_knl_Task_LM_setPri__C;
N
N/* LD_exit */
N#define ti_sysbios_knl_Task_LD_exit (ti_sysbios_knl_Task_LD_exit__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_exit;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_exit ti_sysbios_knl_Task_LD_exit__C;
Xextern  const CT__ti_sysbios_knl_Task_LD_exit ti_sysbios_knl_Task_LD_exit__C;
N
N/* LM_setAffinity */
N#define ti_sysbios_knl_Task_LM_setAffinity (ti_sysbios_knl_Task_LM_setAffinity__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setAffinity;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity__C;
N
N/* LM_schedule */
N#define ti_sysbios_knl_Task_LM_schedule (ti_sysbios_knl_Task_LM_schedule__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_schedule;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_schedule ti_sysbios_knl_Task_LM_schedule__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_schedule ti_sysbios_knl_Task_LM_schedule__C;
N
N/* LM_noWork */
N#define ti_sysbios_knl_Task_LM_noWork (ti_sysbios_knl_Task_LM_noWork__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_noWork;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_noWork ti_sysbios_knl_Task_LM_noWork__C;
Xextern  const CT__ti_sysbios_knl_Task_LM_noWork ti_sysbios_knl_Task_LM_noWork__C;
N
N/* E_stackOverflow */
N#define ti_sysbios_knl_Task_E_stackOverflow (ti_sysbios_knl_Task_E_stackOverflow__C)
Ntypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_stackOverflow;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow__C;
Xextern  const CT__ti_sysbios_knl_Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow__C;
N
N/* E_spOutOfBounds */
N#define ti_sysbios_knl_Task_E_spOutOfBounds (ti_sysbios_knl_Task_E_spOutOfBounds__C)
Ntypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_spOutOfBounds;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds__C;
Xextern  const CT__ti_sysbios_knl_Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds__C;
N
N/* E_deleteNotAllowed */
N#define ti_sysbios_knl_Task_E_deleteNotAllowed (ti_sysbios_knl_Task_E_deleteNotAllowed__C)
Ntypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_deleteNotAllowed;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed__C;
Xextern  const CT__ti_sysbios_knl_Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed__C;
N
N/* A_badThreadType */
N#define ti_sysbios_knl_Task_A_badThreadType (ti_sysbios_knl_Task_A_badThreadType__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badThreadType;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType__C;
Xextern  const CT__ti_sysbios_knl_Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType__C;
N
N/* A_badTaskState */
N#define ti_sysbios_knl_Task_A_badTaskState (ti_sysbios_knl_Task_A_badTaskState__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTaskState;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState__C;
Xextern  const CT__ti_sysbios_knl_Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState__C;
N
N/* A_noPendElem */
N#define ti_sysbios_knl_Task_A_noPendElem (ti_sysbios_knl_Task_A_noPendElem__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_noPendElem;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem__C;
Xextern  const CT__ti_sysbios_knl_Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem__C;
N
N/* A_taskDisabled */
N#define ti_sysbios_knl_Task_A_taskDisabled (ti_sysbios_knl_Task_A_taskDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_taskDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled__C;
Xextern  const CT__ti_sysbios_knl_Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled__C;
N
N/* A_badPriority */
N#define ti_sysbios_knl_Task_A_badPriority (ti_sysbios_knl_Task_A_badPriority__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badPriority;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badPriority ti_sysbios_knl_Task_A_badPriority__C;
Xextern  const CT__ti_sysbios_knl_Task_A_badPriority ti_sysbios_knl_Task_A_badPriority__C;
N
N/* A_badTimeout */
N#define ti_sysbios_knl_Task_A_badTimeout (ti_sysbios_knl_Task_A_badTimeout__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTimeout;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout__C;
Xextern  const CT__ti_sysbios_knl_Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout__C;
N
N/* A_badAffinity */
N#define ti_sysbios_knl_Task_A_badAffinity (ti_sysbios_knl_Task_A_badAffinity__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badAffinity;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity__C;
Xextern  const CT__ti_sysbios_knl_Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity__C;
N
N/* A_sleepTaskDisabled */
N#define ti_sysbios_knl_Task_A_sleepTaskDisabled (ti_sysbios_knl_Task_A_sleepTaskDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_sleepTaskDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled__C;
Xextern  const CT__ti_sysbios_knl_Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled__C;
N
N/* A_invalidCoreId */
N#define ti_sysbios_knl_Task_A_invalidCoreId (ti_sysbios_knl_Task_A_invalidCoreId__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_invalidCoreId;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId__C;
Xextern  const CT__ti_sysbios_knl_Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId__C;
N
N/* numPriorities */
N#ifdef ti_sysbios_knl_Task_numPriorities__D
S#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__D)
N#else
N#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Task_numPriorities;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_numPriorities ti_sysbios_knl_Task_numPriorities__C;
Xextern  const CT__ti_sysbios_knl_Task_numPriorities ti_sysbios_knl_Task_numPriorities__C;
N#endif
N
N/* defaultStackSize */
N#ifdef ti_sysbios_knl_Task_defaultStackSize__D
S#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__D)
N#else
N#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__C)
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Task_defaultStackSize;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize__C;
Xextern  const CT__ti_sysbios_knl_Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize__C;
N#endif
N
N/* defaultStackHeap */
N#define ti_sysbios_knl_Task_defaultStackHeap (ti_sysbios_knl_Task_defaultStackHeap__C)
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_defaultStackHeap;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap__C;
Xextern  const CT__ti_sysbios_knl_Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap__C;
N
N/* allBlockedFunc */
N#define ti_sysbios_knl_Task_allBlockedFunc (ti_sysbios_knl_Task_allBlockedFunc__C)
Ntypedef ti_sysbios_knl_Task_AllBlockedFuncPtr CT__ti_sysbios_knl_Task_allBlockedFunc;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc__C;
Xextern  const CT__ti_sysbios_knl_Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc__C;
N
N/* initStackFlag */
N#ifdef ti_sysbios_knl_Task_initStackFlag__D
S#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__D)
N#else
N#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__C)
Ntypedef xdc_Bool CT__ti_sysbios_knl_Task_initStackFlag;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_initStackFlag ti_sysbios_knl_Task_initStackFlag__C;
Xextern  const CT__ti_sysbios_knl_Task_initStackFlag ti_sysbios_knl_Task_initStackFlag__C;
N#endif
N
N/* checkStackFlag */
N#ifdef ti_sysbios_knl_Task_checkStackFlag__D
S#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__D)
N#else
N#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__C)
Ntypedef xdc_Bool CT__ti_sysbios_knl_Task_checkStackFlag;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag__C;
Xextern  const CT__ti_sysbios_knl_Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag__C;
N#endif
N
N/* deleteTerminatedTasks */
N#ifdef ti_sysbios_knl_Task_deleteTerminatedTasks__D
S#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__D)
N#else
N#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__C)
Ntypedef xdc_Bool CT__ti_sysbios_knl_Task_deleteTerminatedTasks;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks__C;
Xextern  const CT__ti_sysbios_knl_Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks__C;
N#endif
N
N/* hooks */
N#define ti_sysbios_knl_Task_hooks (ti_sysbios_knl_Task_hooks__C)
Ntypedef ti_sysbios_knl_Task_HookSet __T1_ti_sysbios_knl_Task_hooks;
Ntypedef struct { int length; ti_sysbios_knl_Task_HookSet *elem; } __ARRAY1_ti_sysbios_knl_Task_hooks;
Ntypedef __ARRAY1_ti_sysbios_knl_Task_hooks __TA_ti_sysbios_knl_Task_hooks;
Ntypedef __TA_ti_sysbios_knl_Task_hooks CT__ti_sysbios_knl_Task_hooks;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_hooks ti_sysbios_knl_Task_hooks__C;
Xextern  const CT__ti_sysbios_knl_Task_hooks ti_sysbios_knl_Task_hooks__C;
N
N/* numConstructedTasks */
N#ifdef ti_sysbios_knl_Task_numConstructedTasks__D
S#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__D)
N#else
N#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__C)
Ntypedef xdc_UInt CT__ti_sysbios_knl_Task_numConstructedTasks;
N__extern __FAR__ const CT__ti_sysbios_knl_Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks__C;
Xextern  const CT__ti_sysbios_knl_Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks__C;
N#endif
N
N/* startupHookFunc */
N#define ti_sysbios_knl_Task_startupHookFunc (ti_sysbios_knl_Task_startupHookFunc__C)
Ntypedef xdc_Void (*CT__ti_sysbios_knl_Task_startupHookFunc)(xdc_Void);
Xtypedef void (*CT__ti_sysbios_knl_Task_startupHookFunc)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc__C;
Xextern  const CT__ti_sysbios_knl_Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Task_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_UArg arg0;
N    xdc_UArg arg1;
N    xdc_Int priority;
N    xdc_Ptr stack;
N    xdc_SizeT stackSize;
N    xdc_runtime_IHeap_Handle stackHeap;
N    xdc_Ptr env;
N    xdc_Bool vitalTaskFlag;
N    xdc_UInt affinity;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Task_Struct {
N    ti_sysbios_knl_Queue_Elem __f0;
N    volatile xdc_Int __f1;
N    xdc_UInt __f2;
N    xdc_Ptr __f3;
N    ti_sysbios_knl_Task_Mode __f4;
N    ti_sysbios_knl_Task_PendElem *__f5;
N    xdc_SizeT __f6;
N    __TA_ti_sysbios_knl_Task_Instance_State__stack __f7;
N    xdc_runtime_IHeap_Handle __f8;
N    ti_sysbios_knl_Task_FuncPtr __f9;
N    xdc_UArg __f10;
N    xdc_UArg __f11;
N    xdc_Ptr __f12;
N    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv __f13;
N    xdc_Bool __f14;
N    ti_sysbios_knl_Queue_Handle __f15;
N    xdc_UInt __f16;
N    xdc_UInt __f17;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Task_Module_startup ti_sysbios_knl_Task_Module_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__E, "ti_sysbios_knl_Task_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Task_Module_startup__E( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Task_Module_startup__E( xdc_Int state );
Nxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__F, "ti_sysbios_knl_Task_Module_startup")
X
N__extern xdc_Int ti_sysbios_knl_Task_Module_startup__F( xdc_Int state );
Xextern xdc_Int ti_sysbios_knl_Task_Module_startup__F( xdc_Int state );
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Task_Instance_init__E, "ti_sysbios_knl_Task_Instance_init")
X
N__extern xdc_Int ti_sysbios_knl_Task_Instance_init__E(ti_sysbios_knl_Task_Object *, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *, xdc_runtime_Error_Block *);
Xextern xdc_Int ti_sysbios_knl_Task_Instance_init__E(ti_sysbios_knl_Task_Object *, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *, xdc_runtime_Error_Block *);
N
N/* Instance_finalize__E */
Nxdc__CODESECT(ti_sysbios_knl_Task_Instance_finalize__E, "ti_sysbios_knl_Task_Instance_finalize")
X
N__extern void ti_sysbios_knl_Task_Instance_finalize__E( ti_sysbios_knl_Task_Object* , int );
Xextern void ti_sysbios_knl_Task_Instance_finalize__E( ti_sysbios_knl_Task_Object* , int );
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Handle__label__S, "ti_sysbios_knl_Task_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Module__startupDone__S, "ti_sysbios_knl_Task_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Task_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Task_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__create__S, "ti_sysbios_knl_Task_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Task_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Task_create, "ti_sysbios_knl_Task_create")
X
N__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_create( ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_create( ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Task_construct, "ti_sysbios_knl_Task_construct")
X
N__extern void ti_sysbios_knl_Task_construct( ti_sysbios_knl_Task_Struct *__obj, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern void ti_sysbios_knl_Task_construct( ti_sysbios_knl_Task_Struct *__obj, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__delete__S, "ti_sysbios_knl_Task_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Task_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Task_delete, "ti_sysbios_knl_Task_delete")
X
N__extern void ti_sysbios_knl_Task_delete(ti_sysbios_knl_Task_Handle *instp);
Xextern void ti_sysbios_knl_Task_delete(ti_sysbios_knl_Task_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__destruct__S, "ti_sysbios_knl_Task_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Task_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Task_destruct, "ti_sysbios_knl_Task_destruct")
X
N__extern void ti_sysbios_knl_Task_destruct(ti_sysbios_knl_Task_Struct *obj);
Xextern void ti_sysbios_knl_Task_destruct(ti_sysbios_knl_Task_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__get__S, "ti_sysbios_knl_Task_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Task_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__first__S, "ti_sysbios_knl_Task_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Task_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Object__next__S, "ti_sysbios_knl_Task_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Task_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Task_Params__init__S, "ti_sysbios_knl_Task_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Task_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Task_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* startup__E */
N#define ti_sysbios_knl_Task_startup ti_sysbios_knl_Task_startup__E
Nxdc__CODESECT(ti_sysbios_knl_Task_startup__E, "ti_sysbios_knl_Task_startup")
X
N__extern xdc_Void ti_sysbios_knl_Task_startup__E( void );
Xextern void ti_sysbios_knl_Task_startup__E( void );
N
N/* enabled__E */
N#define ti_sysbios_knl_Task_enabled ti_sysbios_knl_Task_enabled__E
Nxdc__CODESECT(ti_sysbios_knl_Task_enabled__E, "ti_sysbios_knl_Task_enabled")
X
N__extern xdc_Bool ti_sysbios_knl_Task_enabled__E( void );
Xextern xdc_Bool ti_sysbios_knl_Task_enabled__E( void );
N
N/* unlockSched__E */
N#define ti_sysbios_knl_Task_unlockSched ti_sysbios_knl_Task_unlockSched__E
Nxdc__CODESECT(ti_sysbios_knl_Task_unlockSched__E, "ti_sysbios_knl_Task_unlockSched")
X
N__extern xdc_Void ti_sysbios_knl_Task_unlockSched__E( void );
Xextern void ti_sysbios_knl_Task_unlockSched__E( void );
N
N/* disable__E */
N#define ti_sysbios_knl_Task_disable ti_sysbios_knl_Task_disable__E
Nxdc__CODESECT(ti_sysbios_knl_Task_disable__E, "ti_sysbios_knl_Task_disable")
X
N__extern xdc_UInt ti_sysbios_knl_Task_disable__E( void );
Xextern xdc_UInt ti_sysbios_knl_Task_disable__E( void );
N
N/* enable__E */
N#define ti_sysbios_knl_Task_enable ti_sysbios_knl_Task_enable__E
Nxdc__CODESECT(ti_sysbios_knl_Task_enable__E, "ti_sysbios_knl_Task_enable")
X
N__extern xdc_Void ti_sysbios_knl_Task_enable__E( void );
Xextern void ti_sysbios_knl_Task_enable__E( void );
N
N/* restore__E */
N#define ti_sysbios_knl_Task_restore ti_sysbios_knl_Task_restore__E
Nxdc__CODESECT(ti_sysbios_knl_Task_restore__E, "ti_sysbios_knl_Task_restore")
X
N__extern xdc_Void ti_sysbios_knl_Task_restore__E( xdc_UInt key );
Xextern void ti_sysbios_knl_Task_restore__E( xdc_UInt key );
N
N/* restoreHwi__E */
N#define ti_sysbios_knl_Task_restoreHwi ti_sysbios_knl_Task_restoreHwi__E
Nxdc__CODESECT(ti_sysbios_knl_Task_restoreHwi__E, "ti_sysbios_knl_Task_restoreHwi")
X
N__extern xdc_Void ti_sysbios_knl_Task_restoreHwi__E( xdc_UInt key );
Xextern void ti_sysbios_knl_Task_restoreHwi__E( xdc_UInt key );
N
N/* self__E */
N#define ti_sysbios_knl_Task_self ti_sysbios_knl_Task_self__E
Nxdc__CODESECT(ti_sysbios_knl_Task_self__E, "ti_sysbios_knl_Task_self")
X
N__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_self__E( void );
Xextern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_self__E( void );
N
N/* checkStacks__E */
N#define ti_sysbios_knl_Task_checkStacks ti_sysbios_knl_Task_checkStacks__E
Nxdc__CODESECT(ti_sysbios_knl_Task_checkStacks__E, "ti_sysbios_knl_Task_checkStacks")
X
N__extern xdc_Void ti_sysbios_knl_Task_checkStacks__E( ti_sysbios_knl_Task_Handle oldTask, ti_sysbios_knl_Task_Handle newTask );
Xextern void ti_sysbios_knl_Task_checkStacks__E( ti_sysbios_knl_Task_Handle oldTask, ti_sysbios_knl_Task_Handle newTask );
N
N/* exit__E */
N#define ti_sysbios_knl_Task_exit ti_sysbios_knl_Task_exit__E
Nxdc__CODESECT(ti_sysbios_knl_Task_exit__E, "ti_sysbios_knl_Task_exit")
X
N__extern xdc_Void ti_sysbios_knl_Task_exit__E( void );
Xextern void ti_sysbios_knl_Task_exit__E( void );
N
N/* sleep__E */
N#define ti_sysbios_knl_Task_sleep ti_sysbios_knl_Task_sleep__E
Nxdc__CODESECT(ti_sysbios_knl_Task_sleep__E, "ti_sysbios_knl_Task_sleep")
X
N__extern xdc_Void ti_sysbios_knl_Task_sleep__E( xdc_UInt32 nticks );
Xextern void ti_sysbios_knl_Task_sleep__E( xdc_UInt32 nticks );
N
N/* yield__E */
N#define ti_sysbios_knl_Task_yield ti_sysbios_knl_Task_yield__E
Nxdc__CODESECT(ti_sysbios_knl_Task_yield__E, "ti_sysbios_knl_Task_yield")
X
N__extern xdc_Void ti_sysbios_knl_Task_yield__E( void );
Xextern void ti_sysbios_knl_Task_yield__E( void );
N
N/* getIdleTask__E */
N#define ti_sysbios_knl_Task_getIdleTask ti_sysbios_knl_Task_getIdleTask__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getIdleTask__E, "ti_sysbios_knl_Task_getIdleTask")
X
N__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTask__E( void );
Xextern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTask__E( void );
N
N/* getIdleTaskHandle__E */
N#define ti_sysbios_knl_Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getIdleTaskHandle__E, "ti_sysbios_knl_Task_getIdleTaskHandle")
X
N__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTaskHandle__E( xdc_UInt coreId );
Xextern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTaskHandle__E( xdc_UInt coreId );
N
N/* startCore__E */
N#define ti_sysbios_knl_Task_startCore ti_sysbios_knl_Task_startCore__E
Nxdc__CODESECT(ti_sysbios_knl_Task_startCore__E, "ti_sysbios_knl_Task_startCore")
X
N__extern xdc_Void ti_sysbios_knl_Task_startCore__E( xdc_UInt coreId );
Xextern void ti_sysbios_knl_Task_startCore__E( xdc_UInt coreId );
N
N/* getArg0__E */
N#define ti_sysbios_knl_Task_getArg0 ti_sysbios_knl_Task_getArg0__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getArg0__E, "ti_sysbios_knl_Task_getArg0")
X
N__extern xdc_UArg ti_sysbios_knl_Task_getArg0__E( ti_sysbios_knl_Task_Handle __inst );
Xextern xdc_UArg ti_sysbios_knl_Task_getArg0__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* getArg1__E */
N#define ti_sysbios_knl_Task_getArg1 ti_sysbios_knl_Task_getArg1__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getArg1__E, "ti_sysbios_knl_Task_getArg1")
X
N__extern xdc_UArg ti_sysbios_knl_Task_getArg1__E( ti_sysbios_knl_Task_Handle __inst );
Xextern xdc_UArg ti_sysbios_knl_Task_getArg1__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* getEnv__E */
N#define ti_sysbios_knl_Task_getEnv ti_sysbios_knl_Task_getEnv__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getEnv__E, "ti_sysbios_knl_Task_getEnv")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_getEnv__E( ti_sysbios_knl_Task_Handle __inst );
Xextern xdc_Ptr ti_sysbios_knl_Task_getEnv__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* getFunc__E */
N#define ti_sysbios_knl_Task_getFunc ti_sysbios_knl_Task_getFunc__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getFunc__E, "ti_sysbios_knl_Task_getFunc")
X
N__extern ti_sysbios_knl_Task_FuncPtr ti_sysbios_knl_Task_getFunc__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
Xextern ti_sysbios_knl_Task_FuncPtr ti_sysbios_knl_Task_getFunc__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
N
N/* getHookContext__E */
N#define ti_sysbios_knl_Task_getHookContext ti_sysbios_knl_Task_getHookContext__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getHookContext__E, "ti_sysbios_knl_Task_getHookContext")
X
N__extern xdc_Ptr ti_sysbios_knl_Task_getHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id );
Xextern xdc_Ptr ti_sysbios_knl_Task_getHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id );
N
N/* getPri__E */
N#define ti_sysbios_knl_Task_getPri ti_sysbios_knl_Task_getPri__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getPri__E, "ti_sysbios_knl_Task_getPri")
X
N__extern xdc_Int ti_sysbios_knl_Task_getPri__E( ti_sysbios_knl_Task_Handle __inst );
Xextern xdc_Int ti_sysbios_knl_Task_getPri__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* setArg0__E */
N#define ti_sysbios_knl_Task_setArg0 ti_sysbios_knl_Task_setArg0__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setArg0__E, "ti_sysbios_knl_Task_setArg0")
X
N__extern xdc_Void ti_sysbios_knl_Task_setArg0__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
Xextern void ti_sysbios_knl_Task_setArg0__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
N
N/* setArg1__E */
N#define ti_sysbios_knl_Task_setArg1 ti_sysbios_knl_Task_setArg1__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setArg1__E, "ti_sysbios_knl_Task_setArg1")
X
N__extern xdc_Void ti_sysbios_knl_Task_setArg1__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
Xextern void ti_sysbios_knl_Task_setArg1__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
N
N/* setEnv__E */
N#define ti_sysbios_knl_Task_setEnv ti_sysbios_knl_Task_setEnv__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setEnv__E, "ti_sysbios_knl_Task_setEnv")
X
N__extern xdc_Void ti_sysbios_knl_Task_setEnv__E( ti_sysbios_knl_Task_Handle __inst, xdc_Ptr env );
Xextern void ti_sysbios_knl_Task_setEnv__E( ti_sysbios_knl_Task_Handle __inst, xdc_Ptr env );
N
N/* setHookContext__E */
N#define ti_sysbios_knl_Task_setHookContext ti_sysbios_knl_Task_setHookContext__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setHookContext__E, "ti_sysbios_knl_Task_setHookContext")
X
N__extern xdc_Void ti_sysbios_knl_Task_setHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
Xextern void ti_sysbios_knl_Task_setHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
N
N/* setPri__E */
N#define ti_sysbios_knl_Task_setPri ti_sysbios_knl_Task_setPri__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setPri__E, "ti_sysbios_knl_Task_setPri")
X
N__extern xdc_UInt ti_sysbios_knl_Task_setPri__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int newpri );
Xextern xdc_UInt ti_sysbios_knl_Task_setPri__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int newpri );
N
N/* stat__E */
N#define ti_sysbios_knl_Task_stat ti_sysbios_knl_Task_stat__E
Nxdc__CODESECT(ti_sysbios_knl_Task_stat__E, "ti_sysbios_knl_Task_stat")
X
N__extern xdc_Void ti_sysbios_knl_Task_stat__E( ti_sysbios_knl_Task_Handle __inst, ti_sysbios_knl_Task_Stat *statbuf );
Xextern void ti_sysbios_knl_Task_stat__E( ti_sysbios_knl_Task_Handle __inst, ti_sysbios_knl_Task_Stat *statbuf );
N
N/* getMode__E */
N#define ti_sysbios_knl_Task_getMode ti_sysbios_knl_Task_getMode__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getMode__E, "ti_sysbios_knl_Task_getMode")
X
N__extern ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_getMode__E( ti_sysbios_knl_Task_Handle __inst );
Xextern ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_getMode__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* setAffinity__E */
N#define ti_sysbios_knl_Task_setAffinity ti_sysbios_knl_Task_setAffinity__E
Nxdc__CODESECT(ti_sysbios_knl_Task_setAffinity__E, "ti_sysbios_knl_Task_setAffinity")
X
N__extern xdc_UInt ti_sysbios_knl_Task_setAffinity__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt coreId );
Xextern xdc_UInt ti_sysbios_knl_Task_setAffinity__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt coreId );
N
N/* getAffinity__E */
N#define ti_sysbios_knl_Task_getAffinity ti_sysbios_knl_Task_getAffinity__E
Nxdc__CODESECT(ti_sysbios_knl_Task_getAffinity__E, "ti_sysbios_knl_Task_getAffinity")
X
N__extern xdc_UInt ti_sysbios_knl_Task_getAffinity__E( ti_sysbios_knl_Task_Handle __inst );
Xextern xdc_UInt ti_sysbios_knl_Task_getAffinity__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* block__E */
N#define ti_sysbios_knl_Task_block ti_sysbios_knl_Task_block__E
Nxdc__CODESECT(ti_sysbios_knl_Task_block__E, "ti_sysbios_knl_Task_block")
X
N__extern xdc_Void ti_sysbios_knl_Task_block__E( ti_sysbios_knl_Task_Handle __inst );
Xextern void ti_sysbios_knl_Task_block__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* unblock__E */
N#define ti_sysbios_knl_Task_unblock ti_sysbios_knl_Task_unblock__E
Nxdc__CODESECT(ti_sysbios_knl_Task_unblock__E, "ti_sysbios_knl_Task_unblock")
X
N__extern xdc_Void ti_sysbios_knl_Task_unblock__E( ti_sysbios_knl_Task_Handle __inst );
Xextern void ti_sysbios_knl_Task_unblock__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* blockI__E */
N#define ti_sysbios_knl_Task_blockI ti_sysbios_knl_Task_blockI__E
Nxdc__CODESECT(ti_sysbios_knl_Task_blockI__E, "ti_sysbios_knl_Task_blockI")
X
N__extern xdc_Void ti_sysbios_knl_Task_blockI__E( ti_sysbios_knl_Task_Handle __inst );
Xextern void ti_sysbios_knl_Task_blockI__E( ti_sysbios_knl_Task_Handle __inst );
N
N/* unblockI__E */
N#define ti_sysbios_knl_Task_unblockI ti_sysbios_knl_Task_unblockI__E
Nxdc__CODESECT(ti_sysbios_knl_Task_unblockI__E, "ti_sysbios_knl_Task_unblockI")
X
N__extern xdc_Void ti_sysbios_knl_Task_unblockI__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt hwiKey );
Xextern void ti_sysbios_knl_Task_unblockI__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt hwiKey );
N
N/* schedule__I */
N#define ti_sysbios_knl_Task_schedule ti_sysbios_knl_Task_schedule__I
Nxdc__CODESECT(ti_sysbios_knl_Task_schedule__I, "ti_sysbios_knl_Task_schedule")
X
N__extern xdc_Void ti_sysbios_knl_Task_schedule__I( void );
Xextern void ti_sysbios_knl_Task_schedule__I( void );
N
N/* enter__I */
N#define ti_sysbios_knl_Task_enter ti_sysbios_knl_Task_enter__I
Nxdc__CODESECT(ti_sysbios_knl_Task_enter__I, "ti_sysbios_knl_Task_enter")
X
N__extern xdc_Void ti_sysbios_knl_Task_enter__I( void );
Xextern void ti_sysbios_knl_Task_enter__I( void );
N
N/* sleepTimeout__I */
N#define ti_sysbios_knl_Task_sleepTimeout ti_sysbios_knl_Task_sleepTimeout__I
Nxdc__CODESECT(ti_sysbios_knl_Task_sleepTimeout__I, "ti_sysbios_knl_Task_sleepTimeout")
X
N__extern xdc_Void ti_sysbios_knl_Task_sleepTimeout__I( xdc_UArg arg );
Xextern void ti_sysbios_knl_Task_sleepTimeout__I( xdc_UArg arg );
N
N/* postInit__I */
N#define ti_sysbios_knl_Task_postInit ti_sysbios_knl_Task_postInit__I
Nxdc__CODESECT(ti_sysbios_knl_Task_postInit__I, "ti_sysbios_knl_Task_postInit")
X
N__extern xdc_Int ti_sysbios_knl_Task_postInit__I( ti_sysbios_knl_Task_Object *task, xdc_runtime_Error_Block *eb );
Xextern xdc_Int ti_sysbios_knl_Task_postInit__I( ti_sysbios_knl_Task_Object *task, xdc_runtime_Error_Block *eb );
N
N/* allBlockedFunction__I */
N#define ti_sysbios_knl_Task_allBlockedFunction ti_sysbios_knl_Task_allBlockedFunction__I
Nxdc__CODESECT(ti_sysbios_knl_Task_allBlockedFunction__I, "ti_sysbios_knl_Task_allBlockedFunction")
X
N__extern xdc_Void ti_sysbios_knl_Task_allBlockedFunction__I( void );
Xextern void ti_sysbios_knl_Task_allBlockedFunction__I( void );
N
N/* deleteTerminatedTasksFunc__I */
N#define ti_sysbios_knl_Task_deleteTerminatedTasksFunc ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I
Nxdc__CODESECT(ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I, "ti_sysbios_knl_Task_deleteTerminatedTasksFunc")
X
N__extern xdc_Void ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I( void );
Xextern void ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I( void );
N
N/* processVitalTaskFlag__I */
N#define ti_sysbios_knl_Task_processVitalTaskFlag ti_sysbios_knl_Task_processVitalTaskFlag__I
Nxdc__CODESECT(ti_sysbios_knl_Task_processVitalTaskFlag__I, "ti_sysbios_knl_Task_processVitalTaskFlag")
X
N__extern xdc_Void ti_sysbios_knl_Task_processVitalTaskFlag__I( ti_sysbios_knl_Task_Object *task );
Xextern void ti_sysbios_knl_Task_processVitalTaskFlag__I( ti_sysbios_knl_Task_Object *task );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Task_Module_startupDone() ti_sysbios_knl_Task_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Task_Object_heap() ti_sysbios_knl_Task_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Task_Module_heap() ti_sysbios_knl_Task_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module_id( void ) 
N{
N    return ti_sysbios_knl_Task_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Task_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Task_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Task_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Task_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Task_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Task_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Task_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Task_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Task_Module__diagsMask__C != NULL) *ti_sysbios_knl_Task_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Task_Module__diagsMask__C != 0) *ti_sysbios_knl_Task_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Task_Params_init( ti_sysbios_knl_Task_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Task_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Task_Params_copy(ti_sysbios_knl_Task_Params *dst, const ti_sysbios_knl_Task_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Task_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Task_Object_count() ti_sysbios_knl_Task_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Task_Object_sizeof() ti_sysbios_knl_Task_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_get(ti_sysbios_knl_Task_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_first( void )
N{
N    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_next( ti_sysbios_knl_Task_Object *obj )
N{
N    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle_label( ti_sysbios_knl_Task_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Task_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Task_Handle_name( ti_sysbios_knl_Task_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Task_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_handle( ti_sysbios_knl_Task_Struct *str )
N{
N    return (ti_sysbios_knl_Task_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Task_Struct *ti_sysbios_knl_Task_struct( ti_sysbios_knl_Task_Handle inst )
N{
N    return (ti_sysbios_knl_Task_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <ti/sysbios/knl/Task__epilogue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task__epilogue.h" 1
N/*
N * Copyright (c) 2012-2014, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*
N *  ======== Task_selfMacro ========
N */
N
N#define ti_sysbios_knl_Task_selfMacro() (ti_sysbios_knl_Task_self())
N
N#ifdef __cplusplus
S}
N#endif
L 882 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N
N#ifdef ti_sysbios_knl_Task__top__
N#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Task__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Task__internalaccess))
X#if 0L || (!0L && 0L)
S
S#ifndef ti_sysbios_knl_Task__include_state
S#define ti_sysbios_knl_Task__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Task_Module_State {
S    volatile xdc_Bool locked;
S    volatile xdc_UInt curSet;
S    xdc_Bool workFlag;
S    xdc_UInt vitalTasks;
S    ti_sysbios_knl_Task_Handle curTask;
S    ti_sysbios_knl_Queue_Handle curQ;
S    __TA_ti_sysbios_knl_Task_Module_State__readyQ readyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurSet smpCurSet;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurMask smpCurMask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurTask smpCurTask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ smpReadyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__idleTask idleTask;
S    __TA_ti_sysbios_knl_Task_Module_State__constructedTasks constructedTasks;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Task_Module_State__ ti_sysbios_knl_Task_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Task_Object {
S    ti_sysbios_knl_Queue_Elem qElem;
S    volatile xdc_Int priority;
S    xdc_UInt mask;
S    xdc_Ptr context;
S    ti_sysbios_knl_Task_Mode mode;
S    ti_sysbios_knl_Task_PendElem *pendElem;
S    xdc_SizeT stackSize;
S    __TA_ti_sysbios_knl_Task_Instance_State__stack stack;
S    xdc_runtime_IHeap_Handle stackHeap;
S    ti_sysbios_knl_Task_FuncPtr fxn;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_Ptr env;
S    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv hookEnv;
S    xdc_Bool vitalTaskFlag;
S    ti_sysbios_knl_Queue_Handle readyQ;
S    xdc_UInt curCoreId;
S    xdc_UInt affinity;
S};
S
S/* Module_State_inactiveQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_inactiveQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_inactiveQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_inactiveQ__O);
S}
S
S/* Module_State_terminatedQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_terminatedQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_terminatedQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_terminatedQ__O);
S}
S
S#endif /* ti_sysbios_knl_Task__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Task__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Task__localnames__done
N#define ti_sysbios_knl_Task__localnames__done
N
N/* module prefix */
N#define Task_Instance ti_sysbios_knl_Task_Instance
N#define Task_Handle ti_sysbios_knl_Task_Handle
N#define Task_Module ti_sysbios_knl_Task_Module
N#define Task_Object ti_sysbios_knl_Task_Object
N#define Task_Struct ti_sysbios_knl_Task_Struct
N#define Task_FuncPtr ti_sysbios_knl_Task_FuncPtr
N#define Task_AllBlockedFuncPtr ti_sysbios_knl_Task_AllBlockedFuncPtr
N#define Task_Mode ti_sysbios_knl_Task_Mode
N#define Task_Stat ti_sysbios_knl_Task_Stat
N#define Task_HookSet ti_sysbios_knl_Task_HookSet
N#define Task_AFFINITY_NONE ti_sysbios_knl_Task_AFFINITY_NONE
N#define Task_PendElem ti_sysbios_knl_Task_PendElem
N#define Task_Instance_State ti_sysbios_knl_Task_Instance_State
N#define Task_Module_State ti_sysbios_knl_Task_Module_State
N#define Task_RunQEntry ti_sysbios_knl_Task_RunQEntry
N#define Task_Module_StateSmp ti_sysbios_knl_Task_Module_StateSmp
N#define Task_Mode_RUNNING ti_sysbios_knl_Task_Mode_RUNNING
N#define Task_Mode_READY ti_sysbios_knl_Task_Mode_READY
N#define Task_Mode_BLOCKED ti_sysbios_knl_Task_Mode_BLOCKED
N#define Task_Mode_TERMINATED ti_sysbios_knl_Task_Mode_TERMINATED
N#define Task_Mode_INACTIVE ti_sysbios_knl_Task_Mode_INACTIVE
N#define Task_LM_switch ti_sysbios_knl_Task_LM_switch
N#define Task_LM_sleep ti_sysbios_knl_Task_LM_sleep
N#define Task_LD_ready ti_sysbios_knl_Task_LD_ready
N#define Task_LD_block ti_sysbios_knl_Task_LD_block
N#define Task_LM_yield ti_sysbios_knl_Task_LM_yield
N#define Task_LM_setPri ti_sysbios_knl_Task_LM_setPri
N#define Task_LD_exit ti_sysbios_knl_Task_LD_exit
N#define Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity
N#define Task_LM_schedule ti_sysbios_knl_Task_LM_schedule
N#define Task_LM_noWork ti_sysbios_knl_Task_LM_noWork
N#define Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow
N#define Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds
N#define Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed
N#define Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType
N#define Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState
N#define Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem
N#define Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled
N#define Task_A_badPriority ti_sysbios_knl_Task_A_badPriority
N#define Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout
N#define Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity
N#define Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled
N#define Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId
N#define Task_numPriorities ti_sysbios_knl_Task_numPriorities
N#define Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize
N#define Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap
N#define Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc
N#define Task_initStackFlag ti_sysbios_knl_Task_initStackFlag
N#define Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag
N#define Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks
N#define Task_hooks ti_sysbios_knl_Task_hooks
N#define Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks
N#define Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc
N#define Task_Module_State_inactiveQ ti_sysbios_knl_Task_Module_State_inactiveQ
N#define Task_Module_State_terminatedQ ti_sysbios_knl_Task_Module_State_terminatedQ
N#define Task_Params ti_sysbios_knl_Task_Params
N#define Task_startup ti_sysbios_knl_Task_startup
N#define Task_enabled ti_sysbios_knl_Task_enabled
N#define Task_unlockSched ti_sysbios_knl_Task_unlockSched
N#define Task_disable ti_sysbios_knl_Task_disable
N#define Task_enable ti_sysbios_knl_Task_enable
N#define Task_restore ti_sysbios_knl_Task_restore
N#define Task_restoreHwi ti_sysbios_knl_Task_restoreHwi
N#define Task_self ti_sysbios_knl_Task_self
N#define Task_selfMacro ti_sysbios_knl_Task_selfMacro
N#define Task_checkStacks ti_sysbios_knl_Task_checkStacks
N#define Task_exit ti_sysbios_knl_Task_exit
N#define Task_sleep ti_sysbios_knl_Task_sleep
N#define Task_yield ti_sysbios_knl_Task_yield
N#define Task_getIdleTask ti_sysbios_knl_Task_getIdleTask
N#define Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle
N#define Task_startCore ti_sysbios_knl_Task_startCore
N#define Task_getArg0 ti_sysbios_knl_Task_getArg0
N#define Task_getArg1 ti_sysbios_knl_Task_getArg1
N#define Task_getEnv ti_sysbios_knl_Task_getEnv
N#define Task_getFunc ti_sysbios_knl_Task_getFunc
N#define Task_getHookContext ti_sysbios_knl_Task_getHookContext
N#define Task_getPri ti_sysbios_knl_Task_getPri
N#define Task_setArg0 ti_sysbios_knl_Task_setArg0
N#define Task_setArg1 ti_sysbios_knl_Task_setArg1
N#define Task_setEnv ti_sysbios_knl_Task_setEnv
N#define Task_setHookContext ti_sysbios_knl_Task_setHookContext
N#define Task_setPri ti_sysbios_knl_Task_setPri
N#define Task_stat ti_sysbios_knl_Task_stat
N#define Task_getMode ti_sysbios_knl_Task_getMode
N#define Task_setAffinity ti_sysbios_knl_Task_setAffinity
N#define Task_getAffinity ti_sysbios_knl_Task_getAffinity
N#define Task_block ti_sysbios_knl_Task_block
N#define Task_unblock ti_sysbios_knl_Task_unblock
N#define Task_blockI ti_sysbios_knl_Task_blockI
N#define Task_unblockI ti_sysbios_knl_Task_unblockI
N#define Task_Module_name ti_sysbios_knl_Task_Module_name
N#define Task_Module_id ti_sysbios_knl_Task_Module_id
N#define Task_Module_startup ti_sysbios_knl_Task_Module_startup
N#define Task_Module_startupDone ti_sysbios_knl_Task_Module_startupDone
N#define Task_Module_hasMask ti_sysbios_knl_Task_Module_hasMask
N#define Task_Module_getMask ti_sysbios_knl_Task_Module_getMask
N#define Task_Module_setMask ti_sysbios_knl_Task_Module_setMask
N#define Task_Object_heap ti_sysbios_knl_Task_Object_heap
N#define Task_Module_heap ti_sysbios_knl_Task_Module_heap
N#define Task_construct ti_sysbios_knl_Task_construct
N#define Task_create ti_sysbios_knl_Task_create
N#define Task_handle ti_sysbios_knl_Task_handle
N#define Task_struct ti_sysbios_knl_Task_struct
N#define Task_Handle_label ti_sysbios_knl_Task_Handle_label
N#define Task_Handle_name ti_sysbios_knl_Task_Handle_name
N#define Task_Instance_init ti_sysbios_knl_Task_Instance_init
N#define Task_Object_count ti_sysbios_knl_Task_Object_count
N#define Task_Object_get ti_sysbios_knl_Task_Object_get
N#define Task_Object_first ti_sysbios_knl_Task_Object_first
N#define Task_Object_next ti_sysbios_knl_Task_Object_next
N#define Task_Object_sizeof ti_sysbios_knl_Task_Object_sizeof
N#define Task_Params_copy ti_sysbios_knl_Task_Params_copy
N#define Task_Params_init ti_sysbios_knl_Task_Params_init
N#define Task_Instance_finalize ti_sysbios_knl_Task_Instance_finalize
N#define Task_delete ti_sysbios_knl_Task_delete
N#define Task_destruct ti_sysbios_knl_Task_destruct
N
N/* proxies */
N#include <ti/sysbios/knl/package/Task_SupportProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Task_SupportProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     MODULE-WIDE CONFIGS
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Task_SupportProxy__include
S#define ti_sysbios_knl_Task_SupportProxy__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Task_SupportProxy__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Task_SupportProxy___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <ti/sysbios/interfaces/ITaskSupport.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef ti_sysbios_interfaces_ITaskSupport_FuncPtr ti_sysbios_knl_Task_SupportProxy_FuncPtr;
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled ti_sysbios_knl_Task_SupportProxy_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded ti_sysbios_knl_Task_SupportProxy_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__diagsMask ti_sysbios_knl_Task_SupportProxy_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__gateObj ti_sysbios_knl_Task_SupportProxy_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__gatePrms ti_sysbios_knl_Task_SupportProxy_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Task_SupportProxy_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__id ti_sysbios_knl_Task_SupportProxy_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined ti_sysbios_knl_Task_SupportProxy_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerObj ti_sysbios_knl_Task_SupportProxy_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8 ti_sysbios_knl_Task_SupportProxy_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn ti_sysbios_knl_Task_SupportProxy_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Task_SupportProxy_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__count ti_sysbios_knl_Task_SupportProxy_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_SupportProxy_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__heap ti_sysbios_knl_Task_SupportProxy_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_SupportProxy_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__sizeof ti_sysbios_knl_Task_SupportProxy_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_SupportProxy_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_Object__table ti_sysbios_knl_Task_SupportProxy_Object__table__C;
S
S/* defaultStackSize */
S#ifdef ti_sysbios_knl_Task_SupportProxy_defaultStackSize__D
S#define ti_sysbios_knl_Task_SupportProxy_defaultStackSize (ti_sysbios_knl_Task_SupportProxy_defaultStackSize__D)
S#else
S#define ti_sysbios_knl_Task_SupportProxy_defaultStackSize (ti_sysbios_knl_Task_SupportProxy_defaultStackSize__C)
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_SupportProxy_defaultStackSize;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_defaultStackSize ti_sysbios_knl_Task_SupportProxy_defaultStackSize__C;
S#endif
S
S/* stackAlignment */
S#ifdef ti_sysbios_knl_Task_SupportProxy_stackAlignment__D
S#define ti_sysbios_knl_Task_SupportProxy_stackAlignment (ti_sysbios_knl_Task_SupportProxy_stackAlignment__D)
S#else
S#define ti_sysbios_knl_Task_SupportProxy_stackAlignment (ti_sysbios_knl_Task_SupportProxy_stackAlignment__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Task_SupportProxy_stackAlignment;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_SupportProxy_stackAlignment ti_sysbios_knl_Task_SupportProxy_stackAlignment__C;
S#endif
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct ti_sysbios_knl_Task_SupportProxy_Fxns__ {
S    xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2 *__sysp;
S    xdc_Ptr (*start)(xdc_Ptr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, ti_sysbios_interfaces_ITaskSupport_FuncPtr, xdc_runtime_Error_Block*);
S    xdc_Void (*swap)(xdc_Ptr*, xdc_Ptr*);
S    xdc_Bool (*checkStack)(xdc_Char*, xdc_SizeT);
S    xdc_SizeT (*stackUsed)(xdc_Char*, xdc_SizeT);
S    xdc_UInt (*getStackAlignment)(void);
S    xdc_SizeT (*getDefaultStackSize)(void);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S
S/* Module__FXNS__C */
S__extern const ti_sysbios_knl_Task_SupportProxy_Fxns__ ti_sysbios_knl_Task_SupportProxy_Module__FXNS__C;
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Task_SupportProxy_Module_startup( state ) (-1)
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Handle__label__S, "ti_sysbios_knl_Task_SupportProxy_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Task_SupportProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S, "ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__create__S, "ti_sysbios_knl_Task_SupportProxy_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__delete__S, "ti_sysbios_knl_Task_SupportProxy_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Object__delete__S( xdc_Ptr instp );
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__destruct__S, "ti_sysbios_knl_Task_SupportProxy_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Object__destruct__S( xdc_Ptr objp );
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__get__S, "ti_sysbios_knl_Task_SupportProxy_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__first__S, "ti_sysbios_knl_Task_SupportProxy_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Object__next__S, "ti_sysbios_knl_Task_SupportProxy_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Params__init__S, "ti_sysbios_knl_Task_SupportProxy_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* Proxy__abstract__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S, "ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S")
S__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S( void );
S
S/* Proxy__delegate__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S, "ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S( void );
S
S/* start__E */
S#define ti_sysbios_knl_Task_SupportProxy_start ti_sysbios_knl_Task_SupportProxy_start__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_start__E, "ti_sysbios_knl_Task_SupportProxy_start")
S__extern xdc_Ptr ti_sysbios_knl_Task_SupportProxy_start__E( xdc_Ptr curTask, ti_sysbios_interfaces_ITaskSupport_FuncPtr enter, ti_sysbios_interfaces_ITaskSupport_FuncPtr exit, xdc_runtime_Error_Block *eb );
S
S/* swap__E */
S#define ti_sysbios_knl_Task_SupportProxy_swap ti_sysbios_knl_Task_SupportProxy_swap__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_swap__E, "ti_sysbios_knl_Task_SupportProxy_swap")
S__extern xdc_Void ti_sysbios_knl_Task_SupportProxy_swap__E( xdc_Ptr *oldtskContext, xdc_Ptr *newtskContext );
S
S/* checkStack__E */
S#define ti_sysbios_knl_Task_SupportProxy_checkStack ti_sysbios_knl_Task_SupportProxy_checkStack__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_checkStack__E, "ti_sysbios_knl_Task_SupportProxy_checkStack")
S__extern xdc_Bool ti_sysbios_knl_Task_SupportProxy_checkStack__E( xdc_Char *stack, xdc_SizeT size );
S
S/* stackUsed__E */
S#define ti_sysbios_knl_Task_SupportProxy_stackUsed ti_sysbios_knl_Task_SupportProxy_stackUsed__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_stackUsed__E, "ti_sysbios_knl_Task_SupportProxy_stackUsed")
S__extern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_stackUsed__E( xdc_Char *stack, xdc_SizeT size );
S
S/* getStackAlignment__E */
S#define ti_sysbios_knl_Task_SupportProxy_getStackAlignment ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E, "ti_sysbios_knl_Task_SupportProxy_getStackAlignment")
S__extern xdc_UInt ti_sysbios_knl_Task_SupportProxy_getStackAlignment__E( void );
S
S/* getDefaultStackSize__E */
S#define ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E
Sxdc__CODESECT(ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E, "ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize")
S__extern xdc_SizeT ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize__E( void );
S
S
S/*
S * ======== CONVERTORS ========
S */
S
S/* Module_upCast */
Sstatic inline ti_sysbios_interfaces_ITaskSupport_Module ti_sysbios_knl_Task_SupportProxy_Module_upCast( void )
S{
S    return (ti_sysbios_interfaces_ITaskSupport_Module)ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S();
S}
S
S/* Module_to_ti_sysbios_interfaces_ITaskSupport */
S#define ti_sysbios_knl_Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport ti_sysbios_knl_Task_SupportProxy_Module_upCast
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Task_SupportProxy_Module_startupDone() ti_sysbios_knl_Task_SupportProxy_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Task_SupportProxy_Object_heap() ti_sysbios_knl_Task_SupportProxy_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Task_SupportProxy_Module_heap() ti_sysbios_knl_Task_SupportProxy_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Task_SupportProxy_Module__id ti_sysbios_knl_Task_SupportProxy_Module_id( void ) 
S{
S    return ti_sysbios_knl_Task_SupportProxy_Module__id__C;
S}
S
S/* Proxy_abstract */
S#define ti_sysbios_knl_Task_SupportProxy_Proxy_abstract() ti_sysbios_knl_Task_SupportProxy_Proxy__abstract__S()
S
S/* Proxy_delegate */
S#define ti_sysbios_knl_Task_SupportProxy_Proxy_delegate() ((ti_sysbios_interfaces_ITaskSupport_Module)ti_sysbios_knl_Task_SupportProxy_Proxy__delegate__S())
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Task_SupportProxy__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Task_SupportProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Task_SupportProxy__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Task_SupportProxy__localnames__done
N#define ti_sysbios_knl_Task_SupportProxy__localnames__done
N
N/* module prefix */
N#define Task_SupportProxy_FuncPtr ti_sysbios_knl_Task_SupportProxy_FuncPtr
N#define Task_SupportProxy_defaultStackSize ti_sysbios_knl_Task_SupportProxy_defaultStackSize
N#define Task_SupportProxy_stackAlignment ti_sysbios_knl_Task_SupportProxy_stackAlignment
N#define Task_SupportProxy_start ti_sysbios_knl_Task_SupportProxy_start
N#define Task_SupportProxy_swap ti_sysbios_knl_Task_SupportProxy_swap
N#define Task_SupportProxy_checkStack ti_sysbios_knl_Task_SupportProxy_checkStack
N#define Task_SupportProxy_stackUsed ti_sysbios_knl_Task_SupportProxy_stackUsed
N#define Task_SupportProxy_getStackAlignment ti_sysbios_knl_Task_SupportProxy_getStackAlignment
N#define Task_SupportProxy_getDefaultStackSize ti_sysbios_knl_Task_SupportProxy_getDefaultStackSize
N#define Task_SupportProxy_Module_name ti_sysbios_knl_Task_SupportProxy_Module_name
N#define Task_SupportProxy_Module_id ti_sysbios_knl_Task_SupportProxy_Module_id
N#define Task_SupportProxy_Module_startup ti_sysbios_knl_Task_SupportProxy_Module_startup
N#define Task_SupportProxy_Module_startupDone ti_sysbios_knl_Task_SupportProxy_Module_startupDone
N#define Task_SupportProxy_Module_hasMask ti_sysbios_knl_Task_SupportProxy_Module_hasMask
N#define Task_SupportProxy_Module_getMask ti_sysbios_knl_Task_SupportProxy_Module_getMask
N#define Task_SupportProxy_Module_setMask ti_sysbios_knl_Task_SupportProxy_Module_setMask
N#define Task_SupportProxy_Object_heap ti_sysbios_knl_Task_SupportProxy_Object_heap
N#define Task_SupportProxy_Module_heap ti_sysbios_knl_Task_SupportProxy_Module_heap
N#define Task_SupportProxy_Proxy_abstract ti_sysbios_knl_Task_SupportProxy_Proxy_abstract
N#define Task_SupportProxy_Proxy_delegate ti_sysbios_knl_Task_SupportProxy_Proxy_delegate
N#define Task_SupportProxy_Module_upCast ti_sysbios_knl_Task_SupportProxy_Module_upCast
N#define Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport ti_sysbios_knl_Task_SupportProxy_Module_to_ti_sysbios_interfaces_ITaskSupport
N
N#endif /* ti_sysbios_knl_Task_SupportProxy__localnames__done */
N#endif
L 1091 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 2
N
N#endif /* ti_sysbios_knl_Task__localnames__done */
N#endif
L 40 "../bme280.c" 2
N#include <ti/sysbios/knl/Clock.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock__include
S#define ti_sysbios_knl_Clock__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Clock___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Assert.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/interfaces/ITimer.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <ti/sysbios/knl/Swi.h>
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* TickSource */
Senum ti_sysbios_knl_Clock_TickSource {
S    ti_sysbios_knl_Clock_TickSource_TIMER,
S    ti_sysbios_knl_Clock_TickSource_USER,
S    ti_sysbios_knl_Clock_TickSource_NULL
S};
Stypedef enum ti_sysbios_knl_Clock_TickSource ti_sysbios_knl_Clock_TickSource;
S
S/* TickMode */
Senum ti_sysbios_knl_Clock_TickMode {
S    ti_sysbios_knl_Clock_TickMode_PERIODIC,
S    ti_sysbios_knl_Clock_TickMode_DYNAMIC
S};
Stypedef enum ti_sysbios_knl_Clock_TickMode ti_sysbios_knl_Clock_TickMode;
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Clock_FuncPtr)(xdc_UArg);
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Clock_Args__create {
S    ti_sysbios_knl_Clock_FuncPtr clockFxn;
S    xdc_UInt timeout;
S} ti_sysbios_knl_Clock_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsEnabled ti_sysbios_knl_Clock_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsIncluded ti_sysbios_knl_Clock_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsMask ti_sysbios_knl_Clock_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gateObj ti_sysbios_knl_Clock_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gatePrms ti_sysbios_knl_Clock_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Clock_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerDefined ti_sysbios_knl_Clock_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerObj ti_sysbios_knl_Clock_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn0 ti_sysbios_knl_Clock_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn1 ti_sysbios_knl_Clock_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn2 ti_sysbios_knl_Clock_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn4 ti_sysbios_knl_Clock_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn8 ti_sysbios_knl_Clock_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__startupDoneFxn ti_sysbios_knl_Clock_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Clock_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__count ti_sysbios_knl_Clock_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__heap ti_sysbios_knl_Clock_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Clock_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__sizeof ti_sysbios_knl_Clock_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__table ti_sysbios_knl_Clock_Object__table__C;
S
S/* LW_delayed */
S#define ti_sysbios_knl_Clock_LW_delayed (ti_sysbios_knl_Clock_LW_delayed__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LW_delayed;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed__C;
S
S/* LM_tick */
S#define ti_sysbios_knl_Clock_LM_tick (ti_sysbios_knl_Clock_LM_tick__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_tick;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_tick ti_sysbios_knl_Clock_LM_tick__C;
S
S/* LM_begin */
S#define ti_sysbios_knl_Clock_LM_begin (ti_sysbios_knl_Clock_LM_begin__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_begin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_begin ti_sysbios_knl_Clock_LM_begin__C;
S
S/* A_clockDisabled */
S#define ti_sysbios_knl_Clock_A_clockDisabled (ti_sysbios_knl_Clock_A_clockDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_clockDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled__C;
S
S/* A_badThreadType */
S#define ti_sysbios_knl_Clock_A_badThreadType (ti_sysbios_knl_Clock_A_badThreadType__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_badThreadType;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType__C;
S
S/* serviceMargin */
S#ifdef ti_sysbios_knl_Clock_serviceMargin__D
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__D)
S#else
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_serviceMargin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin__C;
S#endif
S
S/* tickSource */
S#define ti_sysbios_knl_Clock_tickSource (ti_sysbios_knl_Clock_tickSource__C)
Stypedef ti_sysbios_knl_Clock_TickSource CT__ti_sysbios_knl_Clock_tickSource;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickSource ti_sysbios_knl_Clock_tickSource__C;
S
S/* tickMode */
S#define ti_sysbios_knl_Clock_tickMode (ti_sysbios_knl_Clock_tickMode__C)
Stypedef ti_sysbios_knl_Clock_TickMode CT__ti_sysbios_knl_Clock_tickMode;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickMode ti_sysbios_knl_Clock_tickMode__C;
S
S/* timerId */
S#ifdef ti_sysbios_knl_Clock_timerId__D
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__D)
S#else
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Clock_timerId;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_timerId ti_sysbios_knl_Clock_timerId__C;
S#endif
S
S/* tickPeriod */
S#ifdef ti_sysbios_knl_Clock_tickPeriod__D
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__D)
S#else
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_tickPeriod;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod__C;
S#endif
S
S/* doTickFunc */
S#define ti_sysbios_knl_Clock_doTickFunc (ti_sysbios_knl_Clock_doTickFunc__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Clock_doTickFunc)(xdc_UArg);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc__C;
S
S/* triggerClock */
S#define ti_sysbios_knl_Clock_triggerClock (ti_sysbios_knl_Clock_triggerClock__C)
Stypedef ti_sysbios_knl_Clock_Handle CT__ti_sysbios_knl_Clock_triggerClock;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_triggerClock ti_sysbios_knl_Clock_triggerClock__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Clock_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_Bool startFlag;
S    xdc_UInt32 period;
S    xdc_UArg arg;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Clock_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_UInt32 __f1;
S    xdc_UInt32 __f2;
S    xdc_UInt32 __f3;
S    volatile xdc_Bool __f4;
S    ti_sysbios_knl_Clock_FuncPtr __f5;
S    xdc_UArg __f6;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Clock_Module_startup ti_sysbios_knl_Clock_Module_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__E, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__E( xdc_Int state );
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__F, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__F( xdc_Int state );
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_init__E, "ti_sysbios_knl_Clock_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Clock_Instance_init__E(ti_sysbios_knl_Clock_Object *, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_finalize__E, "ti_sysbios_knl_Clock_Instance_finalize")
S__extern void ti_sysbios_knl_Clock_Instance_finalize__E( ti_sysbios_knl_Clock_Object* );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Handle__label__S, "ti_sysbios_knl_Clock_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module__startupDone__S, "ti_sysbios_knl_Clock_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Clock_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__create__S, "ti_sysbios_knl_Clock_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Clock_create, "ti_sysbios_knl_Clock_create")
S__extern ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_create( ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_construct, "ti_sysbios_knl_Clock_construct")
S__extern void ti_sysbios_knl_Clock_construct( ti_sysbios_knl_Clock_Struct *__obj, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__delete__S, "ti_sysbios_knl_Clock_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Clock_delete, "ti_sysbios_knl_Clock_delete")
S__extern void ti_sysbios_knl_Clock_delete(ti_sysbios_knl_Clock_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__destruct__S, "ti_sysbios_knl_Clock_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_destruct, "ti_sysbios_knl_Clock_destruct")
S__extern void ti_sysbios_knl_Clock_destruct(ti_sysbios_knl_Clock_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__get__S, "ti_sysbios_knl_Clock_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__first__S, "ti_sysbios_knl_Clock_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__next__S, "ti_sysbios_knl_Clock_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Params__init__S, "ti_sysbios_knl_Clock_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* getTicks__E */
S#define ti_sysbios_knl_Clock_getTicks ti_sysbios_knl_Clock_getTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicks__E, "ti_sysbios_knl_Clock_getTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicks__E( void );
S
S/* getTimerHandle__E */
S#define ti_sysbios_knl_Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimerHandle__E, "ti_sysbios_knl_Clock_getTimerHandle")
S__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_getTimerHandle__E( void );
S
S/* setTicks__E */
S#define ti_sysbios_knl_Clock_setTicks ti_sysbios_knl_Clock_setTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTicks__E, "ti_sysbios_knl_Clock_setTicks")
S__extern xdc_Void ti_sysbios_knl_Clock_setTicks__E( xdc_UInt32 ticks );
S
S/* tickStop__E */
S#define ti_sysbios_knl_Clock_tickStop ti_sysbios_knl_Clock_tickStop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStop__E, "ti_sysbios_knl_Clock_tickStop")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStop__E( void );
S
S/* tickReconfig__E */
S#define ti_sysbios_knl_Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickReconfig__E, "ti_sysbios_knl_Clock_tickReconfig")
S__extern xdc_Bool ti_sysbios_knl_Clock_tickReconfig__E( void );
S
S/* tickStart__E */
S#define ti_sysbios_knl_Clock_tickStart ti_sysbios_knl_Clock_tickStart__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStart__E, "ti_sysbios_knl_Clock_tickStart")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStart__E( void );
S
S/* tick__E */
S#define ti_sysbios_knl_Clock_tick ti_sysbios_knl_Clock_tick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tick__E, "ti_sysbios_knl_Clock_tick")
S__extern xdc_Void ti_sysbios_knl_Clock_tick__E( void );
S
S/* workFunc__E */
S#define ti_sysbios_knl_Clock_workFunc ti_sysbios_knl_Clock_workFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFunc__E, "ti_sysbios_knl_Clock_workFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_workFunc__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* workFuncDynamic__E */
S#define ti_sysbios_knl_Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFuncDynamic__E, "ti_sysbios_knl_Clock_workFuncDynamic")
S__extern xdc_Void ti_sysbios_knl_Clock_workFuncDynamic__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* logTick__E */
S#define ti_sysbios_knl_Clock_logTick ti_sysbios_knl_Clock_logTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_logTick__E, "ti_sysbios_knl_Clock_logTick")
S__extern xdc_Void ti_sysbios_knl_Clock_logTick__E( void );
S
S/* getCompletedTicks__E */
S#define ti_sysbios_knl_Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getCompletedTicks__E, "ti_sysbios_knl_Clock_getCompletedTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getCompletedTicks__E( void );
S
S/* getTickPeriod__E */
S#define ti_sysbios_knl_Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTickPeriod__E, "ti_sysbios_knl_Clock_getTickPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTickPeriod__E( void );
S
S/* getTicksUntilInterrupt__E */
S#define ti_sysbios_knl_Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilInterrupt__E, "ti_sysbios_knl_Clock_getTicksUntilInterrupt")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilInterrupt__E( void );
S
S/* getTicksUntilTimeout__E */
S#define ti_sysbios_knl_Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilTimeout__E, "ti_sysbios_knl_Clock_getTicksUntilTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilTimeout__E( void );
S
S/* walkQueueDynamic__E */
S#define ti_sysbios_knl_Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueueDynamic__E, "ti_sysbios_knl_Clock_walkQueueDynamic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueueDynamic__E( xdc_Bool service, xdc_UInt32 tick );
S
S/* walkQueuePeriodic__E */
S#define ti_sysbios_knl_Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueuePeriodic__E, "ti_sysbios_knl_Clock_walkQueuePeriodic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueuePeriodic__E( void );
S
S/* scheduleNextTick__E */
S#define ti_sysbios_knl_Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_scheduleNextTick__E, "ti_sysbios_knl_Clock_scheduleNextTick")
S__extern xdc_Void ti_sysbios_knl_Clock_scheduleNextTick__E( xdc_UInt32 deltaTicks, xdc_UInt32 absTick );
S
S/* addI__E */
S#define ti_sysbios_knl_Clock_addI ti_sysbios_knl_Clock_addI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_addI__E, "ti_sysbios_knl_Clock_addI")
S__extern xdc_Void ti_sysbios_knl_Clock_addI__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt32 timeout, xdc_UArg arg );
S
S/* removeI__E */
S#define ti_sysbios_knl_Clock_removeI ti_sysbios_knl_Clock_removeI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_removeI__E, "ti_sysbios_knl_Clock_removeI")
S__extern xdc_Void ti_sysbios_knl_Clock_removeI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* start__E */
S#define ti_sysbios_knl_Clock_start ti_sysbios_knl_Clock_start__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_start__E, "ti_sysbios_knl_Clock_start")
S__extern xdc_Void ti_sysbios_knl_Clock_start__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* startI__E */
S#define ti_sysbios_knl_Clock_startI ti_sysbios_knl_Clock_startI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_startI__E, "ti_sysbios_knl_Clock_startI")
S__extern xdc_Void ti_sysbios_knl_Clock_startI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* stop__E */
S#define ti_sysbios_knl_Clock_stop ti_sysbios_knl_Clock_stop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_stop__E, "ti_sysbios_knl_Clock_stop")
S__extern xdc_Void ti_sysbios_knl_Clock_stop__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* setPeriod__E */
S#define ti_sysbios_knl_Clock_setPeriod ti_sysbios_knl_Clock_setPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setPeriod__E, "ti_sysbios_knl_Clock_setPeriod")
S__extern xdc_Void ti_sysbios_knl_Clock_setPeriod__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 period );
S
S/* setTimeout__E */
S#define ti_sysbios_knl_Clock_setTimeout ti_sysbios_knl_Clock_setTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTimeout__E, "ti_sysbios_knl_Clock_setTimeout")
S__extern xdc_Void ti_sysbios_knl_Clock_setTimeout__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 timeout );
S
S/* setFunc__E */
S#define ti_sysbios_knl_Clock_setFunc ti_sysbios_knl_Clock_setFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setFunc__E, "ti_sysbios_knl_Clock_setFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_setFunc__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr fxn, xdc_UArg arg );
S
S/* getPeriod__E */
S#define ti_sysbios_knl_Clock_getPeriod ti_sysbios_knl_Clock_getPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getPeriod__E, "ti_sysbios_knl_Clock_getPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getPeriod__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* getTimeout__E */
S#define ti_sysbios_knl_Clock_getTimeout ti_sysbios_knl_Clock_getTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimeout__E, "ti_sysbios_knl_Clock_getTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTimeout__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* isActive__E */
S#define ti_sysbios_knl_Clock_isActive ti_sysbios_knl_Clock_isActive__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_isActive__E, "ti_sysbios_knl_Clock_isActive")
S__extern xdc_Bool ti_sysbios_knl_Clock_isActive__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* doTick__I */
S#define ti_sysbios_knl_Clock_doTick ti_sysbios_knl_Clock_doTick__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_doTick__I, "ti_sysbios_knl_Clock_doTick")
S__extern xdc_Void ti_sysbios_knl_Clock_doTick__I( xdc_UArg arg );
S
S/* triggerFunc__I */
S#define ti_sysbios_knl_Clock_triggerFunc ti_sysbios_knl_Clock_triggerFunc__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_triggerFunc__I, "ti_sysbios_knl_Clock_triggerFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_triggerFunc__I( xdc_UArg arg );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Clock_Module_startupDone() ti_sysbios_knl_Clock_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Clock_Object_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Clock_Module_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module_id( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Clock_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Clock_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Clock_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Clock_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Clock_Module__diagsMask__C != NULL) *ti_sysbios_knl_Clock_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Clock_Params_init( ti_sysbios_knl_Clock_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Clock_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Clock_Params_copy(ti_sysbios_knl_Clock_Params *dst, const ti_sysbios_knl_Clock_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Clock_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Clock_Object_count() ti_sysbios_knl_Clock_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Clock_Object_sizeof() ti_sysbios_knl_Clock_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_get(ti_sysbios_knl_Clock_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_first( void )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_next( ti_sysbios_knl_Clock_Object *obj )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle_label( ti_sysbios_knl_Clock_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Clock_Handle_name( ti_sysbios_knl_Clock_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_handle( ti_sysbios_knl_Clock_Struct *str )
S{
S    return (ti_sysbios_knl_Clock_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Clock_Struct *ti_sysbios_knl_Clock_struct( ti_sysbios_knl_Clock_Handle inst )
S{
S    return (ti_sysbios_knl_Clock_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Clock__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Clock__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Clock__internalaccess))
X#if 0L || (!0L && 0L)
S
S#ifndef ti_sysbios_knl_Clock__include_state
S#define ti_sysbios_knl_Clock__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Clock_Module_State {
S    volatile xdc_UInt32 ticks;
S    xdc_UInt swiCount;
S    ti_sysbios_knl_Clock_TimerProxy_Handle timer;
S    ti_sysbios_knl_Swi_Handle swi;
S    volatile xdc_UInt numTickSkip;
S    xdc_UInt32 nextScheduledTick;
S    xdc_UInt32 maxSkippable;
S    xdc_Bool inWorkFunc;
S    xdc_Bool startDuringWorkFunc;
S    xdc_Bool ticking;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Clock_Module_State__ ti_sysbios_knl_Clock_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Clock_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt32 timeout;
S    xdc_UInt32 currTimeout;
S    xdc_UInt32 period;
S    volatile xdc_Bool active;
S    ti_sysbios_knl_Clock_FuncPtr fxn;
S    xdc_UArg arg;
S};
S
S/* Module_State_clockQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Clock_Module_State_clockQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Clock_Module_State_clockQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Clock_Module__state__V) + ti_sysbios_knl_Clock_Module_State_clockQ__O);
S}
S
S#endif /* ti_sysbios_knl_Clock__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Clock__localnames__done
N#define ti_sysbios_knl_Clock__localnames__done
N
N/* module prefix */
N#define Clock_Instance ti_sysbios_knl_Clock_Instance
N#define Clock_Handle ti_sysbios_knl_Clock_Handle
N#define Clock_Module ti_sysbios_knl_Clock_Module
N#define Clock_Object ti_sysbios_knl_Clock_Object
N#define Clock_Struct ti_sysbios_knl_Clock_Struct
N#define Clock_TickSource ti_sysbios_knl_Clock_TickSource
N#define Clock_TickMode ti_sysbios_knl_Clock_TickMode
N#define Clock_FuncPtr ti_sysbios_knl_Clock_FuncPtr
N#define Clock_Instance_State ti_sysbios_knl_Clock_Instance_State
N#define Clock_Module_State ti_sysbios_knl_Clock_Module_State
N#define Clock_TickSource_TIMER ti_sysbios_knl_Clock_TickSource_TIMER
N#define Clock_TickSource_USER ti_sysbios_knl_Clock_TickSource_USER
N#define Clock_TickSource_NULL ti_sysbios_knl_Clock_TickSource_NULL
N#define Clock_TickMode_PERIODIC ti_sysbios_knl_Clock_TickMode_PERIODIC
N#define Clock_TickMode_DYNAMIC ti_sysbios_knl_Clock_TickMode_DYNAMIC
N#define Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed
N#define Clock_LM_tick ti_sysbios_knl_Clock_LM_tick
N#define Clock_LM_begin ti_sysbios_knl_Clock_LM_begin
N#define Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled
N#define Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType
N#define Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin
N#define Clock_tickSource ti_sysbios_knl_Clock_tickSource
N#define Clock_tickMode ti_sysbios_knl_Clock_tickMode
N#define Clock_timerId ti_sysbios_knl_Clock_timerId
N#define Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod
N#define Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc
N#define Clock_triggerClock ti_sysbios_knl_Clock_triggerClock
N#define Clock_Module_State_clockQ ti_sysbios_knl_Clock_Module_State_clockQ
N#define Clock_Params ti_sysbios_knl_Clock_Params
N#define Clock_getTicks ti_sysbios_knl_Clock_getTicks
N#define Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle
N#define Clock_setTicks ti_sysbios_knl_Clock_setTicks
N#define Clock_tickStop ti_sysbios_knl_Clock_tickStop
N#define Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig
N#define Clock_tickStart ti_sysbios_knl_Clock_tickStart
N#define Clock_tick ti_sysbios_knl_Clock_tick
N#define Clock_workFunc ti_sysbios_knl_Clock_workFunc
N#define Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic
N#define Clock_logTick ti_sysbios_knl_Clock_logTick
N#define Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks
N#define Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod
N#define Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt
N#define Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout
N#define Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic
N#define Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic
N#define Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick
N#define Clock_addI ti_sysbios_knl_Clock_addI
N#define Clock_removeI ti_sysbios_knl_Clock_removeI
N#define Clock_start ti_sysbios_knl_Clock_start
N#define Clock_startI ti_sysbios_knl_Clock_startI
N#define Clock_stop ti_sysbios_knl_Clock_stop
N#define Clock_setPeriod ti_sysbios_knl_Clock_setPeriod
N#define Clock_setTimeout ti_sysbios_knl_Clock_setTimeout
N#define Clock_setFunc ti_sysbios_knl_Clock_setFunc
N#define Clock_getPeriod ti_sysbios_knl_Clock_getPeriod
N#define Clock_getTimeout ti_sysbios_knl_Clock_getTimeout
N#define Clock_isActive ti_sysbios_knl_Clock_isActive
N#define Clock_Module_name ti_sysbios_knl_Clock_Module_name
N#define Clock_Module_id ti_sysbios_knl_Clock_Module_id
N#define Clock_Module_startup ti_sysbios_knl_Clock_Module_startup
N#define Clock_Module_startupDone ti_sysbios_knl_Clock_Module_startupDone
N#define Clock_Module_hasMask ti_sysbios_knl_Clock_Module_hasMask
N#define Clock_Module_getMask ti_sysbios_knl_Clock_Module_getMask
N#define Clock_Module_setMask ti_sysbios_knl_Clock_Module_setMask
N#define Clock_Object_heap ti_sysbios_knl_Clock_Object_heap
N#define Clock_Module_heap ti_sysbios_knl_Clock_Module_heap
N#define Clock_construct ti_sysbios_knl_Clock_construct
N#define Clock_create ti_sysbios_knl_Clock_create
N#define Clock_handle ti_sysbios_knl_Clock_handle
N#define Clock_struct ti_sysbios_knl_Clock_struct
N#define Clock_Handle_label ti_sysbios_knl_Clock_Handle_label
N#define Clock_Handle_name ti_sysbios_knl_Clock_Handle_name
N#define Clock_Instance_init ti_sysbios_knl_Clock_Instance_init
N#define Clock_Object_count ti_sysbios_knl_Clock_Object_count
N#define Clock_Object_get ti_sysbios_knl_Clock_Object_get
N#define Clock_Object_first ti_sysbios_knl_Clock_Object_first
N#define Clock_Object_next ti_sysbios_knl_Clock_Object_next
N#define Clock_Object_sizeof ti_sysbios_knl_Clock_Object_sizeof
N#define Clock_Params_copy ti_sysbios_knl_Clock_Params_copy
N#define Clock_Params_init ti_sysbios_knl_Clock_Params_init
N#define Clock_Instance_finalize ti_sysbios_knl_Clock_Instance_finalize
N#define Clock_delete ti_sysbios_knl_Clock_delete
N#define Clock_destruct ti_sysbios_knl_Clock_destruct
N
N/* proxies */
N#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/package/Clock_TimerProxy.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION DECLARATIONS
N *     CONVERTORS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock_TimerProxy__include
S#define ti_sysbios_knl_Clock_TimerProxy__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock_TimerProxy__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Clock_TimerProxy___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <ti/sysbios/interfaces/ITimer.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_knl_Clock_TimerProxy_FuncPtr;
S
S/* ANY */
S#define ti_sysbios_knl_Clock_TimerProxy_ANY (~0)
S
S/* StartMode */
Stypedef ti_sysbios_interfaces_ITimer_StartMode ti_sysbios_knl_Clock_TimerProxy_StartMode;
S
S/* RunMode */
Stypedef ti_sysbios_interfaces_ITimer_RunMode ti_sysbios_knl_Clock_TimerProxy_RunMode;
S
S/* Status */
Stypedef ti_sysbios_interfaces_ITimer_Status ti_sysbios_knl_Clock_TimerProxy_Status;
S
S/* PeriodType */
Stypedef ti_sysbios_interfaces_ITimer_PeriodType ti_sysbios_knl_Clock_TimerProxy_PeriodType;
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Clock_TimerProxy_Args__create {
S    xdc_Int id;
S    ti_sysbios_interfaces_ITimer_FuncPtr tickFxn;
S} ti_sysbios_knl_Clock_TimerProxy_Args__create;
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled ti_sysbios_knl_Clock_TimerProxy_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded ti_sysbios_knl_Clock_TimerProxy_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask ti_sysbios_knl_Clock_TimerProxy_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gateObj ti_sysbios_knl_Clock_TimerProxy_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms ti_sysbios_knl_Clock_TimerProxy_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_TimerProxy_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__id ti_sysbios_knl_Clock_TimerProxy_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined ti_sysbios_knl_Clock_TimerProxy_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj ti_sysbios_knl_Clock_TimerProxy_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8 ti_sysbios_knl_Clock_TimerProxy_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn ti_sysbios_knl_Clock_TimerProxy_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Clock_TimerProxy_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__count ti_sysbios_knl_Clock_TimerProxy_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_TimerProxy_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__heap ti_sysbios_knl_Clock_TimerProxy_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Clock_TimerProxy_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__sizeof ti_sysbios_knl_Clock_TimerProxy_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_TimerProxy_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_TimerProxy_Object__table ti_sysbios_knl_Clock_TimerProxy_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Clock_TimerProxy_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    ti_sysbios_interfaces_ITimer_RunMode runMode;
S    ti_sysbios_interfaces_ITimer_StartMode startMode;
S    xdc_UArg arg;
S    xdc_UInt32 period;
S    ti_sysbios_interfaces_ITimer_PeriodType periodType;
S    xdc_runtime_Types_FreqHz extFreq;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Clock_TimerProxy_Struct {
S    const ti_sysbios_knl_Clock_TimerProxy_Fxns__ *__fxns;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct ti_sysbios_knl_Clock_TimerProxy_Fxns__ {
S    xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2 *__sysp;
S    xdc_UInt (*getNumTimers)(void);
S    ti_sysbios_interfaces_ITimer_Status (*getStatus)(xdc_UInt);
S    xdc_Void (*startup)(void);
S    xdc_UInt32 (*getMaxTicks)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_Void (*setNextTick)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
S    xdc_Void (*start)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_Void (*stop)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_Void (*setPeriod)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
S    xdc_Bool (*setPeriodMicroSecs)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
S    xdc_UInt32 (*getPeriod)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_UInt32 (*getCount)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_Void (*getFreq)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_runtime_Types_FreqHz*);
S    ti_sysbios_interfaces_ITimer_FuncPtr (*getFunc)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UArg*);
S    xdc_Void (*setFunc)(ti_sysbios_knl_Clock_TimerProxy_Handle, ti_sysbios_interfaces_ITimer_FuncPtr, xdc_UArg);
S    xdc_Void (*trigger)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
S    xdc_UInt32 (*getExpiredCounts)(ti_sysbios_knl_Clock_TimerProxy_Handle);
S    xdc_UInt32 (*getExpiredTicks)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_UInt32);
S    xdc_UInt32 (*getCurrentTick)(ti_sysbios_knl_Clock_TimerProxy_Handle, xdc_Bool);
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S
S/* Module__FXNS__C */
S__extern const ti_sysbios_knl_Clock_TimerProxy_Fxns__ ti_sysbios_knl_Clock_TimerProxy_Module__FXNS__C;
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Clock_TimerProxy_Module_startup( state ) (-1)
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Handle__label__S, "ti_sysbios_knl_Clock_TimerProxy_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_TimerProxy_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S, "ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__create__S, "ti_sysbios_knl_Clock_TimerProxy_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_create, "ti_sysbios_knl_Clock_TimerProxy_create")
S__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_create( xdc_Int id, ti_sysbios_interfaces_ITimer_FuncPtr tickFxn, const ti_sysbios_knl_Clock_TimerProxy_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__delete__S, "ti_sysbios_knl_Clock_TimerProxy_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_delete, "ti_sysbios_knl_Clock_TimerProxy_delete")
S__extern void ti_sysbios_knl_Clock_TimerProxy_delete(ti_sysbios_knl_Clock_TimerProxy_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S, "ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Object__destruct__S( xdc_Ptr objp );
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__get__S, "ti_sysbios_knl_Clock_TimerProxy_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__first__S, "ti_sysbios_knl_Clock_TimerProxy_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Object__next__S, "ti_sysbios_knl_Clock_TimerProxy_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Params__init__S, "ti_sysbios_knl_Clock_TimerProxy_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* Proxy__abstract__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S, "ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S")
S__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S( void );
S
S/* Proxy__delegate__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S, "ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S( void );
S
S/* getNumTimers__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getNumTimers ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E, "ti_sysbios_knl_Clock_TimerProxy_getNumTimers")
S__extern xdc_UInt ti_sysbios_knl_Clock_TimerProxy_getNumTimers__E( void );
S
S/* getStatus__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getStatus ti_sysbios_knl_Clock_TimerProxy_getStatus__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getStatus__E, "ti_sysbios_knl_Clock_TimerProxy_getStatus")
S__extern ti_sysbios_interfaces_ITimer_Status ti_sysbios_knl_Clock_TimerProxy_getStatus__E( xdc_UInt id );
S
S/* startup__E */
S#define ti_sysbios_knl_Clock_TimerProxy_startup ti_sysbios_knl_Clock_TimerProxy_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_startup__E, "ti_sysbios_knl_Clock_TimerProxy_startup")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_startup__E( void );
S
S/* getMaxTicks__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getMaxTicks ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E, "ti_sysbios_knl_Clock_TimerProxy_getMaxTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getMaxTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* setNextTick__E */
S#define ti_sysbios_knl_Clock_TimerProxy_setNextTick ti_sysbios_knl_Clock_TimerProxy_setNextTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setNextTick__E, "ti_sysbios_knl_Clock_TimerProxy_setNextTick")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setNextTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 ticks );
S
S/* start__E */
S#define ti_sysbios_knl_Clock_TimerProxy_start ti_sysbios_knl_Clock_TimerProxy_start__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_start__E, "ti_sysbios_knl_Clock_TimerProxy_start")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_start__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* stop__E */
S#define ti_sysbios_knl_Clock_TimerProxy_stop ti_sysbios_knl_Clock_TimerProxy_stop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_stop__E, "ti_sysbios_knl_Clock_TimerProxy_stop")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_stop__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* setPeriod__E */
S#define ti_sysbios_knl_Clock_TimerProxy_setPeriod ti_sysbios_knl_Clock_TimerProxy_setPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setPeriod__E, "ti_sysbios_knl_Clock_TimerProxy_setPeriod")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 period );
S
S/* setPeriodMicroSecs__E */
S#define ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E, "ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs")
S__extern xdc_Bool ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 microsecs );
S
S/* getPeriod__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getPeriod ti_sysbios_knl_Clock_TimerProxy_getPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getPeriod__E, "ti_sysbios_knl_Clock_TimerProxy_getPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getPeriod__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* getCount__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getCount ti_sysbios_knl_Clock_TimerProxy_getCount__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getCount__E, "ti_sysbios_knl_Clock_TimerProxy_getCount")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCount__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* getFreq__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getFreq ti_sysbios_knl_Clock_TimerProxy_getFreq__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getFreq__E, "ti_sysbios_knl_Clock_TimerProxy_getFreq")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_getFreq__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_runtime_Types_FreqHz *freq );
S
S/* getFunc__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getFunc ti_sysbios_knl_Clock_TimerProxy_getFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getFunc__E, "ti_sysbios_knl_Clock_TimerProxy_getFunc")
S__extern ti_sysbios_interfaces_ITimer_FuncPtr ti_sysbios_knl_Clock_TimerProxy_getFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UArg *arg );
S
S/* setFunc__E */
S#define ti_sysbios_knl_Clock_TimerProxy_setFunc ti_sysbios_knl_Clock_TimerProxy_setFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_setFunc__E, "ti_sysbios_knl_Clock_TimerProxy_setFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_setFunc__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, ti_sysbios_interfaces_ITimer_FuncPtr fxn, xdc_UArg arg );
S
S/* trigger__E */
S#define ti_sysbios_knl_Clock_TimerProxy_trigger ti_sysbios_knl_Clock_TimerProxy_trigger__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_trigger__E, "ti_sysbios_knl_Clock_TimerProxy_trigger")
S__extern xdc_Void ti_sysbios_knl_Clock_TimerProxy_trigger__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 cycles );
S
S/* getExpiredCounts__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E, "ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst );
S
S/* getExpiredTicks__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E, "ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_UInt32 tickPeriod );
S
S/* getCurrentTick__E */
S#define ti_sysbios_knl_Clock_TimerProxy_getCurrentTick ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E, "ti_sysbios_knl_Clock_TimerProxy_getCurrentTick")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_TimerProxy_getCurrentTick__E( ti_sysbios_knl_Clock_TimerProxy_Handle __inst, xdc_Bool save );
S
S
S/*
S * ======== CONVERTORS ========
S */
S
S/* Module_upCast */
Sstatic inline ti_sysbios_interfaces_ITimer_Module ti_sysbios_knl_Clock_TimerProxy_Module_upCast( void )
S{
S    return (ti_sysbios_interfaces_ITimer_Module)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S();
S}
S
S/* Module_to_ti_sysbios_interfaces_ITimer */
S#define ti_sysbios_knl_Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Module_upCast
S
S/* Handle_upCast */
Sstatic inline ti_sysbios_interfaces_ITimer_Handle ti_sysbios_knl_Clock_TimerProxy_Handle_upCast( ti_sysbios_knl_Clock_TimerProxy_Handle i )
S{
S    return (ti_sysbios_interfaces_ITimer_Handle)i;
S}
S
S/* Handle_to_ti_sysbios_interfaces_ITimer */
S#define ti_sysbios_knl_Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_upCast
S
S/* Handle_downCast */
Sstatic inline ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_Handle_downCast( ti_sysbios_interfaces_ITimer_Handle i )
S{
S    ti_sysbios_interfaces_ITimer_Handle i2 = (ti_sysbios_interfaces_ITimer_Handle)i;
Sif (ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S()) return (ti_sysbios_knl_Clock_TimerProxy_Handle)i;
S    return (void*)i2->__fxns == (void*)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S() ? (ti_sysbios_knl_Clock_TimerProxy_Handle)i : 0;
S}
S
S/* Handle_from_ti_sysbios_interfaces_ITimer */
S#define ti_sysbios_knl_Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_downCast
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Clock_TimerProxy_Module_startupDone() ti_sysbios_knl_Clock_TimerProxy_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Clock_TimerProxy_Object_heap() ti_sysbios_knl_Clock_TimerProxy_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Clock_TimerProxy_Module_heap() ti_sysbios_knl_Clock_TimerProxy_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Clock_TimerProxy_Module__id ti_sysbios_knl_Clock_TimerProxy_Module_id( void ) 
S{
S    return ti_sysbios_knl_Clock_TimerProxy_Module__id__C;
S}
S
S/* Proxy_abstract */
S#define ti_sysbios_knl_Clock_TimerProxy_Proxy_abstract() ti_sysbios_knl_Clock_TimerProxy_Proxy__abstract__S()
S
S/* Proxy_delegate */
S#define ti_sysbios_knl_Clock_TimerProxy_Proxy_delegate() ((ti_sysbios_interfaces_ITimer_Module)ti_sysbios_knl_Clock_TimerProxy_Proxy__delegate__S())
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Clock_TimerProxy_Params_init( ti_sysbios_knl_Clock_TimerProxy_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Clock_TimerProxy_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_TimerProxy_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Clock_TimerProxy_Params_copy(ti_sysbios_knl_Clock_TimerProxy_Params *dst, const ti_sysbios_knl_Clock_TimerProxy_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Clock_TimerProxy_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_TimerProxy_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Clock_TimerProxy__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Clock_TimerProxy__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock_TimerProxy__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Clock_TimerProxy__localnames__done
N#define ti_sysbios_knl_Clock_TimerProxy__localnames__done
N
N/* module prefix */
N#define Clock_TimerProxy_Instance ti_sysbios_knl_Clock_TimerProxy_Instance
N#define Clock_TimerProxy_Handle ti_sysbios_knl_Clock_TimerProxy_Handle
N#define Clock_TimerProxy_Module ti_sysbios_knl_Clock_TimerProxy_Module
N#define Clock_TimerProxy_Object ti_sysbios_knl_Clock_TimerProxy_Object
N#define Clock_TimerProxy_Struct ti_sysbios_knl_Clock_TimerProxy_Struct
N#define Clock_TimerProxy_FuncPtr ti_sysbios_knl_Clock_TimerProxy_FuncPtr
N#define Clock_TimerProxy_ANY ti_sysbios_knl_Clock_TimerProxy_ANY
N#define Clock_TimerProxy_StartMode ti_sysbios_knl_Clock_TimerProxy_StartMode
N#define Clock_TimerProxy_RunMode ti_sysbios_knl_Clock_TimerProxy_RunMode
N#define Clock_TimerProxy_Status ti_sysbios_knl_Clock_TimerProxy_Status
N#define Clock_TimerProxy_PeriodType ti_sysbios_knl_Clock_TimerProxy_PeriodType
N#define Clock_TimerProxy_Params ti_sysbios_knl_Clock_TimerProxy_Params
N#define Clock_TimerProxy_getNumTimers ti_sysbios_knl_Clock_TimerProxy_getNumTimers
N#define Clock_TimerProxy_getStatus ti_sysbios_knl_Clock_TimerProxy_getStatus
N#define Clock_TimerProxy_startup ti_sysbios_knl_Clock_TimerProxy_startup
N#define Clock_TimerProxy_getMaxTicks ti_sysbios_knl_Clock_TimerProxy_getMaxTicks
N#define Clock_TimerProxy_setNextTick ti_sysbios_knl_Clock_TimerProxy_setNextTick
N#define Clock_TimerProxy_start ti_sysbios_knl_Clock_TimerProxy_start
N#define Clock_TimerProxy_stop ti_sysbios_knl_Clock_TimerProxy_stop
N#define Clock_TimerProxy_setPeriod ti_sysbios_knl_Clock_TimerProxy_setPeriod
N#define Clock_TimerProxy_setPeriodMicroSecs ti_sysbios_knl_Clock_TimerProxy_setPeriodMicroSecs
N#define Clock_TimerProxy_getPeriod ti_sysbios_knl_Clock_TimerProxy_getPeriod
N#define Clock_TimerProxy_getCount ti_sysbios_knl_Clock_TimerProxy_getCount
N#define Clock_TimerProxy_getFreq ti_sysbios_knl_Clock_TimerProxy_getFreq
N#define Clock_TimerProxy_getFunc ti_sysbios_knl_Clock_TimerProxy_getFunc
N#define Clock_TimerProxy_setFunc ti_sysbios_knl_Clock_TimerProxy_setFunc
N#define Clock_TimerProxy_trigger ti_sysbios_knl_Clock_TimerProxy_trigger
N#define Clock_TimerProxy_getExpiredCounts ti_sysbios_knl_Clock_TimerProxy_getExpiredCounts
N#define Clock_TimerProxy_getExpiredTicks ti_sysbios_knl_Clock_TimerProxy_getExpiredTicks
N#define Clock_TimerProxy_getCurrentTick ti_sysbios_knl_Clock_TimerProxy_getCurrentTick
N#define Clock_TimerProxy_Module_name ti_sysbios_knl_Clock_TimerProxy_Module_name
N#define Clock_TimerProxy_Module_id ti_sysbios_knl_Clock_TimerProxy_Module_id
N#define Clock_TimerProxy_Module_startup ti_sysbios_knl_Clock_TimerProxy_Module_startup
N#define Clock_TimerProxy_Module_startupDone ti_sysbios_knl_Clock_TimerProxy_Module_startupDone
N#define Clock_TimerProxy_Module_hasMask ti_sysbios_knl_Clock_TimerProxy_Module_hasMask
N#define Clock_TimerProxy_Module_getMask ti_sysbios_knl_Clock_TimerProxy_Module_getMask
N#define Clock_TimerProxy_Module_setMask ti_sysbios_knl_Clock_TimerProxy_Module_setMask
N#define Clock_TimerProxy_Object_heap ti_sysbios_knl_Clock_TimerProxy_Object_heap
N#define Clock_TimerProxy_Module_heap ti_sysbios_knl_Clock_TimerProxy_Module_heap
N#define Clock_TimerProxy_construct ti_sysbios_knl_Clock_TimerProxy_construct
N#define Clock_TimerProxy_create ti_sysbios_knl_Clock_TimerProxy_create
N#define Clock_TimerProxy_handle ti_sysbios_knl_Clock_TimerProxy_handle
N#define Clock_TimerProxy_struct ti_sysbios_knl_Clock_TimerProxy_struct
N#define Clock_TimerProxy_Handle_label ti_sysbios_knl_Clock_TimerProxy_Handle_label
N#define Clock_TimerProxy_Handle_name ti_sysbios_knl_Clock_TimerProxy_Handle_name
N#define Clock_TimerProxy_Instance_init ti_sysbios_knl_Clock_TimerProxy_Instance_init
N#define Clock_TimerProxy_Object_count ti_sysbios_knl_Clock_TimerProxy_Object_count
N#define Clock_TimerProxy_Object_get ti_sysbios_knl_Clock_TimerProxy_Object_get
N#define Clock_TimerProxy_Object_first ti_sysbios_knl_Clock_TimerProxy_Object_first
N#define Clock_TimerProxy_Object_next ti_sysbios_knl_Clock_TimerProxy_Object_next
N#define Clock_TimerProxy_Object_sizeof ti_sysbios_knl_Clock_TimerProxy_Object_sizeof
N#define Clock_TimerProxy_Params_copy ti_sysbios_knl_Clock_TimerProxy_Params_copy
N#define Clock_TimerProxy_Params_init ti_sysbios_knl_Clock_TimerProxy_Params_init
N#define Clock_TimerProxy_Instance_State ti_sysbios_knl_Clock_TimerProxy_Instance_State
N#define Clock_TimerProxy_Instance_finalize ti_sysbios_knl_Clock_TimerProxy_Instance_finalize
N#define Clock_TimerProxy_Proxy_abstract ti_sysbios_knl_Clock_TimerProxy_Proxy_abstract
N#define Clock_TimerProxy_Proxy_delegate ti_sysbios_knl_Clock_TimerProxy_Proxy_delegate
N#define Clock_TimerProxy_delete ti_sysbios_knl_Clock_TimerProxy_delete
N#define Clock_TimerProxy_destruct ti_sysbios_knl_Clock_TimerProxy_destruct
N#define Clock_TimerProxy_Module_upCast ti_sysbios_knl_Clock_TimerProxy_Module_upCast
N#define Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Module_to_ti_sysbios_interfaces_ITimer
N#define Clock_TimerProxy_Handle_upCast ti_sysbios_knl_Clock_TimerProxy_Handle_upCast
N#define Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_to_ti_sysbios_interfaces_ITimer
N#define Clock_TimerProxy_Handle_downCast ti_sysbios_knl_Clock_TimerProxy_Handle_downCast
N#define Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer ti_sysbios_knl_Clock_TimerProxy_Handle_from_ti_sysbios_interfaces_ITimer
N
N#endif /* ti_sysbios_knl_Clock_TimerProxy__localnames__done */
N#endif
L 768 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 2
N
N#endif /* ti_sysbios_knl_Clock__localnames__done */
N#endif
L 41 "../bme280.c" 2
N#include <ti/sysbios/knl/Semaphore.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Semaphore__include
N#define ti_sysbios_knl_Semaphore__include
N
N#ifndef __nested__
N#define __nested__
N#define ti_sysbios_knl_Semaphore__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Semaphore___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <xdc/runtime/Log.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Log__include
S#define xdc_runtime_Log__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Log__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Log___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Log__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Text.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* NUMARGS */
S#define xdc_runtime_Log_NUMARGS (8)
S
S/* PRINTFID */
S#define xdc_runtime_Log_PRINTFID (0)
S
S/* EventRec */
Stypedef xdc_IArg __T1_xdc_runtime_Log_EventRec__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef CARRAY1_xdc_runtime_Log_EventRec__arg __TA_xdc_runtime_Log_EventRec__arg;
Sstruct xdc_runtime_Log_EventRec {
S    xdc_runtime_Types_Timestamp64 tstamp;
S    xdc_Bits32 serial;
S    xdc_runtime_Types_Event evt;
S    __TA_xdc_runtime_Log_EventRec__arg arg;
S};
S
S/* EventId */
Stypedef xdc_runtime_Types_RopeId xdc_runtime_Log_EventId;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Log_Module__diagsEnabled__CR
S#define xdc_runtime_Log_Module__diagsEnabled__C (*((CT__xdc_runtime_Log_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsEnabled (xdc_runtime_Log_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Log_Module__diagsIncluded__CR
S#define xdc_runtime_Log_Module__diagsIncluded__C (*((CT__xdc_runtime_Log_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsIncluded (xdc_runtime_Log_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Log_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
S#ifdef xdc_runtime_Log_Module__diagsMask__CR
S#define xdc_runtime_Log_Module__diagsMask__C (*((CT__xdc_runtime_Log_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsMask (xdc_runtime_Log_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
S#ifdef xdc_runtime_Log_Module__gateObj__CR
S#define xdc_runtime_Log_Module__gateObj__C (*((CT__xdc_runtime_Log_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gateObj (xdc_runtime_Log_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
S#ifdef xdc_runtime_Log_Module__gatePrms__CR
S#define xdc_runtime_Log_Module__gatePrms__C (*((CT__xdc_runtime_Log_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Log_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gatePrms (xdc_runtime_Log_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Log_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
S#ifdef xdc_runtime_Log_Module__id__CR
S#define xdc_runtime_Log_Module__id__C (*((CT__xdc_runtime_Log_Module__id*)(xdcRomConstPtr + xdc_runtime_Log_Module__id__C_offset)))
S#else
S#define xdc_runtime_Log_Module__id (xdc_runtime_Log_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Log_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
S#ifdef xdc_runtime_Log_Module__loggerDefined__CR
S#define xdc_runtime_Log_Module__loggerDefined__C (*((CT__xdc_runtime_Log_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerDefined (xdc_runtime_Log_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
S#ifdef xdc_runtime_Log_Module__loggerObj__CR
S#define xdc_runtime_Log_Module__loggerObj__C (*((CT__xdc_runtime_Log_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerObj (xdc_runtime_Log_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Log_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn0__CR
S#define xdc_runtime_Log_Module__loggerFxn0__C (*((CT__xdc_runtime_Log_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn0 (xdc_runtime_Log_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Log_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn1__CR
S#define xdc_runtime_Log_Module__loggerFxn1__C (*((CT__xdc_runtime_Log_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn1 (xdc_runtime_Log_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Log_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn2__CR
S#define xdc_runtime_Log_Module__loggerFxn2__C (*((CT__xdc_runtime_Log_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn2 (xdc_runtime_Log_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Log_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn4__CR
S#define xdc_runtime_Log_Module__loggerFxn4__C (*((CT__xdc_runtime_Log_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn4 (xdc_runtime_Log_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Log_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn8__CR
S#define xdc_runtime_Log_Module__loggerFxn8__C (*((CT__xdc_runtime_Log_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn8 (xdc_runtime_Log_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Log_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
S#ifdef xdc_runtime_Log_Object__count__CR
S#define xdc_runtime_Log_Object__count__C (*((CT__xdc_runtime_Log_Object__count*)(xdcRomConstPtr + xdc_runtime_Log_Object__count__C_offset)))
S#else
S#define xdc_runtime_Log_Object__count (xdc_runtime_Log_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Log_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
S#ifdef xdc_runtime_Log_Object__heap__CR
S#define xdc_runtime_Log_Object__heap__C (*((CT__xdc_runtime_Log_Object__heap*)(xdcRomConstPtr + xdc_runtime_Log_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Log_Object__heap (xdc_runtime_Log_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Log_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
S#ifdef xdc_runtime_Log_Object__sizeof__CR
S#define xdc_runtime_Log_Object__sizeof__C (*((CT__xdc_runtime_Log_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Log_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Log_Object__sizeof (xdc_runtime_Log_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
S#ifdef xdc_runtime_Log_Object__table__CR
S#define xdc_runtime_Log_Object__table__C (*((CT__xdc_runtime_Log_Object__table*)(xdcRomConstPtr + xdc_runtime_Log_Object__table__C_offset)))
S#else
S#define xdc_runtime_Log_Object__table (xdc_runtime_Log_Object__table__C)
S#endif
S
S/* L_construct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_construct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
S#ifdef xdc_runtime_Log_L_construct__CR
S#define xdc_runtime_Log_L_construct (*((CT__xdc_runtime_Log_L_construct*)(xdcRomConstPtr + xdc_runtime_Log_L_construct__C_offset)))
S#else
S#define xdc_runtime_Log_L_construct (xdc_runtime_Log_L_construct__C)
S#endif
S
S/* L_create */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_create;
S__extern __FAR__ const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
S#ifdef xdc_runtime_Log_L_create__CR
S#define xdc_runtime_Log_L_create (*((CT__xdc_runtime_Log_L_create*)(xdcRomConstPtr + xdc_runtime_Log_L_create__C_offset)))
S#else
S#define xdc_runtime_Log_L_create (xdc_runtime_Log_L_create__C)
S#endif
S
S/* L_destruct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_destruct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
S#ifdef xdc_runtime_Log_L_destruct__CR
S#define xdc_runtime_Log_L_destruct (*((CT__xdc_runtime_Log_L_destruct*)(xdcRomConstPtr + xdc_runtime_Log_L_destruct__C_offset)))
S#else
S#define xdc_runtime_Log_L_destruct (xdc_runtime_Log_L_destruct__C)
S#endif
S
S/* L_delete */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_delete;
S__extern __FAR__ const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
S#ifdef xdc_runtime_Log_L_delete__CR
S#define xdc_runtime_Log_L_delete (*((CT__xdc_runtime_Log_L_delete*)(xdcRomConstPtr + xdc_runtime_Log_L_delete__C_offset)))
S#else
S#define xdc_runtime_Log_L_delete (xdc_runtime_Log_L_delete__C)
S#endif
S
S/* L_error */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_error;
S__extern __FAR__ const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
S#ifdef xdc_runtime_Log_L_error__CR
S#define xdc_runtime_Log_L_error (*((CT__xdc_runtime_Log_L_error*)(xdcRomConstPtr + xdc_runtime_Log_L_error__C_offset)))
S#else
S#define xdc_runtime_Log_L_error (xdc_runtime_Log_L_error__C)
S#endif
S
S/* L_warning */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_warning;
S__extern __FAR__ const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
S#ifdef xdc_runtime_Log_L_warning__CR
S#define xdc_runtime_Log_L_warning (*((CT__xdc_runtime_Log_L_warning*)(xdcRomConstPtr + xdc_runtime_Log_L_warning__C_offset)))
S#else
S#define xdc_runtime_Log_L_warning (xdc_runtime_Log_L_warning__C)
S#endif
S
S/* L_info */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_info;
S__extern __FAR__ const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
S#ifdef xdc_runtime_Log_L_info__CR
S#define xdc_runtime_Log_L_info (*((CT__xdc_runtime_Log_L_info*)(xdcRomConstPtr + xdc_runtime_Log_L_info__C_offset)))
S#else
S#define xdc_runtime_Log_L_info (xdc_runtime_Log_L_info__C)
S#endif
S
S/* L_start */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_start;
S__extern __FAR__ const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
S#ifdef xdc_runtime_Log_L_start__CR
S#define xdc_runtime_Log_L_start (*((CT__xdc_runtime_Log_L_start*)(xdcRomConstPtr + xdc_runtime_Log_L_start__C_offset)))
S#else
S#define xdc_runtime_Log_L_start (xdc_runtime_Log_L_start__C)
S#endif
S
S/* L_stop */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stop;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
S#ifdef xdc_runtime_Log_L_stop__CR
S#define xdc_runtime_Log_L_stop (*((CT__xdc_runtime_Log_L_stop*)(xdcRomConstPtr + xdc_runtime_Log_L_stop__C_offset)))
S#else
S#define xdc_runtime_Log_L_stop (xdc_runtime_Log_L_stop__C)
S#endif
S
S/* L_startInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_startInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
S#ifdef xdc_runtime_Log_L_startInstance__CR
S#define xdc_runtime_Log_L_startInstance (*((CT__xdc_runtime_Log_L_startInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_startInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_startInstance (xdc_runtime_Log_L_startInstance__C)
S#endif
S
S/* L_stopInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stopInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
S#ifdef xdc_runtime_Log_L_stopInstance__CR
S#define xdc_runtime_Log_L_stopInstance (*((CT__xdc_runtime_Log_L_stopInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_stopInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_stopInstance (xdc_runtime_Log_L_stopInstance__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Log_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Log_Module__startupDone__S, "xdc_runtime_Log_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
S
S/* doPrint__E */
S#define xdc_runtime_Log_doPrint xdc_runtime_Log_doPrint__E
Sxdc__CODESECT(xdc_runtime_Log_doPrint__E, "xdc_runtime_Log_doPrint")
S__extern xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Log_Module_startupDone() xdc_runtime_Log_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Log_Object_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Log_Module_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id(void);
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id( void ) 
S{
S    return xdc_runtime_Log_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void)
S{
S    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) {
S        *xdc_runtime_Log_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Log__epilogue.h>
S
S#ifdef xdc_runtime_Log__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Log__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Log__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Log__include_state
S#define xdc_runtime_Log__include_state
S
S
S#endif /* xdc_runtime_Log__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Log__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Log__localnames__done
S#define xdc_runtime_Log__localnames__done
S
S/* module prefix */
S#define Log_NUMARGS xdc_runtime_Log_NUMARGS
S#define Log_PRINTFID xdc_runtime_Log_PRINTFID
S#define Log_EventRec xdc_runtime_Log_EventRec
S#define Log_Event xdc_runtime_Log_Event
S#define Log_EventId xdc_runtime_Log_EventId
S#define Log_L_construct xdc_runtime_Log_L_construct
S#define Log_L_create xdc_runtime_Log_L_create
S#define Log_L_destruct xdc_runtime_Log_L_destruct
S#define Log_L_delete xdc_runtime_Log_L_delete
S#define Log_L_error xdc_runtime_Log_L_error
S#define Log_L_warning xdc_runtime_Log_L_warning
S#define Log_L_info xdc_runtime_Log_L_info
S#define Log_L_start xdc_runtime_Log_L_start
S#define Log_L_stop xdc_runtime_Log_L_stop
S#define Log_L_startInstance xdc_runtime_Log_L_startInstance
S#define Log_L_stopInstance xdc_runtime_Log_L_stopInstance
S#define Log_getMask xdc_runtime_Log_getMask
S#define Log_getRope xdc_runtime_Log_getRope
S#define Log_getEventId xdc_runtime_Log_getEventId
S#define Log_print0 xdc_runtime_Log_print0
S#define Log_print1 xdc_runtime_Log_print1
S#define Log_print2 xdc_runtime_Log_print2
S#define Log_print3 xdc_runtime_Log_print3
S#define Log_print4 xdc_runtime_Log_print4
S#define Log_print5 xdc_runtime_Log_print5
S#define Log_print6 xdc_runtime_Log_print6
S#define Log_error0 xdc_runtime_Log_error0
S#define Log_error1 xdc_runtime_Log_error1
S#define Log_error2 xdc_runtime_Log_error2
S#define Log_error3 xdc_runtime_Log_error3
S#define Log_error4 xdc_runtime_Log_error4
S#define Log_error5 xdc_runtime_Log_error5
S#define Log_warning0 xdc_runtime_Log_warning0
S#define Log_warning1 xdc_runtime_Log_warning1
S#define Log_warning2 xdc_runtime_Log_warning2
S#define Log_warning3 xdc_runtime_Log_warning3
S#define Log_warning4 xdc_runtime_Log_warning4
S#define Log_warning5 xdc_runtime_Log_warning5
S#define Log_info0 xdc_runtime_Log_info0
S#define Log_info1 xdc_runtime_Log_info1
S#define Log_info2 xdc_runtime_Log_info2
S#define Log_info3 xdc_runtime_Log_info3
S#define Log_info4 xdc_runtime_Log_info4
S#define Log_info5 xdc_runtime_Log_info5
S#define Log_put0 xdc_runtime_Log_put0
S#define Log_put1 xdc_runtime_Log_put1
S#define Log_put2 xdc_runtime_Log_put2
S#define Log_put4 xdc_runtime_Log_put4
S#define Log_put8 xdc_runtime_Log_put8
S#define Log_write0 xdc_runtime_Log_write0
S#define Log_write1 xdc_runtime_Log_write1
S#define Log_write2 xdc_runtime_Log_write2
S#define Log_write3 xdc_runtime_Log_write3
S#define Log_write4 xdc_runtime_Log_write4
S#define Log_write5 xdc_runtime_Log_write5
S#define Log_write6 xdc_runtime_Log_write6
S#define Log_write7 xdc_runtime_Log_write7
S#define Log_write8 xdc_runtime_Log_write8
S#define Log_doPrint xdc_runtime_Log_doPrint
S#define Log_Module_name xdc_runtime_Log_Module_name
S#define Log_Module_id xdc_runtime_Log_Module_id
S#define Log_Module_startup xdc_runtime_Log_Module_startup
S#define Log_Module_startupDone xdc_runtime_Log_Module_startupDone
S#define Log_Module_hasMask xdc_runtime_Log_Module_hasMask
S#define Log_Module_getMask xdc_runtime_Log_Module_getMask
S#define Log_Module_setMask xdc_runtime_Log_Module_setMask
S#define Log_Object_heap xdc_runtime_Log_Object_heap
S#define Log_Module_heap xdc_runtime_Log_Module_heap
S
S#endif /* xdc_runtime_Log__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <xdc/runtime/Assert.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Assert__include
S#define xdc_runtime_Assert__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Assert__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Assert___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Assert__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Assert_Module__diagsEnabled__CR
S#define xdc_runtime_Assert_Module__diagsEnabled__C (*((CT__xdc_runtime_Assert_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsEnabled (xdc_runtime_Assert_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Assert_Module__diagsIncluded__CR
S#define xdc_runtime_Assert_Module__diagsIncluded__C (*((CT__xdc_runtime_Assert_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsIncluded (xdc_runtime_Assert_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Assert_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
S#ifdef xdc_runtime_Assert_Module__diagsMask__CR
S#define xdc_runtime_Assert_Module__diagsMask__C (*((CT__xdc_runtime_Assert_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsMask (xdc_runtime_Assert_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
S#ifdef xdc_runtime_Assert_Module__gateObj__CR
S#define xdc_runtime_Assert_Module__gateObj__C (*((CT__xdc_runtime_Assert_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gateObj (xdc_runtime_Assert_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
S#ifdef xdc_runtime_Assert_Module__gatePrms__CR
S#define xdc_runtime_Assert_Module__gatePrms__C (*((CT__xdc_runtime_Assert_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gatePrms (xdc_runtime_Assert_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Assert_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
S#ifdef xdc_runtime_Assert_Module__id__CR
S#define xdc_runtime_Assert_Module__id__C (*((CT__xdc_runtime_Assert_Module__id*)(xdcRomConstPtr + xdc_runtime_Assert_Module__id__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__id (xdc_runtime_Assert_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Assert_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
S#ifdef xdc_runtime_Assert_Module__loggerDefined__CR
S#define xdc_runtime_Assert_Module__loggerDefined__C (*((CT__xdc_runtime_Assert_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerDefined (xdc_runtime_Assert_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
S#ifdef xdc_runtime_Assert_Module__loggerObj__CR
S#define xdc_runtime_Assert_Module__loggerObj__C (*((CT__xdc_runtime_Assert_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerObj (xdc_runtime_Assert_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Assert_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn0__CR
S#define xdc_runtime_Assert_Module__loggerFxn0__C (*((CT__xdc_runtime_Assert_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn0 (xdc_runtime_Assert_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Assert_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn1__CR
S#define xdc_runtime_Assert_Module__loggerFxn1__C (*((CT__xdc_runtime_Assert_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn1 (xdc_runtime_Assert_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Assert_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn2__CR
S#define xdc_runtime_Assert_Module__loggerFxn2__C (*((CT__xdc_runtime_Assert_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn2 (xdc_runtime_Assert_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Assert_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn4__CR
S#define xdc_runtime_Assert_Module__loggerFxn4__C (*((CT__xdc_runtime_Assert_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn4 (xdc_runtime_Assert_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Assert_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn8__CR
S#define xdc_runtime_Assert_Module__loggerFxn8__C (*((CT__xdc_runtime_Assert_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn8 (xdc_runtime_Assert_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Assert_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
S#ifdef xdc_runtime_Assert_Object__count__CR
S#define xdc_runtime_Assert_Object__count__C (*((CT__xdc_runtime_Assert_Object__count*)(xdcRomConstPtr + xdc_runtime_Assert_Object__count__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__count (xdc_runtime_Assert_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Assert_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
S#ifdef xdc_runtime_Assert_Object__heap__CR
S#define xdc_runtime_Assert_Object__heap__C (*((CT__xdc_runtime_Assert_Object__heap*)(xdcRomConstPtr + xdc_runtime_Assert_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__heap (xdc_runtime_Assert_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Assert_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
S#ifdef xdc_runtime_Assert_Object__sizeof__CR
S#define xdc_runtime_Assert_Object__sizeof__C (*((CT__xdc_runtime_Assert_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Assert_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__sizeof (xdc_runtime_Assert_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
S#ifdef xdc_runtime_Assert_Object__table__CR
S#define xdc_runtime_Assert_Object__table__C (*((CT__xdc_runtime_Assert_Object__table*)(xdcRomConstPtr + xdc_runtime_Assert_Object__table__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__table (xdc_runtime_Assert_Object__table__C)
S#endif
S
S/* E_assertFailed */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Assert_E_assertFailed;
S__extern __FAR__ const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
S#ifdef xdc_runtime_Assert_E_assertFailed__CR
S#define xdc_runtime_Assert_E_assertFailed (*((CT__xdc_runtime_Assert_E_assertFailed*)(xdcRomConstPtr + xdc_runtime_Assert_E_assertFailed__C_offset)))
S#else
S#define xdc_runtime_Assert_E_assertFailed (xdc_runtime_Assert_E_assertFailed__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Assert_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Assert_Module__startupDone__S, "xdc_runtime_Assert_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
S
S/* raise__I */
S#define xdc_runtime_Assert_raise xdc_runtime_Assert_raise__I
Sxdc__CODESECT(xdc_runtime_Assert_raise__I, "xdc_runtime_Assert_raise")
S__extern xdc_Void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Assert_Module_startupDone() xdc_runtime_Assert_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Assert_Object_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Assert_Module_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id(void);
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id( void ) 
S{
S    return xdc_runtime_Assert_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void)
S{
S    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) {
S        *xdc_runtime_Assert_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Assert__epilogue.h>
S
S#ifdef xdc_runtime_Assert__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Assert__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Assert__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Assert__include_state
S#define xdc_runtime_Assert__include_state
S
S
S#endif /* xdc_runtime_Assert__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Assert__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Assert__localnames__done
S#define xdc_runtime_Assert__localnames__done
S
S/* module prefix */
S#define Assert_Id xdc_runtime_Assert_Id
S#define Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed
S#define Assert_isTrue xdc_runtime_Assert_isTrue
S#define Assert_Module_name xdc_runtime_Assert_Module_name
S#define Assert_Module_id xdc_runtime_Assert_Module_id
S#define Assert_Module_startup xdc_runtime_Assert_Module_startup
S#define Assert_Module_startupDone xdc_runtime_Assert_Module_startupDone
S#define Assert_Module_hasMask xdc_runtime_Assert_Module_hasMask
S#define Assert_Module_getMask xdc_runtime_Assert_Module_getMask
S#define Assert_Module_setMask xdc_runtime_Assert_Module_setMask
S#define Assert_Object_heap xdc_runtime_Assert_Object_heap
S#define Assert_Module_heap xdc_runtime_Assert_Module_heap
S
S#endif /* xdc_runtime_Assert__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <ti/sysbios/knl/Queue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Queue__include
S#define ti_sysbios_knl_Queue__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Queue__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Queue___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Elem */
Sstruct ti_sysbios_knl_Queue_Elem {
S    ti_sysbios_knl_Queue_Elem *volatile next;
S    ti_sysbios_knl_Queue_Elem *volatile prev;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Queue_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Queue_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Queue_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Queue_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Queue_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Queue_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Queue_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Queue_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Queue_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Queue_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Queue_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Queue_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Queue_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Queue_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Queue_Module_startup( state ) (-1)
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Instance_init__E, "ti_sysbios_knl_Queue_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Handle__label__S, "ti_sysbios_knl_Queue_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Module__startupDone__S, "ti_sysbios_knl_Queue_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__create__S, "ti_sysbios_knl_Queue_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Queue_create, "ti_sysbios_knl_Queue_create")
S__extern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_construct, "ti_sysbios_knl_Queue_construct")
S__extern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__delete__S, "ti_sysbios_knl_Queue_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Queue_delete, "ti_sysbios_knl_Queue_delete")
S__extern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__destruct__S, "ti_sysbios_knl_Queue_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_destruct, "ti_sysbios_knl_Queue_destruct")
S__extern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__get__S, "ti_sysbios_knl_Queue_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__first__S, "ti_sysbios_knl_Queue_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__next__S, "ti_sysbios_knl_Queue_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Params__init__S, "ti_sysbios_knl_Queue_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* elemClear__E */
S#define ti_sysbios_knl_Queue_elemClear ti_sysbios_knl_Queue_elemClear__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_elemClear__E, "ti_sysbios_knl_Queue_elemClear")
S__extern xdc_Void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* insert__E */
S#define ti_sysbios_knl_Queue_insert ti_sysbios_knl_Queue_insert__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_insert__E, "ti_sysbios_knl_Queue_insert")
S__extern xdc_Void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
S
S/* next__E */
S#define ti_sysbios_knl_Queue_next ti_sysbios_knl_Queue_next__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_next__E, "ti_sysbios_knl_Queue_next")
S__extern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* prev__E */
S#define ti_sysbios_knl_Queue_prev ti_sysbios_knl_Queue_prev__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_prev__E, "ti_sysbios_knl_Queue_prev")
S__extern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* remove__E */
S#define ti_sysbios_knl_Queue_remove ti_sysbios_knl_Queue_remove__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_remove__E, "ti_sysbios_knl_Queue_remove")
S__extern xdc_Void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* isQueued__E */
S#define ti_sysbios_knl_Queue_isQueued ti_sysbios_knl_Queue_isQueued__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_isQueued__E, "ti_sysbios_knl_Queue_isQueued")
S__extern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* dequeue__E */
S#define ti_sysbios_knl_Queue_dequeue ti_sysbios_knl_Queue_dequeue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_dequeue__E, "ti_sysbios_knl_Queue_dequeue")
S__extern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* empty__E */
S#define ti_sysbios_knl_Queue_empty ti_sysbios_knl_Queue_empty__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_empty__E, "ti_sysbios_knl_Queue_empty")
S__extern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* enqueue__E */
S#define ti_sysbios_knl_Queue_enqueue ti_sysbios_knl_Queue_enqueue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_enqueue__E, "ti_sysbios_knl_Queue_enqueue")
S__extern xdc_Void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* get__E */
S#define ti_sysbios_knl_Queue_get ti_sysbios_knl_Queue_get__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_get__E, "ti_sysbios_knl_Queue_get")
S__extern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* getTail__E */
S#define ti_sysbios_knl_Queue_getTail ti_sysbios_knl_Queue_getTail__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_getTail__E, "ti_sysbios_knl_Queue_getTail")
S__extern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* head__E */
S#define ti_sysbios_knl_Queue_head ti_sysbios_knl_Queue_head__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_head__E, "ti_sysbios_knl_Queue_head")
S__extern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* put__E */
S#define ti_sysbios_knl_Queue_put ti_sysbios_knl_Queue_put__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_put__E, "ti_sysbios_knl_Queue_put")
S__extern xdc_Void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* putHead__E */
S#define ti_sysbios_knl_Queue_putHead ti_sysbios_knl_Queue_putHead__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_putHead__E, "ti_sysbios_knl_Queue_putHead")
S__extern xdc_Void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Queue_Module_startupDone() ti_sysbios_knl_Queue_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Queue_Object_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Queue_Module_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module_id( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Queue_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Queue_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Queue_Module__diagsMask__C != NULL) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Queue_Params_init( ti_sysbios_knl_Queue_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Queue_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Queue_Params_copy(ti_sysbios_knl_Queue_Params *dst, const ti_sysbios_knl_Queue_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Queue_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Queue_Object_count() ti_sysbios_knl_Queue_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Queue_Object_sizeof() ti_sysbios_knl_Queue_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_get(ti_sysbios_knl_Queue_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_first( void )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_next( ti_sysbios_knl_Queue_Object *obj )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle_label( ti_sysbios_knl_Queue_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Queue_Handle_name( ti_sysbios_knl_Queue_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_handle( ti_sysbios_knl_Queue_Struct *str )
S{
S    return (ti_sysbios_knl_Queue_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Queue_Struct *ti_sysbios_knl_Queue_struct( ti_sysbios_knl_Queue_Handle inst )
S{
S    return (ti_sysbios_knl_Queue_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Queue__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Queue__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Queue__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Queue__include_state
S#define ti_sysbios_knl_Queue__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Queue_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S};
S
S#endif /* ti_sysbios_knl_Queue__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Queue__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Queue__localnames__done
S#define ti_sysbios_knl_Queue__localnames__done
S
S/* module prefix */
S#define Queue_Instance ti_sysbios_knl_Queue_Instance
S#define Queue_Handle ti_sysbios_knl_Queue_Handle
S#define Queue_Module ti_sysbios_knl_Queue_Module
S#define Queue_Object ti_sysbios_knl_Queue_Object
S#define Queue_Struct ti_sysbios_knl_Queue_Struct
S#define Queue_Elem ti_sysbios_knl_Queue_Elem
S#define Queue_Instance_State ti_sysbios_knl_Queue_Instance_State
S#define Queue_Params ti_sysbios_knl_Queue_Params
S#define Queue_elemClear ti_sysbios_knl_Queue_elemClear
S#define Queue_insert ti_sysbios_knl_Queue_insert
S#define Queue_next ti_sysbios_knl_Queue_next
S#define Queue_prev ti_sysbios_knl_Queue_prev
S#define Queue_remove ti_sysbios_knl_Queue_remove
S#define Queue_isQueued ti_sysbios_knl_Queue_isQueued
S#define Queue_dequeue ti_sysbios_knl_Queue_dequeue
S#define Queue_empty ti_sysbios_knl_Queue_empty
S#define Queue_enqueue ti_sysbios_knl_Queue_enqueue
S#define Queue_get ti_sysbios_knl_Queue_get
S#define Queue_getTail ti_sysbios_knl_Queue_getTail
S#define Queue_head ti_sysbios_knl_Queue_head
S#define Queue_put ti_sysbios_knl_Queue_put
S#define Queue_putHead ti_sysbios_knl_Queue_putHead
S#define Queue_Module_name ti_sysbios_knl_Queue_Module_name
S#define Queue_Module_id ti_sysbios_knl_Queue_Module_id
S#define Queue_Module_startup ti_sysbios_knl_Queue_Module_startup
S#define Queue_Module_startupDone ti_sysbios_knl_Queue_Module_startupDone
S#define Queue_Module_hasMask ti_sysbios_knl_Queue_Module_hasMask
S#define Queue_Module_getMask ti_sysbios_knl_Queue_Module_getMask
S#define Queue_Module_setMask ti_sysbios_knl_Queue_Module_setMask
S#define Queue_Object_heap ti_sysbios_knl_Queue_Object_heap
S#define Queue_Module_heap ti_sysbios_knl_Queue_Module_heap
S#define Queue_construct ti_sysbios_knl_Queue_construct
S#define Queue_create ti_sysbios_knl_Queue_create
S#define Queue_handle ti_sysbios_knl_Queue_handle
S#define Queue_struct ti_sysbios_knl_Queue_struct
S#define Queue_Handle_label ti_sysbios_knl_Queue_Handle_label
S#define Queue_Handle_name ti_sysbios_knl_Queue_Handle_name
S#define Queue_Instance_init ti_sysbios_knl_Queue_Instance_init
S#define Queue_Object_count ti_sysbios_knl_Queue_Object_count
S#define Queue_Object_get ti_sysbios_knl_Queue_Object_get
S#define Queue_Object_first ti_sysbios_knl_Queue_Object_first
S#define Queue_Object_next ti_sysbios_knl_Queue_Object_next
S#define Queue_Object_sizeof ti_sysbios_knl_Queue_Object_sizeof
S#define Queue_Params_copy ti_sysbios_knl_Queue_Params_copy
S#define Queue_Params_init ti_sysbios_knl_Queue_Params_init
S#define Queue_delete ti_sysbios_knl_Queue_delete
S#define Queue_destruct ti_sysbios_knl_Queue_destruct
S
S#endif /* ti_sysbios_knl_Queue__localnames__done */
N#endif
L 63 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <ti/sysbios/knl/Task.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Task__include
S#define ti_sysbios_knl_Task__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Task__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Task___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/Task__prologue.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Assert.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/IHeap.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/interfaces/ITaskSupport.h>
S#include <ti/sysbios/knl/Clock.h>
S#include <ti/sysbios/knl/package/Task_SupportProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Task_FuncPtr)(xdc_UArg, xdc_UArg);
S
S/* AllBlockedFuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Task_AllBlockedFuncPtr)(xdc_Void);
S
S/* Mode */
Senum ti_sysbios_knl_Task_Mode {
S    ti_sysbios_knl_Task_Mode_RUNNING,
S    ti_sysbios_knl_Task_Mode_READY,
S    ti_sysbios_knl_Task_Mode_BLOCKED,
S    ti_sysbios_knl_Task_Mode_TERMINATED,
S    ti_sysbios_knl_Task_Mode_INACTIVE
S};
Stypedef enum ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_Mode;
S
S/* Stat */
Sstruct ti_sysbios_knl_Task_Stat {
S    xdc_Int priority;
S    xdc_Ptr stack;
S    xdc_SizeT stackSize;
S    xdc_runtime_IHeap_Handle stackHeap;
S    xdc_Ptr env;
S    ti_sysbios_knl_Task_Mode mode;
S    xdc_Ptr sp;
S    xdc_SizeT used;
S};
S
S/* HookSet */
Sstruct ti_sysbios_knl_Task_HookSet {
S    xdc_Void (*registerFxn)(xdc_Int);
S    xdc_Void (*createFxn)(ti_sysbios_knl_Task_Handle, xdc_runtime_Error_Block*);
S    xdc_Void (*readyFxn)(ti_sysbios_knl_Task_Handle);
S    xdc_Void (*switchFxn)(ti_sysbios_knl_Task_Handle, ti_sysbios_knl_Task_Handle);
S    xdc_Void (*exitFxn)(ti_sysbios_knl_Task_Handle);
S    xdc_Void (*deleteFxn)(ti_sysbios_knl_Task_Handle);
S};
S
S/* AFFINITY_NONE */
S#define ti_sysbios_knl_Task_AFFINITY_NONE (~(0))
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Task_Args__create {
S    ti_sysbios_knl_Task_FuncPtr fxn;
S} ti_sysbios_knl_Task_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* PendElem */
Sstruct ti_sysbios_knl_Task_PendElem {
S    ti_sysbios_knl_Queue_Elem qElem;
S    ti_sysbios_knl_Task_Handle task;
S    ti_sysbios_knl_Clock_Handle clock;
S};
S
S/* Instance_State */
Stypedef xdc_Char __T1_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef xdc_Char *__ARRAY1_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__stack __TA_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef xdc_Ptr __T1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Stypedef xdc_Ptr *__ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv __TA_ti_sysbios_knl_Task_Instance_State__hookEnv;
S
S/* Module_State */
Stypedef ti_sysbios_knl_Queue_Instance_State __T1_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef ti_sysbios_knl_Queue_Instance_State *__ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ __TA_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet __TA_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask __TA_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask __TA_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef ti_sysbios_knl_Queue_Handle __T1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef ti_sysbios_knl_Queue_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask __TA_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks __TA_ti_sysbios_knl_Task_Module_State__constructedTasks;
S
S/* RunQEntry */
Sstruct ti_sysbios_knl_Task_RunQEntry {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt coreId;
S    xdc_Int priority;
S};
S
S/* Module_StateSmp */
Stypedef volatile ti_sysbios_knl_Task_RunQEntry __T1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Stypedef volatile ti_sysbios_knl_Task_RunQEntry *__ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Sstruct ti_sysbios_knl_Task_Module_StateSmp {
S    ti_sysbios_knl_Queue_Object *sortedRunQ;
S    __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ smpRunQ;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsEnabled ti_sysbios_knl_Task_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsIncluded ti_sysbios_knl_Task_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Task_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsMask ti_sysbios_knl_Task_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gateObj ti_sysbios_knl_Task_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gatePrms ti_sysbios_knl_Task_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Task_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerDefined ti_sysbios_knl_Task_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerObj ti_sysbios_knl_Task_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Task_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn0 ti_sysbios_knl_Task_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Task_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn1 ti_sysbios_knl_Task_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Task_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn2 ti_sysbios_knl_Task_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Task_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn4 ti_sysbios_knl_Task_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Task_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn8 ti_sysbios_knl_Task_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Task_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__startupDoneFxn ti_sysbios_knl_Task_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Task_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__count ti_sysbios_knl_Task_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__heap ti_sysbios_knl_Task_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__sizeof ti_sysbios_knl_Task_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__table ti_sysbios_knl_Task_Object__table__C;
S
S/* LM_switch */
S#define ti_sysbios_knl_Task_LM_switch (ti_sysbios_knl_Task_LM_switch__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_switch;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_switch ti_sysbios_knl_Task_LM_switch__C;
S
S/* LM_sleep */
S#define ti_sysbios_knl_Task_LM_sleep (ti_sysbios_knl_Task_LM_sleep__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_sleep;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_sleep ti_sysbios_knl_Task_LM_sleep__C;
S
S/* LD_ready */
S#define ti_sysbios_knl_Task_LD_ready (ti_sysbios_knl_Task_LD_ready__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_ready;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_ready ti_sysbios_knl_Task_LD_ready__C;
S
S/* LD_block */
S#define ti_sysbios_knl_Task_LD_block (ti_sysbios_knl_Task_LD_block__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_block;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_block ti_sysbios_knl_Task_LD_block__C;
S
S/* LM_yield */
S#define ti_sysbios_knl_Task_LM_yield (ti_sysbios_knl_Task_LM_yield__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_yield;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_yield ti_sysbios_knl_Task_LM_yield__C;
S
S/* LM_setPri */
S#define ti_sysbios_knl_Task_LM_setPri (ti_sysbios_knl_Task_LM_setPri__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setPri;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setPri ti_sysbios_knl_Task_LM_setPri__C;
S
S/* LD_exit */
S#define ti_sysbios_knl_Task_LD_exit (ti_sysbios_knl_Task_LD_exit__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_exit;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_exit ti_sysbios_knl_Task_LD_exit__C;
S
S/* LM_setAffinity */
S#define ti_sysbios_knl_Task_LM_setAffinity (ti_sysbios_knl_Task_LM_setAffinity__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setAffinity;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity__C;
S
S/* LM_schedule */
S#define ti_sysbios_knl_Task_LM_schedule (ti_sysbios_knl_Task_LM_schedule__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_schedule;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_schedule ti_sysbios_knl_Task_LM_schedule__C;
S
S/* LM_noWork */
S#define ti_sysbios_knl_Task_LM_noWork (ti_sysbios_knl_Task_LM_noWork__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_noWork;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_noWork ti_sysbios_knl_Task_LM_noWork__C;
S
S/* E_stackOverflow */
S#define ti_sysbios_knl_Task_E_stackOverflow (ti_sysbios_knl_Task_E_stackOverflow__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_stackOverflow;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow__C;
S
S/* E_spOutOfBounds */
S#define ti_sysbios_knl_Task_E_spOutOfBounds (ti_sysbios_knl_Task_E_spOutOfBounds__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_spOutOfBounds;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds__C;
S
S/* E_deleteNotAllowed */
S#define ti_sysbios_knl_Task_E_deleteNotAllowed (ti_sysbios_knl_Task_E_deleteNotAllowed__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_deleteNotAllowed;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed__C;
S
S/* A_badThreadType */
S#define ti_sysbios_knl_Task_A_badThreadType (ti_sysbios_knl_Task_A_badThreadType__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badThreadType;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType__C;
S
S/* A_badTaskState */
S#define ti_sysbios_knl_Task_A_badTaskState (ti_sysbios_knl_Task_A_badTaskState__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTaskState;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState__C;
S
S/* A_noPendElem */
S#define ti_sysbios_knl_Task_A_noPendElem (ti_sysbios_knl_Task_A_noPendElem__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_noPendElem;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem__C;
S
S/* A_taskDisabled */
S#define ti_sysbios_knl_Task_A_taskDisabled (ti_sysbios_knl_Task_A_taskDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_taskDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled__C;
S
S/* A_badPriority */
S#define ti_sysbios_knl_Task_A_badPriority (ti_sysbios_knl_Task_A_badPriority__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badPriority;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badPriority ti_sysbios_knl_Task_A_badPriority__C;
S
S/* A_badTimeout */
S#define ti_sysbios_knl_Task_A_badTimeout (ti_sysbios_knl_Task_A_badTimeout__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTimeout;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout__C;
S
S/* A_badAffinity */
S#define ti_sysbios_knl_Task_A_badAffinity (ti_sysbios_knl_Task_A_badAffinity__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badAffinity;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity__C;
S
S/* A_sleepTaskDisabled */
S#define ti_sysbios_knl_Task_A_sleepTaskDisabled (ti_sysbios_knl_Task_A_sleepTaskDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_sleepTaskDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled__C;
S
S/* A_invalidCoreId */
S#define ti_sysbios_knl_Task_A_invalidCoreId (ti_sysbios_knl_Task_A_invalidCoreId__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_invalidCoreId;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId__C;
S
S/* numPriorities */
S#ifdef ti_sysbios_knl_Task_numPriorities__D
S#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__D)
S#else
S#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Task_numPriorities;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_numPriorities ti_sysbios_knl_Task_numPriorities__C;
S#endif
S
S/* defaultStackSize */
S#ifdef ti_sysbios_knl_Task_defaultStackSize__D
S#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__D)
S#else
S#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__C)
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_defaultStackSize;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize__C;
S#endif
S
S/* defaultStackHeap */
S#define ti_sysbios_knl_Task_defaultStackHeap (ti_sysbios_knl_Task_defaultStackHeap__C)
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_defaultStackHeap;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap__C;
S
S/* allBlockedFunc */
S#define ti_sysbios_knl_Task_allBlockedFunc (ti_sysbios_knl_Task_allBlockedFunc__C)
Stypedef ti_sysbios_knl_Task_AllBlockedFuncPtr CT__ti_sysbios_knl_Task_allBlockedFunc;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc__C;
S
S/* initStackFlag */
S#ifdef ti_sysbios_knl_Task_initStackFlag__D
S#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__D)
S#else
S#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_initStackFlag;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_initStackFlag ti_sysbios_knl_Task_initStackFlag__C;
S#endif
S
S/* checkStackFlag */
S#ifdef ti_sysbios_knl_Task_checkStackFlag__D
S#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__D)
S#else
S#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_checkStackFlag;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag__C;
S#endif
S
S/* deleteTerminatedTasks */
S#ifdef ti_sysbios_knl_Task_deleteTerminatedTasks__D
S#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__D)
S#else
S#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_deleteTerminatedTasks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks__C;
S#endif
S
S/* hooks */
S#define ti_sysbios_knl_Task_hooks (ti_sysbios_knl_Task_hooks__C)
Stypedef ti_sysbios_knl_Task_HookSet __T1_ti_sysbios_knl_Task_hooks;
Stypedef struct { int length; ti_sysbios_knl_Task_HookSet *elem; } __ARRAY1_ti_sysbios_knl_Task_hooks;
Stypedef __ARRAY1_ti_sysbios_knl_Task_hooks __TA_ti_sysbios_knl_Task_hooks;
Stypedef __TA_ti_sysbios_knl_Task_hooks CT__ti_sysbios_knl_Task_hooks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_hooks ti_sysbios_knl_Task_hooks__C;
S
S/* numConstructedTasks */
S#ifdef ti_sysbios_knl_Task_numConstructedTasks__D
S#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__D)
S#else
S#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Task_numConstructedTasks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks__C;
S#endif
S
S/* startupHookFunc */
S#define ti_sysbios_knl_Task_startupHookFunc (ti_sysbios_knl_Task_startupHookFunc__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Task_startupHookFunc)(xdc_Void);
S__extern __FAR__ const CT__ti_sysbios_knl_Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Task_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_Int priority;
S    xdc_Ptr stack;
S    xdc_SizeT stackSize;
S    xdc_runtime_IHeap_Handle stackHeap;
S    xdc_Ptr env;
S    xdc_Bool vitalTaskFlag;
S    xdc_UInt affinity;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Task_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    volatile xdc_Int __f1;
S    xdc_UInt __f2;
S    xdc_Ptr __f3;
S    ti_sysbios_knl_Task_Mode __f4;
S    ti_sysbios_knl_Task_PendElem *__f5;
S    xdc_SizeT __f6;
S    __TA_ti_sysbios_knl_Task_Instance_State__stack __f7;
S    xdc_runtime_IHeap_Handle __f8;
S    ti_sysbios_knl_Task_FuncPtr __f9;
S    xdc_UArg __f10;
S    xdc_UArg __f11;
S    xdc_Ptr __f12;
S    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv __f13;
S    xdc_Bool __f14;
S    ti_sysbios_knl_Queue_Handle __f15;
S    xdc_UInt __f16;
S    xdc_UInt __f17;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Task_Module_startup ti_sysbios_knl_Task_Module_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__E, "ti_sysbios_knl_Task_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Task_Module_startup__E( xdc_Int state );
Sxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__F, "ti_sysbios_knl_Task_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Task_Module_startup__F( xdc_Int state );
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Task_Instance_init__E, "ti_sysbios_knl_Task_Instance_init")
S__extern xdc_Int ti_sysbios_knl_Task_Instance_init__E(ti_sysbios_knl_Task_Object *, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *, xdc_runtime_Error_Block *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Task_Instance_finalize__E, "ti_sysbios_knl_Task_Instance_finalize")
S__extern void ti_sysbios_knl_Task_Instance_finalize__E( ti_sysbios_knl_Task_Object* , int );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Handle__label__S, "ti_sysbios_knl_Task_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Module__startupDone__S, "ti_sysbios_knl_Task_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Task_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__create__S, "ti_sysbios_knl_Task_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Task_create, "ti_sysbios_knl_Task_create")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_create( ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Task_construct, "ti_sysbios_knl_Task_construct")
S__extern void ti_sysbios_knl_Task_construct( ti_sysbios_knl_Task_Struct *__obj, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__delete__S, "ti_sysbios_knl_Task_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Task_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Task_delete, "ti_sysbios_knl_Task_delete")
S__extern void ti_sysbios_knl_Task_delete(ti_sysbios_knl_Task_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__destruct__S, "ti_sysbios_knl_Task_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Task_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Task_destruct, "ti_sysbios_knl_Task_destruct")
S__extern void ti_sysbios_knl_Task_destruct(ti_sysbios_knl_Task_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__get__S, "ti_sysbios_knl_Task_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__first__S, "ti_sysbios_knl_Task_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__next__S, "ti_sysbios_knl_Task_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Params__init__S, "ti_sysbios_knl_Task_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Task_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* startup__E */
S#define ti_sysbios_knl_Task_startup ti_sysbios_knl_Task_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Task_startup__E, "ti_sysbios_knl_Task_startup")
S__extern xdc_Void ti_sysbios_knl_Task_startup__E( void );
S
S/* enabled__E */
S#define ti_sysbios_knl_Task_enabled ti_sysbios_knl_Task_enabled__E
Sxdc__CODESECT(ti_sysbios_knl_Task_enabled__E, "ti_sysbios_knl_Task_enabled")
S__extern xdc_Bool ti_sysbios_knl_Task_enabled__E( void );
S
S/* unlockSched__E */
S#define ti_sysbios_knl_Task_unlockSched ti_sysbios_knl_Task_unlockSched__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unlockSched__E, "ti_sysbios_knl_Task_unlockSched")
S__extern xdc_Void ti_sysbios_knl_Task_unlockSched__E( void );
S
S/* disable__E */
S#define ti_sysbios_knl_Task_disable ti_sysbios_knl_Task_disable__E
Sxdc__CODESECT(ti_sysbios_knl_Task_disable__E, "ti_sysbios_knl_Task_disable")
S__extern xdc_UInt ti_sysbios_knl_Task_disable__E( void );
S
S/* enable__E */
S#define ti_sysbios_knl_Task_enable ti_sysbios_knl_Task_enable__E
Sxdc__CODESECT(ti_sysbios_knl_Task_enable__E, "ti_sysbios_knl_Task_enable")
S__extern xdc_Void ti_sysbios_knl_Task_enable__E( void );
S
S/* restore__E */
S#define ti_sysbios_knl_Task_restore ti_sysbios_knl_Task_restore__E
Sxdc__CODESECT(ti_sysbios_knl_Task_restore__E, "ti_sysbios_knl_Task_restore")
S__extern xdc_Void ti_sysbios_knl_Task_restore__E( xdc_UInt key );
S
S/* restoreHwi__E */
S#define ti_sysbios_knl_Task_restoreHwi ti_sysbios_knl_Task_restoreHwi__E
Sxdc__CODESECT(ti_sysbios_knl_Task_restoreHwi__E, "ti_sysbios_knl_Task_restoreHwi")
S__extern xdc_Void ti_sysbios_knl_Task_restoreHwi__E( xdc_UInt key );
S
S/* self__E */
S#define ti_sysbios_knl_Task_self ti_sysbios_knl_Task_self__E
Sxdc__CODESECT(ti_sysbios_knl_Task_self__E, "ti_sysbios_knl_Task_self")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_self__E( void );
S
S/* checkStacks__E */
S#define ti_sysbios_knl_Task_checkStacks ti_sysbios_knl_Task_checkStacks__E
Sxdc__CODESECT(ti_sysbios_knl_Task_checkStacks__E, "ti_sysbios_knl_Task_checkStacks")
S__extern xdc_Void ti_sysbios_knl_Task_checkStacks__E( ti_sysbios_knl_Task_Handle oldTask, ti_sysbios_knl_Task_Handle newTask );
S
S/* exit__E */
S#define ti_sysbios_knl_Task_exit ti_sysbios_knl_Task_exit__E
Sxdc__CODESECT(ti_sysbios_knl_Task_exit__E, "ti_sysbios_knl_Task_exit")
S__extern xdc_Void ti_sysbios_knl_Task_exit__E( void );
S
S/* sleep__E */
S#define ti_sysbios_knl_Task_sleep ti_sysbios_knl_Task_sleep__E
Sxdc__CODESECT(ti_sysbios_knl_Task_sleep__E, "ti_sysbios_knl_Task_sleep")
S__extern xdc_Void ti_sysbios_knl_Task_sleep__E( xdc_UInt32 nticks );
S
S/* yield__E */
S#define ti_sysbios_knl_Task_yield ti_sysbios_knl_Task_yield__E
Sxdc__CODESECT(ti_sysbios_knl_Task_yield__E, "ti_sysbios_knl_Task_yield")
S__extern xdc_Void ti_sysbios_knl_Task_yield__E( void );
S
S/* getIdleTask__E */
S#define ti_sysbios_knl_Task_getIdleTask ti_sysbios_knl_Task_getIdleTask__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getIdleTask__E, "ti_sysbios_knl_Task_getIdleTask")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTask__E( void );
S
S/* getIdleTaskHandle__E */
S#define ti_sysbios_knl_Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getIdleTaskHandle__E, "ti_sysbios_knl_Task_getIdleTaskHandle")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTaskHandle__E( xdc_UInt coreId );
S
S/* startCore__E */
S#define ti_sysbios_knl_Task_startCore ti_sysbios_knl_Task_startCore__E
Sxdc__CODESECT(ti_sysbios_knl_Task_startCore__E, "ti_sysbios_knl_Task_startCore")
S__extern xdc_Void ti_sysbios_knl_Task_startCore__E( xdc_UInt coreId );
S
S/* getArg0__E */
S#define ti_sysbios_knl_Task_getArg0 ti_sysbios_knl_Task_getArg0__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getArg0__E, "ti_sysbios_knl_Task_getArg0")
S__extern xdc_UArg ti_sysbios_knl_Task_getArg0__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getArg1__E */
S#define ti_sysbios_knl_Task_getArg1 ti_sysbios_knl_Task_getArg1__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getArg1__E, "ti_sysbios_knl_Task_getArg1")
S__extern xdc_UArg ti_sysbios_knl_Task_getArg1__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getEnv__E */
S#define ti_sysbios_knl_Task_getEnv ti_sysbios_knl_Task_getEnv__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getEnv__E, "ti_sysbios_knl_Task_getEnv")
S__extern xdc_Ptr ti_sysbios_knl_Task_getEnv__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getFunc__E */
S#define ti_sysbios_knl_Task_getFunc ti_sysbios_knl_Task_getFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getFunc__E, "ti_sysbios_knl_Task_getFunc")
S__extern ti_sysbios_knl_Task_FuncPtr ti_sysbios_knl_Task_getFunc__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
S
S/* getHookContext__E */
S#define ti_sysbios_knl_Task_getHookContext ti_sysbios_knl_Task_getHookContext__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getHookContext__E, "ti_sysbios_knl_Task_getHookContext")
S__extern xdc_Ptr ti_sysbios_knl_Task_getHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id );
S
S/* getPri__E */
S#define ti_sysbios_knl_Task_getPri ti_sysbios_knl_Task_getPri__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getPri__E, "ti_sysbios_knl_Task_getPri")
S__extern xdc_Int ti_sysbios_knl_Task_getPri__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* setArg0__E */
S#define ti_sysbios_knl_Task_setArg0 ti_sysbios_knl_Task_setArg0__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setArg0__E, "ti_sysbios_knl_Task_setArg0")
S__extern xdc_Void ti_sysbios_knl_Task_setArg0__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
S
S/* setArg1__E */
S#define ti_sysbios_knl_Task_setArg1 ti_sysbios_knl_Task_setArg1__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setArg1__E, "ti_sysbios_knl_Task_setArg1")
S__extern xdc_Void ti_sysbios_knl_Task_setArg1__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
S
S/* setEnv__E */
S#define ti_sysbios_knl_Task_setEnv ti_sysbios_knl_Task_setEnv__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setEnv__E, "ti_sysbios_knl_Task_setEnv")
S__extern xdc_Void ti_sysbios_knl_Task_setEnv__E( ti_sysbios_knl_Task_Handle __inst, xdc_Ptr env );
S
S/* setHookContext__E */
S#define ti_sysbios_knl_Task_setHookContext ti_sysbios_knl_Task_setHookContext__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setHookContext__E, "ti_sysbios_knl_Task_setHookContext")
S__extern xdc_Void ti_sysbios_knl_Task_setHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
S
S/* setPri__E */
S#define ti_sysbios_knl_Task_setPri ti_sysbios_knl_Task_setPri__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setPri__E, "ti_sysbios_knl_Task_setPri")
S__extern xdc_UInt ti_sysbios_knl_Task_setPri__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int newpri );
S
S/* stat__E */
S#define ti_sysbios_knl_Task_stat ti_sysbios_knl_Task_stat__E
Sxdc__CODESECT(ti_sysbios_knl_Task_stat__E, "ti_sysbios_knl_Task_stat")
S__extern xdc_Void ti_sysbios_knl_Task_stat__E( ti_sysbios_knl_Task_Handle __inst, ti_sysbios_knl_Task_Stat *statbuf );
S
S/* getMode__E */
S#define ti_sysbios_knl_Task_getMode ti_sysbios_knl_Task_getMode__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getMode__E, "ti_sysbios_knl_Task_getMode")
S__extern ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_getMode__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* setAffinity__E */
S#define ti_sysbios_knl_Task_setAffinity ti_sysbios_knl_Task_setAffinity__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setAffinity__E, "ti_sysbios_knl_Task_setAffinity")
S__extern xdc_UInt ti_sysbios_knl_Task_setAffinity__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt coreId );
S
S/* getAffinity__E */
S#define ti_sysbios_knl_Task_getAffinity ti_sysbios_knl_Task_getAffinity__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getAffinity__E, "ti_sysbios_knl_Task_getAffinity")
S__extern xdc_UInt ti_sysbios_knl_Task_getAffinity__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* block__E */
S#define ti_sysbios_knl_Task_block ti_sysbios_knl_Task_block__E
Sxdc__CODESECT(ti_sysbios_knl_Task_block__E, "ti_sysbios_knl_Task_block")
S__extern xdc_Void ti_sysbios_knl_Task_block__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* unblock__E */
S#define ti_sysbios_knl_Task_unblock ti_sysbios_knl_Task_unblock__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unblock__E, "ti_sysbios_knl_Task_unblock")
S__extern xdc_Void ti_sysbios_knl_Task_unblock__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* blockI__E */
S#define ti_sysbios_knl_Task_blockI ti_sysbios_knl_Task_blockI__E
Sxdc__CODESECT(ti_sysbios_knl_Task_blockI__E, "ti_sysbios_knl_Task_blockI")
S__extern xdc_Void ti_sysbios_knl_Task_blockI__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* unblockI__E */
S#define ti_sysbios_knl_Task_unblockI ti_sysbios_knl_Task_unblockI__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unblockI__E, "ti_sysbios_knl_Task_unblockI")
S__extern xdc_Void ti_sysbios_knl_Task_unblockI__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt hwiKey );
S
S/* schedule__I */
S#define ti_sysbios_knl_Task_schedule ti_sysbios_knl_Task_schedule__I
Sxdc__CODESECT(ti_sysbios_knl_Task_schedule__I, "ti_sysbios_knl_Task_schedule")
S__extern xdc_Void ti_sysbios_knl_Task_schedule__I( void );
S
S/* enter__I */
S#define ti_sysbios_knl_Task_enter ti_sysbios_knl_Task_enter__I
Sxdc__CODESECT(ti_sysbios_knl_Task_enter__I, "ti_sysbios_knl_Task_enter")
S__extern xdc_Void ti_sysbios_knl_Task_enter__I( void );
S
S/* sleepTimeout__I */
S#define ti_sysbios_knl_Task_sleepTimeout ti_sysbios_knl_Task_sleepTimeout__I
Sxdc__CODESECT(ti_sysbios_knl_Task_sleepTimeout__I, "ti_sysbios_knl_Task_sleepTimeout")
S__extern xdc_Void ti_sysbios_knl_Task_sleepTimeout__I( xdc_UArg arg );
S
S/* postInit__I */
S#define ti_sysbios_knl_Task_postInit ti_sysbios_knl_Task_postInit__I
Sxdc__CODESECT(ti_sysbios_knl_Task_postInit__I, "ti_sysbios_knl_Task_postInit")
S__extern xdc_Int ti_sysbios_knl_Task_postInit__I( ti_sysbios_knl_Task_Object *task, xdc_runtime_Error_Block *eb );
S
S/* allBlockedFunction__I */
S#define ti_sysbios_knl_Task_allBlockedFunction ti_sysbios_knl_Task_allBlockedFunction__I
Sxdc__CODESECT(ti_sysbios_knl_Task_allBlockedFunction__I, "ti_sysbios_knl_Task_allBlockedFunction")
S__extern xdc_Void ti_sysbios_knl_Task_allBlockedFunction__I( void );
S
S/* deleteTerminatedTasksFunc__I */
S#define ti_sysbios_knl_Task_deleteTerminatedTasksFunc ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I
Sxdc__CODESECT(ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I, "ti_sysbios_knl_Task_deleteTerminatedTasksFunc")
S__extern xdc_Void ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I( void );
S
S/* processVitalTaskFlag__I */
S#define ti_sysbios_knl_Task_processVitalTaskFlag ti_sysbios_knl_Task_processVitalTaskFlag__I
Sxdc__CODESECT(ti_sysbios_knl_Task_processVitalTaskFlag__I, "ti_sysbios_knl_Task_processVitalTaskFlag")
S__extern xdc_Void ti_sysbios_knl_Task_processVitalTaskFlag__I( ti_sysbios_knl_Task_Object *task );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Task_Module_startupDone() ti_sysbios_knl_Task_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Task_Object_heap() ti_sysbios_knl_Task_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Task_Module_heap() ti_sysbios_knl_Task_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module_id( void ) 
S{
S    return ti_sysbios_knl_Task_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Task_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Task_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Task_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Task_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Task_Module__diagsMask__C != NULL) *ti_sysbios_knl_Task_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Task_Params_init( ti_sysbios_knl_Task_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Task_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Task_Params_copy(ti_sysbios_knl_Task_Params *dst, const ti_sysbios_knl_Task_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Task_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Task_Object_count() ti_sysbios_knl_Task_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Task_Object_sizeof() ti_sysbios_knl_Task_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_get(ti_sysbios_knl_Task_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_first( void )
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_next( ti_sysbios_knl_Task_Object *obj )
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle_label( ti_sysbios_knl_Task_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Task_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Task_Handle_name( ti_sysbios_knl_Task_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Task_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_handle( ti_sysbios_knl_Task_Struct *str )
S{
S    return (ti_sysbios_knl_Task_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Task_Struct *ti_sysbios_knl_Task_struct( ti_sysbios_knl_Task_Handle inst )
S{
S    return (ti_sysbios_knl_Task_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <ti/sysbios/knl/Task__epilogue.h>
S
S#ifdef ti_sysbios_knl_Task__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Task__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Task__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Task__include_state
S#define ti_sysbios_knl_Task__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Task_Module_State {
S    volatile xdc_Bool locked;
S    volatile xdc_UInt curSet;
S    xdc_Bool workFlag;
S    xdc_UInt vitalTasks;
S    ti_sysbios_knl_Task_Handle curTask;
S    ti_sysbios_knl_Queue_Handle curQ;
S    __TA_ti_sysbios_knl_Task_Module_State__readyQ readyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurSet smpCurSet;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurMask smpCurMask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurTask smpCurTask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ smpReadyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__idleTask idleTask;
S    __TA_ti_sysbios_knl_Task_Module_State__constructedTasks constructedTasks;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Task_Module_State__ ti_sysbios_knl_Task_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Task_Object {
S    ti_sysbios_knl_Queue_Elem qElem;
S    volatile xdc_Int priority;
S    xdc_UInt mask;
S    xdc_Ptr context;
S    ti_sysbios_knl_Task_Mode mode;
S    ti_sysbios_knl_Task_PendElem *pendElem;
S    xdc_SizeT stackSize;
S    __TA_ti_sysbios_knl_Task_Instance_State__stack stack;
S    xdc_runtime_IHeap_Handle stackHeap;
S    ti_sysbios_knl_Task_FuncPtr fxn;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_Ptr env;
S    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv hookEnv;
S    xdc_Bool vitalTaskFlag;
S    ti_sysbios_knl_Queue_Handle readyQ;
S    xdc_UInt curCoreId;
S    xdc_UInt affinity;
S};
S
S/* Module_State_inactiveQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_inactiveQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_inactiveQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_inactiveQ__O);
S}
S
S/* Module_State_terminatedQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_terminatedQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_terminatedQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_terminatedQ__O);
S}
S
S#endif /* ti_sysbios_knl_Task__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Task__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Task__localnames__done
S#define ti_sysbios_knl_Task__localnames__done
S
S/* module prefix */
S#define Task_Instance ti_sysbios_knl_Task_Instance
S#define Task_Handle ti_sysbios_knl_Task_Handle
S#define Task_Module ti_sysbios_knl_Task_Module
S#define Task_Object ti_sysbios_knl_Task_Object
S#define Task_Struct ti_sysbios_knl_Task_Struct
S#define Task_FuncPtr ti_sysbios_knl_Task_FuncPtr
S#define Task_AllBlockedFuncPtr ti_sysbios_knl_Task_AllBlockedFuncPtr
S#define Task_Mode ti_sysbios_knl_Task_Mode
S#define Task_Stat ti_sysbios_knl_Task_Stat
S#define Task_HookSet ti_sysbios_knl_Task_HookSet
S#define Task_AFFINITY_NONE ti_sysbios_knl_Task_AFFINITY_NONE
S#define Task_PendElem ti_sysbios_knl_Task_PendElem
S#define Task_Instance_State ti_sysbios_knl_Task_Instance_State
S#define Task_Module_State ti_sysbios_knl_Task_Module_State
S#define Task_RunQEntry ti_sysbios_knl_Task_RunQEntry
S#define Task_Module_StateSmp ti_sysbios_knl_Task_Module_StateSmp
S#define Task_Mode_RUNNING ti_sysbios_knl_Task_Mode_RUNNING
S#define Task_Mode_READY ti_sysbios_knl_Task_Mode_READY
S#define Task_Mode_BLOCKED ti_sysbios_knl_Task_Mode_BLOCKED
S#define Task_Mode_TERMINATED ti_sysbios_knl_Task_Mode_TERMINATED
S#define Task_Mode_INACTIVE ti_sysbios_knl_Task_Mode_INACTIVE
S#define Task_LM_switch ti_sysbios_knl_Task_LM_switch
S#define Task_LM_sleep ti_sysbios_knl_Task_LM_sleep
S#define Task_LD_ready ti_sysbios_knl_Task_LD_ready
S#define Task_LD_block ti_sysbios_knl_Task_LD_block
S#define Task_LM_yield ti_sysbios_knl_Task_LM_yield
S#define Task_LM_setPri ti_sysbios_knl_Task_LM_setPri
S#define Task_LD_exit ti_sysbios_knl_Task_LD_exit
S#define Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity
S#define Task_LM_schedule ti_sysbios_knl_Task_LM_schedule
S#define Task_LM_noWork ti_sysbios_knl_Task_LM_noWork
S#define Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow
S#define Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds
S#define Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed
S#define Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType
S#define Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState
S#define Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem
S#define Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled
S#define Task_A_badPriority ti_sysbios_knl_Task_A_badPriority
S#define Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout
S#define Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity
S#define Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled
S#define Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId
S#define Task_numPriorities ti_sysbios_knl_Task_numPriorities
S#define Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize
S#define Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap
S#define Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc
S#define Task_initStackFlag ti_sysbios_knl_Task_initStackFlag
S#define Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag
S#define Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks
S#define Task_hooks ti_sysbios_knl_Task_hooks
S#define Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks
S#define Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc
S#define Task_Module_State_inactiveQ ti_sysbios_knl_Task_Module_State_inactiveQ
S#define Task_Module_State_terminatedQ ti_sysbios_knl_Task_Module_State_terminatedQ
S#define Task_Params ti_sysbios_knl_Task_Params
S#define Task_startup ti_sysbios_knl_Task_startup
S#define Task_enabled ti_sysbios_knl_Task_enabled
S#define Task_unlockSched ti_sysbios_knl_Task_unlockSched
S#define Task_disable ti_sysbios_knl_Task_disable
S#define Task_enable ti_sysbios_knl_Task_enable
S#define Task_restore ti_sysbios_knl_Task_restore
S#define Task_restoreHwi ti_sysbios_knl_Task_restoreHwi
S#define Task_self ti_sysbios_knl_Task_self
S#define Task_selfMacro ti_sysbios_knl_Task_selfMacro
S#define Task_checkStacks ti_sysbios_knl_Task_checkStacks
S#define Task_exit ti_sysbios_knl_Task_exit
S#define Task_sleep ti_sysbios_knl_Task_sleep
S#define Task_yield ti_sysbios_knl_Task_yield
S#define Task_getIdleTask ti_sysbios_knl_Task_getIdleTask
S#define Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle
S#define Task_startCore ti_sysbios_knl_Task_startCore
S#define Task_getArg0 ti_sysbios_knl_Task_getArg0
S#define Task_getArg1 ti_sysbios_knl_Task_getArg1
S#define Task_getEnv ti_sysbios_knl_Task_getEnv
S#define Task_getFunc ti_sysbios_knl_Task_getFunc
S#define Task_getHookContext ti_sysbios_knl_Task_getHookContext
S#define Task_getPri ti_sysbios_knl_Task_getPri
S#define Task_setArg0 ti_sysbios_knl_Task_setArg0
S#define Task_setArg1 ti_sysbios_knl_Task_setArg1
S#define Task_setEnv ti_sysbios_knl_Task_setEnv
S#define Task_setHookContext ti_sysbios_knl_Task_setHookContext
S#define Task_setPri ti_sysbios_knl_Task_setPri
S#define Task_stat ti_sysbios_knl_Task_stat
S#define Task_getMode ti_sysbios_knl_Task_getMode
S#define Task_setAffinity ti_sysbios_knl_Task_setAffinity
S#define Task_getAffinity ti_sysbios_knl_Task_getAffinity
S#define Task_block ti_sysbios_knl_Task_block
S#define Task_unblock ti_sysbios_knl_Task_unblock
S#define Task_blockI ti_sysbios_knl_Task_blockI
S#define Task_unblockI ti_sysbios_knl_Task_unblockI
S#define Task_Module_name ti_sysbios_knl_Task_Module_name
S#define Task_Module_id ti_sysbios_knl_Task_Module_id
S#define Task_Module_startup ti_sysbios_knl_Task_Module_startup
S#define Task_Module_startupDone ti_sysbios_knl_Task_Module_startupDone
S#define Task_Module_hasMask ti_sysbios_knl_Task_Module_hasMask
S#define Task_Module_getMask ti_sysbios_knl_Task_Module_getMask
S#define Task_Module_setMask ti_sysbios_knl_Task_Module_setMask
S#define Task_Object_heap ti_sysbios_knl_Task_Object_heap
S#define Task_Module_heap ti_sysbios_knl_Task_Module_heap
S#define Task_construct ti_sysbios_knl_Task_construct
S#define Task_create ti_sysbios_knl_Task_create
S#define Task_handle ti_sysbios_knl_Task_handle
S#define Task_struct ti_sysbios_knl_Task_struct
S#define Task_Handle_label ti_sysbios_knl_Task_Handle_label
S#define Task_Handle_name ti_sysbios_knl_Task_Handle_name
S#define Task_Instance_init ti_sysbios_knl_Task_Instance_init
S#define Task_Object_count ti_sysbios_knl_Task_Object_count
S#define Task_Object_get ti_sysbios_knl_Task_Object_get
S#define Task_Object_first ti_sysbios_knl_Task_Object_first
S#define Task_Object_next ti_sysbios_knl_Task_Object_next
S#define Task_Object_sizeof ti_sysbios_knl_Task_Object_sizeof
S#define Task_Params_copy ti_sysbios_knl_Task_Params_copy
S#define Task_Params_init ti_sysbios_knl_Task_Params_init
S#define Task_Instance_finalize ti_sysbios_knl_Task_Instance_finalize
S#define Task_delete ti_sysbios_knl_Task_delete
S#define Task_destruct ti_sysbios_knl_Task_destruct
S
S/* proxies */
S#include <ti/sysbios/knl/package/Task_SupportProxy.h>
S
S#endif /* ti_sysbios_knl_Task__localnames__done */
N#endif
L 64 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <ti/sysbios/knl/Clock.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock__include
S#define ti_sysbios_knl_Clock__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Clock___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Assert.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/interfaces/ITimer.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <ti/sysbios/knl/Swi.h>
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* TickSource */
Senum ti_sysbios_knl_Clock_TickSource {
S    ti_sysbios_knl_Clock_TickSource_TIMER,
S    ti_sysbios_knl_Clock_TickSource_USER,
S    ti_sysbios_knl_Clock_TickSource_NULL
S};
Stypedef enum ti_sysbios_knl_Clock_TickSource ti_sysbios_knl_Clock_TickSource;
S
S/* TickMode */
Senum ti_sysbios_knl_Clock_TickMode {
S    ti_sysbios_knl_Clock_TickMode_PERIODIC,
S    ti_sysbios_knl_Clock_TickMode_DYNAMIC
S};
Stypedef enum ti_sysbios_knl_Clock_TickMode ti_sysbios_knl_Clock_TickMode;
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Clock_FuncPtr)(xdc_UArg);
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Clock_Args__create {
S    ti_sysbios_knl_Clock_FuncPtr clockFxn;
S    xdc_UInt timeout;
S} ti_sysbios_knl_Clock_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsEnabled ti_sysbios_knl_Clock_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsIncluded ti_sysbios_knl_Clock_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsMask ti_sysbios_knl_Clock_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gateObj ti_sysbios_knl_Clock_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gatePrms ti_sysbios_knl_Clock_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Clock_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerDefined ti_sysbios_knl_Clock_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerObj ti_sysbios_knl_Clock_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn0 ti_sysbios_knl_Clock_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn1 ti_sysbios_knl_Clock_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn2 ti_sysbios_knl_Clock_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn4 ti_sysbios_knl_Clock_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn8 ti_sysbios_knl_Clock_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__startupDoneFxn ti_sysbios_knl_Clock_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Clock_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__count ti_sysbios_knl_Clock_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__heap ti_sysbios_knl_Clock_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Clock_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__sizeof ti_sysbios_knl_Clock_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__table ti_sysbios_knl_Clock_Object__table__C;
S
S/* LW_delayed */
S#define ti_sysbios_knl_Clock_LW_delayed (ti_sysbios_knl_Clock_LW_delayed__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LW_delayed;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed__C;
S
S/* LM_tick */
S#define ti_sysbios_knl_Clock_LM_tick (ti_sysbios_knl_Clock_LM_tick__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_tick;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_tick ti_sysbios_knl_Clock_LM_tick__C;
S
S/* LM_begin */
S#define ti_sysbios_knl_Clock_LM_begin (ti_sysbios_knl_Clock_LM_begin__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_begin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_begin ti_sysbios_knl_Clock_LM_begin__C;
S
S/* A_clockDisabled */
S#define ti_sysbios_knl_Clock_A_clockDisabled (ti_sysbios_knl_Clock_A_clockDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_clockDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled__C;
S
S/* A_badThreadType */
S#define ti_sysbios_knl_Clock_A_badThreadType (ti_sysbios_knl_Clock_A_badThreadType__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_badThreadType;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType__C;
S
S/* serviceMargin */
S#ifdef ti_sysbios_knl_Clock_serviceMargin__D
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__D)
S#else
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_serviceMargin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin__C;
S#endif
S
S/* tickSource */
S#define ti_sysbios_knl_Clock_tickSource (ti_sysbios_knl_Clock_tickSource__C)
Stypedef ti_sysbios_knl_Clock_TickSource CT__ti_sysbios_knl_Clock_tickSource;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickSource ti_sysbios_knl_Clock_tickSource__C;
S
S/* tickMode */
S#define ti_sysbios_knl_Clock_tickMode (ti_sysbios_knl_Clock_tickMode__C)
Stypedef ti_sysbios_knl_Clock_TickMode CT__ti_sysbios_knl_Clock_tickMode;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickMode ti_sysbios_knl_Clock_tickMode__C;
S
S/* timerId */
S#ifdef ti_sysbios_knl_Clock_timerId__D
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__D)
S#else
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Clock_timerId;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_timerId ti_sysbios_knl_Clock_timerId__C;
S#endif
S
S/* tickPeriod */
S#ifdef ti_sysbios_knl_Clock_tickPeriod__D
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__D)
S#else
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_tickPeriod;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod__C;
S#endif
S
S/* doTickFunc */
S#define ti_sysbios_knl_Clock_doTickFunc (ti_sysbios_knl_Clock_doTickFunc__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Clock_doTickFunc)(xdc_UArg);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc__C;
S
S/* triggerClock */
S#define ti_sysbios_knl_Clock_triggerClock (ti_sysbios_knl_Clock_triggerClock__C)
Stypedef ti_sysbios_knl_Clock_Handle CT__ti_sysbios_knl_Clock_triggerClock;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_triggerClock ti_sysbios_knl_Clock_triggerClock__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Clock_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_Bool startFlag;
S    xdc_UInt32 period;
S    xdc_UArg arg;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Clock_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_UInt32 __f1;
S    xdc_UInt32 __f2;
S    xdc_UInt32 __f3;
S    volatile xdc_Bool __f4;
S    ti_sysbios_knl_Clock_FuncPtr __f5;
S    xdc_UArg __f6;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Clock_Module_startup ti_sysbios_knl_Clock_Module_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__E, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__E( xdc_Int state );
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__F, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__F( xdc_Int state );
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_init__E, "ti_sysbios_knl_Clock_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Clock_Instance_init__E(ti_sysbios_knl_Clock_Object *, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_finalize__E, "ti_sysbios_knl_Clock_Instance_finalize")
S__extern void ti_sysbios_knl_Clock_Instance_finalize__E( ti_sysbios_knl_Clock_Object* );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Handle__label__S, "ti_sysbios_knl_Clock_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module__startupDone__S, "ti_sysbios_knl_Clock_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Clock_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__create__S, "ti_sysbios_knl_Clock_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Clock_create, "ti_sysbios_knl_Clock_create")
S__extern ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_create( ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_construct, "ti_sysbios_knl_Clock_construct")
S__extern void ti_sysbios_knl_Clock_construct( ti_sysbios_knl_Clock_Struct *__obj, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__delete__S, "ti_sysbios_knl_Clock_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Clock_delete, "ti_sysbios_knl_Clock_delete")
S__extern void ti_sysbios_knl_Clock_delete(ti_sysbios_knl_Clock_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__destruct__S, "ti_sysbios_knl_Clock_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_destruct, "ti_sysbios_knl_Clock_destruct")
S__extern void ti_sysbios_knl_Clock_destruct(ti_sysbios_knl_Clock_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__get__S, "ti_sysbios_knl_Clock_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__first__S, "ti_sysbios_knl_Clock_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__next__S, "ti_sysbios_knl_Clock_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Params__init__S, "ti_sysbios_knl_Clock_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* getTicks__E */
S#define ti_sysbios_knl_Clock_getTicks ti_sysbios_knl_Clock_getTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicks__E, "ti_sysbios_knl_Clock_getTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicks__E( void );
S
S/* getTimerHandle__E */
S#define ti_sysbios_knl_Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimerHandle__E, "ti_sysbios_knl_Clock_getTimerHandle")
S__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_getTimerHandle__E( void );
S
S/* setTicks__E */
S#define ti_sysbios_knl_Clock_setTicks ti_sysbios_knl_Clock_setTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTicks__E, "ti_sysbios_knl_Clock_setTicks")
S__extern xdc_Void ti_sysbios_knl_Clock_setTicks__E( xdc_UInt32 ticks );
S
S/* tickStop__E */
S#define ti_sysbios_knl_Clock_tickStop ti_sysbios_knl_Clock_tickStop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStop__E, "ti_sysbios_knl_Clock_tickStop")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStop__E( void );
S
S/* tickReconfig__E */
S#define ti_sysbios_knl_Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickReconfig__E, "ti_sysbios_knl_Clock_tickReconfig")
S__extern xdc_Bool ti_sysbios_knl_Clock_tickReconfig__E( void );
S
S/* tickStart__E */
S#define ti_sysbios_knl_Clock_tickStart ti_sysbios_knl_Clock_tickStart__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStart__E, "ti_sysbios_knl_Clock_tickStart")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStart__E( void );
S
S/* tick__E */
S#define ti_sysbios_knl_Clock_tick ti_sysbios_knl_Clock_tick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tick__E, "ti_sysbios_knl_Clock_tick")
S__extern xdc_Void ti_sysbios_knl_Clock_tick__E( void );
S
S/* workFunc__E */
S#define ti_sysbios_knl_Clock_workFunc ti_sysbios_knl_Clock_workFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFunc__E, "ti_sysbios_knl_Clock_workFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_workFunc__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* workFuncDynamic__E */
S#define ti_sysbios_knl_Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFuncDynamic__E, "ti_sysbios_knl_Clock_workFuncDynamic")
S__extern xdc_Void ti_sysbios_knl_Clock_workFuncDynamic__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* logTick__E */
S#define ti_sysbios_knl_Clock_logTick ti_sysbios_knl_Clock_logTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_logTick__E, "ti_sysbios_knl_Clock_logTick")
S__extern xdc_Void ti_sysbios_knl_Clock_logTick__E( void );
S
S/* getCompletedTicks__E */
S#define ti_sysbios_knl_Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getCompletedTicks__E, "ti_sysbios_knl_Clock_getCompletedTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getCompletedTicks__E( void );
S
S/* getTickPeriod__E */
S#define ti_sysbios_knl_Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTickPeriod__E, "ti_sysbios_knl_Clock_getTickPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTickPeriod__E( void );
S
S/* getTicksUntilInterrupt__E */
S#define ti_sysbios_knl_Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilInterrupt__E, "ti_sysbios_knl_Clock_getTicksUntilInterrupt")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilInterrupt__E( void );
S
S/* getTicksUntilTimeout__E */
S#define ti_sysbios_knl_Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilTimeout__E, "ti_sysbios_knl_Clock_getTicksUntilTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilTimeout__E( void );
S
S/* walkQueueDynamic__E */
S#define ti_sysbios_knl_Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueueDynamic__E, "ti_sysbios_knl_Clock_walkQueueDynamic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueueDynamic__E( xdc_Bool service, xdc_UInt32 tick );
S
S/* walkQueuePeriodic__E */
S#define ti_sysbios_knl_Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueuePeriodic__E, "ti_sysbios_knl_Clock_walkQueuePeriodic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueuePeriodic__E( void );
S
S/* scheduleNextTick__E */
S#define ti_sysbios_knl_Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_scheduleNextTick__E, "ti_sysbios_knl_Clock_scheduleNextTick")
S__extern xdc_Void ti_sysbios_knl_Clock_scheduleNextTick__E( xdc_UInt32 deltaTicks, xdc_UInt32 absTick );
S
S/* addI__E */
S#define ti_sysbios_knl_Clock_addI ti_sysbios_knl_Clock_addI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_addI__E, "ti_sysbios_knl_Clock_addI")
S__extern xdc_Void ti_sysbios_knl_Clock_addI__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt32 timeout, xdc_UArg arg );
S
S/* removeI__E */
S#define ti_sysbios_knl_Clock_removeI ti_sysbios_knl_Clock_removeI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_removeI__E, "ti_sysbios_knl_Clock_removeI")
S__extern xdc_Void ti_sysbios_knl_Clock_removeI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* start__E */
S#define ti_sysbios_knl_Clock_start ti_sysbios_knl_Clock_start__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_start__E, "ti_sysbios_knl_Clock_start")
S__extern xdc_Void ti_sysbios_knl_Clock_start__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* startI__E */
S#define ti_sysbios_knl_Clock_startI ti_sysbios_knl_Clock_startI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_startI__E, "ti_sysbios_knl_Clock_startI")
S__extern xdc_Void ti_sysbios_knl_Clock_startI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* stop__E */
S#define ti_sysbios_knl_Clock_stop ti_sysbios_knl_Clock_stop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_stop__E, "ti_sysbios_knl_Clock_stop")
S__extern xdc_Void ti_sysbios_knl_Clock_stop__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* setPeriod__E */
S#define ti_sysbios_knl_Clock_setPeriod ti_sysbios_knl_Clock_setPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setPeriod__E, "ti_sysbios_knl_Clock_setPeriod")
S__extern xdc_Void ti_sysbios_knl_Clock_setPeriod__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 period );
S
S/* setTimeout__E */
S#define ti_sysbios_knl_Clock_setTimeout ti_sysbios_knl_Clock_setTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTimeout__E, "ti_sysbios_knl_Clock_setTimeout")
S__extern xdc_Void ti_sysbios_knl_Clock_setTimeout__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 timeout );
S
S/* setFunc__E */
S#define ti_sysbios_knl_Clock_setFunc ti_sysbios_knl_Clock_setFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setFunc__E, "ti_sysbios_knl_Clock_setFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_setFunc__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr fxn, xdc_UArg arg );
S
S/* getPeriod__E */
S#define ti_sysbios_knl_Clock_getPeriod ti_sysbios_knl_Clock_getPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getPeriod__E, "ti_sysbios_knl_Clock_getPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getPeriod__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* getTimeout__E */
S#define ti_sysbios_knl_Clock_getTimeout ti_sysbios_knl_Clock_getTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimeout__E, "ti_sysbios_knl_Clock_getTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTimeout__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* isActive__E */
S#define ti_sysbios_knl_Clock_isActive ti_sysbios_knl_Clock_isActive__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_isActive__E, "ti_sysbios_knl_Clock_isActive")
S__extern xdc_Bool ti_sysbios_knl_Clock_isActive__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* doTick__I */
S#define ti_sysbios_knl_Clock_doTick ti_sysbios_knl_Clock_doTick__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_doTick__I, "ti_sysbios_knl_Clock_doTick")
S__extern xdc_Void ti_sysbios_knl_Clock_doTick__I( xdc_UArg arg );
S
S/* triggerFunc__I */
S#define ti_sysbios_knl_Clock_triggerFunc ti_sysbios_knl_Clock_triggerFunc__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_triggerFunc__I, "ti_sysbios_knl_Clock_triggerFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_triggerFunc__I( xdc_UArg arg );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Clock_Module_startupDone() ti_sysbios_knl_Clock_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Clock_Object_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Clock_Module_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module_id( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Clock_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Clock_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Clock_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Clock_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Clock_Module__diagsMask__C != NULL) *ti_sysbios_knl_Clock_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Clock_Params_init( ti_sysbios_knl_Clock_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Clock_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Clock_Params_copy(ti_sysbios_knl_Clock_Params *dst, const ti_sysbios_knl_Clock_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Clock_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Clock_Object_count() ti_sysbios_knl_Clock_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Clock_Object_sizeof() ti_sysbios_knl_Clock_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_get(ti_sysbios_knl_Clock_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_first( void )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_next( ti_sysbios_knl_Clock_Object *obj )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle_label( ti_sysbios_knl_Clock_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Clock_Handle_name( ti_sysbios_knl_Clock_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_handle( ti_sysbios_knl_Clock_Struct *str )
S{
S    return (ti_sysbios_knl_Clock_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Clock_Struct *ti_sysbios_knl_Clock_struct( ti_sysbios_knl_Clock_Handle inst )
S{
S    return (ti_sysbios_knl_Clock_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Clock__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Clock__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Clock__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Clock__include_state
S#define ti_sysbios_knl_Clock__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Clock_Module_State {
S    volatile xdc_UInt32 ticks;
S    xdc_UInt swiCount;
S    ti_sysbios_knl_Clock_TimerProxy_Handle timer;
S    ti_sysbios_knl_Swi_Handle swi;
S    volatile xdc_UInt numTickSkip;
S    xdc_UInt32 nextScheduledTick;
S    xdc_UInt32 maxSkippable;
S    xdc_Bool inWorkFunc;
S    xdc_Bool startDuringWorkFunc;
S    xdc_Bool ticking;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Clock_Module_State__ ti_sysbios_knl_Clock_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Clock_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt32 timeout;
S    xdc_UInt32 currTimeout;
S    xdc_UInt32 period;
S    volatile xdc_Bool active;
S    ti_sysbios_knl_Clock_FuncPtr fxn;
S    xdc_UArg arg;
S};
S
S/* Module_State_clockQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Clock_Module_State_clockQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Clock_Module_State_clockQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Clock_Module__state__V) + ti_sysbios_knl_Clock_Module_State_clockQ__O);
S}
S
S#endif /* ti_sysbios_knl_Clock__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Clock__localnames__done
S#define ti_sysbios_knl_Clock__localnames__done
S
S/* module prefix */
S#define Clock_Instance ti_sysbios_knl_Clock_Instance
S#define Clock_Handle ti_sysbios_knl_Clock_Handle
S#define Clock_Module ti_sysbios_knl_Clock_Module
S#define Clock_Object ti_sysbios_knl_Clock_Object
S#define Clock_Struct ti_sysbios_knl_Clock_Struct
S#define Clock_TickSource ti_sysbios_knl_Clock_TickSource
S#define Clock_TickMode ti_sysbios_knl_Clock_TickMode
S#define Clock_FuncPtr ti_sysbios_knl_Clock_FuncPtr
S#define Clock_Instance_State ti_sysbios_knl_Clock_Instance_State
S#define Clock_Module_State ti_sysbios_knl_Clock_Module_State
S#define Clock_TickSource_TIMER ti_sysbios_knl_Clock_TickSource_TIMER
S#define Clock_TickSource_USER ti_sysbios_knl_Clock_TickSource_USER
S#define Clock_TickSource_NULL ti_sysbios_knl_Clock_TickSource_NULL
S#define Clock_TickMode_PERIODIC ti_sysbios_knl_Clock_TickMode_PERIODIC
S#define Clock_TickMode_DYNAMIC ti_sysbios_knl_Clock_TickMode_DYNAMIC
S#define Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed
S#define Clock_LM_tick ti_sysbios_knl_Clock_LM_tick
S#define Clock_LM_begin ti_sysbios_knl_Clock_LM_begin
S#define Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled
S#define Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType
S#define Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin
S#define Clock_tickSource ti_sysbios_knl_Clock_tickSource
S#define Clock_tickMode ti_sysbios_knl_Clock_tickMode
S#define Clock_timerId ti_sysbios_knl_Clock_timerId
S#define Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod
S#define Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc
S#define Clock_triggerClock ti_sysbios_knl_Clock_triggerClock
S#define Clock_Module_State_clockQ ti_sysbios_knl_Clock_Module_State_clockQ
S#define Clock_Params ti_sysbios_knl_Clock_Params
S#define Clock_getTicks ti_sysbios_knl_Clock_getTicks
S#define Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle
S#define Clock_setTicks ti_sysbios_knl_Clock_setTicks
S#define Clock_tickStop ti_sysbios_knl_Clock_tickStop
S#define Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig
S#define Clock_tickStart ti_sysbios_knl_Clock_tickStart
S#define Clock_tick ti_sysbios_knl_Clock_tick
S#define Clock_workFunc ti_sysbios_knl_Clock_workFunc
S#define Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic
S#define Clock_logTick ti_sysbios_knl_Clock_logTick
S#define Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks
S#define Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod
S#define Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt
S#define Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout
S#define Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic
S#define Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic
S#define Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick
S#define Clock_addI ti_sysbios_knl_Clock_addI
S#define Clock_removeI ti_sysbios_knl_Clock_removeI
S#define Clock_start ti_sysbios_knl_Clock_start
S#define Clock_startI ti_sysbios_knl_Clock_startI
S#define Clock_stop ti_sysbios_knl_Clock_stop
S#define Clock_setPeriod ti_sysbios_knl_Clock_setPeriod
S#define Clock_setTimeout ti_sysbios_knl_Clock_setTimeout
S#define Clock_setFunc ti_sysbios_knl_Clock_setFunc
S#define Clock_getPeriod ti_sysbios_knl_Clock_getPeriod
S#define Clock_getTimeout ti_sysbios_knl_Clock_getTimeout
S#define Clock_isActive ti_sysbios_knl_Clock_isActive
S#define Clock_Module_name ti_sysbios_knl_Clock_Module_name
S#define Clock_Module_id ti_sysbios_knl_Clock_Module_id
S#define Clock_Module_startup ti_sysbios_knl_Clock_Module_startup
S#define Clock_Module_startupDone ti_sysbios_knl_Clock_Module_startupDone
S#define Clock_Module_hasMask ti_sysbios_knl_Clock_Module_hasMask
S#define Clock_Module_getMask ti_sysbios_knl_Clock_Module_getMask
S#define Clock_Module_setMask ti_sysbios_knl_Clock_Module_setMask
S#define Clock_Object_heap ti_sysbios_knl_Clock_Object_heap
S#define Clock_Module_heap ti_sysbios_knl_Clock_Module_heap
S#define Clock_construct ti_sysbios_knl_Clock_construct
S#define Clock_create ti_sysbios_knl_Clock_create
S#define Clock_handle ti_sysbios_knl_Clock_handle
S#define Clock_struct ti_sysbios_knl_Clock_struct
S#define Clock_Handle_label ti_sysbios_knl_Clock_Handle_label
S#define Clock_Handle_name ti_sysbios_knl_Clock_Handle_name
S#define Clock_Instance_init ti_sysbios_knl_Clock_Instance_init
S#define Clock_Object_count ti_sysbios_knl_Clock_Object_count
S#define Clock_Object_get ti_sysbios_knl_Clock_Object_get
S#define Clock_Object_first ti_sysbios_knl_Clock_Object_first
S#define Clock_Object_next ti_sysbios_knl_Clock_Object_next
S#define Clock_Object_sizeof ti_sysbios_knl_Clock_Object_sizeof
S#define Clock_Params_copy ti_sysbios_knl_Clock_Params_copy
S#define Clock_Params_init ti_sysbios_knl_Clock_Params_init
S#define Clock_Instance_finalize ti_sysbios_knl_Clock_Instance_finalize
S#define Clock_delete ti_sysbios_knl_Clock_delete
S#define Clock_destruct ti_sysbios_knl_Clock_destruct
S
S/* proxies */
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S#endif /* ti_sysbios_knl_Clock__localnames__done */
N#endif
L 65 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 66 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N#include <ti/sysbios/knl/Event.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Event__include
N#define ti_sysbios_knl_Event__include
N
N#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Event__top__
N#endif
N
N#ifdef __cplusplus
S#define __extern extern "C"
N#else
N#define __extern extern
N#endif
N
N#define ti_sysbios_knl_Event___VERS 160
N
N
N/*
N * ======== INCLUDES ========
N */
N
N#include <xdc/std.h>
N
N#include <xdc/runtime/xdc.h>
N#include <xdc/runtime/Types.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Types.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Types__include
S#define xdc_runtime_Types__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Types__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Types___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* ModuleId */
Stypedef xdc_Bits16 xdc_runtime_Types_ModuleId;
S
S/* DiagsMask */
Stypedef xdc_Bits16 xdc_runtime_Types_DiagsMask;
S
S/* Event */
Stypedef xdc_Bits32 xdc_runtime_Types_Event;
S
S/* EventId */
Stypedef xdc_runtime_Types_Event xdc_runtime_Types_EventId;
S
S/* CordAddr__ */
Sstruct xdc_runtime_Types_CordAddr__;
S
S/* CordAddr */
Stypedef xdc_runtime_Types_CordAddr__ *xdc_runtime_Types_CordAddr;
S
S/* GateRef__ */
Sstruct xdc_runtime_Types_GateRef__;
S
S/* GateRef */
Stypedef xdc_runtime_Types_GateRef__ *xdc_runtime_Types_GateRef;
S
S/* RopeId */
Stypedef xdc_Bits16 xdc_runtime_Types_RopeId;
S
S/* CreatePolicy */
Senum xdc_runtime_Types_CreatePolicy {
S    xdc_runtime_Types_STATIC_POLICY,
S    xdc_runtime_Types_CREATE_POLICY,
S    xdc_runtime_Types_DELETE_POLICY
S};
Stypedef enum xdc_runtime_Types_CreatePolicy xdc_runtime_Types_CreatePolicy;
S
S/* OutputPolicy */
Senum xdc_runtime_Types_OutputPolicy {
S    xdc_runtime_Types_COMMON_FILE,
S    xdc_runtime_Types_SEPARATE_FILE,
S    xdc_runtime_Types_NO_FILE
S};
Stypedef enum xdc_runtime_Types_OutputPolicy xdc_runtime_Types_OutputPolicy;
S
S/* Label */
Sstruct xdc_runtime_Types_Label {
S    xdc_Ptr handle;
S    xdc_runtime_Types_ModuleId modId;
S    xdc_String iname;
S    xdc_Bool named;
S};
S
S/* Site */
Sstruct xdc_runtime_Types_Site {
S    xdc_runtime_Types_ModuleId mod;
S    xdc_CString file;
S    xdc_Int line;
S};
S
S/* Timestamp64 */
Sstruct xdc_runtime_Types_Timestamp64 {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* FreqHz */
Sstruct xdc_runtime_Types_FreqHz {
S    xdc_Bits32 hi;
S    xdc_Bits32 lo;
S};
S
S/* RegDesc */
Sstruct xdc_runtime_Types_RegDesc {
S    xdc_runtime_Types_RegDesc *next;
S    xdc_CString modName;
S    xdc_runtime_Types_ModuleId id;
S    xdc_runtime_Types_DiagsMask mask;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* LogEvent */
Stypedef xdc_Bits32 xdc_runtime_Types_LogEvent;
S
S/* LoggerFxn0 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn0)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3);
S
S/* LoggerFxn1 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn1)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4);
S
S/* LoggerFxn2 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn2)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5);
S
S/* LoggerFxn4 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn4)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7);
S
S/* LoggerFxn8 */
Stypedef xdc_Void (*xdc_runtime_Types_LoggerFxn8)(xdc_Ptr arg1, xdc_runtime_Types_LogEvent arg2, xdc_runtime_Types_ModuleId arg3, xdc_IArg arg4, xdc_IArg arg5, xdc_IArg arg6, xdc_IArg arg7, xdc_IArg arg8, xdc_IArg arg9, xdc_IArg arg10, xdc_IArg arg11);
S
S/* Vec */
Sstruct xdc_runtime_Types_Vec {
S    xdc_Int len;
S    xdc_Ptr arr;
S};
S
S/* Link */
Sstruct xdc_runtime_Types_Link {
S    xdc_runtime_Types_Link *next;
S    xdc_runtime_Types_Link *prev;
S};
S
S/* InstHdr */
Sstruct xdc_runtime_Types_InstHdr {
S    xdc_runtime_Types_Link link;
S};
S
S/* PrmsHdr */
Sstruct xdc_runtime_Types_PrmsHdr {
S    xdc_SizeT size;
S    xdc_Ptr self;
S    xdc_Ptr modFxns;
S    xdc_Ptr instPrms;
S};
S
S/* Base */
Sstruct xdc_runtime_Types_Base {
S    const xdc_runtime_Types_Base *base;
S};
S
S/* SysFxns2 */
Sstruct xdc_runtime_Types_SysFxns2 {
S    xdc_Ptr (*__create)(xdc_CPtr arg1, const xdc_UChar* arg2, xdc_SizeT arg3, xdc_runtime_Error_Block* arg4);
S    xdc_Void (*__delete)(xdc_Ptr arg1);
S    xdc_runtime_Types_Label *(*__label)(xdc_Ptr arg1, xdc_runtime_Types_Label* arg2);
S    xdc_runtime_Types_ModuleId __mid;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Types_Module__diagsEnabled__CR
S#define xdc_runtime_Types_Module__diagsEnabled__C (*((CT__xdc_runtime_Types_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsEnabled (xdc_runtime_Types_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Types_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Types_Module__diagsIncluded__CR
S#define xdc_runtime_Types_Module__diagsIncluded__C (*((CT__xdc_runtime_Types_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsIncluded (xdc_runtime_Types_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Types_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C;
S#ifdef xdc_runtime_Types_Module__diagsMask__CR
S#define xdc_runtime_Types_Module__diagsMask__C (*((CT__xdc_runtime_Types_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Types_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Types_Module__diagsMask (xdc_runtime_Types_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C;
S#ifdef xdc_runtime_Types_Module__gateObj__CR
S#define xdc_runtime_Types_Module__gateObj__C (*((CT__xdc_runtime_Types_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gateObj (xdc_runtime_Types_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C;
S#ifdef xdc_runtime_Types_Module__gatePrms__CR
S#define xdc_runtime_Types_Module__gatePrms__C (*((CT__xdc_runtime_Types_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Types_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Types_Module__gatePrms (xdc_runtime_Types_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Types_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C;
S#ifdef xdc_runtime_Types_Module__id__CR
S#define xdc_runtime_Types_Module__id__C (*((CT__xdc_runtime_Types_Module__id*)(xdcRomConstPtr + xdc_runtime_Types_Module__id__C_offset)))
S#else
S#define xdc_runtime_Types_Module__id (xdc_runtime_Types_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Types_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C;
S#ifdef xdc_runtime_Types_Module__loggerDefined__CR
S#define xdc_runtime_Types_Module__loggerDefined__C (*((CT__xdc_runtime_Types_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerDefined (xdc_runtime_Types_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C;
S#ifdef xdc_runtime_Types_Module__loggerObj__CR
S#define xdc_runtime_Types_Module__loggerObj__C (*((CT__xdc_runtime_Types_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerObj (xdc_runtime_Types_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Types_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn0 xdc_runtime_Types_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn0__CR
S#define xdc_runtime_Types_Module__loggerFxn0__C (*((CT__xdc_runtime_Types_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn0 (xdc_runtime_Types_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Types_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn1 xdc_runtime_Types_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn1__CR
S#define xdc_runtime_Types_Module__loggerFxn1__C (*((CT__xdc_runtime_Types_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn1 (xdc_runtime_Types_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Types_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn2 xdc_runtime_Types_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn2__CR
S#define xdc_runtime_Types_Module__loggerFxn2__C (*((CT__xdc_runtime_Types_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn2 (xdc_runtime_Types_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Types_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn4__CR
S#define xdc_runtime_Types_Module__loggerFxn4__C (*((CT__xdc_runtime_Types_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn4 (xdc_runtime_Types_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Types_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Types_Module__loggerFxn8__CR
S#define xdc_runtime_Types_Module__loggerFxn8__C (*((CT__xdc_runtime_Types_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Types_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Types_Module__loggerFxn8 (xdc_runtime_Types_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Types_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C;
S#ifdef xdc_runtime_Types_Object__count__CR
S#define xdc_runtime_Types_Object__count__C (*((CT__xdc_runtime_Types_Object__count*)(xdcRomConstPtr + xdc_runtime_Types_Object__count__C_offset)))
S#else
S#define xdc_runtime_Types_Object__count (xdc_runtime_Types_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Types_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C;
S#ifdef xdc_runtime_Types_Object__heap__CR
S#define xdc_runtime_Types_Object__heap__C (*((CT__xdc_runtime_Types_Object__heap*)(xdcRomConstPtr + xdc_runtime_Types_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Types_Object__heap (xdc_runtime_Types_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Types_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C;
S#ifdef xdc_runtime_Types_Object__sizeof__CR
S#define xdc_runtime_Types_Object__sizeof__C (*((CT__xdc_runtime_Types_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Types_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Types_Object__sizeof (xdc_runtime_Types_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Types_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C;
S#ifdef xdc_runtime_Types_Object__table__CR
S#define xdc_runtime_Types_Object__table__C (*((CT__xdc_runtime_Types_Object__table*)(xdcRomConstPtr + xdc_runtime_Types_Object__table__C_offset)))
S#else
S#define xdc_runtime_Types_Object__table (xdc_runtime_Types_Object__table__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Types_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Types_Module__startupDone__S, "xdc_runtime_Types_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Types_Module__startupDone__S( void );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Types_Module_startupDone() xdc_runtime_Types_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Types_Object_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Types_Module_heap() xdc_runtime_Types_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id(void);
Sstatic inline CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module_id( void ) 
S{
S    return xdc_runtime_Types_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Types_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Types_Module_getMask(void)
S{
S    return (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) ? *xdc_runtime_Types_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Types_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Types_Module__diagsMask__C != (CT__xdc_runtime_Types_Module__diagsMask)NULL) {
S        *xdc_runtime_Types_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Types__epilogue.h>
S
S#ifdef xdc_runtime_Types__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Types__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Types__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Types__include_state
S#define xdc_runtime_Types__include_state
S
S
S#endif /* xdc_runtime_Types__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Types__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Types__localnames__done
S#define xdc_runtime_Types__localnames__done
S
S/* module prefix */
S#define Types_ModuleId xdc_runtime_Types_ModuleId
S#define Types_DiagsMask xdc_runtime_Types_DiagsMask
S#define Types_Event xdc_runtime_Types_Event
S#define Types_EventId xdc_runtime_Types_EventId
S#define Types_CordAddr__ xdc_runtime_Types_CordAddr__
S#define Types_CordAddr xdc_runtime_Types_CordAddr
S#define Types_GateRef__ xdc_runtime_Types_GateRef__
S#define Types_GateRef xdc_runtime_Types_GateRef
S#define Types_RopeId xdc_runtime_Types_RopeId
S#define Types_CreatePolicy xdc_runtime_Types_CreatePolicy
S#define Types_OutputPolicy xdc_runtime_Types_OutputPolicy
S#define Types_Label xdc_runtime_Types_Label
S#define Types_Site xdc_runtime_Types_Site
S#define Types_Timestamp64 xdc_runtime_Types_Timestamp64
S#define Types_FreqHz xdc_runtime_Types_FreqHz
S#define Types_RegDesc xdc_runtime_Types_RegDesc
S#define Types_LogEvent xdc_runtime_Types_LogEvent
S#define Types_LoggerFxn0 xdc_runtime_Types_LoggerFxn0
S#define Types_LoggerFxn1 xdc_runtime_Types_LoggerFxn1
S#define Types_LoggerFxn2 xdc_runtime_Types_LoggerFxn2
S#define Types_LoggerFxn4 xdc_runtime_Types_LoggerFxn4
S#define Types_LoggerFxn8 xdc_runtime_Types_LoggerFxn8
S#define Types_Vec xdc_runtime_Types_Vec
S#define Types_Link xdc_runtime_Types_Link
S#define Types_InstHdr xdc_runtime_Types_InstHdr
S#define Types_PrmsHdr xdc_runtime_Types_PrmsHdr
S#define Types_Base xdc_runtime_Types_Base
S#define Types_SysFxns2 xdc_runtime_Types_SysFxns2
S#define Types_STATIC_POLICY xdc_runtime_Types_STATIC_POLICY
S#define Types_CREATE_POLICY xdc_runtime_Types_CREATE_POLICY
S#define Types_DELETE_POLICY xdc_runtime_Types_DELETE_POLICY
S#define Types_COMMON_FILE xdc_runtime_Types_COMMON_FILE
S#define Types_SEPARATE_FILE xdc_runtime_Types_SEPARATE_FILE
S#define Types_NO_FILE xdc_runtime_Types_NO_FILE
S#define Types_getEventId xdc_runtime_Types_getEventId
S#define Types_getModuleId xdc_runtime_Types_getModuleId
S#define Types_makeEvent xdc_runtime_Types_makeEvent
S#define Types_Module_name xdc_runtime_Types_Module_name
S#define Types_Module_id xdc_runtime_Types_Module_id
S#define Types_Module_startup xdc_runtime_Types_Module_startup
S#define Types_Module_startupDone xdc_runtime_Types_Module_startupDone
S#define Types_Module_hasMask xdc_runtime_Types_Module_hasMask
S#define Types_Module_getMask xdc_runtime_Types_Module_getMask
S#define Types_Module_setMask xdc_runtime_Types_Module_setMask
S#define Types_Object_heap xdc_runtime_Types_Object_heap
S#define Types_Module_heap xdc_runtime_Types_Module_heap
S
S#endif /* xdc_runtime_Types__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:25; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 55 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <xdc/runtime/IInstance.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IInstance.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     PER-INSTANCE TYPES
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IInstance__include
S#define xdc_runtime_IInstance__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IInstance__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IInstance___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct xdc_runtime_IInstance_Params {
S    size_t __size;
S    xdc_CString name;
S};
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IInstance_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IInstance_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IInstance_Interface__BASE__C;
S#else
S#define xdc_runtime_IInstance_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IInstance_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* create */
Sxdc__CODESECT(xdc_runtime_IInstance_create, "xdc_runtime_IInstance_create")
S__extern xdc_runtime_IInstance_Handle xdc_runtime_IInstance_create(xdc_runtime_IInstance_Module mod, const xdc_runtime_IInstance_Params *prms, xdc_runtime_Error_Block *eb);
S
S/* delete */
Sxdc__CODESECT(xdc_runtime_IInstance_delete, "xdc_runtime_IInstance_delete")
S__extern xdc_Void xdc_runtime_IInstance_delete(xdc_runtime_IInstance_Handle *inst);
S
S/* Handle_to_Module */
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst);
Sstatic inline xdc_runtime_IInstance_Module xdc_runtime_IInstance_Handle_to_Module(xdc_runtime_IInstance_Handle inst)
S{
S    return inst->__fxns;
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab);
Sstatic inline xdc_runtime_Types_Label *xdc_runtime_IInstance_Handle_label(xdc_runtime_IInstance_Handle inst, xdc_runtime_Types_Label *lab)
S{
S    return inst->__fxns->__sysp->__label(inst, lab);
S}
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IInstance_Module_id(xdc_runtime_IInstance_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IInstance__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IInstance__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IInstance__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IInstance__localnames__done
S#define xdc_runtime_IInstance__localnames__done
S
S/* module prefix */
S#define IInstance_Instance xdc_runtime_IInstance_Instance
S#define IInstance_Handle xdc_runtime_IInstance_Handle
S#define IInstance_Module xdc_runtime_IInstance_Module
S#define IInstance_Params xdc_runtime_IInstance_Params
S#define IInstance_Module_name xdc_runtime_IInstance_Module_name
S#define IInstance_delete xdc_runtime_IInstance_delete
S#define IInstance_Handle_label xdc_runtime_IInstance_Handle_label
S#define IInstance_Handle_to_Module xdc_runtime_IInstance_Handle_to_Module
S
S#endif /* xdc_runtime_IInstance__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 56 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <ti/sysbios/knl/Event__prologue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event__prologue.h" 1
N/*
N * Copyright (c) 2012, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
L 57 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <ti/sysbios/knl/package/package.defs.h>
N
N#include <xdc/runtime/Assert.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Assert.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Assert__include
S#define xdc_runtime_Assert__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Assert__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Assert___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Assert__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Assert_Module__diagsEnabled__CR
S#define xdc_runtime_Assert_Module__diagsEnabled__C (*((CT__xdc_runtime_Assert_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsEnabled (xdc_runtime_Assert_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Assert_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Assert_Module__diagsIncluded__CR
S#define xdc_runtime_Assert_Module__diagsIncluded__C (*((CT__xdc_runtime_Assert_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsIncluded (xdc_runtime_Assert_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Assert_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C;
S#ifdef xdc_runtime_Assert_Module__diagsMask__CR
S#define xdc_runtime_Assert_Module__diagsMask__C (*((CT__xdc_runtime_Assert_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Assert_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__diagsMask (xdc_runtime_Assert_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C;
S#ifdef xdc_runtime_Assert_Module__gateObj__CR
S#define xdc_runtime_Assert_Module__gateObj__C (*((CT__xdc_runtime_Assert_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gateObj (xdc_runtime_Assert_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C;
S#ifdef xdc_runtime_Assert_Module__gatePrms__CR
S#define xdc_runtime_Assert_Module__gatePrms__C (*((CT__xdc_runtime_Assert_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Assert_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__gatePrms (xdc_runtime_Assert_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Assert_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C;
S#ifdef xdc_runtime_Assert_Module__id__CR
S#define xdc_runtime_Assert_Module__id__C (*((CT__xdc_runtime_Assert_Module__id*)(xdcRomConstPtr + xdc_runtime_Assert_Module__id__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__id (xdc_runtime_Assert_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Assert_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C;
S#ifdef xdc_runtime_Assert_Module__loggerDefined__CR
S#define xdc_runtime_Assert_Module__loggerDefined__C (*((CT__xdc_runtime_Assert_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerDefined (xdc_runtime_Assert_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C;
S#ifdef xdc_runtime_Assert_Module__loggerObj__CR
S#define xdc_runtime_Assert_Module__loggerObj__C (*((CT__xdc_runtime_Assert_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerObj (xdc_runtime_Assert_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Assert_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn0 xdc_runtime_Assert_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn0__CR
S#define xdc_runtime_Assert_Module__loggerFxn0__C (*((CT__xdc_runtime_Assert_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn0 (xdc_runtime_Assert_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Assert_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn1 xdc_runtime_Assert_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn1__CR
S#define xdc_runtime_Assert_Module__loggerFxn1__C (*((CT__xdc_runtime_Assert_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn1 (xdc_runtime_Assert_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Assert_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn2 xdc_runtime_Assert_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn2__CR
S#define xdc_runtime_Assert_Module__loggerFxn2__C (*((CT__xdc_runtime_Assert_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn2 (xdc_runtime_Assert_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Assert_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn4__CR
S#define xdc_runtime_Assert_Module__loggerFxn4__C (*((CT__xdc_runtime_Assert_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn4 (xdc_runtime_Assert_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Assert_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Assert_Module__loggerFxn8__CR
S#define xdc_runtime_Assert_Module__loggerFxn8__C (*((CT__xdc_runtime_Assert_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Assert_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Assert_Module__loggerFxn8 (xdc_runtime_Assert_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Assert_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C;
S#ifdef xdc_runtime_Assert_Object__count__CR
S#define xdc_runtime_Assert_Object__count__C (*((CT__xdc_runtime_Assert_Object__count*)(xdcRomConstPtr + xdc_runtime_Assert_Object__count__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__count (xdc_runtime_Assert_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Assert_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C;
S#ifdef xdc_runtime_Assert_Object__heap__CR
S#define xdc_runtime_Assert_Object__heap__C (*((CT__xdc_runtime_Assert_Object__heap*)(xdcRomConstPtr + xdc_runtime_Assert_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__heap (xdc_runtime_Assert_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Assert_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C;
S#ifdef xdc_runtime_Assert_Object__sizeof__CR
S#define xdc_runtime_Assert_Object__sizeof__C (*((CT__xdc_runtime_Assert_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Assert_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__sizeof (xdc_runtime_Assert_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Assert_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C;
S#ifdef xdc_runtime_Assert_Object__table__CR
S#define xdc_runtime_Assert_Object__table__C (*((CT__xdc_runtime_Assert_Object__table*)(xdcRomConstPtr + xdc_runtime_Assert_Object__table__C_offset)))
S#else
S#define xdc_runtime_Assert_Object__table (xdc_runtime_Assert_Object__table__C)
S#endif
S
S/* E_assertFailed */
Stypedef xdc_runtime_Error_Id CT__xdc_runtime_Assert_E_assertFailed;
S__extern __FAR__ const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C;
S#ifdef xdc_runtime_Assert_E_assertFailed__CR
S#define xdc_runtime_Assert_E_assertFailed (*((CT__xdc_runtime_Assert_E_assertFailed*)(xdcRomConstPtr + xdc_runtime_Assert_E_assertFailed__C_offset)))
S#else
S#define xdc_runtime_Assert_E_assertFailed (xdc_runtime_Assert_E_assertFailed__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Assert_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Assert_Module__startupDone__S, "xdc_runtime_Assert_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void );
S
S/* raise__I */
S#define xdc_runtime_Assert_raise xdc_runtime_Assert_raise__I
Sxdc__CODESECT(xdc_runtime_Assert_raise__I, "xdc_runtime_Assert_raise")
S__extern xdc_Void xdc_runtime_Assert_raise__I( xdc_runtime_Types_ModuleId mod, xdc_CString file, xdc_Int line, xdc_runtime_Assert_Id id );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Assert_Module_startupDone() xdc_runtime_Assert_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Assert_Object_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Assert_Module_heap() xdc_runtime_Assert_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id(void);
Sstatic inline CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module_id( void ) 
S{
S    return xdc_runtime_Assert_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Assert_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Assert_Module_getMask(void)
S{
S    return (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) ? *xdc_runtime_Assert_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Assert_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Assert_Module__diagsMask__C != (CT__xdc_runtime_Assert_Module__diagsMask)NULL) {
S        *xdc_runtime_Assert_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Assert__epilogue.h>
S
S#ifdef xdc_runtime_Assert__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Assert__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Assert__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Assert__include_state
S#define xdc_runtime_Assert__include_state
S
S
S#endif /* xdc_runtime_Assert__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Assert__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Assert__localnames__done
S#define xdc_runtime_Assert__localnames__done
S
S/* module prefix */
S#define Assert_Id xdc_runtime_Assert_Id
S#define Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed
S#define Assert_isTrue xdc_runtime_Assert_isTrue
S#define Assert_Module_name xdc_runtime_Assert_Module_name
S#define Assert_Module_id xdc_runtime_Assert_Module_id
S#define Assert_Module_startup xdc_runtime_Assert_Module_startup
S#define Assert_Module_startupDone xdc_runtime_Assert_Module_startupDone
S#define Assert_Module_hasMask xdc_runtime_Assert_Module_hasMask
S#define Assert_Module_getMask xdc_runtime_Assert_Module_getMask
S#define Assert_Module_setMask xdc_runtime_Assert_Module_setMask
S#define Assert_Object_heap xdc_runtime_Assert_Object_heap
S#define Assert_Module_heap xdc_runtime_Assert_Module_heap
S
S#endif /* xdc_runtime_Assert__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 60 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <xdc/runtime/Diags.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Diags.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Diags__include
S#define xdc_runtime_Diags__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Diags__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Diags___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Diags__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Types.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mask */
Stypedef xdc_runtime_Types_DiagsMask xdc_runtime_Diags_Mask;
S
S/* ENTRY */
S#define xdc_runtime_Diags_ENTRY (0x0001U)
S
S/* EXIT */
S#define xdc_runtime_Diags_EXIT (0x0002U)
S
S/* LIFECYCLE */
S#define xdc_runtime_Diags_LIFECYCLE (0x0004U)
S
S/* INTERNAL */
S#define xdc_runtime_Diags_INTERNAL (0x0008U)
S
S/* ASSERT */
S#define xdc_runtime_Diags_ASSERT (0x0010U)
S
S/* STATUS */
S#define xdc_runtime_Diags_STATUS (0x0080U)
S
S/* LEVEL */
S#define xdc_runtime_Diags_LEVEL (0x0060U)
S
S/* USER1 */
S#define xdc_runtime_Diags_USER1 (0x0100U)
S
S/* USER2 */
S#define xdc_runtime_Diags_USER2 (0x0200U)
S
S/* USER3 */
S#define xdc_runtime_Diags_USER3 (0x0400U)
S
S/* USER4 */
S#define xdc_runtime_Diags_USER4 (0x0800U)
S
S/* USER5 */
S#define xdc_runtime_Diags_USER5 (0x1000U)
S
S/* USER6 */
S#define xdc_runtime_Diags_USER6 (0x2000U)
S
S/* USER7 */
S#define xdc_runtime_Diags_USER7 (0x4000U)
S
S/* INFO */
S#define xdc_runtime_Diags_INFO (0x4000U)
S
S/* USER8 */
S#define xdc_runtime_Diags_USER8 (0x8000U)
S
S/* ANALYSIS */
S#define xdc_runtime_Diags_ANALYSIS (0x8000U)
S
S/* ALL */
S#define xdc_runtime_Diags_ALL (0xFF9FU)
S
S/* ALL_LOGGING */
S#define xdc_runtime_Diags_ALL_LOGGING (0xFF9FU & (~0x0010U) & (~0x0008U))
S
S/* EventLevel */
Senum xdc_runtime_Diags_EventLevel {
S    xdc_runtime_Diags_LEVEL1 = 0x0,
S    xdc_runtime_Diags_LEVEL2 = 0x20,
S    xdc_runtime_Diags_LEVEL3 = 0x40,
S    xdc_runtime_Diags_LEVEL4 = 0x60
S};
Stypedef enum xdc_runtime_Diags_EventLevel xdc_runtime_Diags_EventLevel;
S
S/* EMERGENCY */
S#define xdc_runtime_Diags_EMERGENCY (xdc_runtime_Diags_LEVEL1)
S
S/* CRITICAL */
S#define xdc_runtime_Diags_CRITICAL (xdc_runtime_Diags_LEVEL2)
S
S/* ERROR */
S#define xdc_runtime_Diags_ERROR (xdc_runtime_Diags_LEVEL3)
S
S/* WARNING */
S#define xdc_runtime_Diags_WARNING (xdc_runtime_Diags_LEVEL4)
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* DictElem */
Sstruct xdc_runtime_Diags_DictElem {
S    xdc_runtime_Types_ModuleId modId;
S    xdc_runtime_Diags_Mask *maskAddr;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Diags_Module__diagsEnabled__CR
S#define xdc_runtime_Diags_Module__diagsEnabled__C (*((CT__xdc_runtime_Diags_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsEnabled (xdc_runtime_Diags_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Diags_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Diags_Module__diagsIncluded__CR
S#define xdc_runtime_Diags_Module__diagsIncluded__C (*((CT__xdc_runtime_Diags_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsIncluded (xdc_runtime_Diags_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Diags_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C;
S#ifdef xdc_runtime_Diags_Module__diagsMask__CR
S#define xdc_runtime_Diags_Module__diagsMask__C (*((CT__xdc_runtime_Diags_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Diags_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__diagsMask (xdc_runtime_Diags_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C;
S#ifdef xdc_runtime_Diags_Module__gateObj__CR
S#define xdc_runtime_Diags_Module__gateObj__C (*((CT__xdc_runtime_Diags_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gateObj (xdc_runtime_Diags_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C;
S#ifdef xdc_runtime_Diags_Module__gatePrms__CR
S#define xdc_runtime_Diags_Module__gatePrms__C (*((CT__xdc_runtime_Diags_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Diags_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__gatePrms (xdc_runtime_Diags_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Diags_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C;
S#ifdef xdc_runtime_Diags_Module__id__CR
S#define xdc_runtime_Diags_Module__id__C (*((CT__xdc_runtime_Diags_Module__id*)(xdcRomConstPtr + xdc_runtime_Diags_Module__id__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__id (xdc_runtime_Diags_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Diags_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C;
S#ifdef xdc_runtime_Diags_Module__loggerDefined__CR
S#define xdc_runtime_Diags_Module__loggerDefined__C (*((CT__xdc_runtime_Diags_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerDefined (xdc_runtime_Diags_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C;
S#ifdef xdc_runtime_Diags_Module__loggerObj__CR
S#define xdc_runtime_Diags_Module__loggerObj__C (*((CT__xdc_runtime_Diags_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerObj (xdc_runtime_Diags_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Diags_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn0 xdc_runtime_Diags_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn0__CR
S#define xdc_runtime_Diags_Module__loggerFxn0__C (*((CT__xdc_runtime_Diags_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn0 (xdc_runtime_Diags_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Diags_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn1 xdc_runtime_Diags_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn1__CR
S#define xdc_runtime_Diags_Module__loggerFxn1__C (*((CT__xdc_runtime_Diags_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn1 (xdc_runtime_Diags_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Diags_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn2 xdc_runtime_Diags_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn2__CR
S#define xdc_runtime_Diags_Module__loggerFxn2__C (*((CT__xdc_runtime_Diags_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn2 (xdc_runtime_Diags_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Diags_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn4__CR
S#define xdc_runtime_Diags_Module__loggerFxn4__C (*((CT__xdc_runtime_Diags_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn4 (xdc_runtime_Diags_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Diags_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Diags_Module__loggerFxn8__CR
S#define xdc_runtime_Diags_Module__loggerFxn8__C (*((CT__xdc_runtime_Diags_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Diags_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Diags_Module__loggerFxn8 (xdc_runtime_Diags_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Diags_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C;
S#ifdef xdc_runtime_Diags_Object__count__CR
S#define xdc_runtime_Diags_Object__count__C (*((CT__xdc_runtime_Diags_Object__count*)(xdcRomConstPtr + xdc_runtime_Diags_Object__count__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__count (xdc_runtime_Diags_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Diags_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C;
S#ifdef xdc_runtime_Diags_Object__heap__CR
S#define xdc_runtime_Diags_Object__heap__C (*((CT__xdc_runtime_Diags_Object__heap*)(xdcRomConstPtr + xdc_runtime_Diags_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__heap (xdc_runtime_Diags_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Diags_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C;
S#ifdef xdc_runtime_Diags_Object__sizeof__CR
S#define xdc_runtime_Diags_Object__sizeof__C (*((CT__xdc_runtime_Diags_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Diags_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__sizeof (xdc_runtime_Diags_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Diags_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C;
S#ifdef xdc_runtime_Diags_Object__table__CR
S#define xdc_runtime_Diags_Object__table__C (*((CT__xdc_runtime_Diags_Object__table*)(xdcRomConstPtr + xdc_runtime_Diags_Object__table__C_offset)))
S#else
S#define xdc_runtime_Diags_Object__table (xdc_runtime_Diags_Object__table__C)
S#endif
S
S/* setMaskEnabled */
Stypedef xdc_Bool CT__xdc_runtime_Diags_setMaskEnabled;
S__extern __FAR__ const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C;
S#ifdef xdc_runtime_Diags_setMaskEnabled__CR
S#define xdc_runtime_Diags_setMaskEnabled (*((CT__xdc_runtime_Diags_setMaskEnabled*)(xdcRomConstPtr + xdc_runtime_Diags_setMaskEnabled__C_offset)))
S#else
S#ifdef xdc_runtime_Diags_setMaskEnabled__D
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__D)
S#else
S#define xdc_runtime_Diags_setMaskEnabled (xdc_runtime_Diags_setMaskEnabled__C)
S#endif
S#endif
S
S/* dictBase */
Stypedef xdc_runtime_Diags_DictElem *CT__xdc_runtime_Diags_dictBase;
S__extern __FAR__ const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C;
S#ifdef xdc_runtime_Diags_dictBase__CR
S#define xdc_runtime_Diags_dictBase (*((CT__xdc_runtime_Diags_dictBase*)(xdcRomConstPtr + xdc_runtime_Diags_dictBase__C_offset)))
S#else
S#define xdc_runtime_Diags_dictBase (xdc_runtime_Diags_dictBase__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Diags_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Diags_Module__startupDone__S, "xdc_runtime_Diags_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void );
S
S/* setMask__E */
S#define xdc_runtime_Diags_setMask xdc_runtime_Diags_setMask__E
Sxdc__CODESECT(xdc_runtime_Diags_setMask__E, "xdc_runtime_Diags_setMask")
S__extern xdc_Void xdc_runtime_Diags_setMask__E( xdc_CString control );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Diags_Module_startupDone() xdc_runtime_Diags_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Diags_Object_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Diags_Module_heap() xdc_runtime_Diags_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id(void);
Sstatic inline CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module_id( void ) 
S{
S    return xdc_runtime_Diags_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Diags_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Diags_Module_getMask(void)
S{
S    return (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) ? *xdc_runtime_Diags_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Diags_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Diags_Module__diagsMask__C != (CT__xdc_runtime_Diags_Module__diagsMask)NULL) {
S        *xdc_runtime_Diags_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Diags__epilogue.h>
S
S#ifdef xdc_runtime_Diags__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Diags__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Diags__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Diags__include_state
S#define xdc_runtime_Diags__include_state
S
S
S#endif /* xdc_runtime_Diags__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Diags__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Diags__localnames__done
S#define xdc_runtime_Diags__localnames__done
S
S/* module prefix */
S#define Diags_Mask xdc_runtime_Diags_Mask
S#define Diags_ENTRY xdc_runtime_Diags_ENTRY
S#define Diags_EXIT xdc_runtime_Diags_EXIT
S#define Diags_LIFECYCLE xdc_runtime_Diags_LIFECYCLE
S#define Diags_INTERNAL xdc_runtime_Diags_INTERNAL
S#define Diags_ASSERT xdc_runtime_Diags_ASSERT
S#define Diags_STATUS xdc_runtime_Diags_STATUS
S#define Diags_LEVEL xdc_runtime_Diags_LEVEL
S#define Diags_USER1 xdc_runtime_Diags_USER1
S#define Diags_USER2 xdc_runtime_Diags_USER2
S#define Diags_USER3 xdc_runtime_Diags_USER3
S#define Diags_USER4 xdc_runtime_Diags_USER4
S#define Diags_USER5 xdc_runtime_Diags_USER5
S#define Diags_USER6 xdc_runtime_Diags_USER6
S#define Diags_USER7 xdc_runtime_Diags_USER7
S#define Diags_INFO xdc_runtime_Diags_INFO
S#define Diags_USER8 xdc_runtime_Diags_USER8
S#define Diags_ANALYSIS xdc_runtime_Diags_ANALYSIS
S#define Diags_ALL xdc_runtime_Diags_ALL
S#define Diags_ALL_LOGGING xdc_runtime_Diags_ALL_LOGGING
S#define Diags_EventLevel xdc_runtime_Diags_EventLevel
S#define Diags_EMERGENCY xdc_runtime_Diags_EMERGENCY
S#define Diags_CRITICAL xdc_runtime_Diags_CRITICAL
S#define Diags_ERROR xdc_runtime_Diags_ERROR
S#define Diags_WARNING xdc_runtime_Diags_WARNING
S#define Diags_DictElem xdc_runtime_Diags_DictElem
S#define Diags_LEVEL1 xdc_runtime_Diags_LEVEL1
S#define Diags_LEVEL2 xdc_runtime_Diags_LEVEL2
S#define Diags_LEVEL3 xdc_runtime_Diags_LEVEL3
S#define Diags_LEVEL4 xdc_runtime_Diags_LEVEL4
S#define Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled
S#define Diags_dictBase xdc_runtime_Diags_dictBase
S#define Diags_query xdc_runtime_Diags_query
S#define Diags_getLevel xdc_runtime_Diags_getLevel
S#define Diags_compareLevels xdc_runtime_Diags_compareLevels
S#define Diags_setMask xdc_runtime_Diags_setMask
S#define Diags_Module_name xdc_runtime_Diags_Module_name
S#define Diags_Module_id xdc_runtime_Diags_Module_id
S#define Diags_Module_startup xdc_runtime_Diags_Module_startup
S#define Diags_Module_startupDone xdc_runtime_Diags_Module_startupDone
S#define Diags_Module_hasMask xdc_runtime_Diags_Module_hasMask
S#define Diags_Module_getMask xdc_runtime_Diags_Module_getMask
S#define Diags_Module_setMask xdc_runtime_Diags_Module_setMask
S#define Diags_Object_heap xdc_runtime_Diags_Object_heap
S#define Diags_Module_heap xdc_runtime_Diags_Module_heap
S
S#endif /* xdc_runtime_Diags__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:23; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 61 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <xdc/runtime/Log.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/Log.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_Log__include
S#define xdc_runtime_Log__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_Log__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_Log___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Log__prologue.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/Text.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* NUMARGS */
S#define xdc_runtime_Log_NUMARGS (8)
S
S/* PRINTFID */
S#define xdc_runtime_Log_PRINTFID (0)
S
S/* EventRec */
Stypedef xdc_IArg __T1_xdc_runtime_Log_EventRec__arg;
Stypedef xdc_IArg ARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef xdc_IArg CARRAY1_xdc_runtime_Log_EventRec__arg[8];
Stypedef CARRAY1_xdc_runtime_Log_EventRec__arg __TA_xdc_runtime_Log_EventRec__arg;
Sstruct xdc_runtime_Log_EventRec {
S    xdc_runtime_Types_Timestamp64 tstamp;
S    xdc_Bits32 serial;
S    xdc_runtime_Types_Event evt;
S    __TA_xdc_runtime_Log_EventRec__arg arg;
S};
S
S/* EventId */
Stypedef xdc_runtime_Types_RopeId xdc_runtime_Log_EventId;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsEnabled;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C;
S#ifdef xdc_runtime_Log_Module__diagsEnabled__CR
S#define xdc_runtime_Log_Module__diagsEnabled__C (*((CT__xdc_runtime_Log_Module__diagsEnabled*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsEnabled__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsEnabled (xdc_runtime_Log_Module__diagsEnabled__C)
S#endif
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__xdc_runtime_Log_Module__diagsIncluded;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C;
S#ifdef xdc_runtime_Log_Module__diagsIncluded__CR
S#define xdc_runtime_Log_Module__diagsIncluded__C (*((CT__xdc_runtime_Log_Module__diagsIncluded*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsIncluded__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsIncluded (xdc_runtime_Log_Module__diagsIncluded__C)
S#endif
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__xdc_runtime_Log_Module__diagsMask;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C;
S#ifdef xdc_runtime_Log_Module__diagsMask__CR
S#define xdc_runtime_Log_Module__diagsMask__C (*((CT__xdc_runtime_Log_Module__diagsMask*)(xdcRomConstPtr + xdc_runtime_Log_Module__diagsMask__C_offset)))
S#else
S#define xdc_runtime_Log_Module__diagsMask (xdc_runtime_Log_Module__diagsMask__C)
S#endif
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gateObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C;
S#ifdef xdc_runtime_Log_Module__gateObj__CR
S#define xdc_runtime_Log_Module__gateObj__C (*((CT__xdc_runtime_Log_Module__gateObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__gateObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gateObj (xdc_runtime_Log_Module__gateObj__C)
S#endif
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__gatePrms;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C;
S#ifdef xdc_runtime_Log_Module__gatePrms__CR
S#define xdc_runtime_Log_Module__gatePrms__C (*((CT__xdc_runtime_Log_Module__gatePrms*)(xdcRomConstPtr + xdc_runtime_Log_Module__gatePrms__C_offset)))
S#else
S#define xdc_runtime_Log_Module__gatePrms (xdc_runtime_Log_Module__gatePrms__C)
S#endif
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__xdc_runtime_Log_Module__id;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C;
S#ifdef xdc_runtime_Log_Module__id__CR
S#define xdc_runtime_Log_Module__id__C (*((CT__xdc_runtime_Log_Module__id*)(xdcRomConstPtr + xdc_runtime_Log_Module__id__C_offset)))
S#else
S#define xdc_runtime_Log_Module__id (xdc_runtime_Log_Module__id__C)
S#endif
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__xdc_runtime_Log_Module__loggerDefined;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C;
S#ifdef xdc_runtime_Log_Module__loggerDefined__CR
S#define xdc_runtime_Log_Module__loggerDefined__C (*((CT__xdc_runtime_Log_Module__loggerDefined*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerDefined__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerDefined (xdc_runtime_Log_Module__loggerDefined__C)
S#endif
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Module__loggerObj;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C;
S#ifdef xdc_runtime_Log_Module__loggerObj__CR
S#define xdc_runtime_Log_Module__loggerObj__C (*((CT__xdc_runtime_Log_Module__loggerObj*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerObj__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerObj (xdc_runtime_Log_Module__loggerObj__C)
S#endif
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__xdc_runtime_Log_Module__loggerFxn0;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn0 xdc_runtime_Log_Module__loggerFxn0__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn0__CR
S#define xdc_runtime_Log_Module__loggerFxn0__C (*((CT__xdc_runtime_Log_Module__loggerFxn0*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn0__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn0 (xdc_runtime_Log_Module__loggerFxn0__C)
S#endif
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__xdc_runtime_Log_Module__loggerFxn1;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn1 xdc_runtime_Log_Module__loggerFxn1__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn1__CR
S#define xdc_runtime_Log_Module__loggerFxn1__C (*((CT__xdc_runtime_Log_Module__loggerFxn1*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn1__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn1 (xdc_runtime_Log_Module__loggerFxn1__C)
S#endif
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__xdc_runtime_Log_Module__loggerFxn2;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn2 xdc_runtime_Log_Module__loggerFxn2__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn2__CR
S#define xdc_runtime_Log_Module__loggerFxn2__C (*((CT__xdc_runtime_Log_Module__loggerFxn2*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn2__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn2 (xdc_runtime_Log_Module__loggerFxn2__C)
S#endif
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__xdc_runtime_Log_Module__loggerFxn4;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn4__CR
S#define xdc_runtime_Log_Module__loggerFxn4__C (*((CT__xdc_runtime_Log_Module__loggerFxn4*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn4__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn4 (xdc_runtime_Log_Module__loggerFxn4__C)
S#endif
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__xdc_runtime_Log_Module__loggerFxn8;
S__extern __FAR__ const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C;
S#ifdef xdc_runtime_Log_Module__loggerFxn8__CR
S#define xdc_runtime_Log_Module__loggerFxn8__C (*((CT__xdc_runtime_Log_Module__loggerFxn8*)(xdcRomConstPtr + xdc_runtime_Log_Module__loggerFxn8__C_offset)))
S#else
S#define xdc_runtime_Log_Module__loggerFxn8 (xdc_runtime_Log_Module__loggerFxn8__C)
S#endif
S
S/* Object__count */
Stypedef xdc_Int CT__xdc_runtime_Log_Object__count;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C;
S#ifdef xdc_runtime_Log_Object__count__CR
S#define xdc_runtime_Log_Object__count__C (*((CT__xdc_runtime_Log_Object__count*)(xdcRomConstPtr + xdc_runtime_Log_Object__count__C_offset)))
S#else
S#define xdc_runtime_Log_Object__count (xdc_runtime_Log_Object__count__C)
S#endif
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__xdc_runtime_Log_Object__heap;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C;
S#ifdef xdc_runtime_Log_Object__heap__CR
S#define xdc_runtime_Log_Object__heap__C (*((CT__xdc_runtime_Log_Object__heap*)(xdcRomConstPtr + xdc_runtime_Log_Object__heap__C_offset)))
S#else
S#define xdc_runtime_Log_Object__heap (xdc_runtime_Log_Object__heap__C)
S#endif
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__xdc_runtime_Log_Object__sizeof;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C;
S#ifdef xdc_runtime_Log_Object__sizeof__CR
S#define xdc_runtime_Log_Object__sizeof__C (*((CT__xdc_runtime_Log_Object__sizeof*)(xdcRomConstPtr + xdc_runtime_Log_Object__sizeof__C_offset)))
S#else
S#define xdc_runtime_Log_Object__sizeof (xdc_runtime_Log_Object__sizeof__C)
S#endif
S
S/* Object__table */
Stypedef xdc_Ptr CT__xdc_runtime_Log_Object__table;
S__extern __FAR__ const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C;
S#ifdef xdc_runtime_Log_Object__table__CR
S#define xdc_runtime_Log_Object__table__C (*((CT__xdc_runtime_Log_Object__table*)(xdcRomConstPtr + xdc_runtime_Log_Object__table__C_offset)))
S#else
S#define xdc_runtime_Log_Object__table (xdc_runtime_Log_Object__table__C)
S#endif
S
S/* L_construct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_construct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C;
S#ifdef xdc_runtime_Log_L_construct__CR
S#define xdc_runtime_Log_L_construct (*((CT__xdc_runtime_Log_L_construct*)(xdcRomConstPtr + xdc_runtime_Log_L_construct__C_offset)))
S#else
S#define xdc_runtime_Log_L_construct (xdc_runtime_Log_L_construct__C)
S#endif
S
S/* L_create */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_create;
S__extern __FAR__ const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C;
S#ifdef xdc_runtime_Log_L_create__CR
S#define xdc_runtime_Log_L_create (*((CT__xdc_runtime_Log_L_create*)(xdcRomConstPtr + xdc_runtime_Log_L_create__C_offset)))
S#else
S#define xdc_runtime_Log_L_create (xdc_runtime_Log_L_create__C)
S#endif
S
S/* L_destruct */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_destruct;
S__extern __FAR__ const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C;
S#ifdef xdc_runtime_Log_L_destruct__CR
S#define xdc_runtime_Log_L_destruct (*((CT__xdc_runtime_Log_L_destruct*)(xdcRomConstPtr + xdc_runtime_Log_L_destruct__C_offset)))
S#else
S#define xdc_runtime_Log_L_destruct (xdc_runtime_Log_L_destruct__C)
S#endif
S
S/* L_delete */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_delete;
S__extern __FAR__ const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C;
S#ifdef xdc_runtime_Log_L_delete__CR
S#define xdc_runtime_Log_L_delete (*((CT__xdc_runtime_Log_L_delete*)(xdcRomConstPtr + xdc_runtime_Log_L_delete__C_offset)))
S#else
S#define xdc_runtime_Log_L_delete (xdc_runtime_Log_L_delete__C)
S#endif
S
S/* L_error */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_error;
S__extern __FAR__ const CT__xdc_runtime_Log_L_error xdc_runtime_Log_L_error__C;
S#ifdef xdc_runtime_Log_L_error__CR
S#define xdc_runtime_Log_L_error (*((CT__xdc_runtime_Log_L_error*)(xdcRomConstPtr + xdc_runtime_Log_L_error__C_offset)))
S#else
S#define xdc_runtime_Log_L_error (xdc_runtime_Log_L_error__C)
S#endif
S
S/* L_warning */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_warning;
S__extern __FAR__ const CT__xdc_runtime_Log_L_warning xdc_runtime_Log_L_warning__C;
S#ifdef xdc_runtime_Log_L_warning__CR
S#define xdc_runtime_Log_L_warning (*((CT__xdc_runtime_Log_L_warning*)(xdcRomConstPtr + xdc_runtime_Log_L_warning__C_offset)))
S#else
S#define xdc_runtime_Log_L_warning (xdc_runtime_Log_L_warning__C)
S#endif
S
S/* L_info */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_info;
S__extern __FAR__ const CT__xdc_runtime_Log_L_info xdc_runtime_Log_L_info__C;
S#ifdef xdc_runtime_Log_L_info__CR
S#define xdc_runtime_Log_L_info (*((CT__xdc_runtime_Log_L_info*)(xdcRomConstPtr + xdc_runtime_Log_L_info__C_offset)))
S#else
S#define xdc_runtime_Log_L_info (xdc_runtime_Log_L_info__C)
S#endif
S
S/* L_start */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_start;
S__extern __FAR__ const CT__xdc_runtime_Log_L_start xdc_runtime_Log_L_start__C;
S#ifdef xdc_runtime_Log_L_start__CR
S#define xdc_runtime_Log_L_start (*((CT__xdc_runtime_Log_L_start*)(xdcRomConstPtr + xdc_runtime_Log_L_start__C_offset)))
S#else
S#define xdc_runtime_Log_L_start (xdc_runtime_Log_L_start__C)
S#endif
S
S/* L_stop */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stop;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stop xdc_runtime_Log_L_stop__C;
S#ifdef xdc_runtime_Log_L_stop__CR
S#define xdc_runtime_Log_L_stop (*((CT__xdc_runtime_Log_L_stop*)(xdcRomConstPtr + xdc_runtime_Log_L_stop__C_offset)))
S#else
S#define xdc_runtime_Log_L_stop (xdc_runtime_Log_L_stop__C)
S#endif
S
S/* L_startInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_startInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_startInstance xdc_runtime_Log_L_startInstance__C;
S#ifdef xdc_runtime_Log_L_startInstance__CR
S#define xdc_runtime_Log_L_startInstance (*((CT__xdc_runtime_Log_L_startInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_startInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_startInstance (xdc_runtime_Log_L_startInstance__C)
S#endif
S
S/* L_stopInstance */
Stypedef xdc_runtime_Log_Event CT__xdc_runtime_Log_L_stopInstance;
S__extern __FAR__ const CT__xdc_runtime_Log_L_stopInstance xdc_runtime_Log_L_stopInstance__C;
S#ifdef xdc_runtime_Log_L_stopInstance__CR
S#define xdc_runtime_Log_L_stopInstance (*((CT__xdc_runtime_Log_L_stopInstance*)(xdcRomConstPtr + xdc_runtime_Log_L_stopInstance__C_offset)))
S#else
S#define xdc_runtime_Log_L_stopInstance (xdc_runtime_Log_L_stopInstance__C)
S#endif
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define xdc_runtime_Log_Module_startup( state ) (-1)
S
S/* Module__startupDone__S */
Sxdc__CODESECT(xdc_runtime_Log_Module__startupDone__S, "xdc_runtime_Log_Module__startupDone__S")
S__extern xdc_Bool xdc_runtime_Log_Module__startupDone__S( void );
S
S/* doPrint__E */
S#define xdc_runtime_Log_doPrint xdc_runtime_Log_doPrint__E
Sxdc__CODESECT(xdc_runtime_Log_doPrint__E, "xdc_runtime_Log_doPrint")
S__extern xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec *evRec );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define xdc_runtime_Log_Module_startupDone() xdc_runtime_Log_Module__startupDone__S()
S
S/* Object_heap */
S#define xdc_runtime_Log_Object_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_heap */
S#define xdc_runtime_Log_Module_heap() xdc_runtime_Log_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id(void);
Sstatic inline CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module_id( void ) 
S{
S    return xdc_runtime_Log_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void);
Sstatic inline xdc_Bool xdc_runtime_Log_Module_hasMask(void)
S{
S    return (xdc_Bool)(xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL);
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void);
Sstatic inline xdc_Bits16 xdc_runtime_Log_Module_getMask(void)
S{
S    return (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) ? *xdc_runtime_Log_Module__diagsMask__C : (xdc_Bits16)0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask);
Sstatic inline xdc_Void xdc_runtime_Log_Module_setMask(xdc_Bits16 mask)
S{
S    if (xdc_runtime_Log_Module__diagsMask__C != (CT__xdc_runtime_Log_Module__diagsMask)NULL) {
S        *xdc_runtime_Log_Module__diagsMask__C = mask;
S    }
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <xdc/runtime/Log__epilogue.h>
S
S#ifdef xdc_runtime_Log__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_Log__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(xdc_runtime_Log__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef xdc_runtime_Log__include_state
S#define xdc_runtime_Log__include_state
S
S
S#endif /* xdc_runtime_Log__include_state */
S
N#endif
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_Log__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_Log__localnames__done
S#define xdc_runtime_Log__localnames__done
S
S/* module prefix */
S#define Log_NUMARGS xdc_runtime_Log_NUMARGS
S#define Log_PRINTFID xdc_runtime_Log_PRINTFID
S#define Log_EventRec xdc_runtime_Log_EventRec
S#define Log_Event xdc_runtime_Log_Event
S#define Log_EventId xdc_runtime_Log_EventId
S#define Log_L_construct xdc_runtime_Log_L_construct
S#define Log_L_create xdc_runtime_Log_L_create
S#define Log_L_destruct xdc_runtime_Log_L_destruct
S#define Log_L_delete xdc_runtime_Log_L_delete
S#define Log_L_error xdc_runtime_Log_L_error
S#define Log_L_warning xdc_runtime_Log_L_warning
S#define Log_L_info xdc_runtime_Log_L_info
S#define Log_L_start xdc_runtime_Log_L_start
S#define Log_L_stop xdc_runtime_Log_L_stop
S#define Log_L_startInstance xdc_runtime_Log_L_startInstance
S#define Log_L_stopInstance xdc_runtime_Log_L_stopInstance
S#define Log_getMask xdc_runtime_Log_getMask
S#define Log_getRope xdc_runtime_Log_getRope
S#define Log_getEventId xdc_runtime_Log_getEventId
S#define Log_print0 xdc_runtime_Log_print0
S#define Log_print1 xdc_runtime_Log_print1
S#define Log_print2 xdc_runtime_Log_print2
S#define Log_print3 xdc_runtime_Log_print3
S#define Log_print4 xdc_runtime_Log_print4
S#define Log_print5 xdc_runtime_Log_print5
S#define Log_print6 xdc_runtime_Log_print6
S#define Log_error0 xdc_runtime_Log_error0
S#define Log_error1 xdc_runtime_Log_error1
S#define Log_error2 xdc_runtime_Log_error2
S#define Log_error3 xdc_runtime_Log_error3
S#define Log_error4 xdc_runtime_Log_error4
S#define Log_error5 xdc_runtime_Log_error5
S#define Log_warning0 xdc_runtime_Log_warning0
S#define Log_warning1 xdc_runtime_Log_warning1
S#define Log_warning2 xdc_runtime_Log_warning2
S#define Log_warning3 xdc_runtime_Log_warning3
S#define Log_warning4 xdc_runtime_Log_warning4
S#define Log_warning5 xdc_runtime_Log_warning5
S#define Log_info0 xdc_runtime_Log_info0
S#define Log_info1 xdc_runtime_Log_info1
S#define Log_info2 xdc_runtime_Log_info2
S#define Log_info3 xdc_runtime_Log_info3
S#define Log_info4 xdc_runtime_Log_info4
S#define Log_info5 xdc_runtime_Log_info5
S#define Log_put0 xdc_runtime_Log_put0
S#define Log_put1 xdc_runtime_Log_put1
S#define Log_put2 xdc_runtime_Log_put2
S#define Log_put4 xdc_runtime_Log_put4
S#define Log_put8 xdc_runtime_Log_put8
S#define Log_write0 xdc_runtime_Log_write0
S#define Log_write1 xdc_runtime_Log_write1
S#define Log_write2 xdc_runtime_Log_write2
S#define Log_write3 xdc_runtime_Log_write3
S#define Log_write4 xdc_runtime_Log_write4
S#define Log_write5 xdc_runtime_Log_write5
S#define Log_write6 xdc_runtime_Log_write6
S#define Log_write7 xdc_runtime_Log_write7
S#define Log_write8 xdc_runtime_Log_write8
S#define Log_doPrint xdc_runtime_Log_doPrint
S#define Log_Module_name xdc_runtime_Log_Module_name
S#define Log_Module_id xdc_runtime_Log_Module_id
S#define Log_Module_startup xdc_runtime_Log_Module_startup
S#define Log_Module_startupDone xdc_runtime_Log_Module_startupDone
S#define Log_Module_hasMask xdc_runtime_Log_Module_hasMask
S#define Log_Module_getMask xdc_runtime_Log_Module_getMask
S#define Log_Module_setMask xdc_runtime_Log_Module_setMask
S#define Log_Object_heap xdc_runtime_Log_Object_heap
S#define Log_Module_heap xdc_runtime_Log_Module_heap
S
S#endif /* xdc_runtime_Log__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 62 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <ti/sysbios/knl/Queue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Queue.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Queue__include
S#define ti_sysbios_knl_Queue__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Queue__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Queue___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/IModule.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Elem */
Sstruct ti_sysbios_knl_Queue_Elem {
S    ti_sysbios_knl_Queue_Elem *volatile next;
S    ti_sysbios_knl_Queue_Elem *volatile prev;
S};
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsEnabled ti_sysbios_knl_Queue_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Queue_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsIncluded ti_sysbios_knl_Queue_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Queue_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__diagsMask ti_sysbios_knl_Queue_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gateObj ti_sysbios_knl_Queue_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__gatePrms ti_sysbios_knl_Queue_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Queue_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Queue_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerDefined ti_sysbios_knl_Queue_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerObj ti_sysbios_knl_Queue_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Queue_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn0 ti_sysbios_knl_Queue_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Queue_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn1 ti_sysbios_knl_Queue_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Queue_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn2 ti_sysbios_knl_Queue_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Queue_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn4 ti_sysbios_knl_Queue_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Queue_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__loggerFxn8 ti_sysbios_knl_Queue_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Queue_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Module__startupDoneFxn ti_sysbios_knl_Queue_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Queue_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__count ti_sysbios_knl_Queue_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Queue_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__heap ti_sysbios_knl_Queue_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Queue_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__sizeof ti_sysbios_knl_Queue_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Queue_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Queue_Object__table ti_sysbios_knl_Queue_Object__table__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Queue_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Queue_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Queue_Module_startup( state ) (-1)
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Instance_init__E, "ti_sysbios_knl_Queue_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Queue_Instance_init__E(ti_sysbios_knl_Queue_Object *, const ti_sysbios_knl_Queue_Params *);
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Handle__label__S, "ti_sysbios_knl_Queue_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Module__startupDone__S, "ti_sysbios_knl_Queue_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Queue_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__create__S, "ti_sysbios_knl_Queue_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Queue_create, "ti_sysbios_knl_Queue_create")
S__extern ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_create( const ti_sysbios_knl_Queue_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_construct, "ti_sysbios_knl_Queue_construct")
S__extern void ti_sysbios_knl_Queue_construct( ti_sysbios_knl_Queue_Struct *__obj, const ti_sysbios_knl_Queue_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__delete__S, "ti_sysbios_knl_Queue_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Queue_delete, "ti_sysbios_knl_Queue_delete")
S__extern void ti_sysbios_knl_Queue_delete(ti_sysbios_knl_Queue_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__destruct__S, "ti_sysbios_knl_Queue_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Queue_destruct, "ti_sysbios_knl_Queue_destruct")
S__extern void ti_sysbios_knl_Queue_destruct(ti_sysbios_knl_Queue_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__get__S, "ti_sysbios_knl_Queue_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__first__S, "ti_sysbios_knl_Queue_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Object__next__S, "ti_sysbios_knl_Queue_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Queue_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Queue_Params__init__S, "ti_sysbios_knl_Queue_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Queue_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* elemClear__E */
S#define ti_sysbios_knl_Queue_elemClear ti_sysbios_knl_Queue_elemClear__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_elemClear__E, "ti_sysbios_knl_Queue_elemClear")
S__extern xdc_Void ti_sysbios_knl_Queue_elemClear__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* insert__E */
S#define ti_sysbios_knl_Queue_insert ti_sysbios_knl_Queue_insert__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_insert__E, "ti_sysbios_knl_Queue_insert")
S__extern xdc_Void ti_sysbios_knl_Queue_insert__E( ti_sysbios_knl_Queue_Elem *qelem, ti_sysbios_knl_Queue_Elem *elem );
S
S/* next__E */
S#define ti_sysbios_knl_Queue_next ti_sysbios_knl_Queue_next__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_next__E, "ti_sysbios_knl_Queue_next")
S__extern xdc_Ptr ti_sysbios_knl_Queue_next__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* prev__E */
S#define ti_sysbios_knl_Queue_prev ti_sysbios_knl_Queue_prev__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_prev__E, "ti_sysbios_knl_Queue_prev")
S__extern xdc_Ptr ti_sysbios_knl_Queue_prev__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* remove__E */
S#define ti_sysbios_knl_Queue_remove ti_sysbios_knl_Queue_remove__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_remove__E, "ti_sysbios_knl_Queue_remove")
S__extern xdc_Void ti_sysbios_knl_Queue_remove__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* isQueued__E */
S#define ti_sysbios_knl_Queue_isQueued ti_sysbios_knl_Queue_isQueued__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_isQueued__E, "ti_sysbios_knl_Queue_isQueued")
S__extern xdc_Bool ti_sysbios_knl_Queue_isQueued__E( ti_sysbios_knl_Queue_Elem *qelem );
S
S/* dequeue__E */
S#define ti_sysbios_knl_Queue_dequeue ti_sysbios_knl_Queue_dequeue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_dequeue__E, "ti_sysbios_knl_Queue_dequeue")
S__extern xdc_Ptr ti_sysbios_knl_Queue_dequeue__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* empty__E */
S#define ti_sysbios_knl_Queue_empty ti_sysbios_knl_Queue_empty__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_empty__E, "ti_sysbios_knl_Queue_empty")
S__extern xdc_Bool ti_sysbios_knl_Queue_empty__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* enqueue__E */
S#define ti_sysbios_knl_Queue_enqueue ti_sysbios_knl_Queue_enqueue__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_enqueue__E, "ti_sysbios_knl_Queue_enqueue")
S__extern xdc_Void ti_sysbios_knl_Queue_enqueue__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* get__E */
S#define ti_sysbios_knl_Queue_get ti_sysbios_knl_Queue_get__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_get__E, "ti_sysbios_knl_Queue_get")
S__extern xdc_Ptr ti_sysbios_knl_Queue_get__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* getTail__E */
S#define ti_sysbios_knl_Queue_getTail ti_sysbios_knl_Queue_getTail__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_getTail__E, "ti_sysbios_knl_Queue_getTail")
S__extern xdc_Ptr ti_sysbios_knl_Queue_getTail__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* head__E */
S#define ti_sysbios_knl_Queue_head ti_sysbios_knl_Queue_head__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_head__E, "ti_sysbios_knl_Queue_head")
S__extern xdc_Ptr ti_sysbios_knl_Queue_head__E( ti_sysbios_knl_Queue_Handle __inst );
S
S/* put__E */
S#define ti_sysbios_knl_Queue_put ti_sysbios_knl_Queue_put__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_put__E, "ti_sysbios_knl_Queue_put")
S__extern xdc_Void ti_sysbios_knl_Queue_put__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S/* putHead__E */
S#define ti_sysbios_knl_Queue_putHead ti_sysbios_knl_Queue_putHead__E
Sxdc__CODESECT(ti_sysbios_knl_Queue_putHead__E, "ti_sysbios_knl_Queue_putHead")
S__extern xdc_Void ti_sysbios_knl_Queue_putHead__E( ti_sysbios_knl_Queue_Handle __inst, ti_sysbios_knl_Queue_Elem *elem );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Queue_Module_startupDone() ti_sysbios_knl_Queue_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Queue_Object_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Queue_Module_heap() ti_sysbios_knl_Queue_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Queue_Module__id ti_sysbios_knl_Queue_Module_id( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Queue_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Queue_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Queue_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Queue_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Queue_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Queue_Module__diagsMask__C != NULL) *ti_sysbios_knl_Queue_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Queue_Params_init( ti_sysbios_knl_Queue_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Queue_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Queue_Params_copy(ti_sysbios_knl_Queue_Params *dst, const ti_sysbios_knl_Queue_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Queue_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Queue_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Queue_Object_count() ti_sysbios_knl_Queue_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Queue_Object_sizeof() ti_sysbios_knl_Queue_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_get(ti_sysbios_knl_Queue_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_first( void )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_Object_next( ti_sysbios_knl_Queue_Object *obj )
S{
S    return (ti_sysbios_knl_Queue_Handle)ti_sysbios_knl_Queue_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Queue_Handle_label( ti_sysbios_knl_Queue_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Queue_Handle_name( ti_sysbios_knl_Queue_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Queue_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Queue_handle( ti_sysbios_knl_Queue_Struct *str )
S{
S    return (ti_sysbios_knl_Queue_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Queue_Struct *ti_sysbios_knl_Queue_struct( ti_sysbios_knl_Queue_Handle inst )
S{
S    return (ti_sysbios_knl_Queue_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Queue__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Queue__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Queue__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Queue__include_state
S#define ti_sysbios_knl_Queue__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Queue_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S};
S
S#endif /* ti_sysbios_knl_Queue__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Queue__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Queue__localnames__done
S#define ti_sysbios_knl_Queue__localnames__done
S
S/* module prefix */
S#define Queue_Instance ti_sysbios_knl_Queue_Instance
S#define Queue_Handle ti_sysbios_knl_Queue_Handle
S#define Queue_Module ti_sysbios_knl_Queue_Module
S#define Queue_Object ti_sysbios_knl_Queue_Object
S#define Queue_Struct ti_sysbios_knl_Queue_Struct
S#define Queue_Elem ti_sysbios_knl_Queue_Elem
S#define Queue_Instance_State ti_sysbios_knl_Queue_Instance_State
S#define Queue_Params ti_sysbios_knl_Queue_Params
S#define Queue_elemClear ti_sysbios_knl_Queue_elemClear
S#define Queue_insert ti_sysbios_knl_Queue_insert
S#define Queue_next ti_sysbios_knl_Queue_next
S#define Queue_prev ti_sysbios_knl_Queue_prev
S#define Queue_remove ti_sysbios_knl_Queue_remove
S#define Queue_isQueued ti_sysbios_knl_Queue_isQueued
S#define Queue_dequeue ti_sysbios_knl_Queue_dequeue
S#define Queue_empty ti_sysbios_knl_Queue_empty
S#define Queue_enqueue ti_sysbios_knl_Queue_enqueue
S#define Queue_get ti_sysbios_knl_Queue_get
S#define Queue_getTail ti_sysbios_knl_Queue_getTail
S#define Queue_head ti_sysbios_knl_Queue_head
S#define Queue_put ti_sysbios_knl_Queue_put
S#define Queue_putHead ti_sysbios_knl_Queue_putHead
S#define Queue_Module_name ti_sysbios_knl_Queue_Module_name
S#define Queue_Module_id ti_sysbios_knl_Queue_Module_id
S#define Queue_Module_startup ti_sysbios_knl_Queue_Module_startup
S#define Queue_Module_startupDone ti_sysbios_knl_Queue_Module_startupDone
S#define Queue_Module_hasMask ti_sysbios_knl_Queue_Module_hasMask
S#define Queue_Module_getMask ti_sysbios_knl_Queue_Module_getMask
S#define Queue_Module_setMask ti_sysbios_knl_Queue_Module_setMask
S#define Queue_Object_heap ti_sysbios_knl_Queue_Object_heap
S#define Queue_Module_heap ti_sysbios_knl_Queue_Module_heap
S#define Queue_construct ti_sysbios_knl_Queue_construct
S#define Queue_create ti_sysbios_knl_Queue_create
S#define Queue_handle ti_sysbios_knl_Queue_handle
S#define Queue_struct ti_sysbios_knl_Queue_struct
S#define Queue_Handle_label ti_sysbios_knl_Queue_Handle_label
S#define Queue_Handle_name ti_sysbios_knl_Queue_Handle_name
S#define Queue_Instance_init ti_sysbios_knl_Queue_Instance_init
S#define Queue_Object_count ti_sysbios_knl_Queue_Object_count
S#define Queue_Object_get ti_sysbios_knl_Queue_Object_get
S#define Queue_Object_first ti_sysbios_knl_Queue_Object_first
S#define Queue_Object_next ti_sysbios_knl_Queue_Object_next
S#define Queue_Object_sizeof ti_sysbios_knl_Queue_Object_sizeof
S#define Queue_Params_copy ti_sysbios_knl_Queue_Params_copy
S#define Queue_Params_init ti_sysbios_knl_Queue_Params_init
S#define Queue_delete ti_sysbios_knl_Queue_delete
S#define Queue_destruct ti_sysbios_knl_Queue_destruct
S
S#endif /* ti_sysbios_knl_Queue__localnames__done */
N#endif
L 63 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <ti/sysbios/knl/Clock.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Clock.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Clock__include
S#define ti_sysbios_knl_Clock__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Clock__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Clock___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Assert.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/interfaces/ITimer.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <ti/sysbios/knl/Swi.h>
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* TickSource */
Senum ti_sysbios_knl_Clock_TickSource {
S    ti_sysbios_knl_Clock_TickSource_TIMER,
S    ti_sysbios_knl_Clock_TickSource_USER,
S    ti_sysbios_knl_Clock_TickSource_NULL
S};
Stypedef enum ti_sysbios_knl_Clock_TickSource ti_sysbios_knl_Clock_TickSource;
S
S/* TickMode */
Senum ti_sysbios_knl_Clock_TickMode {
S    ti_sysbios_knl_Clock_TickMode_PERIODIC,
S    ti_sysbios_knl_Clock_TickMode_DYNAMIC
S};
Stypedef enum ti_sysbios_knl_Clock_TickMode ti_sysbios_knl_Clock_TickMode;
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Clock_FuncPtr)(xdc_UArg);
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Clock_Args__create {
S    ti_sysbios_knl_Clock_FuncPtr clockFxn;
S    xdc_UInt timeout;
S} ti_sysbios_knl_Clock_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsEnabled ti_sysbios_knl_Clock_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Clock_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsIncluded ti_sysbios_knl_Clock_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Clock_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__diagsMask ti_sysbios_knl_Clock_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gateObj ti_sysbios_knl_Clock_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__gatePrms ti_sysbios_knl_Clock_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Clock_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Clock_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerDefined ti_sysbios_knl_Clock_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerObj ti_sysbios_knl_Clock_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Clock_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn0 ti_sysbios_knl_Clock_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Clock_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn1 ti_sysbios_knl_Clock_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Clock_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn2 ti_sysbios_knl_Clock_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Clock_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn4 ti_sysbios_knl_Clock_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Clock_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__loggerFxn8 ti_sysbios_knl_Clock_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Clock_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Module__startupDoneFxn ti_sysbios_knl_Clock_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Clock_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__count ti_sysbios_knl_Clock_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Clock_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__heap ti_sysbios_knl_Clock_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Clock_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__sizeof ti_sysbios_knl_Clock_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Clock_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_Object__table ti_sysbios_knl_Clock_Object__table__C;
S
S/* LW_delayed */
S#define ti_sysbios_knl_Clock_LW_delayed (ti_sysbios_knl_Clock_LW_delayed__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LW_delayed;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed__C;
S
S/* LM_tick */
S#define ti_sysbios_knl_Clock_LM_tick (ti_sysbios_knl_Clock_LM_tick__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_tick;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_tick ti_sysbios_knl_Clock_LM_tick__C;
S
S/* LM_begin */
S#define ti_sysbios_knl_Clock_LM_begin (ti_sysbios_knl_Clock_LM_begin__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Clock_LM_begin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_LM_begin ti_sysbios_knl_Clock_LM_begin__C;
S
S/* A_clockDisabled */
S#define ti_sysbios_knl_Clock_A_clockDisabled (ti_sysbios_knl_Clock_A_clockDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_clockDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled__C;
S
S/* A_badThreadType */
S#define ti_sysbios_knl_Clock_A_badThreadType (ti_sysbios_knl_Clock_A_badThreadType__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Clock_A_badThreadType;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType__C;
S
S/* serviceMargin */
S#ifdef ti_sysbios_knl_Clock_serviceMargin__D
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__D)
S#else
S#define ti_sysbios_knl_Clock_serviceMargin (ti_sysbios_knl_Clock_serviceMargin__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_serviceMargin;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin__C;
S#endif
S
S/* tickSource */
S#define ti_sysbios_knl_Clock_tickSource (ti_sysbios_knl_Clock_tickSource__C)
Stypedef ti_sysbios_knl_Clock_TickSource CT__ti_sysbios_knl_Clock_tickSource;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickSource ti_sysbios_knl_Clock_tickSource__C;
S
S/* tickMode */
S#define ti_sysbios_knl_Clock_tickMode (ti_sysbios_knl_Clock_tickMode__C)
Stypedef ti_sysbios_knl_Clock_TickMode CT__ti_sysbios_knl_Clock_tickMode;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickMode ti_sysbios_knl_Clock_tickMode__C;
S
S/* timerId */
S#ifdef ti_sysbios_knl_Clock_timerId__D
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__D)
S#else
S#define ti_sysbios_knl_Clock_timerId (ti_sysbios_knl_Clock_timerId__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Clock_timerId;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_timerId ti_sysbios_knl_Clock_timerId__C;
S#endif
S
S/* tickPeriod */
S#ifdef ti_sysbios_knl_Clock_tickPeriod__D
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__D)
S#else
S#define ti_sysbios_knl_Clock_tickPeriod (ti_sysbios_knl_Clock_tickPeriod__C)
Stypedef xdc_UInt32 CT__ti_sysbios_knl_Clock_tickPeriod;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod__C;
S#endif
S
S/* doTickFunc */
S#define ti_sysbios_knl_Clock_doTickFunc (ti_sysbios_knl_Clock_doTickFunc__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Clock_doTickFunc)(xdc_UArg);
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc__C;
S
S/* triggerClock */
S#define ti_sysbios_knl_Clock_triggerClock (ti_sysbios_knl_Clock_triggerClock__C)
Stypedef ti_sysbios_knl_Clock_Handle CT__ti_sysbios_knl_Clock_triggerClock;
S__extern __FAR__ const CT__ti_sysbios_knl_Clock_triggerClock ti_sysbios_knl_Clock_triggerClock__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Clock_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_Bool startFlag;
S    xdc_UInt32 period;
S    xdc_UArg arg;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Clock_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    xdc_UInt32 __f1;
S    xdc_UInt32 __f2;
S    xdc_UInt32 __f3;
S    volatile xdc_Bool __f4;
S    ti_sysbios_knl_Clock_FuncPtr __f5;
S    xdc_UArg __f6;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Clock_Module_startup ti_sysbios_knl_Clock_Module_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__E, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__E( xdc_Int state );
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module_startup__F, "ti_sysbios_knl_Clock_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Clock_Module_startup__F( xdc_Int state );
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_init__E, "ti_sysbios_knl_Clock_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Clock_Instance_init__E(ti_sysbios_knl_Clock_Object *, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Instance_finalize__E, "ti_sysbios_knl_Clock_Instance_finalize")
S__extern void ti_sysbios_knl_Clock_Instance_finalize__E( ti_sysbios_knl_Clock_Object* );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Handle__label__S, "ti_sysbios_knl_Clock_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Module__startupDone__S, "ti_sysbios_knl_Clock_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Clock_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__create__S, "ti_sysbios_knl_Clock_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Clock_create, "ti_sysbios_knl_Clock_create")
S__extern ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_create( ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_construct, "ti_sysbios_knl_Clock_construct")
S__extern void ti_sysbios_knl_Clock_construct( ti_sysbios_knl_Clock_Struct *__obj, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt timeout, const ti_sysbios_knl_Clock_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__delete__S, "ti_sysbios_knl_Clock_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Clock_delete, "ti_sysbios_knl_Clock_delete")
S__extern void ti_sysbios_knl_Clock_delete(ti_sysbios_knl_Clock_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__destruct__S, "ti_sysbios_knl_Clock_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Clock_destruct, "ti_sysbios_knl_Clock_destruct")
S__extern void ti_sysbios_knl_Clock_destruct(ti_sysbios_knl_Clock_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__get__S, "ti_sysbios_knl_Clock_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__first__S, "ti_sysbios_knl_Clock_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Object__next__S, "ti_sysbios_knl_Clock_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Clock_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Clock_Params__init__S, "ti_sysbios_knl_Clock_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Clock_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* getTicks__E */
S#define ti_sysbios_knl_Clock_getTicks ti_sysbios_knl_Clock_getTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicks__E, "ti_sysbios_knl_Clock_getTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicks__E( void );
S
S/* getTimerHandle__E */
S#define ti_sysbios_knl_Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimerHandle__E, "ti_sysbios_knl_Clock_getTimerHandle")
S__extern ti_sysbios_knl_Clock_TimerProxy_Handle ti_sysbios_knl_Clock_getTimerHandle__E( void );
S
S/* setTicks__E */
S#define ti_sysbios_knl_Clock_setTicks ti_sysbios_knl_Clock_setTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTicks__E, "ti_sysbios_knl_Clock_setTicks")
S__extern xdc_Void ti_sysbios_knl_Clock_setTicks__E( xdc_UInt32 ticks );
S
S/* tickStop__E */
S#define ti_sysbios_knl_Clock_tickStop ti_sysbios_knl_Clock_tickStop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStop__E, "ti_sysbios_knl_Clock_tickStop")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStop__E( void );
S
S/* tickReconfig__E */
S#define ti_sysbios_knl_Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickReconfig__E, "ti_sysbios_knl_Clock_tickReconfig")
S__extern xdc_Bool ti_sysbios_knl_Clock_tickReconfig__E( void );
S
S/* tickStart__E */
S#define ti_sysbios_knl_Clock_tickStart ti_sysbios_knl_Clock_tickStart__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tickStart__E, "ti_sysbios_knl_Clock_tickStart")
S__extern xdc_Void ti_sysbios_knl_Clock_tickStart__E( void );
S
S/* tick__E */
S#define ti_sysbios_knl_Clock_tick ti_sysbios_knl_Clock_tick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_tick__E, "ti_sysbios_knl_Clock_tick")
S__extern xdc_Void ti_sysbios_knl_Clock_tick__E( void );
S
S/* workFunc__E */
S#define ti_sysbios_knl_Clock_workFunc ti_sysbios_knl_Clock_workFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFunc__E, "ti_sysbios_knl_Clock_workFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_workFunc__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* workFuncDynamic__E */
S#define ti_sysbios_knl_Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_workFuncDynamic__E, "ti_sysbios_knl_Clock_workFuncDynamic")
S__extern xdc_Void ti_sysbios_knl_Clock_workFuncDynamic__E( xdc_UArg arg0, xdc_UArg arg1 );
S
S/* logTick__E */
S#define ti_sysbios_knl_Clock_logTick ti_sysbios_knl_Clock_logTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_logTick__E, "ti_sysbios_knl_Clock_logTick")
S__extern xdc_Void ti_sysbios_knl_Clock_logTick__E( void );
S
S/* getCompletedTicks__E */
S#define ti_sysbios_knl_Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getCompletedTicks__E, "ti_sysbios_knl_Clock_getCompletedTicks")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getCompletedTicks__E( void );
S
S/* getTickPeriod__E */
S#define ti_sysbios_knl_Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTickPeriod__E, "ti_sysbios_knl_Clock_getTickPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTickPeriod__E( void );
S
S/* getTicksUntilInterrupt__E */
S#define ti_sysbios_knl_Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilInterrupt__E, "ti_sysbios_knl_Clock_getTicksUntilInterrupt")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilInterrupt__E( void );
S
S/* getTicksUntilTimeout__E */
S#define ti_sysbios_knl_Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTicksUntilTimeout__E, "ti_sysbios_knl_Clock_getTicksUntilTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTicksUntilTimeout__E( void );
S
S/* walkQueueDynamic__E */
S#define ti_sysbios_knl_Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueueDynamic__E, "ti_sysbios_knl_Clock_walkQueueDynamic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueueDynamic__E( xdc_Bool service, xdc_UInt32 tick );
S
S/* walkQueuePeriodic__E */
S#define ti_sysbios_knl_Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_walkQueuePeriodic__E, "ti_sysbios_knl_Clock_walkQueuePeriodic")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_walkQueuePeriodic__E( void );
S
S/* scheduleNextTick__E */
S#define ti_sysbios_knl_Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_scheduleNextTick__E, "ti_sysbios_knl_Clock_scheduleNextTick")
S__extern xdc_Void ti_sysbios_knl_Clock_scheduleNextTick__E( xdc_UInt32 deltaTicks, xdc_UInt32 absTick );
S
S/* addI__E */
S#define ti_sysbios_knl_Clock_addI ti_sysbios_knl_Clock_addI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_addI__E, "ti_sysbios_knl_Clock_addI")
S__extern xdc_Void ti_sysbios_knl_Clock_addI__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr clockFxn, xdc_UInt32 timeout, xdc_UArg arg );
S
S/* removeI__E */
S#define ti_sysbios_knl_Clock_removeI ti_sysbios_knl_Clock_removeI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_removeI__E, "ti_sysbios_knl_Clock_removeI")
S__extern xdc_Void ti_sysbios_knl_Clock_removeI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* start__E */
S#define ti_sysbios_knl_Clock_start ti_sysbios_knl_Clock_start__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_start__E, "ti_sysbios_knl_Clock_start")
S__extern xdc_Void ti_sysbios_knl_Clock_start__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* startI__E */
S#define ti_sysbios_knl_Clock_startI ti_sysbios_knl_Clock_startI__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_startI__E, "ti_sysbios_knl_Clock_startI")
S__extern xdc_Void ti_sysbios_knl_Clock_startI__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* stop__E */
S#define ti_sysbios_knl_Clock_stop ti_sysbios_knl_Clock_stop__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_stop__E, "ti_sysbios_knl_Clock_stop")
S__extern xdc_Void ti_sysbios_knl_Clock_stop__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* setPeriod__E */
S#define ti_sysbios_knl_Clock_setPeriod ti_sysbios_knl_Clock_setPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setPeriod__E, "ti_sysbios_knl_Clock_setPeriod")
S__extern xdc_Void ti_sysbios_knl_Clock_setPeriod__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 period );
S
S/* setTimeout__E */
S#define ti_sysbios_knl_Clock_setTimeout ti_sysbios_knl_Clock_setTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setTimeout__E, "ti_sysbios_knl_Clock_setTimeout")
S__extern xdc_Void ti_sysbios_knl_Clock_setTimeout__E( ti_sysbios_knl_Clock_Handle __inst, xdc_UInt32 timeout );
S
S/* setFunc__E */
S#define ti_sysbios_knl_Clock_setFunc ti_sysbios_knl_Clock_setFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_setFunc__E, "ti_sysbios_knl_Clock_setFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_setFunc__E( ti_sysbios_knl_Clock_Handle __inst, ti_sysbios_knl_Clock_FuncPtr fxn, xdc_UArg arg );
S
S/* getPeriod__E */
S#define ti_sysbios_knl_Clock_getPeriod ti_sysbios_knl_Clock_getPeriod__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getPeriod__E, "ti_sysbios_knl_Clock_getPeriod")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getPeriod__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* getTimeout__E */
S#define ti_sysbios_knl_Clock_getTimeout ti_sysbios_knl_Clock_getTimeout__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_getTimeout__E, "ti_sysbios_knl_Clock_getTimeout")
S__extern xdc_UInt32 ti_sysbios_knl_Clock_getTimeout__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* isActive__E */
S#define ti_sysbios_knl_Clock_isActive ti_sysbios_knl_Clock_isActive__E
Sxdc__CODESECT(ti_sysbios_knl_Clock_isActive__E, "ti_sysbios_knl_Clock_isActive")
S__extern xdc_Bool ti_sysbios_knl_Clock_isActive__E( ti_sysbios_knl_Clock_Handle __inst );
S
S/* doTick__I */
S#define ti_sysbios_knl_Clock_doTick ti_sysbios_knl_Clock_doTick__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_doTick__I, "ti_sysbios_knl_Clock_doTick")
S__extern xdc_Void ti_sysbios_knl_Clock_doTick__I( xdc_UArg arg );
S
S/* triggerFunc__I */
S#define ti_sysbios_knl_Clock_triggerFunc ti_sysbios_knl_Clock_triggerFunc__I
Sxdc__CODESECT(ti_sysbios_knl_Clock_triggerFunc__I, "ti_sysbios_knl_Clock_triggerFunc")
S__extern xdc_Void ti_sysbios_knl_Clock_triggerFunc__I( xdc_UArg arg );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Clock_Module_startupDone() ti_sysbios_knl_Clock_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Clock_Object_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Clock_Module_heap() ti_sysbios_knl_Clock_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Clock_Module__id ti_sysbios_knl_Clock_Module_id( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Clock_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Clock_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Clock_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Clock_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Clock_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Clock_Module__diagsMask__C != NULL) *ti_sysbios_knl_Clock_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Clock_Params_init( ti_sysbios_knl_Clock_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Clock_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Clock_Params_copy(ti_sysbios_knl_Clock_Params *dst, const ti_sysbios_knl_Clock_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Clock_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Clock_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Clock_Object_count() ti_sysbios_knl_Clock_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Clock_Object_sizeof() ti_sysbios_knl_Clock_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_get(ti_sysbios_knl_Clock_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_first( void )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_Object_next( ti_sysbios_knl_Clock_Object *obj )
S{
S    return (ti_sysbios_knl_Clock_Handle)ti_sysbios_knl_Clock_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Clock_Handle_label( ti_sysbios_knl_Clock_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Clock_Handle_name( ti_sysbios_knl_Clock_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Clock_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Clock_Handle ti_sysbios_knl_Clock_handle( ti_sysbios_knl_Clock_Struct *str )
S{
S    return (ti_sysbios_knl_Clock_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Clock_Struct *ti_sysbios_knl_Clock_struct( ti_sysbios_knl_Clock_Handle inst )
S{
S    return (ti_sysbios_knl_Clock_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Clock__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Clock__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Clock__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Clock__include_state
S#define ti_sysbios_knl_Clock__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Clock_Module_State {
S    volatile xdc_UInt32 ticks;
S    xdc_UInt swiCount;
S    ti_sysbios_knl_Clock_TimerProxy_Handle timer;
S    ti_sysbios_knl_Swi_Handle swi;
S    volatile xdc_UInt numTickSkip;
S    xdc_UInt32 nextScheduledTick;
S    xdc_UInt32 maxSkippable;
S    xdc_Bool inWorkFunc;
S    xdc_Bool startDuringWorkFunc;
S    xdc_Bool ticking;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Clock_Module_State__ ti_sysbios_knl_Clock_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Clock_Object {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt32 timeout;
S    xdc_UInt32 currTimeout;
S    xdc_UInt32 period;
S    volatile xdc_Bool active;
S    ti_sysbios_knl_Clock_FuncPtr fxn;
S    xdc_UArg arg;
S};
S
S/* Module_State_clockQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Clock_Module_State_clockQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Clock_Module_State_clockQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Clock_Module__state__V) + ti_sysbios_knl_Clock_Module_State_clockQ__O);
S}
S
S#endif /* ti_sysbios_knl_Clock__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Clock__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Clock__localnames__done
S#define ti_sysbios_knl_Clock__localnames__done
S
S/* module prefix */
S#define Clock_Instance ti_sysbios_knl_Clock_Instance
S#define Clock_Handle ti_sysbios_knl_Clock_Handle
S#define Clock_Module ti_sysbios_knl_Clock_Module
S#define Clock_Object ti_sysbios_knl_Clock_Object
S#define Clock_Struct ti_sysbios_knl_Clock_Struct
S#define Clock_TickSource ti_sysbios_knl_Clock_TickSource
S#define Clock_TickMode ti_sysbios_knl_Clock_TickMode
S#define Clock_FuncPtr ti_sysbios_knl_Clock_FuncPtr
S#define Clock_Instance_State ti_sysbios_knl_Clock_Instance_State
S#define Clock_Module_State ti_sysbios_knl_Clock_Module_State
S#define Clock_TickSource_TIMER ti_sysbios_knl_Clock_TickSource_TIMER
S#define Clock_TickSource_USER ti_sysbios_knl_Clock_TickSource_USER
S#define Clock_TickSource_NULL ti_sysbios_knl_Clock_TickSource_NULL
S#define Clock_TickMode_PERIODIC ti_sysbios_knl_Clock_TickMode_PERIODIC
S#define Clock_TickMode_DYNAMIC ti_sysbios_knl_Clock_TickMode_DYNAMIC
S#define Clock_LW_delayed ti_sysbios_knl_Clock_LW_delayed
S#define Clock_LM_tick ti_sysbios_knl_Clock_LM_tick
S#define Clock_LM_begin ti_sysbios_knl_Clock_LM_begin
S#define Clock_A_clockDisabled ti_sysbios_knl_Clock_A_clockDisabled
S#define Clock_A_badThreadType ti_sysbios_knl_Clock_A_badThreadType
S#define Clock_serviceMargin ti_sysbios_knl_Clock_serviceMargin
S#define Clock_tickSource ti_sysbios_knl_Clock_tickSource
S#define Clock_tickMode ti_sysbios_knl_Clock_tickMode
S#define Clock_timerId ti_sysbios_knl_Clock_timerId
S#define Clock_tickPeriod ti_sysbios_knl_Clock_tickPeriod
S#define Clock_doTickFunc ti_sysbios_knl_Clock_doTickFunc
S#define Clock_triggerClock ti_sysbios_knl_Clock_triggerClock
S#define Clock_Module_State_clockQ ti_sysbios_knl_Clock_Module_State_clockQ
S#define Clock_Params ti_sysbios_knl_Clock_Params
S#define Clock_getTicks ti_sysbios_knl_Clock_getTicks
S#define Clock_getTimerHandle ti_sysbios_knl_Clock_getTimerHandle
S#define Clock_setTicks ti_sysbios_knl_Clock_setTicks
S#define Clock_tickStop ti_sysbios_knl_Clock_tickStop
S#define Clock_tickReconfig ti_sysbios_knl_Clock_tickReconfig
S#define Clock_tickStart ti_sysbios_knl_Clock_tickStart
S#define Clock_tick ti_sysbios_knl_Clock_tick
S#define Clock_workFunc ti_sysbios_knl_Clock_workFunc
S#define Clock_workFuncDynamic ti_sysbios_knl_Clock_workFuncDynamic
S#define Clock_logTick ti_sysbios_knl_Clock_logTick
S#define Clock_getCompletedTicks ti_sysbios_knl_Clock_getCompletedTicks
S#define Clock_getTickPeriod ti_sysbios_knl_Clock_getTickPeriod
S#define Clock_getTicksUntilInterrupt ti_sysbios_knl_Clock_getTicksUntilInterrupt
S#define Clock_getTicksUntilTimeout ti_sysbios_knl_Clock_getTicksUntilTimeout
S#define Clock_walkQueueDynamic ti_sysbios_knl_Clock_walkQueueDynamic
S#define Clock_walkQueuePeriodic ti_sysbios_knl_Clock_walkQueuePeriodic
S#define Clock_scheduleNextTick ti_sysbios_knl_Clock_scheduleNextTick
S#define Clock_addI ti_sysbios_knl_Clock_addI
S#define Clock_removeI ti_sysbios_knl_Clock_removeI
S#define Clock_start ti_sysbios_knl_Clock_start
S#define Clock_startI ti_sysbios_knl_Clock_startI
S#define Clock_stop ti_sysbios_knl_Clock_stop
S#define Clock_setPeriod ti_sysbios_knl_Clock_setPeriod
S#define Clock_setTimeout ti_sysbios_knl_Clock_setTimeout
S#define Clock_setFunc ti_sysbios_knl_Clock_setFunc
S#define Clock_getPeriod ti_sysbios_knl_Clock_getPeriod
S#define Clock_getTimeout ti_sysbios_knl_Clock_getTimeout
S#define Clock_isActive ti_sysbios_knl_Clock_isActive
S#define Clock_Module_name ti_sysbios_knl_Clock_Module_name
S#define Clock_Module_id ti_sysbios_knl_Clock_Module_id
S#define Clock_Module_startup ti_sysbios_knl_Clock_Module_startup
S#define Clock_Module_startupDone ti_sysbios_knl_Clock_Module_startupDone
S#define Clock_Module_hasMask ti_sysbios_knl_Clock_Module_hasMask
S#define Clock_Module_getMask ti_sysbios_knl_Clock_Module_getMask
S#define Clock_Module_setMask ti_sysbios_knl_Clock_Module_setMask
S#define Clock_Object_heap ti_sysbios_knl_Clock_Object_heap
S#define Clock_Module_heap ti_sysbios_knl_Clock_Module_heap
S#define Clock_construct ti_sysbios_knl_Clock_construct
S#define Clock_create ti_sysbios_knl_Clock_create
S#define Clock_handle ti_sysbios_knl_Clock_handle
S#define Clock_struct ti_sysbios_knl_Clock_struct
S#define Clock_Handle_label ti_sysbios_knl_Clock_Handle_label
S#define Clock_Handle_name ti_sysbios_knl_Clock_Handle_name
S#define Clock_Instance_init ti_sysbios_knl_Clock_Instance_init
S#define Clock_Object_count ti_sysbios_knl_Clock_Object_count
S#define Clock_Object_get ti_sysbios_knl_Clock_Object_get
S#define Clock_Object_first ti_sysbios_knl_Clock_Object_first
S#define Clock_Object_next ti_sysbios_knl_Clock_Object_next
S#define Clock_Object_sizeof ti_sysbios_knl_Clock_Object_sizeof
S#define Clock_Params_copy ti_sysbios_knl_Clock_Params_copy
S#define Clock_Params_init ti_sysbios_knl_Clock_Params_init
S#define Clock_Instance_finalize ti_sysbios_knl_Clock_Instance_finalize
S#define Clock_delete ti_sysbios_knl_Clock_delete
S#define Clock_destruct ti_sysbios_knl_Clock_destruct
S
S/* proxies */
S#include <ti/sysbios/knl/package/Clock_TimerProxy.h>
S
S#endif /* ti_sysbios_knl_Clock__localnames__done */
N#endif
L 64 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <ti/sysbios/knl/Task.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Task.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Task__include
S#define ti_sysbios_knl_Task__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Task__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Task___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/Task__prologue.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Error.h>
S#include <xdc/runtime/Assert.h>
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/IHeap.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/interfaces/ITaskSupport.h>
S#include <ti/sysbios/knl/Clock.h>
S#include <ti/sysbios/knl/package/Task_SupportProxy.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* FuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Task_FuncPtr)(xdc_UArg, xdc_UArg);
S
S/* AllBlockedFuncPtr */
Stypedef xdc_Void (*ti_sysbios_knl_Task_AllBlockedFuncPtr)(xdc_Void);
S
S/* Mode */
Senum ti_sysbios_knl_Task_Mode {
S    ti_sysbios_knl_Task_Mode_RUNNING,
S    ti_sysbios_knl_Task_Mode_READY,
S    ti_sysbios_knl_Task_Mode_BLOCKED,
S    ti_sysbios_knl_Task_Mode_TERMINATED,
S    ti_sysbios_knl_Task_Mode_INACTIVE
S};
Stypedef enum ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_Mode;
S
S/* Stat */
Sstruct ti_sysbios_knl_Task_Stat {
S    xdc_Int priority;
S    xdc_Ptr stack;
S    xdc_SizeT stackSize;
S    xdc_runtime_IHeap_Handle stackHeap;
S    xdc_Ptr env;
S    ti_sysbios_knl_Task_Mode mode;
S    xdc_Ptr sp;
S    xdc_SizeT used;
S};
S
S/* HookSet */
Sstruct ti_sysbios_knl_Task_HookSet {
S    xdc_Void (*registerFxn)(xdc_Int);
S    xdc_Void (*createFxn)(ti_sysbios_knl_Task_Handle, xdc_runtime_Error_Block*);
S    xdc_Void (*readyFxn)(ti_sysbios_knl_Task_Handle);
S    xdc_Void (*switchFxn)(ti_sysbios_knl_Task_Handle, ti_sysbios_knl_Task_Handle);
S    xdc_Void (*exitFxn)(ti_sysbios_knl_Task_Handle);
S    xdc_Void (*deleteFxn)(ti_sysbios_knl_Task_Handle);
S};
S
S/* AFFINITY_NONE */
S#define ti_sysbios_knl_Task_AFFINITY_NONE (~(0))
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Task_Args__create {
S    ti_sysbios_knl_Task_FuncPtr fxn;
S} ti_sysbios_knl_Task_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* PendElem */
Sstruct ti_sysbios_knl_Task_PendElem {
S    ti_sysbios_knl_Queue_Elem qElem;
S    ti_sysbios_knl_Task_Handle task;
S    ti_sysbios_knl_Clock_Handle clock;
S};
S
S/* Instance_State */
Stypedef xdc_Char __T1_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef xdc_Char *__ARRAY1_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__stack __TA_ti_sysbios_knl_Task_Instance_State__stack;
Stypedef xdc_Ptr __T1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Stypedef xdc_Ptr *__ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Instance_State__hookEnv __TA_ti_sysbios_knl_Task_Instance_State__hookEnv;
S
S/* Module_State */
Stypedef ti_sysbios_knl_Queue_Instance_State __T1_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef ti_sysbios_knl_Queue_Instance_State *__ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__readyQ __TA_ti_sysbios_knl_Task_Module_State__readyQ;
Stypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurSet __TA_ti_sysbios_knl_Task_Module_State__smpCurSet;
Stypedef volatile xdc_UInt __T1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef volatile xdc_UInt *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurMask __TA_ti_sysbios_knl_Task_Module_State__smpCurMask;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpCurTask __TA_ti_sysbios_knl_Task_Module_State__smpCurTask;
Stypedef ti_sysbios_knl_Queue_Handle __T1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef ti_sysbios_knl_Queue_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__smpReadyQ __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__idleTask __TA_ti_sysbios_knl_Task_Module_State__idleTask;
Stypedef ti_sysbios_knl_Task_Handle __T1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Stypedef ti_sysbios_knl_Task_Handle *__ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_State__constructedTasks __TA_ti_sysbios_knl_Task_Module_State__constructedTasks;
S
S/* RunQEntry */
Sstruct ti_sysbios_knl_Task_RunQEntry {
S    ti_sysbios_knl_Queue_Elem elem;
S    xdc_UInt coreId;
S    xdc_Int priority;
S};
S
S/* Module_StateSmp */
Stypedef volatile ti_sysbios_knl_Task_RunQEntry __T1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Stypedef volatile ti_sysbios_knl_Task_RunQEntry *__ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Stypedef __ARRAY1_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ;
Sstruct ti_sysbios_knl_Task_Module_StateSmp {
S    ti_sysbios_knl_Queue_Object *sortedRunQ;
S    __TA_ti_sysbios_knl_Task_Module_StateSmp__smpRunQ smpRunQ;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsEnabled ti_sysbios_knl_Task_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Task_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsIncluded ti_sysbios_knl_Task_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Task_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__diagsMask ti_sysbios_knl_Task_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gateObj ti_sysbios_knl_Task_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__gatePrms ti_sysbios_knl_Task_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Task_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerDefined ti_sysbios_knl_Task_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerObj ti_sysbios_knl_Task_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Task_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn0 ti_sysbios_knl_Task_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Task_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn1 ti_sysbios_knl_Task_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Task_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn2 ti_sysbios_knl_Task_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Task_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn4 ti_sysbios_knl_Task_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Task_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__loggerFxn8 ti_sysbios_knl_Task_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Task_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Module__startupDoneFxn ti_sysbios_knl_Task_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Task_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__count ti_sysbios_knl_Task_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__heap ti_sysbios_knl_Task_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__sizeof ti_sysbios_knl_Task_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Task_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_Object__table ti_sysbios_knl_Task_Object__table__C;
S
S/* LM_switch */
S#define ti_sysbios_knl_Task_LM_switch (ti_sysbios_knl_Task_LM_switch__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_switch;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_switch ti_sysbios_knl_Task_LM_switch__C;
S
S/* LM_sleep */
S#define ti_sysbios_knl_Task_LM_sleep (ti_sysbios_knl_Task_LM_sleep__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_sleep;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_sleep ti_sysbios_knl_Task_LM_sleep__C;
S
S/* LD_ready */
S#define ti_sysbios_knl_Task_LD_ready (ti_sysbios_knl_Task_LD_ready__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_ready;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_ready ti_sysbios_knl_Task_LD_ready__C;
S
S/* LD_block */
S#define ti_sysbios_knl_Task_LD_block (ti_sysbios_knl_Task_LD_block__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_block;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_block ti_sysbios_knl_Task_LD_block__C;
S
S/* LM_yield */
S#define ti_sysbios_knl_Task_LM_yield (ti_sysbios_knl_Task_LM_yield__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_yield;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_yield ti_sysbios_knl_Task_LM_yield__C;
S
S/* LM_setPri */
S#define ti_sysbios_knl_Task_LM_setPri (ti_sysbios_knl_Task_LM_setPri__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setPri;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setPri ti_sysbios_knl_Task_LM_setPri__C;
S
S/* LD_exit */
S#define ti_sysbios_knl_Task_LD_exit (ti_sysbios_knl_Task_LD_exit__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LD_exit;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LD_exit ti_sysbios_knl_Task_LD_exit__C;
S
S/* LM_setAffinity */
S#define ti_sysbios_knl_Task_LM_setAffinity (ti_sysbios_knl_Task_LM_setAffinity__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_setAffinity;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity__C;
S
S/* LM_schedule */
S#define ti_sysbios_knl_Task_LM_schedule (ti_sysbios_knl_Task_LM_schedule__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_schedule;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_schedule ti_sysbios_knl_Task_LM_schedule__C;
S
S/* LM_noWork */
S#define ti_sysbios_knl_Task_LM_noWork (ti_sysbios_knl_Task_LM_noWork__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Task_LM_noWork;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_LM_noWork ti_sysbios_knl_Task_LM_noWork__C;
S
S/* E_stackOverflow */
S#define ti_sysbios_knl_Task_E_stackOverflow (ti_sysbios_knl_Task_E_stackOverflow__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_stackOverflow;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow__C;
S
S/* E_spOutOfBounds */
S#define ti_sysbios_knl_Task_E_spOutOfBounds (ti_sysbios_knl_Task_E_spOutOfBounds__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_spOutOfBounds;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds__C;
S
S/* E_deleteNotAllowed */
S#define ti_sysbios_knl_Task_E_deleteNotAllowed (ti_sysbios_knl_Task_E_deleteNotAllowed__C)
Stypedef xdc_runtime_Error_Id CT__ti_sysbios_knl_Task_E_deleteNotAllowed;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed__C;
S
S/* A_badThreadType */
S#define ti_sysbios_knl_Task_A_badThreadType (ti_sysbios_knl_Task_A_badThreadType__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badThreadType;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType__C;
S
S/* A_badTaskState */
S#define ti_sysbios_knl_Task_A_badTaskState (ti_sysbios_knl_Task_A_badTaskState__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTaskState;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState__C;
S
S/* A_noPendElem */
S#define ti_sysbios_knl_Task_A_noPendElem (ti_sysbios_knl_Task_A_noPendElem__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_noPendElem;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem__C;
S
S/* A_taskDisabled */
S#define ti_sysbios_knl_Task_A_taskDisabled (ti_sysbios_knl_Task_A_taskDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_taskDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled__C;
S
S/* A_badPriority */
S#define ti_sysbios_knl_Task_A_badPriority (ti_sysbios_knl_Task_A_badPriority__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badPriority;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badPriority ti_sysbios_knl_Task_A_badPriority__C;
S
S/* A_badTimeout */
S#define ti_sysbios_knl_Task_A_badTimeout (ti_sysbios_knl_Task_A_badTimeout__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badTimeout;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout__C;
S
S/* A_badAffinity */
S#define ti_sysbios_knl_Task_A_badAffinity (ti_sysbios_knl_Task_A_badAffinity__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_badAffinity;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity__C;
S
S/* A_sleepTaskDisabled */
S#define ti_sysbios_knl_Task_A_sleepTaskDisabled (ti_sysbios_knl_Task_A_sleepTaskDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_sleepTaskDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled__C;
S
S/* A_invalidCoreId */
S#define ti_sysbios_knl_Task_A_invalidCoreId (ti_sysbios_knl_Task_A_invalidCoreId__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Task_A_invalidCoreId;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId__C;
S
S/* numPriorities */
S#ifdef ti_sysbios_knl_Task_numPriorities__D
S#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__D)
S#else
S#define ti_sysbios_knl_Task_numPriorities (ti_sysbios_knl_Task_numPriorities__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Task_numPriorities;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_numPriorities ti_sysbios_knl_Task_numPriorities__C;
S#endif
S
S/* defaultStackSize */
S#ifdef ti_sysbios_knl_Task_defaultStackSize__D
S#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__D)
S#else
S#define ti_sysbios_knl_Task_defaultStackSize (ti_sysbios_knl_Task_defaultStackSize__C)
Stypedef xdc_SizeT CT__ti_sysbios_knl_Task_defaultStackSize;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize__C;
S#endif
S
S/* defaultStackHeap */
S#define ti_sysbios_knl_Task_defaultStackHeap (ti_sysbios_knl_Task_defaultStackHeap__C)
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Task_defaultStackHeap;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap__C;
S
S/* allBlockedFunc */
S#define ti_sysbios_knl_Task_allBlockedFunc (ti_sysbios_knl_Task_allBlockedFunc__C)
Stypedef ti_sysbios_knl_Task_AllBlockedFuncPtr CT__ti_sysbios_knl_Task_allBlockedFunc;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc__C;
S
S/* initStackFlag */
S#ifdef ti_sysbios_knl_Task_initStackFlag__D
S#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__D)
S#else
S#define ti_sysbios_knl_Task_initStackFlag (ti_sysbios_knl_Task_initStackFlag__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_initStackFlag;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_initStackFlag ti_sysbios_knl_Task_initStackFlag__C;
S#endif
S
S/* checkStackFlag */
S#ifdef ti_sysbios_knl_Task_checkStackFlag__D
S#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__D)
S#else
S#define ti_sysbios_knl_Task_checkStackFlag (ti_sysbios_knl_Task_checkStackFlag__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_checkStackFlag;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag__C;
S#endif
S
S/* deleteTerminatedTasks */
S#ifdef ti_sysbios_knl_Task_deleteTerminatedTasks__D
S#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__D)
S#else
S#define ti_sysbios_knl_Task_deleteTerminatedTasks (ti_sysbios_knl_Task_deleteTerminatedTasks__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Task_deleteTerminatedTasks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks__C;
S#endif
S
S/* hooks */
S#define ti_sysbios_knl_Task_hooks (ti_sysbios_knl_Task_hooks__C)
Stypedef ti_sysbios_knl_Task_HookSet __T1_ti_sysbios_knl_Task_hooks;
Stypedef struct { int length; ti_sysbios_knl_Task_HookSet *elem; } __ARRAY1_ti_sysbios_knl_Task_hooks;
Stypedef __ARRAY1_ti_sysbios_knl_Task_hooks __TA_ti_sysbios_knl_Task_hooks;
Stypedef __TA_ti_sysbios_knl_Task_hooks CT__ti_sysbios_knl_Task_hooks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_hooks ti_sysbios_knl_Task_hooks__C;
S
S/* numConstructedTasks */
S#ifdef ti_sysbios_knl_Task_numConstructedTasks__D
S#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__D)
S#else
S#define ti_sysbios_knl_Task_numConstructedTasks (ti_sysbios_knl_Task_numConstructedTasks__C)
Stypedef xdc_UInt CT__ti_sysbios_knl_Task_numConstructedTasks;
S__extern __FAR__ const CT__ti_sysbios_knl_Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks__C;
S#endif
S
S/* startupHookFunc */
S#define ti_sysbios_knl_Task_startupHookFunc (ti_sysbios_knl_Task_startupHookFunc__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Task_startupHookFunc)(xdc_Void);
S__extern __FAR__ const CT__ti_sysbios_knl_Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Task_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_Int priority;
S    xdc_Ptr stack;
S    xdc_SizeT stackSize;
S    xdc_runtime_IHeap_Handle stackHeap;
S    xdc_Ptr env;
S    xdc_Bool vitalTaskFlag;
S    xdc_UInt affinity;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Task_Struct {
S    ti_sysbios_knl_Queue_Elem __f0;
S    volatile xdc_Int __f1;
S    xdc_UInt __f2;
S    xdc_Ptr __f3;
S    ti_sysbios_knl_Task_Mode __f4;
S    ti_sysbios_knl_Task_PendElem *__f5;
S    xdc_SizeT __f6;
S    __TA_ti_sysbios_knl_Task_Instance_State__stack __f7;
S    xdc_runtime_IHeap_Handle __f8;
S    ti_sysbios_knl_Task_FuncPtr __f9;
S    xdc_UArg __f10;
S    xdc_UArg __f11;
S    xdc_Ptr __f12;
S    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv __f13;
S    xdc_Bool __f14;
S    ti_sysbios_knl_Queue_Handle __f15;
S    xdc_UInt __f16;
S    xdc_UInt __f17;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Task_Module_startup ti_sysbios_knl_Task_Module_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__E, "ti_sysbios_knl_Task_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Task_Module_startup__E( xdc_Int state );
Sxdc__CODESECT(ti_sysbios_knl_Task_Module_startup__F, "ti_sysbios_knl_Task_Module_startup")
S__extern xdc_Int ti_sysbios_knl_Task_Module_startup__F( xdc_Int state );
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Task_Instance_init__E, "ti_sysbios_knl_Task_Instance_init")
S__extern xdc_Int ti_sysbios_knl_Task_Instance_init__E(ti_sysbios_knl_Task_Object *, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *, xdc_runtime_Error_Block *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Task_Instance_finalize__E, "ti_sysbios_knl_Task_Instance_finalize")
S__extern void ti_sysbios_knl_Task_Instance_finalize__E( ti_sysbios_knl_Task_Object* , int );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Handle__label__S, "ti_sysbios_knl_Task_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Module__startupDone__S, "ti_sysbios_knl_Task_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Task_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__create__S, "ti_sysbios_knl_Task_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Task_create, "ti_sysbios_knl_Task_create")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_create( ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Task_construct, "ti_sysbios_knl_Task_construct")
S__extern void ti_sysbios_knl_Task_construct( ti_sysbios_knl_Task_Struct *__obj, ti_sysbios_knl_Task_FuncPtr fxn, const ti_sysbios_knl_Task_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__delete__S, "ti_sysbios_knl_Task_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Task_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Task_delete, "ti_sysbios_knl_Task_delete")
S__extern void ti_sysbios_knl_Task_delete(ti_sysbios_knl_Task_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__destruct__S, "ti_sysbios_knl_Task_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Task_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Task_destruct, "ti_sysbios_knl_Task_destruct")
S__extern void ti_sysbios_knl_Task_destruct(ti_sysbios_knl_Task_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__get__S, "ti_sysbios_knl_Task_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__first__S, "ti_sysbios_knl_Task_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Object__next__S, "ti_sysbios_knl_Task_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Task_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Task_Params__init__S, "ti_sysbios_knl_Task_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Task_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* startup__E */
S#define ti_sysbios_knl_Task_startup ti_sysbios_knl_Task_startup__E
Sxdc__CODESECT(ti_sysbios_knl_Task_startup__E, "ti_sysbios_knl_Task_startup")
S__extern xdc_Void ti_sysbios_knl_Task_startup__E( void );
S
S/* enabled__E */
S#define ti_sysbios_knl_Task_enabled ti_sysbios_knl_Task_enabled__E
Sxdc__CODESECT(ti_sysbios_knl_Task_enabled__E, "ti_sysbios_knl_Task_enabled")
S__extern xdc_Bool ti_sysbios_knl_Task_enabled__E( void );
S
S/* unlockSched__E */
S#define ti_sysbios_knl_Task_unlockSched ti_sysbios_knl_Task_unlockSched__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unlockSched__E, "ti_sysbios_knl_Task_unlockSched")
S__extern xdc_Void ti_sysbios_knl_Task_unlockSched__E( void );
S
S/* disable__E */
S#define ti_sysbios_knl_Task_disable ti_sysbios_knl_Task_disable__E
Sxdc__CODESECT(ti_sysbios_knl_Task_disable__E, "ti_sysbios_knl_Task_disable")
S__extern xdc_UInt ti_sysbios_knl_Task_disable__E( void );
S
S/* enable__E */
S#define ti_sysbios_knl_Task_enable ti_sysbios_knl_Task_enable__E
Sxdc__CODESECT(ti_sysbios_knl_Task_enable__E, "ti_sysbios_knl_Task_enable")
S__extern xdc_Void ti_sysbios_knl_Task_enable__E( void );
S
S/* restore__E */
S#define ti_sysbios_knl_Task_restore ti_sysbios_knl_Task_restore__E
Sxdc__CODESECT(ti_sysbios_knl_Task_restore__E, "ti_sysbios_knl_Task_restore")
S__extern xdc_Void ti_sysbios_knl_Task_restore__E( xdc_UInt key );
S
S/* restoreHwi__E */
S#define ti_sysbios_knl_Task_restoreHwi ti_sysbios_knl_Task_restoreHwi__E
Sxdc__CODESECT(ti_sysbios_knl_Task_restoreHwi__E, "ti_sysbios_knl_Task_restoreHwi")
S__extern xdc_Void ti_sysbios_knl_Task_restoreHwi__E( xdc_UInt key );
S
S/* self__E */
S#define ti_sysbios_knl_Task_self ti_sysbios_knl_Task_self__E
Sxdc__CODESECT(ti_sysbios_knl_Task_self__E, "ti_sysbios_knl_Task_self")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_self__E( void );
S
S/* checkStacks__E */
S#define ti_sysbios_knl_Task_checkStacks ti_sysbios_knl_Task_checkStacks__E
Sxdc__CODESECT(ti_sysbios_knl_Task_checkStacks__E, "ti_sysbios_knl_Task_checkStacks")
S__extern xdc_Void ti_sysbios_knl_Task_checkStacks__E( ti_sysbios_knl_Task_Handle oldTask, ti_sysbios_knl_Task_Handle newTask );
S
S/* exit__E */
S#define ti_sysbios_knl_Task_exit ti_sysbios_knl_Task_exit__E
Sxdc__CODESECT(ti_sysbios_knl_Task_exit__E, "ti_sysbios_knl_Task_exit")
S__extern xdc_Void ti_sysbios_knl_Task_exit__E( void );
S
S/* sleep__E */
S#define ti_sysbios_knl_Task_sleep ti_sysbios_knl_Task_sleep__E
Sxdc__CODESECT(ti_sysbios_knl_Task_sleep__E, "ti_sysbios_knl_Task_sleep")
S__extern xdc_Void ti_sysbios_knl_Task_sleep__E( xdc_UInt32 nticks );
S
S/* yield__E */
S#define ti_sysbios_knl_Task_yield ti_sysbios_knl_Task_yield__E
Sxdc__CODESECT(ti_sysbios_knl_Task_yield__E, "ti_sysbios_knl_Task_yield")
S__extern xdc_Void ti_sysbios_knl_Task_yield__E( void );
S
S/* getIdleTask__E */
S#define ti_sysbios_knl_Task_getIdleTask ti_sysbios_knl_Task_getIdleTask__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getIdleTask__E, "ti_sysbios_knl_Task_getIdleTask")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTask__E( void );
S
S/* getIdleTaskHandle__E */
S#define ti_sysbios_knl_Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getIdleTaskHandle__E, "ti_sysbios_knl_Task_getIdleTaskHandle")
S__extern ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_getIdleTaskHandle__E( xdc_UInt coreId );
S
S/* startCore__E */
S#define ti_sysbios_knl_Task_startCore ti_sysbios_knl_Task_startCore__E
Sxdc__CODESECT(ti_sysbios_knl_Task_startCore__E, "ti_sysbios_knl_Task_startCore")
S__extern xdc_Void ti_sysbios_knl_Task_startCore__E( xdc_UInt coreId );
S
S/* getArg0__E */
S#define ti_sysbios_knl_Task_getArg0 ti_sysbios_knl_Task_getArg0__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getArg0__E, "ti_sysbios_knl_Task_getArg0")
S__extern xdc_UArg ti_sysbios_knl_Task_getArg0__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getArg1__E */
S#define ti_sysbios_knl_Task_getArg1 ti_sysbios_knl_Task_getArg1__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getArg1__E, "ti_sysbios_knl_Task_getArg1")
S__extern xdc_UArg ti_sysbios_knl_Task_getArg1__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getEnv__E */
S#define ti_sysbios_knl_Task_getEnv ti_sysbios_knl_Task_getEnv__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getEnv__E, "ti_sysbios_knl_Task_getEnv")
S__extern xdc_Ptr ti_sysbios_knl_Task_getEnv__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* getFunc__E */
S#define ti_sysbios_knl_Task_getFunc ti_sysbios_knl_Task_getFunc__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getFunc__E, "ti_sysbios_knl_Task_getFunc")
S__extern ti_sysbios_knl_Task_FuncPtr ti_sysbios_knl_Task_getFunc__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg *arg0, xdc_UArg *arg1 );
S
S/* getHookContext__E */
S#define ti_sysbios_knl_Task_getHookContext ti_sysbios_knl_Task_getHookContext__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getHookContext__E, "ti_sysbios_knl_Task_getHookContext")
S__extern xdc_Ptr ti_sysbios_knl_Task_getHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id );
S
S/* getPri__E */
S#define ti_sysbios_knl_Task_getPri ti_sysbios_knl_Task_getPri__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getPri__E, "ti_sysbios_knl_Task_getPri")
S__extern xdc_Int ti_sysbios_knl_Task_getPri__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* setArg0__E */
S#define ti_sysbios_knl_Task_setArg0 ti_sysbios_knl_Task_setArg0__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setArg0__E, "ti_sysbios_knl_Task_setArg0")
S__extern xdc_Void ti_sysbios_knl_Task_setArg0__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
S
S/* setArg1__E */
S#define ti_sysbios_knl_Task_setArg1 ti_sysbios_knl_Task_setArg1__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setArg1__E, "ti_sysbios_knl_Task_setArg1")
S__extern xdc_Void ti_sysbios_knl_Task_setArg1__E( ti_sysbios_knl_Task_Handle __inst, xdc_UArg arg );
S
S/* setEnv__E */
S#define ti_sysbios_knl_Task_setEnv ti_sysbios_knl_Task_setEnv__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setEnv__E, "ti_sysbios_knl_Task_setEnv")
S__extern xdc_Void ti_sysbios_knl_Task_setEnv__E( ti_sysbios_knl_Task_Handle __inst, xdc_Ptr env );
S
S/* setHookContext__E */
S#define ti_sysbios_knl_Task_setHookContext ti_sysbios_knl_Task_setHookContext__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setHookContext__E, "ti_sysbios_knl_Task_setHookContext")
S__extern xdc_Void ti_sysbios_knl_Task_setHookContext__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int id, xdc_Ptr hookContext );
S
S/* setPri__E */
S#define ti_sysbios_knl_Task_setPri ti_sysbios_knl_Task_setPri__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setPri__E, "ti_sysbios_knl_Task_setPri")
S__extern xdc_UInt ti_sysbios_knl_Task_setPri__E( ti_sysbios_knl_Task_Handle __inst, xdc_Int newpri );
S
S/* stat__E */
S#define ti_sysbios_knl_Task_stat ti_sysbios_knl_Task_stat__E
Sxdc__CODESECT(ti_sysbios_knl_Task_stat__E, "ti_sysbios_knl_Task_stat")
S__extern xdc_Void ti_sysbios_knl_Task_stat__E( ti_sysbios_knl_Task_Handle __inst, ti_sysbios_knl_Task_Stat *statbuf );
S
S/* getMode__E */
S#define ti_sysbios_knl_Task_getMode ti_sysbios_knl_Task_getMode__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getMode__E, "ti_sysbios_knl_Task_getMode")
S__extern ti_sysbios_knl_Task_Mode ti_sysbios_knl_Task_getMode__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* setAffinity__E */
S#define ti_sysbios_knl_Task_setAffinity ti_sysbios_knl_Task_setAffinity__E
Sxdc__CODESECT(ti_sysbios_knl_Task_setAffinity__E, "ti_sysbios_knl_Task_setAffinity")
S__extern xdc_UInt ti_sysbios_knl_Task_setAffinity__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt coreId );
S
S/* getAffinity__E */
S#define ti_sysbios_knl_Task_getAffinity ti_sysbios_knl_Task_getAffinity__E
Sxdc__CODESECT(ti_sysbios_knl_Task_getAffinity__E, "ti_sysbios_knl_Task_getAffinity")
S__extern xdc_UInt ti_sysbios_knl_Task_getAffinity__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* block__E */
S#define ti_sysbios_knl_Task_block ti_sysbios_knl_Task_block__E
Sxdc__CODESECT(ti_sysbios_knl_Task_block__E, "ti_sysbios_knl_Task_block")
S__extern xdc_Void ti_sysbios_knl_Task_block__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* unblock__E */
S#define ti_sysbios_knl_Task_unblock ti_sysbios_knl_Task_unblock__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unblock__E, "ti_sysbios_knl_Task_unblock")
S__extern xdc_Void ti_sysbios_knl_Task_unblock__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* blockI__E */
S#define ti_sysbios_knl_Task_blockI ti_sysbios_knl_Task_blockI__E
Sxdc__CODESECT(ti_sysbios_knl_Task_blockI__E, "ti_sysbios_knl_Task_blockI")
S__extern xdc_Void ti_sysbios_knl_Task_blockI__E( ti_sysbios_knl_Task_Handle __inst );
S
S/* unblockI__E */
S#define ti_sysbios_knl_Task_unblockI ti_sysbios_knl_Task_unblockI__E
Sxdc__CODESECT(ti_sysbios_knl_Task_unblockI__E, "ti_sysbios_knl_Task_unblockI")
S__extern xdc_Void ti_sysbios_knl_Task_unblockI__E( ti_sysbios_knl_Task_Handle __inst, xdc_UInt hwiKey );
S
S/* schedule__I */
S#define ti_sysbios_knl_Task_schedule ti_sysbios_knl_Task_schedule__I
Sxdc__CODESECT(ti_sysbios_knl_Task_schedule__I, "ti_sysbios_knl_Task_schedule")
S__extern xdc_Void ti_sysbios_knl_Task_schedule__I( void );
S
S/* enter__I */
S#define ti_sysbios_knl_Task_enter ti_sysbios_knl_Task_enter__I
Sxdc__CODESECT(ti_sysbios_knl_Task_enter__I, "ti_sysbios_knl_Task_enter")
S__extern xdc_Void ti_sysbios_knl_Task_enter__I( void );
S
S/* sleepTimeout__I */
S#define ti_sysbios_knl_Task_sleepTimeout ti_sysbios_knl_Task_sleepTimeout__I
Sxdc__CODESECT(ti_sysbios_knl_Task_sleepTimeout__I, "ti_sysbios_knl_Task_sleepTimeout")
S__extern xdc_Void ti_sysbios_knl_Task_sleepTimeout__I( xdc_UArg arg );
S
S/* postInit__I */
S#define ti_sysbios_knl_Task_postInit ti_sysbios_knl_Task_postInit__I
Sxdc__CODESECT(ti_sysbios_knl_Task_postInit__I, "ti_sysbios_knl_Task_postInit")
S__extern xdc_Int ti_sysbios_knl_Task_postInit__I( ti_sysbios_knl_Task_Object *task, xdc_runtime_Error_Block *eb );
S
S/* allBlockedFunction__I */
S#define ti_sysbios_knl_Task_allBlockedFunction ti_sysbios_knl_Task_allBlockedFunction__I
Sxdc__CODESECT(ti_sysbios_knl_Task_allBlockedFunction__I, "ti_sysbios_knl_Task_allBlockedFunction")
S__extern xdc_Void ti_sysbios_knl_Task_allBlockedFunction__I( void );
S
S/* deleteTerminatedTasksFunc__I */
S#define ti_sysbios_knl_Task_deleteTerminatedTasksFunc ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I
Sxdc__CODESECT(ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I, "ti_sysbios_knl_Task_deleteTerminatedTasksFunc")
S__extern xdc_Void ti_sysbios_knl_Task_deleteTerminatedTasksFunc__I( void );
S
S/* processVitalTaskFlag__I */
S#define ti_sysbios_knl_Task_processVitalTaskFlag ti_sysbios_knl_Task_processVitalTaskFlag__I
Sxdc__CODESECT(ti_sysbios_knl_Task_processVitalTaskFlag__I, "ti_sysbios_knl_Task_processVitalTaskFlag")
S__extern xdc_Void ti_sysbios_knl_Task_processVitalTaskFlag__I( ti_sysbios_knl_Task_Object *task );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Task_Module_startupDone() ti_sysbios_knl_Task_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Task_Object_heap() ti_sysbios_knl_Task_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Task_Module_heap() ti_sysbios_knl_Task_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Task_Module__id ti_sysbios_knl_Task_Module_id( void ) 
S{
S    return ti_sysbios_knl_Task_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Task_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Task_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Task_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Task_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Task_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Task_Module__diagsMask__C != NULL) *ti_sysbios_knl_Task_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Task_Params_init( ti_sysbios_knl_Task_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Task_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Task_Params_copy(ti_sysbios_knl_Task_Params *dst, const ti_sysbios_knl_Task_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Task_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Task_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Task_Object_count() ti_sysbios_knl_Task_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Task_Object_sizeof() ti_sysbios_knl_Task_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_get(ti_sysbios_knl_Task_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_first( void )
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_Object_next( ti_sysbios_knl_Task_Object *obj )
S{
S    return (ti_sysbios_knl_Task_Handle)ti_sysbios_knl_Task_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Task_Handle_label( ti_sysbios_knl_Task_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Task_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Task_Handle_name( ti_sysbios_knl_Task_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Task_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Task_Handle ti_sysbios_knl_Task_handle( ti_sysbios_knl_Task_Struct *str )
S{
S    return (ti_sysbios_knl_Task_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Task_Struct *ti_sysbios_knl_Task_struct( ti_sysbios_knl_Task_Handle inst )
S{
S    return (ti_sysbios_knl_Task_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#include <ti/sysbios/knl/Task__epilogue.h>
S
S#ifdef ti_sysbios_knl_Task__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Task__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Task__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Task__include_state
S#define ti_sysbios_knl_Task__include_state
S
S/* Module_State */
Sstruct ti_sysbios_knl_Task_Module_State {
S    volatile xdc_Bool locked;
S    volatile xdc_UInt curSet;
S    xdc_Bool workFlag;
S    xdc_UInt vitalTasks;
S    ti_sysbios_knl_Task_Handle curTask;
S    ti_sysbios_knl_Queue_Handle curQ;
S    __TA_ti_sysbios_knl_Task_Module_State__readyQ readyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurSet smpCurSet;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurMask smpCurMask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpCurTask smpCurTask;
S    __TA_ti_sysbios_knl_Task_Module_State__smpReadyQ smpReadyQ;
S    __TA_ti_sysbios_knl_Task_Module_State__idleTask idleTask;
S    __TA_ti_sysbios_knl_Task_Module_State__constructedTasks constructedTasks;
S    char __dummy;
S};
S
S/* Module__state__V */
Sextern struct ti_sysbios_knl_Task_Module_State__ ti_sysbios_knl_Task_Module__state__V;
S
S/* Object */
Sstruct ti_sysbios_knl_Task_Object {
S    ti_sysbios_knl_Queue_Elem qElem;
S    volatile xdc_Int priority;
S    xdc_UInt mask;
S    xdc_Ptr context;
S    ti_sysbios_knl_Task_Mode mode;
S    ti_sysbios_knl_Task_PendElem *pendElem;
S    xdc_SizeT stackSize;
S    __TA_ti_sysbios_knl_Task_Instance_State__stack stack;
S    xdc_runtime_IHeap_Handle stackHeap;
S    ti_sysbios_knl_Task_FuncPtr fxn;
S    xdc_UArg arg0;
S    xdc_UArg arg1;
S    xdc_Ptr env;
S    __TA_ti_sysbios_knl_Task_Instance_State__hookEnv hookEnv;
S    xdc_Bool vitalTaskFlag;
S    ti_sysbios_knl_Queue_Handle readyQ;
S    xdc_UInt curCoreId;
S    xdc_UInt affinity;
S};
S
S/* Module_State_inactiveQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_inactiveQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_inactiveQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_inactiveQ__O);
S}
S
S/* Module_State_terminatedQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Task_Module_State_terminatedQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Task_Module_State_terminatedQ()
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)&ti_sysbios_knl_Task_Module__state__V) + ti_sysbios_knl_Task_Module_State_terminatedQ__O);
S}
S
S#endif /* ti_sysbios_knl_Task__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Task__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Task__localnames__done
S#define ti_sysbios_knl_Task__localnames__done
S
S/* module prefix */
S#define Task_Instance ti_sysbios_knl_Task_Instance
S#define Task_Handle ti_sysbios_knl_Task_Handle
S#define Task_Module ti_sysbios_knl_Task_Module
S#define Task_Object ti_sysbios_knl_Task_Object
S#define Task_Struct ti_sysbios_knl_Task_Struct
S#define Task_FuncPtr ti_sysbios_knl_Task_FuncPtr
S#define Task_AllBlockedFuncPtr ti_sysbios_knl_Task_AllBlockedFuncPtr
S#define Task_Mode ti_sysbios_knl_Task_Mode
S#define Task_Stat ti_sysbios_knl_Task_Stat
S#define Task_HookSet ti_sysbios_knl_Task_HookSet
S#define Task_AFFINITY_NONE ti_sysbios_knl_Task_AFFINITY_NONE
S#define Task_PendElem ti_sysbios_knl_Task_PendElem
S#define Task_Instance_State ti_sysbios_knl_Task_Instance_State
S#define Task_Module_State ti_sysbios_knl_Task_Module_State
S#define Task_RunQEntry ti_sysbios_knl_Task_RunQEntry
S#define Task_Module_StateSmp ti_sysbios_knl_Task_Module_StateSmp
S#define Task_Mode_RUNNING ti_sysbios_knl_Task_Mode_RUNNING
S#define Task_Mode_READY ti_sysbios_knl_Task_Mode_READY
S#define Task_Mode_BLOCKED ti_sysbios_knl_Task_Mode_BLOCKED
S#define Task_Mode_TERMINATED ti_sysbios_knl_Task_Mode_TERMINATED
S#define Task_Mode_INACTIVE ti_sysbios_knl_Task_Mode_INACTIVE
S#define Task_LM_switch ti_sysbios_knl_Task_LM_switch
S#define Task_LM_sleep ti_sysbios_knl_Task_LM_sleep
S#define Task_LD_ready ti_sysbios_knl_Task_LD_ready
S#define Task_LD_block ti_sysbios_knl_Task_LD_block
S#define Task_LM_yield ti_sysbios_knl_Task_LM_yield
S#define Task_LM_setPri ti_sysbios_knl_Task_LM_setPri
S#define Task_LD_exit ti_sysbios_knl_Task_LD_exit
S#define Task_LM_setAffinity ti_sysbios_knl_Task_LM_setAffinity
S#define Task_LM_schedule ti_sysbios_knl_Task_LM_schedule
S#define Task_LM_noWork ti_sysbios_knl_Task_LM_noWork
S#define Task_E_stackOverflow ti_sysbios_knl_Task_E_stackOverflow
S#define Task_E_spOutOfBounds ti_sysbios_knl_Task_E_spOutOfBounds
S#define Task_E_deleteNotAllowed ti_sysbios_knl_Task_E_deleteNotAllowed
S#define Task_A_badThreadType ti_sysbios_knl_Task_A_badThreadType
S#define Task_A_badTaskState ti_sysbios_knl_Task_A_badTaskState
S#define Task_A_noPendElem ti_sysbios_knl_Task_A_noPendElem
S#define Task_A_taskDisabled ti_sysbios_knl_Task_A_taskDisabled
S#define Task_A_badPriority ti_sysbios_knl_Task_A_badPriority
S#define Task_A_badTimeout ti_sysbios_knl_Task_A_badTimeout
S#define Task_A_badAffinity ti_sysbios_knl_Task_A_badAffinity
S#define Task_A_sleepTaskDisabled ti_sysbios_knl_Task_A_sleepTaskDisabled
S#define Task_A_invalidCoreId ti_sysbios_knl_Task_A_invalidCoreId
S#define Task_numPriorities ti_sysbios_knl_Task_numPriorities
S#define Task_defaultStackSize ti_sysbios_knl_Task_defaultStackSize
S#define Task_defaultStackHeap ti_sysbios_knl_Task_defaultStackHeap
S#define Task_allBlockedFunc ti_sysbios_knl_Task_allBlockedFunc
S#define Task_initStackFlag ti_sysbios_knl_Task_initStackFlag
S#define Task_checkStackFlag ti_sysbios_knl_Task_checkStackFlag
S#define Task_deleteTerminatedTasks ti_sysbios_knl_Task_deleteTerminatedTasks
S#define Task_hooks ti_sysbios_knl_Task_hooks
S#define Task_numConstructedTasks ti_sysbios_knl_Task_numConstructedTasks
S#define Task_startupHookFunc ti_sysbios_knl_Task_startupHookFunc
S#define Task_Module_State_inactiveQ ti_sysbios_knl_Task_Module_State_inactiveQ
S#define Task_Module_State_terminatedQ ti_sysbios_knl_Task_Module_State_terminatedQ
S#define Task_Params ti_sysbios_knl_Task_Params
S#define Task_startup ti_sysbios_knl_Task_startup
S#define Task_enabled ti_sysbios_knl_Task_enabled
S#define Task_unlockSched ti_sysbios_knl_Task_unlockSched
S#define Task_disable ti_sysbios_knl_Task_disable
S#define Task_enable ti_sysbios_knl_Task_enable
S#define Task_restore ti_sysbios_knl_Task_restore
S#define Task_restoreHwi ti_sysbios_knl_Task_restoreHwi
S#define Task_self ti_sysbios_knl_Task_self
S#define Task_selfMacro ti_sysbios_knl_Task_selfMacro
S#define Task_checkStacks ti_sysbios_knl_Task_checkStacks
S#define Task_exit ti_sysbios_knl_Task_exit
S#define Task_sleep ti_sysbios_knl_Task_sleep
S#define Task_yield ti_sysbios_knl_Task_yield
S#define Task_getIdleTask ti_sysbios_knl_Task_getIdleTask
S#define Task_getIdleTaskHandle ti_sysbios_knl_Task_getIdleTaskHandle
S#define Task_startCore ti_sysbios_knl_Task_startCore
S#define Task_getArg0 ti_sysbios_knl_Task_getArg0
S#define Task_getArg1 ti_sysbios_knl_Task_getArg1
S#define Task_getEnv ti_sysbios_knl_Task_getEnv
S#define Task_getFunc ti_sysbios_knl_Task_getFunc
S#define Task_getHookContext ti_sysbios_knl_Task_getHookContext
S#define Task_getPri ti_sysbios_knl_Task_getPri
S#define Task_setArg0 ti_sysbios_knl_Task_setArg0
S#define Task_setArg1 ti_sysbios_knl_Task_setArg1
S#define Task_setEnv ti_sysbios_knl_Task_setEnv
S#define Task_setHookContext ti_sysbios_knl_Task_setHookContext
S#define Task_setPri ti_sysbios_knl_Task_setPri
S#define Task_stat ti_sysbios_knl_Task_stat
S#define Task_getMode ti_sysbios_knl_Task_getMode
S#define Task_setAffinity ti_sysbios_knl_Task_setAffinity
S#define Task_getAffinity ti_sysbios_knl_Task_getAffinity
S#define Task_block ti_sysbios_knl_Task_block
S#define Task_unblock ti_sysbios_knl_Task_unblock
S#define Task_blockI ti_sysbios_knl_Task_blockI
S#define Task_unblockI ti_sysbios_knl_Task_unblockI
S#define Task_Module_name ti_sysbios_knl_Task_Module_name
S#define Task_Module_id ti_sysbios_knl_Task_Module_id
S#define Task_Module_startup ti_sysbios_knl_Task_Module_startup
S#define Task_Module_startupDone ti_sysbios_knl_Task_Module_startupDone
S#define Task_Module_hasMask ti_sysbios_knl_Task_Module_hasMask
S#define Task_Module_getMask ti_sysbios_knl_Task_Module_getMask
S#define Task_Module_setMask ti_sysbios_knl_Task_Module_setMask
S#define Task_Object_heap ti_sysbios_knl_Task_Object_heap
S#define Task_Module_heap ti_sysbios_knl_Task_Module_heap
S#define Task_construct ti_sysbios_knl_Task_construct
S#define Task_create ti_sysbios_knl_Task_create
S#define Task_handle ti_sysbios_knl_Task_handle
S#define Task_struct ti_sysbios_knl_Task_struct
S#define Task_Handle_label ti_sysbios_knl_Task_Handle_label
S#define Task_Handle_name ti_sysbios_knl_Task_Handle_name
S#define Task_Instance_init ti_sysbios_knl_Task_Instance_init
S#define Task_Object_count ti_sysbios_knl_Task_Object_count
S#define Task_Object_get ti_sysbios_knl_Task_Object_get
S#define Task_Object_first ti_sysbios_knl_Task_Object_first
S#define Task_Object_next ti_sysbios_knl_Task_Object_next
S#define Task_Object_sizeof ti_sysbios_knl_Task_Object_sizeof
S#define Task_Params_copy ti_sysbios_knl_Task_Params_copy
S#define Task_Params_init ti_sysbios_knl_Task_Params_init
S#define Task_Instance_finalize ti_sysbios_knl_Task_Instance_finalize
S#define Task_delete ti_sysbios_knl_Task_delete
S#define Task_destruct ti_sysbios_knl_Task_destruct
S
S/* proxies */
S#include <ti/sysbios/knl/package/Task_SupportProxy.h>
S
S#endif /* ti_sysbios_knl_Task__localnames__done */
N#endif
L 65 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N#include <xdc/runtime/IModule.h>
L 1 "C:/ti/xdctools_3_50_05_12_core/packages/xdc/runtime/IModule.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-D28
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *
N *     PROLOGUE
N *     INCLUDES
N *
N *     VIRTUAL FUNCTIONS
N *     FUNCTION STUBS
N *     FUNCTION SELECTORS
N *
N *     EPILOGUE
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef xdc_runtime_IModule__include
S#define xdc_runtime_IModule__include
S
S#ifndef __nested__
S#define __nested__
S#define xdc_runtime_IModule__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define xdc_runtime_IModule___VERS 200
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/package/package.defs.h>
S
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IHeap.h>
S#include <xdc/runtime/Error.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S
S/*
S * ======== VIRTUAL FUNCTIONS ========
S */
S
S/* Fxns__ */
Sstruct xdc_runtime_IModule_Fxns__ {
S    const xdc_runtime_Types_Base* __base;
S    const xdc_runtime_Types_SysFxns2* __sysp;
S    xdc_runtime_Types_SysFxns2 __sfxns;
S};
S#ifndef xdc_runtime_IModule_Module__BASE__CR
S
S/* Interface__BASE__C */
S__extern const xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C;
S#else
S#define xdc_runtime_IModule_Interface__BASE__C (*((xdc_runtime_Types_Base *)(xdcRomConstPtr + xdc_runtime_IModule_Interface__BASE__C_offset)))
S#endif
S
S
S/*
S * ======== FUNCTION STUBS ========
S */
S
S/* Module_id */
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod);
Sstatic inline xdc_runtime_Types_ModuleId xdc_runtime_IModule_Module_id(xdc_runtime_IModule_Module mod)
S{
S    return mod->__sysp->__mid;
S}
S
S
S/*
S * ======== FUNCTION SELECTORS ========
S */
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef xdc_runtime_IModule__top__
S#undef __nested__
S#endif
S
N#endif /* xdc_runtime_IModule__include */
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(xdc_runtime_IModule__nolocalnames)
X#if !1L && !0L
S
S#ifndef xdc_runtime_IModule__localnames__done
S#define xdc_runtime_IModule__localnames__done
S
S/* module prefix */
S#define IModule_Module xdc_runtime_IModule_Module
S#define IModule_Module_name xdc_runtime_IModule_Module_name
S
S#endif /* xdc_runtime_IModule__localnames__done */
N#endif
N/*
N *  @(#) xdc.runtime; 2, 1, 0,0; 2-8-2018 16:13:24; /db/ztree/library/trees/xdc/xdc-D27.1/src/packages/
N */
N
L 66 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Id_00 */
N#define ti_sysbios_knl_Event_Id_00 (0x1)
N
N/* Id_01 */
N#define ti_sysbios_knl_Event_Id_01 (0x2)
N
N/* Id_02 */
N#define ti_sysbios_knl_Event_Id_02 (0x4)
N
N/* Id_03 */
N#define ti_sysbios_knl_Event_Id_03 (0x8)
N
N/* Id_04 */
N#define ti_sysbios_knl_Event_Id_04 (0x10)
N
N/* Id_05 */
N#define ti_sysbios_knl_Event_Id_05 (0x20)
N
N/* Id_06 */
N#define ti_sysbios_knl_Event_Id_06 (0x40)
N
N/* Id_07 */
N#define ti_sysbios_knl_Event_Id_07 (0x80)
N
N/* Id_08 */
N#define ti_sysbios_knl_Event_Id_08 (0x100)
N
N/* Id_09 */
N#define ti_sysbios_knl_Event_Id_09 (0x200)
N
N/* Id_10 */
N#define ti_sysbios_knl_Event_Id_10 (0x400)
N
N/* Id_11 */
N#define ti_sysbios_knl_Event_Id_11 (0x800)
N
N/* Id_12 */
N#define ti_sysbios_knl_Event_Id_12 (0x1000)
N
N/* Id_13 */
N#define ti_sysbios_knl_Event_Id_13 (0x2000)
N
N/* Id_14 */
N#define ti_sysbios_knl_Event_Id_14 (0x4000)
N
N/* Id_15 */
N#define ti_sysbios_knl_Event_Id_15 (0x8000)
N
N/* Id_16 */
N#define ti_sysbios_knl_Event_Id_16 (0x10000)
N
N/* Id_17 */
N#define ti_sysbios_knl_Event_Id_17 (0x20000)
N
N/* Id_18 */
N#define ti_sysbios_knl_Event_Id_18 (0x40000)
N
N/* Id_19 */
N#define ti_sysbios_knl_Event_Id_19 (0x80000)
N
N/* Id_20 */
N#define ti_sysbios_knl_Event_Id_20 (0x100000)
N
N/* Id_21 */
N#define ti_sysbios_knl_Event_Id_21 (0x200000)
N
N/* Id_22 */
N#define ti_sysbios_knl_Event_Id_22 (0x400000)
N
N/* Id_23 */
N#define ti_sysbios_knl_Event_Id_23 (0x800000)
N
N/* Id_24 */
N#define ti_sysbios_knl_Event_Id_24 (0x1000000)
N
N/* Id_25 */
N#define ti_sysbios_knl_Event_Id_25 (0x2000000)
N
N/* Id_26 */
N#define ti_sysbios_knl_Event_Id_26 (0x4000000)
N
N/* Id_27 */
N#define ti_sysbios_knl_Event_Id_27 (0x8000000)
N
N/* Id_28 */
N#define ti_sysbios_knl_Event_Id_28 (0x10000000)
N
N/* Id_29 */
N#define ti_sysbios_knl_Event_Id_29 (0x20000000)
N
N/* Id_30 */
N#define ti_sysbios_knl_Event_Id_30 (0x40000000)
N
N/* Id_31 */
N#define ti_sysbios_knl_Event_Id_31 (0x80000000)
N
N/* Id_NONE */
N#define ti_sysbios_knl_Event_Id_NONE (0)
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* PendState */
Nenum ti_sysbios_knl_Event_PendState {
N    ti_sysbios_knl_Event_PendState_TIMEOUT = 0,
N    ti_sysbios_knl_Event_PendState_POSTED = 1,
N    ti_sysbios_knl_Event_PendState_CLOCK_WAIT = 2,
N    ti_sysbios_knl_Event_PendState_WAIT_FOREVER = 3
N};
Ntypedef enum ti_sysbios_knl_Event_PendState ti_sysbios_knl_Event_PendState;
N
N/* PendElem */
Nstruct ti_sysbios_knl_Event_PendElem {
N    ti_sysbios_knl_Task_PendElem tpElem;
N    ti_sysbios_knl_Event_PendState pendState;
N    xdc_UInt matchingEvents;
N    xdc_UInt andMask;
N    xdc_UInt orMask;
N};
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Event_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__diagsEnabled ti_sysbios_knl_Event_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__diagsEnabled ti_sysbios_knl_Event_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Event_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__diagsIncluded ti_sysbios_knl_Event_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__diagsIncluded ti_sysbios_knl_Event_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Event_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__diagsMask ti_sysbios_knl_Event_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__diagsMask ti_sysbios_knl_Event_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Event_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__gateObj ti_sysbios_knl_Event_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__gateObj ti_sysbios_knl_Event_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Event_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__gatePrms ti_sysbios_knl_Event_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__gatePrms ti_sysbios_knl_Event_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Event_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__id ti_sysbios_knl_Event_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__id ti_sysbios_knl_Event_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Event_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerDefined ti_sysbios_knl_Event_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerDefined ti_sysbios_knl_Event_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Event_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerObj ti_sysbios_knl_Event_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerObj ti_sysbios_knl_Event_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Event_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerFxn0 ti_sysbios_knl_Event_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerFxn0 ti_sysbios_knl_Event_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Event_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerFxn1 ti_sysbios_knl_Event_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerFxn1 ti_sysbios_knl_Event_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Event_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerFxn2 ti_sysbios_knl_Event_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerFxn2 ti_sysbios_knl_Event_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Event_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerFxn4 ti_sysbios_knl_Event_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerFxn4 ti_sysbios_knl_Event_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Event_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__loggerFxn8 ti_sysbios_knl_Event_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__loggerFxn8 ti_sysbios_knl_Event_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Event_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Module__startupDoneFxn ti_sysbios_knl_Event_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Event_Module__startupDoneFxn ti_sysbios_knl_Event_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Event_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Object__count ti_sysbios_knl_Event_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Event_Object__count ti_sysbios_knl_Event_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Event_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Object__heap ti_sysbios_knl_Event_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Event_Object__heap ti_sysbios_knl_Event_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Event_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Object__sizeof ti_sysbios_knl_Event_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Event_Object__sizeof ti_sysbios_knl_Event_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Event_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_Object__table ti_sysbios_knl_Event_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Event_Object__table ti_sysbios_knl_Event_Object__table__C;
N
N/* LM_post */
N#define ti_sysbios_knl_Event_LM_post (ti_sysbios_knl_Event_LM_post__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Event_LM_post;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_LM_post ti_sysbios_knl_Event_LM_post__C;
Xextern  const CT__ti_sysbios_knl_Event_LM_post ti_sysbios_knl_Event_LM_post__C;
N
N/* LM_pend */
N#define ti_sysbios_knl_Event_LM_pend (ti_sysbios_knl_Event_LM_pend__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Event_LM_pend;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_LM_pend ti_sysbios_knl_Event_LM_pend__C;
Xextern  const CT__ti_sysbios_knl_Event_LM_pend ti_sysbios_knl_Event_LM_pend__C;
N
N/* A_nullEventMasks */
N#define ti_sysbios_knl_Event_A_nullEventMasks (ti_sysbios_knl_Event_A_nullEventMasks__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Event_A_nullEventMasks;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_A_nullEventMasks ti_sysbios_knl_Event_A_nullEventMasks__C;
Xextern  const CT__ti_sysbios_knl_Event_A_nullEventMasks ti_sysbios_knl_Event_A_nullEventMasks__C;
N
N/* A_nullEventId */
N#define ti_sysbios_knl_Event_A_nullEventId (ti_sysbios_knl_Event_A_nullEventId__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Event_A_nullEventId;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_A_nullEventId ti_sysbios_knl_Event_A_nullEventId__C;
Xextern  const CT__ti_sysbios_knl_Event_A_nullEventId ti_sysbios_knl_Event_A_nullEventId__C;
N
N/* A_eventInUse */
N#define ti_sysbios_knl_Event_A_eventInUse (ti_sysbios_knl_Event_A_eventInUse__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Event_A_eventInUse;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_A_eventInUse ti_sysbios_knl_Event_A_eventInUse__C;
Xextern  const CT__ti_sysbios_knl_Event_A_eventInUse ti_sysbios_knl_Event_A_eventInUse__C;
N
N/* A_badContext */
N#define ti_sysbios_knl_Event_A_badContext (ti_sysbios_knl_Event_A_badContext__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Event_A_badContext;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_A_badContext ti_sysbios_knl_Event_A_badContext__C;
Xextern  const CT__ti_sysbios_knl_Event_A_badContext ti_sysbios_knl_Event_A_badContext__C;
N
N/* A_pendTaskDisabled */
N#define ti_sysbios_knl_Event_A_pendTaskDisabled (ti_sysbios_knl_Event_A_pendTaskDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Event_A_pendTaskDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Event_A_pendTaskDisabled ti_sysbios_knl_Event_A_pendTaskDisabled__C;
Xextern  const CT__ti_sysbios_knl_Event_A_pendTaskDisabled ti_sysbios_knl_Event_A_pendTaskDisabled__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Event_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Event_Struct {
N    volatile xdc_UInt __f0;
N    ti_sysbios_knl_Queue_Struct __f1;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Event_Module_startup( state ) (-1)
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Event_Instance_init__E, "ti_sysbios_knl_Event_Instance_init")
X
N__extern xdc_Void ti_sysbios_knl_Event_Instance_init__E(ti_sysbios_knl_Event_Object *, const ti_sysbios_knl_Event_Params *);
Xextern void ti_sysbios_knl_Event_Instance_init__E(ti_sysbios_knl_Event_Object *, const ti_sysbios_knl_Event_Params *);
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Handle__label__S, "ti_sysbios_knl_Event_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Event_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Event_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Module__startupDone__S, "ti_sysbios_knl_Event_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Event_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Event_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__create__S, "ti_sysbios_knl_Event_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Event_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Event_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Event_create, "ti_sysbios_knl_Event_create")
X
N__extern ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_create( const ti_sysbios_knl_Event_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_create( const ti_sysbios_knl_Event_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Event_construct, "ti_sysbios_knl_Event_construct")
X
N__extern void ti_sysbios_knl_Event_construct( ti_sysbios_knl_Event_Struct *__obj, const ti_sysbios_knl_Event_Params *__prms );
Xextern void ti_sysbios_knl_Event_construct( ti_sysbios_knl_Event_Struct *__obj, const ti_sysbios_knl_Event_Params *__prms );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__delete__S, "ti_sysbios_knl_Event_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Event_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Event_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Event_delete, "ti_sysbios_knl_Event_delete")
X
N__extern void ti_sysbios_knl_Event_delete(ti_sysbios_knl_Event_Handle *instp);
Xextern void ti_sysbios_knl_Event_delete(ti_sysbios_knl_Event_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__destruct__S, "ti_sysbios_knl_Event_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Event_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Event_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Event_destruct, "ti_sysbios_knl_Event_destruct")
X
N__extern void ti_sysbios_knl_Event_destruct(ti_sysbios_knl_Event_Struct *obj);
Xextern void ti_sysbios_knl_Event_destruct(ti_sysbios_knl_Event_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__get__S, "ti_sysbios_knl_Event_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Event_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Event_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__first__S, "ti_sysbios_knl_Event_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Event_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Event_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Object__next__S, "ti_sysbios_knl_Event_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Event_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Event_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Event_Params__init__S, "ti_sysbios_knl_Event_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Event_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Event_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* pend__E */
N#define ti_sysbios_knl_Event_pend ti_sysbios_knl_Event_pend__E
Nxdc__CODESECT(ti_sysbios_knl_Event_pend__E, "ti_sysbios_knl_Event_pend")
X
N__extern xdc_UInt ti_sysbios_knl_Event_pend__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt andMask, xdc_UInt orMask, xdc_UInt32 timeout );
Xextern xdc_UInt ti_sysbios_knl_Event_pend__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt andMask, xdc_UInt orMask, xdc_UInt32 timeout );
N
N/* post__E */
N#define ti_sysbios_knl_Event_post ti_sysbios_knl_Event_post__E
Nxdc__CODESECT(ti_sysbios_knl_Event_post__E, "ti_sysbios_knl_Event_post")
X
N__extern xdc_Void ti_sysbios_knl_Event_post__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt eventMask );
Xextern void ti_sysbios_knl_Event_post__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt eventMask );
N
N/* getPostedEvents__E */
N#define ti_sysbios_knl_Event_getPostedEvents ti_sysbios_knl_Event_getPostedEvents__E
Nxdc__CODESECT(ti_sysbios_knl_Event_getPostedEvents__E, "ti_sysbios_knl_Event_getPostedEvents")
X
N__extern xdc_UInt ti_sysbios_knl_Event_getPostedEvents__E( ti_sysbios_knl_Event_Handle __inst );
Xextern xdc_UInt ti_sysbios_knl_Event_getPostedEvents__E( ti_sysbios_knl_Event_Handle __inst );
N
N/* sync__E */
N#define ti_sysbios_knl_Event_sync ti_sysbios_knl_Event_sync__E
Nxdc__CODESECT(ti_sysbios_knl_Event_sync__E, "ti_sysbios_knl_Event_sync")
X
N__extern xdc_Void ti_sysbios_knl_Event_sync__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt eventId, xdc_UInt count );
Xextern void ti_sysbios_knl_Event_sync__E( ti_sysbios_knl_Event_Handle __inst, xdc_UInt eventId, xdc_UInt count );
N
N/* pendTimeout__I */
N#define ti_sysbios_knl_Event_pendTimeout ti_sysbios_knl_Event_pendTimeout__I
Nxdc__CODESECT(ti_sysbios_knl_Event_pendTimeout__I, "ti_sysbios_knl_Event_pendTimeout")
X
N__extern xdc_Void ti_sysbios_knl_Event_pendTimeout__I( xdc_UArg arg );
Xextern void ti_sysbios_knl_Event_pendTimeout__I( xdc_UArg arg );
N
N/* checkEvents__I */
N#define ti_sysbios_knl_Event_checkEvents ti_sysbios_knl_Event_checkEvents__I
Nxdc__CODESECT(ti_sysbios_knl_Event_checkEvents__I, "ti_sysbios_knl_Event_checkEvents")
X
N__extern xdc_UInt ti_sysbios_knl_Event_checkEvents__I( ti_sysbios_knl_Event_Object *event, xdc_UInt andMask, xdc_UInt orMask );
Xextern xdc_UInt ti_sysbios_knl_Event_checkEvents__I( ti_sysbios_knl_Event_Object *event, xdc_UInt andMask, xdc_UInt orMask );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Event_Module_startupDone() ti_sysbios_knl_Event_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Event_Object_heap() ti_sysbios_knl_Event_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Event_Module_heap() ti_sysbios_knl_Event_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Event_Module__id ti_sysbios_knl_Event_Module_id( void ) 
N{
N    return ti_sysbios_knl_Event_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Event_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Event_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Event_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Event_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Event_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Event_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Event_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Event_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Event_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Event_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Event_Module__diagsMask__C != NULL) *ti_sysbios_knl_Event_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Event_Module__diagsMask__C != 0) *ti_sysbios_knl_Event_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Event_Params_init( ti_sysbios_knl_Event_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Event_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Event_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Event_Params_copy(ti_sysbios_knl_Event_Params *dst, const ti_sysbios_knl_Event_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Event_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Event_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Event_Object_count() ti_sysbios_knl_Event_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Event_Object_sizeof() ti_sysbios_knl_Event_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_Object_get(ti_sysbios_knl_Event_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Event_Handle)ti_sysbios_knl_Event_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_Object_first( void )
N{
N    return (ti_sysbios_knl_Event_Handle)ti_sysbios_knl_Event_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_Object_next( ti_sysbios_knl_Event_Object *obj )
N{
N    return (ti_sysbios_knl_Event_Handle)ti_sysbios_knl_Event_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Event_Handle_label( ti_sysbios_knl_Event_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Event_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Event_Handle_name( ti_sysbios_knl_Event_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Event_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Event_Handle ti_sysbios_knl_Event_handle( ti_sysbios_knl_Event_Struct *str )
N{
N    return (ti_sysbios_knl_Event_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Event_Struct *ti_sysbios_knl_Event_struct( ti_sysbios_knl_Event_Handle inst )
N{
N    return (ti_sysbios_knl_Event_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#include <ti/sysbios/knl/Event__epilogue.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event__epilogue.h" 1
N/*
N * Copyright (c) 2012-2014, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if defined(xdc_target__isaCompatible_28)    \
N    || defined(xdc_target__isaCompatible_430)
X#if 0L        || 0L
S
S#undef Event_Id_16
S#undef Event_Id_17
S#undef Event_Id_18
S#undef Event_Id_19
S#undef Event_Id_20
S#undef Event_Id_21
S#undef Event_Id_22
S#undef Event_Id_23
S#undef Event_Id_24
S#undef Event_Id_25
S#undef Event_Id_26
S#undef Event_Id_27
S#undef Event_Id_28
S#undef Event_Id_29
S#undef Event_Id_30
S#undef Event_Id_31
S
S#undef ti_sysbios_knl_Event_Id_16
S#undef ti_sysbios_knl_Event_Id_17
S#undef ti_sysbios_knl_Event_Id_18
S#undef ti_sysbios_knl_Event_Id_19
S#undef ti_sysbios_knl_Event_Id_20
S#undef ti_sysbios_knl_Event_Id_21
S#undef ti_sysbios_knl_Event_Id_22
S#undef ti_sysbios_knl_Event_Id_23
S#undef ti_sysbios_knl_Event_Id_24
S#undef ti_sysbios_knl_Event_Id_25
S#undef ti_sysbios_knl_Event_Id_26
S#undef ti_sysbios_knl_Event_Id_27
S#undef ti_sysbios_knl_Event_Id_28
S#undef ti_sysbios_knl_Event_Id_29
S#undef ti_sysbios_knl_Event_Id_30
S#undef ti_sysbios_knl_Event_Id_31
S
N#endif
N
N#ifdef __cplusplus
S}
N#endif
L 530 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Event.h" 2
N
N#ifdef ti_sysbios_knl_Event__top__
S#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Event__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Event__internalaccess))
X#if 0L || (!1L && 0L)
S
S#ifndef ti_sysbios_knl_Event__include_state
S#define ti_sysbios_knl_Event__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Event_Object {
S    volatile xdc_UInt postedEvents;
S    char __dummy;
S};
S
S/* Instance_State_pendQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Event_Instance_State_pendQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Event_Instance_State_pendQ(ti_sysbios_knl_Event_Object *obj)
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)obj) + ti_sysbios_knl_Event_Instance_State_pendQ__O);
S}
S
S#endif /* ti_sysbios_knl_Event__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Event__nolocalnames)
X#if !1L && !0L
S
S#ifndef ti_sysbios_knl_Event__localnames__done
S#define ti_sysbios_knl_Event__localnames__done
S
S/* module prefix */
S#define Event_Instance ti_sysbios_knl_Event_Instance
S#define Event_Handle ti_sysbios_knl_Event_Handle
S#define Event_Module ti_sysbios_knl_Event_Module
S#define Event_Object ti_sysbios_knl_Event_Object
S#define Event_Struct ti_sysbios_knl_Event_Struct
S#define Event_Id_00 ti_sysbios_knl_Event_Id_00
S#define Event_Id_01 ti_sysbios_knl_Event_Id_01
S#define Event_Id_02 ti_sysbios_knl_Event_Id_02
S#define Event_Id_03 ti_sysbios_knl_Event_Id_03
S#define Event_Id_04 ti_sysbios_knl_Event_Id_04
S#define Event_Id_05 ti_sysbios_knl_Event_Id_05
S#define Event_Id_06 ti_sysbios_knl_Event_Id_06
S#define Event_Id_07 ti_sysbios_knl_Event_Id_07
S#define Event_Id_08 ti_sysbios_knl_Event_Id_08
S#define Event_Id_09 ti_sysbios_knl_Event_Id_09
S#define Event_Id_10 ti_sysbios_knl_Event_Id_10
S#define Event_Id_11 ti_sysbios_knl_Event_Id_11
S#define Event_Id_12 ti_sysbios_knl_Event_Id_12
S#define Event_Id_13 ti_sysbios_knl_Event_Id_13
S#define Event_Id_14 ti_sysbios_knl_Event_Id_14
S#define Event_Id_15 ti_sysbios_knl_Event_Id_15
S#define Event_Id_16 ti_sysbios_knl_Event_Id_16
S#define Event_Id_17 ti_sysbios_knl_Event_Id_17
S#define Event_Id_18 ti_sysbios_knl_Event_Id_18
S#define Event_Id_19 ti_sysbios_knl_Event_Id_19
S#define Event_Id_20 ti_sysbios_knl_Event_Id_20
S#define Event_Id_21 ti_sysbios_knl_Event_Id_21
S#define Event_Id_22 ti_sysbios_knl_Event_Id_22
S#define Event_Id_23 ti_sysbios_knl_Event_Id_23
S#define Event_Id_24 ti_sysbios_knl_Event_Id_24
S#define Event_Id_25 ti_sysbios_knl_Event_Id_25
S#define Event_Id_26 ti_sysbios_knl_Event_Id_26
S#define Event_Id_27 ti_sysbios_knl_Event_Id_27
S#define Event_Id_28 ti_sysbios_knl_Event_Id_28
S#define Event_Id_29 ti_sysbios_knl_Event_Id_29
S#define Event_Id_30 ti_sysbios_knl_Event_Id_30
S#define Event_Id_31 ti_sysbios_knl_Event_Id_31
S#define Event_Id_NONE ti_sysbios_knl_Event_Id_NONE
S#define Event_PendState ti_sysbios_knl_Event_PendState
S#define Event_PendElem ti_sysbios_knl_Event_PendElem
S#define Event_Instance_State ti_sysbios_knl_Event_Instance_State
S#define Event_PendState_TIMEOUT ti_sysbios_knl_Event_PendState_TIMEOUT
S#define Event_PendState_POSTED ti_sysbios_knl_Event_PendState_POSTED
S#define Event_PendState_CLOCK_WAIT ti_sysbios_knl_Event_PendState_CLOCK_WAIT
S#define Event_PendState_WAIT_FOREVER ti_sysbios_knl_Event_PendState_WAIT_FOREVER
S#define Event_LM_post ti_sysbios_knl_Event_LM_post
S#define Event_LM_pend ti_sysbios_knl_Event_LM_pend
S#define Event_A_nullEventMasks ti_sysbios_knl_Event_A_nullEventMasks
S#define Event_A_nullEventId ti_sysbios_knl_Event_A_nullEventId
S#define Event_A_eventInUse ti_sysbios_knl_Event_A_eventInUse
S#define Event_A_badContext ti_sysbios_knl_Event_A_badContext
S#define Event_A_pendTaskDisabled ti_sysbios_knl_Event_A_pendTaskDisabled
S#define Event_Instance_State_pendQ ti_sysbios_knl_Event_Instance_State_pendQ
S#define Event_Params ti_sysbios_knl_Event_Params
S#define Event_pend ti_sysbios_knl_Event_pend
S#define Event_post ti_sysbios_knl_Event_post
S#define Event_getPostedEvents ti_sysbios_knl_Event_getPostedEvents
S#define Event_sync ti_sysbios_knl_Event_sync
S#define Event_Module_name ti_sysbios_knl_Event_Module_name
S#define Event_Module_id ti_sysbios_knl_Event_Module_id
S#define Event_Module_startup ti_sysbios_knl_Event_Module_startup
S#define Event_Module_startupDone ti_sysbios_knl_Event_Module_startupDone
S#define Event_Module_hasMask ti_sysbios_knl_Event_Module_hasMask
S#define Event_Module_getMask ti_sysbios_knl_Event_Module_getMask
S#define Event_Module_setMask ti_sysbios_knl_Event_Module_setMask
S#define Event_Object_heap ti_sysbios_knl_Event_Object_heap
S#define Event_Module_heap ti_sysbios_knl_Event_Module_heap
S#define Event_construct ti_sysbios_knl_Event_construct
S#define Event_create ti_sysbios_knl_Event_create
S#define Event_handle ti_sysbios_knl_Event_handle
S#define Event_struct ti_sysbios_knl_Event_struct
S#define Event_Handle_label ti_sysbios_knl_Event_Handle_label
S#define Event_Handle_name ti_sysbios_knl_Event_Handle_name
S#define Event_Instance_init ti_sysbios_knl_Event_Instance_init
S#define Event_Object_count ti_sysbios_knl_Event_Object_count
S#define Event_Object_get ti_sysbios_knl_Event_Object_get
S#define Event_Object_first ti_sysbios_knl_Event_Object_first
S#define Event_Object_next ti_sysbios_knl_Event_Object_next
S#define Event_Object_sizeof ti_sysbios_knl_Event_Object_sizeof
S#define Event_Params_copy ti_sysbios_knl_Event_Params_copy
S#define Event_Params_init ti_sysbios_knl_Event_Params_init
S#define Event_delete ti_sysbios_knl_Event_delete
S#define Event_destruct ti_sysbios_knl_Event_destruct
S
S#endif /* ti_sysbios_knl_Event__localnames__done */
N#endif
L 67 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 2
N
N
N/*
N * ======== AUXILIARY DEFINITIONS ========
N */
N
N/* Mode */
Nenum ti_sysbios_knl_Semaphore_Mode {
N    ti_sysbios_knl_Semaphore_Mode_COUNTING = 0x0,
N    ti_sysbios_knl_Semaphore_Mode_BINARY = 0x1,
N    ti_sysbios_knl_Semaphore_Mode_COUNTING_PRIORITY = 0x2,
N    ti_sysbios_knl_Semaphore_Mode_BINARY_PRIORITY = 0x3
N};
Ntypedef enum ti_sysbios_knl_Semaphore_Mode ti_sysbios_knl_Semaphore_Mode;
N
N
N/*
N * ======== CREATE ARGS ========
N */
N
N/* Args__create */
Ntypedef struct ti_sysbios_knl_Semaphore_Args__create {
N    xdc_Int count;
N} ti_sysbios_knl_Semaphore_Args__create;
N
N
N/*
N * ======== INTERNAL DEFINITIONS ========
N */
N
N/* PendState */
Nenum ti_sysbios_knl_Semaphore_PendState {
N    ti_sysbios_knl_Semaphore_PendState_TIMEOUT = 0,
N    ti_sysbios_knl_Semaphore_PendState_POSTED = 1,
N    ti_sysbios_knl_Semaphore_PendState_CLOCK_WAIT = 2,
N    ti_sysbios_knl_Semaphore_PendState_WAIT_FOREVER = 3
N};
Ntypedef enum ti_sysbios_knl_Semaphore_PendState ti_sysbios_knl_Semaphore_PendState;
N
N/* PendElem */
Nstruct ti_sysbios_knl_Semaphore_PendElem {
N    ti_sysbios_knl_Task_PendElem tpElem;
N    ti_sysbios_knl_Semaphore_PendState pendState;
N};
N
N
N/*
N * ======== MODULE-WIDE CONFIGS ========
N */
N
N/* Module__diagsEnabled */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Semaphore_Module__diagsEnabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsEnabled ti_sysbios_knl_Semaphore_Module__diagsEnabled__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__diagsEnabled ti_sysbios_knl_Semaphore_Module__diagsEnabled__C;
N
N/* Module__diagsIncluded */
Ntypedef xdc_Bits32 CT__ti_sysbios_knl_Semaphore_Module__diagsIncluded;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsIncluded ti_sysbios_knl_Semaphore_Module__diagsIncluded__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__diagsIncluded ti_sysbios_knl_Semaphore_Module__diagsIncluded__C;
N
N/* Module__diagsMask */
Ntypedef xdc_Bits16 *CT__ti_sysbios_knl_Semaphore_Module__diagsMask;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsMask ti_sysbios_knl_Semaphore_Module__diagsMask__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__diagsMask ti_sysbios_knl_Semaphore_Module__diagsMask__C;
N
N/* Module__gateObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__gateObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__gateObj ti_sysbios_knl_Semaphore_Module__gateObj__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__gateObj ti_sysbios_knl_Semaphore_Module__gateObj__C;
N
N/* Module__gatePrms */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__gatePrms;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__gatePrms ti_sysbios_knl_Semaphore_Module__gatePrms__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__gatePrms ti_sysbios_knl_Semaphore_Module__gatePrms__C;
N
N/* Module__id */
Ntypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Semaphore_Module__id;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__id ti_sysbios_knl_Semaphore_Module__id__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__id ti_sysbios_knl_Semaphore_Module__id__C;
N
N/* Module__loggerDefined */
Ntypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_Module__loggerDefined;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerDefined ti_sysbios_knl_Semaphore_Module__loggerDefined__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerDefined ti_sysbios_knl_Semaphore_Module__loggerDefined__C;
N
N/* Module__loggerObj */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__loggerObj;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerObj ti_sysbios_knl_Semaphore_Module__loggerObj__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerObj ti_sysbios_knl_Semaphore_Module__loggerObj__C;
N
N/* Module__loggerFxn0 */
Ntypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn0;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn0 ti_sysbios_knl_Semaphore_Module__loggerFxn0__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn0 ti_sysbios_knl_Semaphore_Module__loggerFxn0__C;
N
N/* Module__loggerFxn1 */
Ntypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn1;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn1 ti_sysbios_knl_Semaphore_Module__loggerFxn1__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn1 ti_sysbios_knl_Semaphore_Module__loggerFxn1__C;
N
N/* Module__loggerFxn2 */
Ntypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn2;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn2 ti_sysbios_knl_Semaphore_Module__loggerFxn2__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn2 ti_sysbios_knl_Semaphore_Module__loggerFxn2__C;
N
N/* Module__loggerFxn4 */
Ntypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn4;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn4 ti_sysbios_knl_Semaphore_Module__loggerFxn4__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn4 ti_sysbios_knl_Semaphore_Module__loggerFxn4__C;
N
N/* Module__loggerFxn8 */
Ntypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn8;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn8 ti_sysbios_knl_Semaphore_Module__loggerFxn8__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn8 ti_sysbios_knl_Semaphore_Module__loggerFxn8__C;
N
N/* Module__startupDoneFxn */
Ntypedef xdc_Bool (*CT__ti_sysbios_knl_Semaphore_Module__startupDoneFxn)(void);
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__startupDoneFxn ti_sysbios_knl_Semaphore_Module__startupDoneFxn__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Module__startupDoneFxn ti_sysbios_knl_Semaphore_Module__startupDoneFxn__C;
N
N/* Object__count */
Ntypedef xdc_Int CT__ti_sysbios_knl_Semaphore_Object__count;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__count ti_sysbios_knl_Semaphore_Object__count__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Object__count ti_sysbios_knl_Semaphore_Object__count__C;
N
N/* Object__heap */
Ntypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Semaphore_Object__heap;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__heap ti_sysbios_knl_Semaphore_Object__heap__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Object__heap ti_sysbios_knl_Semaphore_Object__heap__C;
N
N/* Object__sizeof */
Ntypedef xdc_SizeT CT__ti_sysbios_knl_Semaphore_Object__sizeof;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__sizeof ti_sysbios_knl_Semaphore_Object__sizeof__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Object__sizeof ti_sysbios_knl_Semaphore_Object__sizeof__C;
N
N/* Object__table */
Ntypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Object__table;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__table ti_sysbios_knl_Semaphore_Object__table__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_Object__table ti_sysbios_knl_Semaphore_Object__table__C;
N
N/* LM_post */
N#define ti_sysbios_knl_Semaphore_LM_post (ti_sysbios_knl_Semaphore_LM_post__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Semaphore_LM_post;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_LM_post ti_sysbios_knl_Semaphore_LM_post__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_LM_post ti_sysbios_knl_Semaphore_LM_post__C;
N
N/* LM_pend */
N#define ti_sysbios_knl_Semaphore_LM_pend (ti_sysbios_knl_Semaphore_LM_pend__C)
Ntypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Semaphore_LM_pend;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_LM_pend ti_sysbios_knl_Semaphore_LM_pend__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_LM_pend ti_sysbios_knl_Semaphore_LM_pend__C;
N
N/* A_noEvents */
N#define ti_sysbios_knl_Semaphore_A_noEvents (ti_sysbios_knl_Semaphore_A_noEvents__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_noEvents;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_noEvents ti_sysbios_knl_Semaphore_A_noEvents__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_A_noEvents ti_sysbios_knl_Semaphore_A_noEvents__C;
N
N/* A_invTimeout */
N#define ti_sysbios_knl_Semaphore_A_invTimeout (ti_sysbios_knl_Semaphore_A_invTimeout__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_invTimeout;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_invTimeout ti_sysbios_knl_Semaphore_A_invTimeout__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_A_invTimeout ti_sysbios_knl_Semaphore_A_invTimeout__C;
N
N/* A_badContext */
N#define ti_sysbios_knl_Semaphore_A_badContext (ti_sysbios_knl_Semaphore_A_badContext__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_badContext;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_badContext ti_sysbios_knl_Semaphore_A_badContext__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_A_badContext ti_sysbios_knl_Semaphore_A_badContext__C;
N
N/* A_overflow */
N#define ti_sysbios_knl_Semaphore_A_overflow (ti_sysbios_knl_Semaphore_A_overflow__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_overflow;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_overflow ti_sysbios_knl_Semaphore_A_overflow__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_A_overflow ti_sysbios_knl_Semaphore_A_overflow__C;
N
N/* A_pendTaskDisabled */
N#define ti_sysbios_knl_Semaphore_A_pendTaskDisabled (ti_sysbios_knl_Semaphore_A_pendTaskDisabled__C)
Ntypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_pendTaskDisabled;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_pendTaskDisabled ti_sysbios_knl_Semaphore_A_pendTaskDisabled__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_A_pendTaskDisabled ti_sysbios_knl_Semaphore_A_pendTaskDisabled__C;
N
N/* supportsEvents */
N#ifdef ti_sysbios_knl_Semaphore_supportsEvents__D
S#define ti_sysbios_knl_Semaphore_supportsEvents (ti_sysbios_knl_Semaphore_supportsEvents__D)
N#else
N#define ti_sysbios_knl_Semaphore_supportsEvents (ti_sysbios_knl_Semaphore_supportsEvents__C)
Ntypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_supportsEvents;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_supportsEvents ti_sysbios_knl_Semaphore_supportsEvents__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_supportsEvents ti_sysbios_knl_Semaphore_supportsEvents__C;
N#endif
N
N/* supportsPriority */
N#ifdef ti_sysbios_knl_Semaphore_supportsPriority__D
S#define ti_sysbios_knl_Semaphore_supportsPriority (ti_sysbios_knl_Semaphore_supportsPriority__D)
N#else
N#define ti_sysbios_knl_Semaphore_supportsPriority (ti_sysbios_knl_Semaphore_supportsPriority__C)
Ntypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_supportsPriority;
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_supportsPriority ti_sysbios_knl_Semaphore_supportsPriority__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_supportsPriority ti_sysbios_knl_Semaphore_supportsPriority__C;
N#endif
N
N/* eventPost */
N#define ti_sysbios_knl_Semaphore_eventPost (ti_sysbios_knl_Semaphore_eventPost__C)
Ntypedef xdc_Void (*CT__ti_sysbios_knl_Semaphore_eventPost)(ti_sysbios_knl_Event_Handle, xdc_UInt);
Xtypedef void (*CT__ti_sysbios_knl_Semaphore_eventPost)(ti_sysbios_knl_Event_Handle, xdc_UInt);
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_eventPost ti_sysbios_knl_Semaphore_eventPost__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_eventPost ti_sysbios_knl_Semaphore_eventPost__C;
N
N/* eventSync */
N#define ti_sysbios_knl_Semaphore_eventSync (ti_sysbios_knl_Semaphore_eventSync__C)
Ntypedef xdc_Void (*CT__ti_sysbios_knl_Semaphore_eventSync)(ti_sysbios_knl_Event_Handle, xdc_UInt, xdc_UInt);
Xtypedef void (*CT__ti_sysbios_knl_Semaphore_eventSync)(ti_sysbios_knl_Event_Handle, xdc_UInt, xdc_UInt);
N__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_eventSync ti_sysbios_knl_Semaphore_eventSync__C;
Xextern  const CT__ti_sysbios_knl_Semaphore_eventSync ti_sysbios_knl_Semaphore_eventSync__C;
N
N
N/*
N * ======== PER-INSTANCE TYPES ========
N */
N
N/* Params */
Nstruct ti_sysbios_knl_Semaphore_Params {
N    size_t __size;
N    const void *__self;
N    void *__fxns;
N    xdc_runtime_IInstance_Params *instance;
N    ti_sysbios_knl_Event_Handle event;
N    xdc_UInt eventId;
N    ti_sysbios_knl_Semaphore_Mode mode;
N    xdc_runtime_IInstance_Params __iprms;
N};
N
N/* Struct */
Nstruct ti_sysbios_knl_Semaphore_Struct {
N    ti_sysbios_knl_Event_Handle __f0;
N    xdc_UInt __f1;
N    ti_sysbios_knl_Semaphore_Mode __f2;
N    volatile xdc_UInt16 __f3;
N    ti_sysbios_knl_Queue_Struct __f4;
N    xdc_runtime_Types_CordAddr __name;
N};
N
N
N/*
N * ======== FUNCTION DECLARATIONS ========
N */
N
N/* Module_startup */
N#define ti_sysbios_knl_Semaphore_Module_startup( state ) (-1)
N
N/* Instance_init__E */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Instance_init__E, "ti_sysbios_knl_Semaphore_Instance_init")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_Instance_init__E(ti_sysbios_knl_Semaphore_Object *, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *);
Xextern void ti_sysbios_knl_Semaphore_Instance_init__E(ti_sysbios_knl_Semaphore_Object *, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *);
N
N/* Instance_finalize__E */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Instance_finalize__E, "ti_sysbios_knl_Semaphore_Instance_finalize")
X
N__extern void ti_sysbios_knl_Semaphore_Instance_finalize__E( ti_sysbios_knl_Semaphore_Object* );
Xextern void ti_sysbios_knl_Semaphore_Instance_finalize__E( ti_sysbios_knl_Semaphore_Object* );
N
N/* Handle__label__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Handle__label__S, "ti_sysbios_knl_Semaphore_Handle__label__S")
X
N__extern xdc_runtime_Types_Label *ti_sysbios_knl_Semaphore_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
Xextern xdc_runtime_Types_Label *ti_sysbios_knl_Semaphore_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
N
N/* Module__startupDone__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Module__startupDone__S, "ti_sysbios_knl_Semaphore_Module__startupDone__S")
X
N__extern xdc_Bool ti_sysbios_knl_Semaphore_Module__startupDone__S( void );
Xextern xdc_Bool ti_sysbios_knl_Semaphore_Module__startupDone__S( void );
N
N/* Object__create__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__create__S, "ti_sysbios_knl_Semaphore_Object__create__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
Xextern xdc_Ptr ti_sysbios_knl_Semaphore_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
N
N/* create */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_create, "ti_sysbios_knl_Semaphore_create")
X
N__extern ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_create( xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms, xdc_runtime_Error_Block *__eb );
Xextern ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_create( xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms, xdc_runtime_Error_Block *__eb );
N
N/* construct */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_construct, "ti_sysbios_knl_Semaphore_construct")
X
N__extern void ti_sysbios_knl_Semaphore_construct( ti_sysbios_knl_Semaphore_Struct *__obj, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms );
Xextern void ti_sysbios_knl_Semaphore_construct( ti_sysbios_knl_Semaphore_Struct *__obj, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms );
N
N/* Object__delete__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__delete__S, "ti_sysbios_knl_Semaphore_Object__delete__S")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_Object__delete__S( xdc_Ptr instp );
Xextern void ti_sysbios_knl_Semaphore_Object__delete__S( xdc_Ptr instp );
N
N/* delete */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_delete, "ti_sysbios_knl_Semaphore_delete")
X
N__extern void ti_sysbios_knl_Semaphore_delete(ti_sysbios_knl_Semaphore_Handle *instp);
Xextern void ti_sysbios_knl_Semaphore_delete(ti_sysbios_knl_Semaphore_Handle *instp);
N
N/* Object__destruct__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__destruct__S, "ti_sysbios_knl_Semaphore_Object__destruct__S")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_Object__destruct__S( xdc_Ptr objp );
Xextern void ti_sysbios_knl_Semaphore_Object__destruct__S( xdc_Ptr objp );
N
N/* destruct */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_destruct, "ti_sysbios_knl_Semaphore_destruct")
X
N__extern void ti_sysbios_knl_Semaphore_destruct(ti_sysbios_knl_Semaphore_Struct *obj);
Xextern void ti_sysbios_knl_Semaphore_destruct(ti_sysbios_knl_Semaphore_Struct *obj);
N
N/* Object__get__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__get__S, "ti_sysbios_knl_Semaphore_Object__get__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__get__S( xdc_Ptr oarr, xdc_Int i );
Xextern xdc_Ptr ti_sysbios_knl_Semaphore_Object__get__S( xdc_Ptr oarr, xdc_Int i );
N
N/* Object__first__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__first__S, "ti_sysbios_knl_Semaphore_Object__first__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__first__S( void );
Xextern xdc_Ptr ti_sysbios_knl_Semaphore_Object__first__S( void );
N
N/* Object__next__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__next__S, "ti_sysbios_knl_Semaphore_Object__next__S")
X
N__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__next__S( xdc_Ptr obj );
Xextern xdc_Ptr ti_sysbios_knl_Semaphore_Object__next__S( xdc_Ptr obj );
N
N/* Params__init__S */
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_Params__init__S, "ti_sysbios_knl_Semaphore_Params__init__S")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
Xextern void ti_sysbios_knl_Semaphore_Params__init__S( xdc_Ptr dst, const void *src, xdc_SizeT psz, xdc_SizeT isz );
N
N/* getCount__E */
N#define ti_sysbios_knl_Semaphore_getCount ti_sysbios_knl_Semaphore_getCount__E
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_getCount__E, "ti_sysbios_knl_Semaphore_getCount")
X
N__extern xdc_Int ti_sysbios_knl_Semaphore_getCount__E( ti_sysbios_knl_Semaphore_Handle __inst );
Xextern xdc_Int ti_sysbios_knl_Semaphore_getCount__E( ti_sysbios_knl_Semaphore_Handle __inst );
N
N/* pend__E */
N#define ti_sysbios_knl_Semaphore_pend ti_sysbios_knl_Semaphore_pend__E
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_pend__E, "ti_sysbios_knl_Semaphore_pend")
X
N__extern xdc_Bool ti_sysbios_knl_Semaphore_pend__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_UInt32 timeout );
Xextern xdc_Bool ti_sysbios_knl_Semaphore_pend__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_UInt32 timeout );
N
N/* post__E */
N#define ti_sysbios_knl_Semaphore_post ti_sysbios_knl_Semaphore_post__E
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_post__E, "ti_sysbios_knl_Semaphore_post")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_post__E( ti_sysbios_knl_Semaphore_Handle __inst );
Xextern void ti_sysbios_knl_Semaphore_post__E( ti_sysbios_knl_Semaphore_Handle __inst );
N
N/* registerEvent__E */
N#define ti_sysbios_knl_Semaphore_registerEvent ti_sysbios_knl_Semaphore_registerEvent__E
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_registerEvent__E, "ti_sysbios_knl_Semaphore_registerEvent")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_registerEvent__E( ti_sysbios_knl_Semaphore_Handle __inst, ti_sysbios_knl_Event_Handle event, xdc_UInt eventId );
Xextern void ti_sysbios_knl_Semaphore_registerEvent__E( ti_sysbios_knl_Semaphore_Handle __inst, ti_sysbios_knl_Event_Handle event, xdc_UInt eventId );
N
N/* reset__E */
N#define ti_sysbios_knl_Semaphore_reset ti_sysbios_knl_Semaphore_reset__E
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_reset__E, "ti_sysbios_knl_Semaphore_reset")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_reset__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_Int count );
Xextern void ti_sysbios_knl_Semaphore_reset__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_Int count );
N
N/* pendTimeout__I */
N#define ti_sysbios_knl_Semaphore_pendTimeout ti_sysbios_knl_Semaphore_pendTimeout__I
Nxdc__CODESECT(ti_sysbios_knl_Semaphore_pendTimeout__I, "ti_sysbios_knl_Semaphore_pendTimeout")
X
N__extern xdc_Void ti_sysbios_knl_Semaphore_pendTimeout__I( xdc_UArg arg );
Xextern void ti_sysbios_knl_Semaphore_pendTimeout__I( xdc_UArg arg );
N
N
N/*
N * ======== SYSTEM FUNCTIONS ========
N */
N
N/* Module_startupDone */
N#define ti_sysbios_knl_Semaphore_Module_startupDone() ti_sysbios_knl_Semaphore_Module__startupDone__S()
N
N/* Object_heap */
N#define ti_sysbios_knl_Semaphore_Object_heap() ti_sysbios_knl_Semaphore_Object__heap__C
N
N/* Module_heap */
N#define ti_sysbios_knl_Semaphore_Module_heap() ti_sysbios_knl_Semaphore_Object__heap__C
N
N/* Module_id */
Nstatic inline CT__ti_sysbios_knl_Semaphore_Module__id ti_sysbios_knl_Semaphore_Module_id( void ) 
N{
N    return ti_sysbios_knl_Semaphore_Module__id__C;
N}
N
N/* Module_hasMask */
Nstatic inline xdc_Bool ti_sysbios_knl_Semaphore_Module_hasMask( void ) 
N{
N    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL;
X    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != 0;
N}
N
N/* Module_getMask */
Nstatic inline xdc_Bits16 ti_sysbios_knl_Semaphore_Module_getMask( void ) 
N{
N    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Semaphore_Module__diagsMask__C : 0;
X    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != 0 ? *ti_sysbios_knl_Semaphore_Module__diagsMask__C : 0;
N}
N
N/* Module_setMask */
Nstatic inline xdc_Void ti_sysbios_knl_Semaphore_Module_setMask( xdc_Bits16 mask ) 
Xstatic inline void ti_sysbios_knl_Semaphore_Module_setMask( xdc_Bits16 mask ) 
N{
N    if (ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL) *ti_sysbios_knl_Semaphore_Module__diagsMask__C = mask;
X    if (ti_sysbios_knl_Semaphore_Module__diagsMask__C != 0) *ti_sysbios_knl_Semaphore_Module__diagsMask__C = mask;
N}
N
N/* Params_init */
Nstatic inline void ti_sysbios_knl_Semaphore_Params_init( ti_sysbios_knl_Semaphore_Params *prms ) 
N{
N    if (prms) {
N        ti_sysbios_knl_Semaphore_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Semaphore_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Params_copy */
Nstatic inline void ti_sysbios_knl_Semaphore_Params_copy(ti_sysbios_knl_Semaphore_Params *dst, const ti_sysbios_knl_Semaphore_Params *src) 
N{
N    if (dst) {
N        ti_sysbios_knl_Semaphore_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Semaphore_Params), sizeof(xdc_runtime_IInstance_Params));
N    }
N}
N
N/* Object_count */
N#define ti_sysbios_knl_Semaphore_Object_count() ti_sysbios_knl_Semaphore_Object__count__C
N
N/* Object_sizeof */
N#define ti_sysbios_knl_Semaphore_Object_sizeof() ti_sysbios_knl_Semaphore_Object__sizeof__C
N
N/* Object_get */
Nstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_get(ti_sysbios_knl_Semaphore_Instance_State *oarr, int i) 
N{
N    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__get__S(oarr, i);
N}
N
N/* Object_first */
Nstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_first( void )
N{
N    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__first__S();
N}
N
N/* Object_next */
Nstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_next( ti_sysbios_knl_Semaphore_Object *obj )
N{
N    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__next__S(obj);
N}
N
N/* Handle_label */
Nstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Semaphore_Handle_label( ti_sysbios_knl_Semaphore_Handle inst, xdc_runtime_Types_Label *lab )
N{
N    return ti_sysbios_knl_Semaphore_Handle__label__S(inst, lab);
N}
N
N/* Handle_name */
Nstatic inline xdc_String ti_sysbios_knl_Semaphore_Handle_name( ti_sysbios_knl_Semaphore_Handle inst )
N{
N    xdc_runtime_Types_Label lab;
N    return ti_sysbios_knl_Semaphore_Handle__label__S(inst, &lab)->iname;
N}
N
N/* handle */
Nstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_handle( ti_sysbios_knl_Semaphore_Struct *str )
N{
N    return (ti_sysbios_knl_Semaphore_Handle)str;
N}
N
N/* struct */
Nstatic inline ti_sysbios_knl_Semaphore_Struct *ti_sysbios_knl_Semaphore_struct( ti_sysbios_knl_Semaphore_Handle inst )
N{
N    return (ti_sysbios_knl_Semaphore_Struct*)inst;
N}
N
N
N/*
N * ======== EPILOGUE ========
N */
N
N#ifdef ti_sysbios_knl_Semaphore__top__
N#undef __nested__
N#endif
N
N#endif /* ti_sysbios_knl_Semaphore__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Semaphore__internalaccess))
X#if 0L || (!0L && 0L)
S
S#ifndef ti_sysbios_knl_Semaphore__include_state
S#define ti_sysbios_knl_Semaphore__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Semaphore_Object {
S    ti_sysbios_knl_Event_Handle event;
S    xdc_UInt eventId;
S    ti_sysbios_knl_Semaphore_Mode mode;
S    volatile xdc_UInt16 count;
S    char __dummy;
S};
S
S/* Instance_State_pendQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Semaphore_Instance_State_pendQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Semaphore_Instance_State_pendQ(ti_sysbios_knl_Semaphore_Object *obj)
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)obj) + ti_sysbios_knl_Semaphore_Instance_State_pendQ__O);
S}
S
S#endif /* ti_sysbios_knl_Semaphore__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Semaphore__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Semaphore__localnames__done
N#define ti_sysbios_knl_Semaphore__localnames__done
N
N/* module prefix */
N#define Semaphore_Instance ti_sysbios_knl_Semaphore_Instance
N#define Semaphore_Handle ti_sysbios_knl_Semaphore_Handle
N#define Semaphore_Module ti_sysbios_knl_Semaphore_Module
N#define Semaphore_Object ti_sysbios_knl_Semaphore_Object
N#define Semaphore_Struct ti_sysbios_knl_Semaphore_Struct
N#define Semaphore_Mode ti_sysbios_knl_Semaphore_Mode
N#define Semaphore_PendState ti_sysbios_knl_Semaphore_PendState
N#define Semaphore_PendElem ti_sysbios_knl_Semaphore_PendElem
N#define Semaphore_Instance_State ti_sysbios_knl_Semaphore_Instance_State
N#define Semaphore_Mode_COUNTING ti_sysbios_knl_Semaphore_Mode_COUNTING
N#define Semaphore_Mode_BINARY ti_sysbios_knl_Semaphore_Mode_BINARY
N#define Semaphore_Mode_COUNTING_PRIORITY ti_sysbios_knl_Semaphore_Mode_COUNTING_PRIORITY
N#define Semaphore_Mode_BINARY_PRIORITY ti_sysbios_knl_Semaphore_Mode_BINARY_PRIORITY
N#define Semaphore_PendState_TIMEOUT ti_sysbios_knl_Semaphore_PendState_TIMEOUT
N#define Semaphore_PendState_POSTED ti_sysbios_knl_Semaphore_PendState_POSTED
N#define Semaphore_PendState_CLOCK_WAIT ti_sysbios_knl_Semaphore_PendState_CLOCK_WAIT
N#define Semaphore_PendState_WAIT_FOREVER ti_sysbios_knl_Semaphore_PendState_WAIT_FOREVER
N#define Semaphore_LM_post ti_sysbios_knl_Semaphore_LM_post
N#define Semaphore_LM_pend ti_sysbios_knl_Semaphore_LM_pend
N#define Semaphore_A_noEvents ti_sysbios_knl_Semaphore_A_noEvents
N#define Semaphore_A_invTimeout ti_sysbios_knl_Semaphore_A_invTimeout
N#define Semaphore_A_badContext ti_sysbios_knl_Semaphore_A_badContext
N#define Semaphore_A_overflow ti_sysbios_knl_Semaphore_A_overflow
N#define Semaphore_A_pendTaskDisabled ti_sysbios_knl_Semaphore_A_pendTaskDisabled
N#define Semaphore_supportsEvents ti_sysbios_knl_Semaphore_supportsEvents
N#define Semaphore_supportsPriority ti_sysbios_knl_Semaphore_supportsPriority
N#define Semaphore_eventPost ti_sysbios_knl_Semaphore_eventPost
N#define Semaphore_eventSync ti_sysbios_knl_Semaphore_eventSync
N#define Semaphore_Instance_State_pendQ ti_sysbios_knl_Semaphore_Instance_State_pendQ
N#define Semaphore_Params ti_sysbios_knl_Semaphore_Params
N#define Semaphore_getCount ti_sysbios_knl_Semaphore_getCount
N#define Semaphore_pend ti_sysbios_knl_Semaphore_pend
N#define Semaphore_post ti_sysbios_knl_Semaphore_post
N#define Semaphore_registerEvent ti_sysbios_knl_Semaphore_registerEvent
N#define Semaphore_reset ti_sysbios_knl_Semaphore_reset
N#define Semaphore_Module_name ti_sysbios_knl_Semaphore_Module_name
N#define Semaphore_Module_id ti_sysbios_knl_Semaphore_Module_id
N#define Semaphore_Module_startup ti_sysbios_knl_Semaphore_Module_startup
N#define Semaphore_Module_startupDone ti_sysbios_knl_Semaphore_Module_startupDone
N#define Semaphore_Module_hasMask ti_sysbios_knl_Semaphore_Module_hasMask
N#define Semaphore_Module_getMask ti_sysbios_knl_Semaphore_Module_getMask
N#define Semaphore_Module_setMask ti_sysbios_knl_Semaphore_Module_setMask
N#define Semaphore_Object_heap ti_sysbios_knl_Semaphore_Object_heap
N#define Semaphore_Module_heap ti_sysbios_knl_Semaphore_Module_heap
N#define Semaphore_construct ti_sysbios_knl_Semaphore_construct
N#define Semaphore_create ti_sysbios_knl_Semaphore_create
N#define Semaphore_handle ti_sysbios_knl_Semaphore_handle
N#define Semaphore_struct ti_sysbios_knl_Semaphore_struct
N#define Semaphore_Handle_label ti_sysbios_knl_Semaphore_Handle_label
N#define Semaphore_Handle_name ti_sysbios_knl_Semaphore_Handle_name
N#define Semaphore_Instance_init ti_sysbios_knl_Semaphore_Instance_init
N#define Semaphore_Object_count ti_sysbios_knl_Semaphore_Object_count
N#define Semaphore_Object_get ti_sysbios_knl_Semaphore_Object_get
N#define Semaphore_Object_first ti_sysbios_knl_Semaphore_Object_first
N#define Semaphore_Object_next ti_sysbios_knl_Semaphore_Object_next
N#define Semaphore_Object_sizeof ti_sysbios_knl_Semaphore_Object_sizeof
N#define Semaphore_Params_copy ti_sysbios_knl_Semaphore_Params_copy
N#define Semaphore_Params_init ti_sysbios_knl_Semaphore_Params_init
N#define Semaphore_Instance_finalize ti_sysbios_knl_Semaphore_Instance_finalize
N#define Semaphore_delete ti_sysbios_knl_Semaphore_delete
N#define Semaphore_destruct ti_sysbios_knl_Semaphore_destruct
N
N#endif /* ti_sysbios_knl_Semaphore__localnames__done */
N#endif
L 42 "../bme280.c" 2
N
N/* TI-RTOS Header files */
N#include <ti/drivers/I2C.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/tidrivers_tivac_2_16_00_08/packages/ti/drivers/I2C.h" 1
N/*
N * Copyright (c) 2015, Texas Instruments Incorporated
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * *  Neither the name of Texas Instruments Incorporated nor the names of
N *    its contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N/** ============================================================================
N *  @file       I2C.h
N *
N *  @brief      I2C driver interface
N *
N *  The I2C header file should be included in an application as follows:
N *  @code
N *  #include <ti/drivers/I2C.h>
N *  @endcode
N *
N *  # Operation #
N *  The I2C driver operates as a master on a single-master I2C bus in either
N *  I2C_MODE_BLOCKING or I2C_MODE_CALLBACK.
N *  In blocking mode, the task's execution is blocked during the I2C
N *  transaction. When the transfer has completed, code execution will resume.
N *  In callback mode, the task's execution is not blocked, allowing for other
N *  transactions to be queued up or to process some other code. When the
N *  transfer has completed, the I2C driver will call a user-specified callback
N *  function (from a HWI or SWI context, depending on the device).
N *
N *  The APIs in this driver serve as an interface to a typical TI-RTOS
N *  application. The specific peripheral implementations are responsible to
N *  create all the SYS/BIOS specific primitives to allow for thread-safe
N *  operation.
N *
N *  ## Opening the driver #
N *
N *  @code
N *  I2C_Handle      handle;
N *  I2C_Params      params;
N *  I2C_Transaction i2cTransaction;
N *
N *  I2C_Params_init(&params);
N *  params.transferMode  = I2C_MODE_CALLBACK;
N *  params.transferCallbackFxn = someI2CCallbackFunction;
N *  handle = I2C_open(someI2C_configIndexValue, &params);
N *  if (!handle) {
N *      System_printf("I2C did not open");
N *  }
N *  @endcode
N *
N *  ## Transferring data #
N *  A I2C transaction with a I2C peripheral is started by calling
N *  I2C_transfer(). The details of the I2C transaction is specified with a
N *  I2C_Transaction data structure. This structure allows for any of the three
N *  types of transactions: Write, Read, or Write/Read. Each transfer is
N *  performed atomically with the I2C slave peripheral.
N *
N *  @code
N *  I2C_Transaction i2cTransaction;
N *
N *  i2cTransaction.writeBuf = someWriteBuffer;
N *  i2cTransaction.writeCount = numOfBytesToWrite;
N *
N *  i2cTransaction.readBuf = someReadBuffer;
N *  i2cTransaction.readCount = numOfBytesToRead;
N *
N *  i2cTransaction.slaveAddress = some7BitI2CSlaveAddress;
N *
N *  ret = I2C_transfer(handle, &i2cTransaction);
N *  if (!ret) {
N *      System_printf("Unsuccessful I2C transfer");
N *  }
N *  @endcode
N *
N *  # Implementation #
N *
N *  This module serves as the main interface for TI-RTOS
N *  applications. Its purpose is to redirect the module's APIs to specific
N *  peripheral implementations which are specified using a pointer to a
N *  I2C_FxnTable.
N *
N *  The I2C driver interface module is joined (at link time) to a
N *  NULL-terminated array of I2C_Config data structures named *I2C_config*.
N *  *I2C_config* is implemented in the application with each entry being an
N *  instance of a I2C peripheral. Each entry in *I2C_config* contains a:
N *  - (I2C_FxnTable *) to a set of functions that implement a I2C peripheral
N *  - (void *) data object that is associated with the I2C_FxnTable
N *  - (void *) hardware attributes that are associated to the I2C_FxnTable
N *
N *  # Instrumentation #
N *  The I2C driver interface produces log statements if instrumentation is
N *  enabled.
N *
N *  Diagnostics Mask | Log details |
N *  ---------------- | ----------- |
N *  Diags_USER1      | basic operations performed |
N *  Diags_USER2      | detailed operations performed |
N *
N *  ============================================================================
N */
N
N#ifndef ti_drivers_I2C__include
N#define ti_drivers_I2C__include
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N#include <stdbool.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdbool.h" 1
N/* stdbool.h standard header */
N#ifndef _STDBOOL
N#define _STDBOOL
N#ifndef _YVALS
N #include <yvals.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 1
N/* yvals.h values header for conforming compilers on various systems */
N#ifndef _YVALS
N#define _YVALS
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.1") /* #includes required for implementation */
N#pragma CHECK_MISRA("-19.4") /* macros required for implementation */
N#pragma CHECK_MISRA("-19.6") /* undef required for implementation */
N#pragma CHECK_MISRA("-19.7") /* macros required for implementation */
N#pragma CHECK_MISRA("-20.1") /* standard headers must define standard names */
N
N#include <stdarg.h> 
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdarg.h" 1
N/*****************************************************************************/
N/* stdarg.h   v5.2.6                                                         */
N/*                                                                           */
N/* Copyright (c) 1996-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _STDARG
S#define _STDARG
S
S#pragma diag_push
S#pragma CHECK_MISRA("-20.2") /* standard headers must define standard names */
S#pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
S
S#ifdef __cplusplus
S#define _NS_PREFIX std::
Snamespace std {
S#else
S#define _NS_PREFIX
S#endif /* __cplusplus */
S
S#ifdef __TI_EABI_SUPPORT__
Stypedef struct __va_list {
S    void * __ap;
S} va_list;
S#else
Stypedef char *va_list;
S#endif
S
S#ifdef __cplusplus
S} /* namespace std */
S#endif
S
S#define _VA_RNDUP(sz) 	(((sz) + 3) & ~3)
S#define _VA_MASK(tp)     ((__ALIGNOF__(tp) == 8) ? 7 : 3)
S#define _VA_ALN(ap,tp)  (((int)(ap) + _VA_MASK(tp)) & ~(_VA_MASK(tp)))
S
S#ifdef __TI_EABI_SUPPORT__
S#define va_start(ap, parmN)						      \
S   ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   \
S		                              _VA_RNDUP(sizeof(parmN)))))
X#define va_start(ap, parmN)						         ((ap).__ap = ((void *)((((int)__va_parmadr(parmN))&~3) +                   		                              _VA_RNDUP(sizeof(parmN)))))
S#else
S#define va_start(ap, parmN)						      \
S   ((ap) = (__va_argref(parmN) 						      \
S	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      \
S	    : (sizeof(parmN) < sizeof(int)) 				      \
S	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      \
S	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
X#define va_start(ap, parmN)						         ((ap) = (__va_argref(parmN) 						      	    ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 )	      	    : (sizeof(parmN) < sizeof(int)) 				      	      ? (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + 4 & ~3)	      	      : (_NS_PREFIX va_list)((int)__va_parmadr(parmN) + sizeof(parmN))))
S#endif
S
S#ifdef __big_endian__
S#ifdef __TI_EABI_SUPPORT__
S#define va_arg(_ap, _type)					 	      \
S    (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       \
S			                         _VA_RNDUP(sizeof(_type)))),  \
S     (*(_type *)((int)(_ap).__ap -                                            \
S		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      \
S		                       : (sizeof(_type))))))
X#define va_arg(_ap, _type)					 	          (((_ap).__ap = (void*)(_VA_ALN((_ap).__ap, _type) +                       			                         _VA_RNDUP(sizeof(_type)))),       (*(_type *)((int)(_ap).__ap -                                            		   (__va_argcsu(_type) ? _VA_RNDUP(sizeof(_type))	      		                       : (sizeof(_type))))))
S#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                                		      \
S	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                                		      	 ? ((_ap += sizeof(_type*)),(**(_type**)(_ap-(sizeof(_type*)))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),(*(_type*)(_ap-(sizeof(_type))))))
S#endif
S#else
S#ifdef __TI_EABI_SUPPORT__
S#define va_arg(_ap, _type) 						      \
S   (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        \
S			   _VA_RNDUP(sizeof(_type)))),                        \
S	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
X#define va_arg(_ap, _type) 						         (((_ap).__ap = (void *)(_VA_ALN((_ap).__ap,_type) +                        			   _VA_RNDUP(sizeof(_type)))),                        	     (*(_type *) ((int)(_ap).__ap - _VA_RNDUP(sizeof(_type)))))
S#else
S#define va_arg(_ap, _type)                                       	      \
S        (__va_argref(_type)                         		              \
S	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      \
S	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      \
S	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
X#define va_arg(_ap, _type)                                       	              (__va_argref(_type)                         		              	 ? ((_ap += sizeof(_type*)), (**(_type**)(_ap- sizeof(_type*))))      	 : ((_ap += _VA_RNDUP(sizeof(_type))),				      	     (*(_type*)(_ap- _VA_RNDUP(sizeof(_type))))))
S#endif
S#endif
S
S#define va_end(ap) ((void)0)
S
S#pragma diag_pop
S
N#endif /* _STDARG */
N
N#pragma diag_push
N
N/* using declarations must occur outside header guard to support including both
N   C and C++-wrapped version of header; see _CPP_STYLE_HEADER check */
N/* this code is for C++ mode only and thus also not relevant for MISRA */
N#pragma CHECK_MISRA("-19.15")
N
N#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
X#if 0L && !0L
Susing std::va_list;
N#endif /* _CPP_STYLE_HEADER */
N
N#pragma diag_pop
L 13 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N
N#define _CPPLIB_VER	402
N
N/*---------------------------------------------------------------------------*/
N/* A header file conforming to ARM CLIB ABI (GENC-003539), should            */
N/* define _AEABI_PORTABLE when _AEABI_PORTABILITY_LEVEL is defined.          */
N/*---------------------------------------------------------------------------*/
N#if defined(_AEABI_PORTABILITY_LEVEL) && !defined(_AEABI_PORTABLE)
X#if 0L && !0L
S#define _AEABI_PORTABLE
N#endif
N
N/*---------------------------------------------------------------------------*/
N/* The macro definition that guards CLIB ABI (GENC-003539) requirements.     */
N/*---------------------------------------------------------------------------*/
N#if defined(__TMS470__) && defined(__TI_EABI_SUPPORT__)
X#if 1L && 1L
N#define _AEABI_PORTABILITY_CHECK (defined(__TMS470__) && \
N                                  defined(__TI_EABI_SUPPORT__) && \
N                                  defined(_AEABI_PORTABILITY_LEVEL) && \
N                                  _AEABI_PORTABILITY_LEVEL != 0)
X#define _AEABI_PORTABILITY_CHECK (defined(__TMS470__) &&                                   defined(__TI_EABI_SUPPORT__) &&                                   defined(_AEABI_PORTABILITY_LEVEL) &&                                   _AEABI_PORTABILITY_LEVEL != 0)
N#else
S#define _AEABI_PORTABILITY_CHECK 0
N#endif
N
N/* You can predefine (on the compile command line, for example):
N
N_ALT_NS=1 -- to use namespace _Dinkum_std for C++
N_ALT_NS=2 -- to use namespace _Dinkum_std for C++ and C
N_C_AS_CPP -- to compile C library as C++
N_C_IN_NS -- to define C names in std/_Dinkum_std instead of global namespace
N_C99 -- to turn ON C99 library support
N_ABRCPP -- to turn ON Abridged C++ dialect (implies _ECPP)
N_ECPP -- to turn ON Embedded C++ dialect
N_NO_EX -- to turn OFF use of try/throw
N_NO_MT -- to turn OFF thread synchronization
N_NO_NS -- to turn OFF use of namespace declarations
N_STL_DB (or _STLP_DEBUG) -- to turn ON iterator/range debugging
N__NO_LONG_LONG -- to define _Longlong as long, not long long
N
NYou can change (in this header):
N
N_ADDED_C_LIB -- from 1 to 0 to omit declarations for C extensions
N_COMPILER_TLS -- from 0 to 1 if _TLS_QUAL is not nil
N_EXFAIL -- from 1 to any nonzero value for EXIT_FAILURE
N_FILE_OP_LOCKS -- from 0 to 1 for file atomic locks
N_GLOBAL_LOCALE -- from 0 to 1 for shared locales instead of per-thread
N_HAS_IMMUTABLE_SETS -- from 1 to 0 to permit alterable set elements
N_HAS_STRICT_CONFORMANCE -- from 0 to 1 to disable nonconforming extensions
N_HAS_TRADITIONAL_IOSTREAMS -- from 1 to 0 to omit old iostreams functions
N_HAS_TRADITIONAL_ITERATORS -- from 0 to 1 for vector/string pointer iterators
N_HAS_TRADITIONAL_POS_TYPE -- from 0 to 1 for streampos same as streamoff
N_HAS_TRADITIONAL_STL -- from 1 to 0 to omit old STL functions
N_IOSTREAM_OP_LOCKS -- from 0 to 1 for iostream atomic locks
N_TLS_QUAL -- from nil to compiler TLS qualifier, such as __declspec(thread)
N_USE_EXISTING_SYSTEM_NAMES -- from 1 to 0 to disable mappings (_Open to open)
N
NInclude directories needed to compile with Dinkum C:
N
NC -- include/c
NC99 -- include/c (define _C99)
NEmbedded C++ -- include/c include/embedded (define _ECPP)
NAbridged C++ -- include/c include/embedded include (define _ABRCPP)
NStandard C++ -- include/c include
NStandard C++ with export -- include/c include/export include
N	(--export --template_dir=lib/export)
N
NInclude directories needed to compile with native C:
N
NC -- none
NC99 -- N/A
NEmbedded C++ -- include/embedded (define _ECPP)
NAbridged C++ -- include/embedded include (define _ABRCPP)
NStandard C++ -- include
NStandard C++ with export -- include/export include
N	(--export --template_dir=lib/export)
N */
N
N #define _C_IN_NS 1
N #define __EDG__  1
N #define __FPUTS_RETURN_NUM_BYTES__ 1
N #ifdef __EXCEPTIONS
S    #undef _NO_EX 
N #else
N    #define _NO_EX 1
N #endif /* __EXCEPTIONS */
N #if defined(__unsigned_chars__)
X #if 1L
N   #define __CHAR_UNSIGNED__ 1
N #else
S   #undef __CHAR_UNSIGNED__
S   #undef _CHAR_UNSIGNED
N #endif /* defined(__unsigned_chars__) */
N #undef _32_BIT_DOUBLE
N #undef _32_BIT_LDOUBLE
N
N /* targets with "native" mode libraries don't support C9X */
N #define _HAS_C9X 0
N
N /* TI RTS supports the C9X snprintf() and vsnprintf() functions */
N #ifndef _C9X_SNPRINTF
N  #define _C9X_SNPRINTF 1
N #endif /* _C9X_SNPRINTF */
N
N /* TI C6x supports complex arithmetic */
N #ifndef _C9X_COMPLEX
N  #define _C9X_COMPLEX (_TMS320C6X || 199901L <= __STDC_VERSION__)
N #endif /* _C9X_COMPLEX */
N
N
N #ifndef __STDC_HOSTED__
N  #define __STDC_HOSTED__	1
N #endif /* __STDC_HOSTED__ */
N
N  #undef __STDC_IEC_559__
N  #undef __STDC_IEC_559_COMPLEX__
N
N #ifndef __STDC_ISO_10646__
N  #define __STDC_ISO_10646__	200009L	/* match glibc */
N #endif /* __STDC_ISO_10646__ */
N
N		/* DETERMINE MACHINE TYPE */
N
N
N   /* _C99_MATH must be defined for using Dinkum Math */
N  #if !defined(_C99_MATH)
X  #if !0L
N    #define _C99_MATH 1
N  #endif
N
N  #if defined(__TI_VFPLIB_SUPPORT__)
X  #if 0L
S    #if defined(__TI_FPV4SPD16_SUPPORT__)
S      #define _HAS_C9X_FAST_FMAF 1
S    #else
S      #define _HAS_C9X_FAST_FMA 1
S    #endif
N  #endif
N  
N   #if defined(__big_endian__)
X   #if 0L
S       #define _D0	0	/* 0: big endian, 3: little endian floating-point */
N   #elif defined(__little_endian__)
X   #elif 1L
N      #if defined(__TI_VFPLIB_SUPPORT__)
X      #if 0L
S          #define _D0   3       /* MSW offset 3 */
S      #elif defined(__TI_FPALIB_SUPPORT__)
X      #elif 0L
S          #define _D0   1       /* MSW offset 1, special FPALIB endianness */
N      #else
N          #define _D0   3       /* MSW offset 3 */
N      #endif
N   #endif
N  #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
N  #define _LBIAS	0x3fe	/* 64 long double bits */
N  #define _LOFF		4	/* 64 long double bits */
N  #define _FPP_TYPE	_FPP_NONE   /* set to _FPP_NONE because of software emulation */
N
N
N		/* DETERMINE _Ptrdifft AND _Sizet FROM MACHINE TYPE */
N
Ntypedef long _Int32t;
Ntypedef unsigned long _Uint32t;
N
Ntypedef  __PTRDIFF_T_TYPE__  _Ptrdifft;
Xtypedef  int  _Ptrdifft;
N
Ntypedef  __SIZE_T_TYPE__ _Sizet;
Xtypedef  unsigned _Sizet;
N
N #if defined(__linux)
X #if 0L
S  #define _LINUX_C_LIB	1	/* Linux-specific conventions */
N #endif /* defined(__linux) */
N
N   #undef _POSIX_C_LIB
N
N #if !defined(_HAS_C9X) && defined(_C99)
X #if !1L && 0L
S  #define _HAS_C9X	1
N #endif /* !defined(_HAS_C9X) etc. */
N
N #define _HAS_C9X_IMAGINARY_TYPE	(_C9X_COMPLEX && __EDG__ \
N	&& !defined(__cplusplus))
X #define _HAS_C9X_IMAGINARY_TYPE	(_C9X_COMPLEX && __EDG__ 	&& !defined(__cplusplus))
N
N #if !defined(_ECPP) && defined(_ABRCPP)
X #if !0L && 0L
S  #define _ECPP
N #endif /* !defined(_ECPP) && defined(_ABRCPP) */
N
N #if !defined(_IS_EMBEDDED) && defined(_ECPP)
X #if !0L && 0L
S  #define _IS_EMBEDDED	1	/* 1 for Embedded C++ */
N #endif /* _IS_EMBEDDED */
N
N		/* EXCEPTION CONTROL */
N #ifndef _HAS_EXCEPTIONS
N  #ifndef _NO_EX	/* don't simplify */
S   #define _HAS_EXCEPTIONS	1	/* 1 for try/throw logic */
S
N  #else	/* _NO_EX */
N   #define _HAS_EXCEPTIONS	0
N  #endif /* _NO_EX */
N
N #endif /* _HAS_EXCEPTIONS */
N
N		/* NAMING PROPERTIES */
N/* #define _STD_LINKAGE	defines C names as extern "C++" */
N/* #define _STD_USING	defines C names in namespace std or _Dinkum_std */
N
N #ifndef _HAS_NAMESPACE
N  #ifndef _NO_NS	/* don't simplify */
N   #define _HAS_NAMESPACE	1	/* 1 for C++ names in std */
N
N  #else	/* _NO_NS */
S   #define _HAS_NAMESPACE	0
N  #endif /* _NO_NS */
N
N #endif /* _HAS_NAMESPACE */
N 
N #if !defined(_STD_USING) && defined(__cplusplus) \
N	&& defined(_C_IN_NS)
X #if !0L && 0L 	&& 1L
S  #define _STD_USING	/* exports C names to global, else reversed */
S
S #elif defined(_STD_USING) && !defined(__cplusplus)
X #elif 0L && !0L
S  #undef _STD_USING	/* define only for C++ */
N #endif /* !defined(_STD_USING) */
N
N #if !defined(_HAS_STRICT_LINKAGE) \
N	&& __EDG__ && !defined(_WIN32_C_LIB)
X #if !0L 	&& 1 && !0L
N  #define _HAS_STRICT_LINKAGE __TI_STRICT_ANSI_MODE__   /* extern "C" in function type */
N #endif /* !defined(_HAS_STRICT_LINKAGE) */
N
N		/* THREAD AND LOCALE CONTROL */
N  #define _NO_MT 1
N  #define _MULTI_THREAD	0
N 
N#define _GLOBAL_LOCALE	0	/* 0 for per-thread locales, 1 for shared */
N#define _FILE_OP_LOCKS	0	/* 0 for no FILE locks, 1 for atomic */
N#define _IOSTREAM_OP_LOCKS	0	/* 0 for no iostream locks, 1 for atomic */
N
N		/* THREAD-LOCAL STORAGE */
N#define _COMPILER_TLS	0	/* 1 if compiler supports TLS directly */
N#define _TLS_QUAL	/* TLS qualifier, such as __declspec(thread), if any */
N
N #define _HAS_IMMUTABLE_SETS	1
N #define _HAS_IMMUTABLE_SETS	1
N #define _HAS_TRADITIONAL_IOSTREAMS	0
N #define _HAS_TRADITIONAL_ITERATORS	0
N #define _HAS_TRADITIONAL_POS_TYPE	0
N #define _HAS_TRADITIONAL_STL	1
N #define _HAS_TRADITIONAL_IOSTREAMS	0
N #define _HAS_TRADITIONAL_ITERATORS	0
N #define _HAS_TRADITIONAL_POS_TYPE	0
N #define _HAS_TRADITIONAL_STL	1
N
N #define _ADDED_C_LIB	1
N #define _USE_EXISTING_SYSTEM_NAMES	1 /* _Open => open etc. */
N
N #if !defined(_HAS_STRICT_CONFORMANCE)
X #if !0L
N  #define _HAS_STRICT_CONFORMANCE	0	/* enable nonconforming extensions */
N #endif /* !defined(_HAS_STRICT_CONFORMANCE) */
N
N #if !defined(_HAS_ITERATOR_DEBUGGING) \
N	&& (defined(_STL_DB) || defined(_STLP_DEBUG))
X #if !0L 	&& (0L || 0L)
S  #define _HAS_ITERATOR_DEBUGGING	1	/* for range checks, etc. */
N #endif /* define _HAS_ITERATOR_DEBUGGING */
N
N		/* NAMESPACE CONTROL */
N
N #if defined(__cplusplus)
X #if 0L
S
S #if _HAS_NAMESPACE
Snamespace std {}
S
S #if defined(_C_AS_CPP)
S  #define _NO_CPP_INLINES	/* just for compiling C library as C++ */
S #endif /* _C_AS_CPP */
S
S #if defined(_STD_USING)
S  #if defined(_C_AS_CPP)	/* define library in std */
S   #define _STD_BEGIN	namespace std {_C_LIB_DECL
S   #define _STD_END		_END_C_LIB_DECL }
S
S  #else /* _C_AS_CPP */
S   #define _STD_BEGIN	namespace std {
S   #define _STD_END		}
S  #endif /* _C_AS_CPP */
S
S   #define _C_STD_BEGIN	namespace std {
S   #define _C_STD_END	}
S   #define _CSTD	        ::std::
S   #define _STD			::std::
S
S #else /* _ALT_NS == 0 && !defined(_STD_USING) */
S
S  #if defined(_C_AS_CPP)	/* define C++ library in std, C in global */
S   #define _STD_BEGIN	_C_LIB_DECL
S   #define _STD_END		_END_C_LIB_DECL
S
S  #else /* _C_AS_CPP */
S   #define _STD_BEGIN	namespace std {
S   #define _STD_END		}
S  #endif /* _C_AS_CPP */
S
S   #define _C_STD_BEGIN	
S   #define _C_STD_END	
S   #define _CSTD		::
S   #define _STD			::std::
S #endif /* _ALT_NS etc */
S
S  #define _X_STD_BEGIN	namespace std {
S  #define _X_STD_END	}
S  #define _XSTD			::std::
S
S  #if defined(_STD_USING)
S   #undef _GLOBAL_USING		/* c* in std namespace, *.h imports to global */
S
S  #else
S   #define _GLOBAL_USING	/* *.h in global namespace, c* imports to std */
S  #endif /* defined(_STD_USING) */
S
S  #if defined(_STD_LINKAGE)
S   #define _C_LIB_DECL		extern "C++" {	/* C has extern "C++" linkage */
S
S  #else /* defined(_STD_LINKAGE) */
S   #define _C_LIB_DECL		extern "C" {	/* C has extern "C" linkage */
S  #endif /* defined(_STD_LINKAGE) */
S
S  #define _END_C_LIB_DECL	}
S  #define _EXTERN_C			extern "C" {
S  #define _END_EXTERN_C		}
S
S #else /* _HAS_NAMESPACE */
S
S  #define _STD_BEGIN
S  #define _STD_END
S  #define _STD	::
S
S  #define _X_STD_BEGIN
S  #define _X_STD_END
S  #define _XSTD	::
S
S  #define _C_STD_BEGIN
S  #define _C_STD_END
S  #define _CSTD	::
S
S  #define _C_LIB_DECL		extern "C" {
S  #define _END_C_LIB_DECL	}
S  #define _EXTERN_C			extern "C" {
S  #define _END_EXTERN_C		}
S #endif /* _HAS_NAMESPACE */
S
N #else /* __cplusplus */
N  #define _STD_BEGIN
N  #define _STD_END
N  #define _STD
N
N  #define _X_STD_BEGIN
N  #define _X_STD_END
N  #define _XSTD
N
N  #define _C_STD_BEGIN
N  #define _C_STD_END
N  #define _CSTD
N
N  #define _C_LIB_DECL
N  #define _END_C_LIB_DECL
N  #define _EXTERN_C
N  #define _END_EXTERN_C
N #endif /* __cplusplus */
N
N #if 199901L <= __STDC_VERSION__
X #if 199901L <= 199409L
S
S #if defined(__GNUC__) || defined(__cplusplus)
S  #define _Restrict
S
S #else /* defined(__GNUC__) || defined(__cplusplus) */
S  #define _Restrict restrict
S #endif /* defined(__GNUC__) || defined(__cplusplus) */
S
S
N #else /* 199901L <= __STDC_VERSION__ */
N #define _Restrict
N #endif /* 199901L <= __STDC_VERSION__ */
N
N #ifdef __cplusplus
S_STD_BEGIN
Stypedef bool _Bool;
S_STD_END
N #endif /* __cplusplus */
N
N		/* VC++ COMPILER PARAMETERS */
N #define _CRTIMP
N #define _CDECL
N
N
N #ifdef __NO_LONG_LONG
S
N #else
N        /* defined(__NO_LONG_LONG) && !defined (_MSC_VER) && ! TI 32 bit processor*/
N  #define _LONGLONG	long long
N  #define _ULONGLONG	unsigned long long
N  #define _LLONG_MAX	0x7fffffffffffffffLL
N  #define _ULLONG_MAX	0xffffffffffffffffULL
N #endif /* __NO_LONG_LONG */
N
N		/* MAKE MINGW LOOK LIKE WIN32 HEREAFTER */
N
N
N
N_C_STD_BEGIN
X
N		/* FLOATING-POINT PROPERTIES */
N#if (!defined(_32_BIT_DOUBLE))
X#if (!0L)
N#define _DBIAS	0x3fe	/* IEEE format double and float */
N#define _DOFF	4
N#define _FBIAS	0x7e
N#define _FOFF	7
N#define _FRND	1
N#endif /* (!defined(_32_BIT_DOUBLE)) */
N
N#define _BITS_BYTE	8
N#define _C2		1	/* 0 if not 2's complement */
N#define _MBMAX		8	/* MB_LEN_MAX */
N#define _ILONG		1	/* 0 if 16-bit int */
N
N #if defined(__s390__) || defined(__CHAR_UNSIGNED__)  \
N	|| defined(_CHAR_UNSIGNED) 
X #if 0L || 1L  	|| 0L 
N  #define _CSIGN	0	/* 0 if char is not signed */ 
N #else /* defined(__s390__) etc */
S  #define _CSIGN	1
N #endif /* defined(__s390__) etc */
N
N#define _MAX_EXP_DIG	8	/* for parsing numerics */
N#define _MAX_INT_DIG	32
N#define _MAX_SIG_DIG	36
N
N #if defined(_LONGLONG)
X #if 1L
Ntypedef _LONGLONG _Longlong;
Xtypedef long long _Longlong;
Ntypedef _ULONGLONG _ULonglong;
Xtypedef unsigned long long _ULonglong;
N
N #else /* defined(_LONGLONG) */
S     typedef long long _Longlong;
S     typedef unsigned long long  _ULonglong;
S     #define _LLONG_MAX  0x7fffffffffffffff
S     #define _ULLONG_MAX 0xffffffffffffffff
N #endif /* defined(_LONGLONG) */
N
N		/* wchar_t AND wint_t PROPERTIES */
N #if defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) \
N	|| defined (_MSL_WCHAR_T_TYPE)
X #if 1L || 0L 	|| 0L
N  #define _WCHART
N #endif /* defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) */
N
N #if defined(_WINT_T)
X #if 0L
S  #define _WINTT
N #endif /* _WINT_T */
N
N #ifdef __cplusplus
S  #define _WCHART
Stypedef wchar_t _Wchart;
Stypedef wchar_t _Wintt;
N #endif /* __cplusplus */
N
N #if defined(__WCHAR_TYPE__)
X #if 0L
S  #define _WCMIN	(-_WCMAX - _C2)
S  #define _WCMAX	0x7fffffff	/* assume signed 32-bit wchar_t */
S
S  #ifndef __cplusplus
Stypedef __WCHAR_TYPE__ _Wchart;
Stypedef __WCHAR_TYPE__ _Wintt;
S  #endif /* __cplusplus */
S/******************************************************************************/
S/* Here we define the _Wchart _Wintt for TI processors, they are all defined  */
S/* as 16 bit unsigned integer type by the predefined macro __WCHAR_T_TYPE__   */
S/******************************************************************************/
N #else
N   #if defined(_AEABI_PORTABILITY_CHECK) && _AEABI_PORTABILITY_CHECK
X   #if 1L && (1L && 1L && 0L && _AEABI_PORTABILITY_LEVEL != 0)
S      #ifndef __cplusplus
S       typedef int  _Wchart;
S       typedef int  _Wintt;
S      #endif /* __cplusplus */
S      #define _WCMIN	0
S      #define _WCMAX	0xffffffff
N   #else 
N    #ifndef __cplusplus
N       typedef __WCHAR_T_TYPE__ _Wchart;
X       typedef unsigned short _Wchart;
N       typedef __WCHAR_T_TYPE__ _Wintt;
X       typedef unsigned short _Wintt;
N    #endif /* __cplusplus */
N    #define _WCMIN	0
N    #define _WCMAX	0xffff
N   #endif /* _AEABI_PORTABILITY_CHECK */
N #endif /* compiler/library type */
N
N		/* POINTER PROPERTIES */
N#define _NULL		0	/* 0L if pointer same as long */
N
N		/* signal PROPERTIES */
N
N#define _SIGABRT	6
N#define _SIGMAX		44
N
N		/* stdarg PROPERTIES */
Ntypedef _CSTD va_list _Va_list;
Xtypedef  va_list _Va_list;
N
N #if _HAS_C9X
X #if 0
S
S #if __EDG__
S  #undef va_copy
S #endif /* __EDG__ */
S
S #ifndef va_copy
S_EXTERN_C
Svoid _Vacopy(va_list *apd, va_list aps);
S_END_EXTERN_C
S  #define va_copy(apd, aps)	_Vacopy(&(apd), aps)
S #endif /* va_copy */
S
N #endif /* _IS_C9X */
N
N		/* stdlib PROPERTIES */
N#define _EXFAIL	1	/* EXIT_FAILURE */
N
N_EXTERN_C
X
Nvoid _Atexit(void (*fn)(void));
N_END_EXTERN_C
X
N
N		/* stdio PROPERTIES */
N#define _FNAMAX	256           /* Dinkum original value 260 */
N#define _FOPMAX	10            /* Dinkum original value 20 */
N#define _TNAMAX	16
N
N #define _FD_TYPE	signed char
N  #define _FD_NO(str) ((str)->_Handle)
N #define _FD_VALID(fd)	(0 <= (fd))	/* fd is signed integer */
N #define _FD_INVALID	(-1)
N #define _SYSCH(x)	(x)
Ntypedef char _Sysch_t;
N
N		/* STORAGE ALIGNMENT PROPERTIES */
N#define _MEMBND	3U /* eight-byte boundaries (2^^3) */
N
N		/* time PROPERTIES */
N  #if _AEABI_PORTABILITY_CHECK
X  #if (1L && 1L && 0L && _AEABI_PORTABILITY_LEVEL != 0)
S    #define _CPS (__aeabi_CLOCKS_PER_SEC)
N  #else
N    #define _CPS    1000
N  #endif /* _AEABI_PORTABILITY_CHECK */
N  #define _TBIAS	0
N_C_STD_END
X
N
N		/* MULTITHREAD PROPERTIES */
N #if _MULTI_THREAD
X #if 0
S_EXTERN_C
Svoid _Locksyslock(int);
Svoid _Unlocksyslock(int);
S_END_EXTERN_C
S
N #else /* _MULTI_THREAD */
N     #define _Locksyslock(x)   _lock()
N     #define _Unlocksyslock(x) _unlock()
N #endif /* _MULTI_THREAD */
N
N		/* LOCK MACROS */
N #define _LOCK_LOCALE	0
N #define _LOCK_MALLOC	1
N #define _LOCK_STREAM	2
N #define _LOCK_DEBUG	3
N #define _MAX_LOCK		4	/* one more than highest lock number */
N
N #if _IOSTREAM_OP_LOCKS
X #if 0
S  #define _MAYBE_LOCK
S
N #else /* _IOSTREAM_OP_LOCKS */
N  #define _MAYBE_LOCK	\
N	if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
X  #define _MAYBE_LOCK		if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
N #endif /* _IOSTREAM_OP_LOCKS */
N
N #ifdef __cplusplus
S_STD_BEGIN
Sextern "C++" {	/* in case of _C_AS_CPP */
S		/* CLASS _Lockit */
Sclass _Lockit
S	{	/* lock while object in existence -- MUST NEST */
Spublic:
S
S  #if !_MULTI_THREAD
S   #define _LOCKIT(x)
S
S	explicit _Lockit()
S		{	/* do nothing */
S		}
S
S	explicit _Lockit(int)
S		{	/* do nothing */
S		}
S
S	~_Lockit()
S		{	/* do nothing */
S		}
S
S  #else /* non-Windows multithreading */
S   #define _LOCKIT(x)	lockit x
S
S	explicit _Lockit()
S		: _Locktype(_LOCK_MALLOC)
S		{	/* set default lock */
S		_MAYBE_LOCK
S			_Locksyslock(_Locktype);
S		}
S
S	explicit _Lockit(int _Type)
S		: _Locktype(_Type)
S		{	/* set the lock */
S		_MAYBE_LOCK
S			_Locksyslock(_Locktype);
S		}
S
S	~_Lockit()
S		{	/* clear the lock */
S		_MAYBE_LOCK
S			_Unlocksyslock(_Locktype);
S		}
S
Sprivate:
S	int _Locktype;
S  #endif /* _MULTI_THREAD */
S
Spublic:
S	_Lockit(const _Lockit&);			/* not defined */
S	_Lockit& operator=(const _Lockit&);	/* not defined */
S	};
S
Sclass _Mutex
S	{	/* lock under program control */
Spublic:
S
S  #if !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS
S    void _Lock()
S		{	/* do nothing */
S		}
S
S	void _Unlock()
S		{	/* do nothing */
S	}
S
S  #else /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
S	_Mutex();
S	~_Mutex();
S	void _Lock();
S	void _Unlock();
S
Sprivate:
S	_Mutex(const _Mutex&);				/* not defined */
S	_Mutex& operator=(const _Mutex&);	/* not defined */
S	void *_Mtx;
S  #endif /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
S
S	};
S}	/* extern "C++" */
S_STD_END
N #endif /* __cplusplus */
N
N		/* MISCELLANEOUS MACROS */
N#define _ATEXIT_T	void
N
N#define _MAX	max
N#define _MIN	min
N
N#define _TEMPLATE_STAT
N
N #pragma diag_push
N #pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
N
N  #define _NO_RETURN(fun)	void fun
N
N #pragma diag_pop
N
N #if _HAS_NAMESPACE
X #if 1
N
N #ifdef __cplusplus
S  #ifndef _STDARG
S  #if defined(_STD_USING)
S_STD_BEGIN
Susing _CSTD va_list;
S_STD_END
S  #endif /* !defined(_C_AS_CPP) && defined(_GLOBAL_USING) */
S  #endif /* _STDARG */
N #endif /* __cplusplus */
N #endif /* _HAS_NAMESPACE */
N
N#include <linkage.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/linkage.h" 1
N/*****************************************************************************/
N/* linkage.h   v5.2.6                                                        */
N/*                                                                           */
N/* Copyright (c) 1998-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _LINKAGE
N#define _LINKAGE
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.4") /* macros required for implementation */
N
N/* No modifiers are needed to access code or data */
N
N#define _CODE_ACCESS
N#define _DATA_ACCESS
N#define _DATA_ACCESS_NEAR
N
N/*--------------------------------------------------------------------------*/
N/* Define _IDECL ==> how inline functions are declared                      */
N/*--------------------------------------------------------------------------*/
N#ifdef _INLINE
N#define _IDECL static __inline
N#define _IDEFN static __inline
N#define __INLINE static __inline
N#else
S#define _IDECL extern _CODE_ACCESS
S#define _IDEFN _CODE_ACCESS
S#define __INLINE __EXTERN
N#endif
N
N#pragma diag_pop
N
N#endif /* ifndef _LINKAGE */
L 691 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N#ifndef __LOCK_H
N#include <_lock.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/_lock.h" 1
N/*****************************************************************************/
N/*  _lock.h v5.2.6                                                           */
N/*                                                                           */
N/* Copyright (c) 2000-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef __LOCK_H
N#define __LOCK_H
N
N#include <linkage.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#pragma diag_push
N
N/* _nop(), _lock(), and _unlock() all accept zero or more optional arguments,
N   which must remain as empty rather than (void) parameter lists to avoid
N   breaking the API */
N#pragma CHECK_MISRA("-16.5")
N
N_CODE_ACCESS void _nop();
X void _nop();
N
Nextern _DATA_ACCESS void (  *_lock)();
Xextern  void (  *_lock)();
Nextern _DATA_ACCESS void (*_unlock)();
Xextern  void (*_unlock)();
N
N_CODE_ACCESS void _register_lock  (void (  *lock)());
X void _register_lock  (void (  *lock)());
N_CODE_ACCESS void _register_unlock(void (*unlock)());
X void _register_unlock(void (*unlock)());
N
N#pragma diag_pop
N
N#define SYSTEM_WIDE_LOCK_REGISTERED	(_lock != _nop)
N#define SYSTEM_WIDE_UNLOCK_REGISTERED	(_unlock != _nop)
N
N#ifdef __cplusplus
S} /* extern "C" */
N#endif
N
N#endif /* __LOCK_H */
L 693 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/yvals.h" 2
N#endif /* __LOCK_H */
N
N#pragma diag_pop
N
N#endif /* _YVALS */
N
N/*
N * Copyright (c) 1992-2004 by P.J. Plauger.  ALL RIGHTS RESERVED.
N * Consult your license regarding permissions and restrictions.
NV4.02:1476 */
N
L 6 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stdbool.h" 2
N#endif /* _YVALS */
N
N_C_STD_BEGIN
X
N
N #define __bool_true_false_are_defined	1
N
N #ifndef __cplusplus
N		/* TYPES */
N
N #if 199901L <= __STDC_VERSION__
X #if 199901L <= 199409L
S
S
N #else /* 199901L <= __STDC_VERSION__ */
N#if __TI_STRICT_ANSI_MODE__
X#if 0
Stypedef unsigned char _Bool;
N#endif
N #endif /* 199901L <= __STDC_VERSION__ */
N
N		/* MACROS */
N #define bool	_Bool
N #define false	0
N #define true	1
N #endif /* __cplusplus */
N
N_C_STD_END
X
N#endif /* _STDBOOL */
N
N/*
N * Copyright (c) 1992-2004 by P.J. Plauger.  ALL RIGHTS RESERVED.
N * Consult your license regarding permissions and restrictions.
NV4.02:1476 */
L 133 "C:/ti/tirtos_tivac_2_16_00_08/products/tidrivers_tivac_2_16_00_08/packages/ti/drivers/I2C.h" 2
N#include <stddef.h>
L 1 "C:/ti/ccsv8/tools/compiler/ti-cgt-arm_5.2.6/include/stddef.h" 1
N/*****************************************************************************/
N/* stddef.h   v5.2.6                                                         */
N/*                                                                           */
N/* Copyright (c) 1993-2015 Texas Instruments Incorporated                    */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N
N#ifndef _STDDEF
S#define _STDDEF
S
S#pragma diag_push
S#pragma CHECK_MISRA("-19.7") /* macros required for implementation */
S#pragma CHECK_MISRA("-20.1") /* standard headers must define standard names */
S#pragma CHECK_MISRA("-20.2") /* standard headers must define standard names */
S
S#ifdef __cplusplus
Sextern "C" namespace std {
S#endif
S
S#ifndef NULL
S#define NULL 0
S#endif
S
Stypedef __PTRDIFF_T_TYPE__ ptrdiff_t;
S
S#ifndef _SIZE_T
S#define _SIZE_T
Stypedef __SIZE_T_TYPE__ size_t;
S#endif
S
S#ifndef __cplusplus
S#ifndef _WCHAR_T
S#define _WCHAR_T
S
Stypedef __WCHAR_T_TYPE__ wchar_t;
S
S#endif /* _WCHAR_T */
S#endif /* ! __cplusplus */
S
S#pragma diag_push
S#pragma CHECK_MISRA("-19.10") /* need types as macro arguments */
S
S#ifdef __TI_LLVM__
S#  define offsetof(_type, _ident) __builtin_offsetof(_type, _ident)
S#else
S#    ifdef __cplusplus
S#      define offsetof(_type, _ident) \
S         ((std::size_t)__intaddr__(&(((_type *)0)->_ident)))
X#      define offsetof(_type, _ident)          ((std::size_t)__intaddr__(&(((_type *)0)->_ident)))
S#    else
S#      define offsetof(_type, _ident) \
S         ((size_t)__intaddr__(&(((_type *)0)->_ident)))
X#      define offsetof(_type, _ident)          ((size_t)__intaddr__(&(((_type *)0)->_ident)))
S#    endif
S#endif
S
S#ifdef __cplusplus
S} /* extern "C" namespace std */
S#endif  /* __cplusplus */
S
S#pragma diag_pop
S
N#endif  /* _STDDEF */
N
N#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
X#if 0L && !0L
Susing std::ptrdiff_t;
Susing std::size_t;
S/*using std::wchar_t;*/
N#endif /* _CPP_STYLE_HEADER */
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.15") /* code outside guard; see below comment */
N
N/*-----------------------------------------------------------------------*/
N/* Define _win_t, for compiling GCC libraries with the TI compiler.      */
N/* GCC's library (newlib) expects wint_t to be defined here, in stddef.h,*/
N/* which is arguably incorrect, but we go along for compatibility.       */
N/* This is outside the _STDDEF guard in case this file has already       */
N/* been included without __need_wint_t.                                  */
N/*-----------------------------------------------------------------------*/
N#if defined(__need_wint_t) && !defined(_WINT_T) 
X#if 0L && !0L 
S#if (__STDC_VERSION__ >= 199901L || !__TI_STRICT_ANSI_MODE__)
S
S#undef __need_wint_t
S#define _WINT_T
S#ifdef __cplusplus
S   extern "C" namespace std {
S#endif /* __cplusplus */
S
Stypedef unsigned int wint_t;
S
S#ifdef __cplusplus
S   } /* extern "C" namespace std { */
S#endif /* __cplusplus */
S
S#if defined(__cplusplus) && !defined(_CPP_STYLE_HEADER)
Susing std::wint_t;
S#endif /* _CPP_STYLE_HEADER */
S
S#endif /* __STDC_VERSION__ >= 199901L  */
N#endif
N
N#pragma diag_pop
L 134 "C:/ti/tirtos_tivac_2_16_00_08/products/tidrivers_tivac_2_16_00_08/packages/ti/drivers/I2C.h" 2
N
N/**
N *  @defgroup I2C_CONTROL I2C_control command and status codes
N *  These I2C macros are reservations for I2C.h
N *  @{
N */
N
N/*!
N * Common I2C_control command code reservation offset.
N * I2C driver implementations should offset command codes with I2C_CMD_RESERVED
N * growing positively
N *
N * Example implementation specific command codes:
N * @code
N * #define I2CXYZ_CMD_COMMAND0      I2C_CMD_RESERVED + 0
N * #define I2CXYZ_CMD_COMMAND1      I2C_CMD_RESERVED + 1
N * @endcode
N */
N#define I2C_CMD_RESERVED             32
N
N/*!
N * Common I2C_control status code reservation offset.
N * I2C driver implementations should offset status codes with
N * I2C_STATUS_RESERVED growing negatively.
N *
N * Example implementation specific status codes:
N * @code
N * #define I2CXYZ_STATUS_ERROR0     I2C_STATUS_RESERVED - 0
N * #define I2CXYZ_STATUS_ERROR1     I2C_STATUS_RESERVED - 1
N * #define I2CXYZ_STATUS_ERROR2     I2C_STATUS_RESERVED - 2
N * @endcode
N */
N#define I2C_STATUS_RESERVED         -32
N
N/**
N *  @defgroup I2C_STATUS Status Codes
N *  I2C_STATUS_* macros are general status codes returned by I2C_control()
N *  @{
N *  @ingroup I2C_CONTROL
N */
N
N/*!
N * @brief   Successful status code returned by I2C_control().
N *
N * I2C_control() returns I2C_STATUS_SUCCESS if the control code was executed
N * successfully.
N */
N#define I2C_STATUS_SUCCESS          0
N
N/*!
N * @brief   Generic error status code returned by I2C_control().
N *
N * I2C_control() returns I2C_STATUS_ERROR if the control code was not executed
N * successfully.
N */
N#define I2C_STATUS_ERROR           -1
N
N/*!
N * @brief   An error status code returned by I2C_control() for undefined
N * command codes.
N *
N * I2C_control() returns I2C_STATUS_UNDEFINEDCMD if the control code is not
N * recognized by the driver implementation.
N */
N#define I2C_STATUS_UNDEFINEDCMD   -2
N/** @}*/
N
N/**
N *  @defgroup I2C_CMD Command Codes
N *  I2C_CMD_* macros are general command codes for I2C_control(). Not all I2C
N *  driver implementations support these command codes.
N *  @{
N *  @ingroup I2C_CONTROL
N */
N
N/* Add I2C_CMD_<commands> here */
N
N/** @}*/
N
N/** @}*/
N
N/*!
N *  @brief      A handle that is returned from a I2C_open() call.
N */
Ntypedef struct I2C_Config      *I2C_Handle;
N
N/*!
N *  @brief  I2C transaction
N *
N *  This structure defines the nature of the I2C transaction. This structure
N *  specifies the buffer and buffer's size that is to be written to or read from
N *  the I2C slave peripheral.
N *  arg is an optional user supplied argument that will be passed
N *  to the callback function when the I2C driver is in I2C_MODE_CALLBACK.
N *  nextPtr is to be only used by the I2C driver.
N */
Ntypedef struct I2C_Transaction {
N    void    *writeBuf;    /*!< buffer containing data to be written */
N    size_t  writeCount;   /*!< Number of bytes to be written to the slave */
N
N    void    *readBuf;     /*!< buffer to which data is to be read into */
N    size_t  readCount;    /*!< Number of bytes to be read from the slave */
N
N    unsigned char slaveAddress; /*!< Address of the I2C slave device */
N
N    void    *arg;         /*!< argument to be passed to the callback function */
N    void    *nextPtr;     /*!< used for queuing in I2C_MODE_CALLBACK mode */
N} I2C_Transaction;
N
N/*!
N *  @brief  I2C transfer mode
N *
N *  I2C_MODE_BLOCKING block task execution while a I2C transfer is in progress
N *  I2C_MODE_CALLBACK does not block task execution; but calls a callback
N *  function when the I2C transfer has completed
N */
Ntypedef enum I2C_TransferMode {
N    I2C_MODE_BLOCKING,  /*!< I2C_transfer blocks execution*/
N    I2C_MODE_CALLBACK   /*!< I2C_transfer queues transactions and does not block */
N} I2C_TransferMode;
N
N/*!
N *  @brief  I2C callback function
N *
N *  User definable callback function prototype. The I2C driver will call the
N *  defined function and pass in the I2C driver's handle, the pointer to the I2C
N *  transaction that just completed, and the return value of I2C_transfer.
N *
N *  @param  I2C_Handle          I2C_Handle
N
N *  @param  I2C_Transaction*    Address of the I2C_Transaction performed
N
N *  @param  bool                Results of the I2C transaction
N */
Ntypedef void (*I2C_CallbackFxn)(I2C_Handle, I2C_Transaction *, bool);
Xtypedef void (*I2C_CallbackFxn)(I2C_Handle, I2C_Transaction *, _Bool);
N
N/*!
N *  @brief  I2C bitRate
N *
N *  Specify one of the standardized I2C bus bit rates for I2C communications.
N *  The default is I2C_100kHz.
N */
Ntypedef enum I2C_BitRate {
N    I2C_100kHz = 0,
N    I2C_400kHz = 1
N} I2C_BitRate;
N
N/*!
N *  @brief  I2C Parameters
N *
N *  I2C parameters are used to with the I2C_open() call. Default values for
N *  these parameters are set using I2C_Params_init().
N *
N *  If I2C_TransferMode is set to I2C_MODE_BLOCKING then I2C_transfer function
N *  calls will block thread execution until the transaction has completed.
N *
N *  If I2C_TransferMode is set to I2C_MODE_CALLBACK then I2C_transfer will not
N *  block thread execution and it will call the function specified by
N *  transferCallbackFxn. Sequential calls to I2C_transfer in I2C_MODE_CALLBACK
N *  mode will put the designated transaction onto an internal queue that
N *  automatically starts queued transactions after the previous transaction has
N *  completed. (regardless of error state).
N *
N *  I2C_BitRate specifies the I2C bus rate used for I2C communications.
N *
N *  @sa     I2C_Params_init()
N */
Ntypedef struct I2C_Params {
N    I2C_TransferMode    transferMode; /*!< Blocking or Callback mode */
N    I2C_CallbackFxn     transferCallbackFxn; /*!< Callback function pointer */
N    I2C_BitRate         bitRate; /*!< I2C bus bit rate */
N    uintptr_t           custom;  /*!< Custom argument used by driver
N                                      implementation */
N} I2C_Params;
N
N/*!
N *  @brief      A function pointer to a driver specific implementation of
N *              I2C_close().
N */
Ntypedef void        (*I2C_CloseFxn)    (I2C_Handle handle);
N
N/*!
N *  @brief      A function pointer to a driver specific implementation of
N *              I2C_control().
N */
Ntypedef int         (*I2C_ControlFxn)  (I2C_Handle handle,
N                                        unsigned int cmd,
N                                        void *arg);
N
N/*!
N *  @brief      A function pointer to a driver specific implementation of
N *              I2C_init().
N */
Ntypedef void        (*I2C_InitFxn)     (I2C_Handle handle);
N
N/*!
N *  @brief      A function pointer to a driver specific implementation of
N *              I2C_open().
N */
Ntypedef I2C_Handle  (*I2C_OpenFxn)     (I2C_Handle handle,
N                                        I2C_Params *params);
N
N/*!
N *  @brief      A function pointer to a driver specific implementation of
N *              I2C_transfer().
N */
Ntypedef bool        (*I2C_TransferFxn) (I2C_Handle handle,
Xtypedef _Bool        (*I2C_TransferFxn) (I2C_Handle handle,
N                                        I2C_Transaction *transaction);
N
N/*!
N *  @brief      The definition of a I2C function table that contains the
N *              required set of functions to control a specific I2C driver
N *              implementation.
N */
Ntypedef struct I2C_FxnTable {
N    /*! Function to close the specified peripheral */
N    I2C_CloseFxn        closeFxn;
N
N    /*! Function to implementation specific control function */
N    I2C_ControlFxn      controlFxn;
N
N    /*! Function to initialize the given data object */
N    I2C_InitFxn         initFxn;
N
N    /*! Function to open the specified peripheral */
N    I2C_OpenFxn         openFxn;
N
N    /*! Function to initiate a I2C data transfer */
N    I2C_TransferFxn     transferFxn;
N} I2C_FxnTable;
N
N/*!
N *  @brief  I2C Global configuration
N *
N *  The I2C_Config structure contains a set of pointers used to characterize
N *  the I2C driver implementation.
N *
N *  This structure needs to be defined before calling I2C_init() and it must
N *  not be changed thereafter.
N *
N *  @sa     I2C_init()
N */
Ntypedef struct I2C_Config {
N    /*! Pointer to a table of driver-specific implementations of I2C APIs */
N    I2C_FxnTable const *fxnTablePtr;
N
N    /*! Pointer to a driver specific data object */
N    void               *object;
N
N    /*! Pointer to a driver specific hardware attributes structure */
N    void         const *hwAttrs;
N} I2C_Config;
N
N
N/*!
N *  @brief  Function to close a I2C peripheral specified by the I2C handle
N *
N *  @pre    I2C_open() had to be called first.
N *
N *  @param  handle  A I2C_Handle returned from I2C_open
N *
N *  @sa     I2C_open()
N */
Nextern void I2C_close(I2C_Handle handle);
N
N/*!
N *  @brief  Function performs implementation specific features on a given
N *          I2C_Handle.
N *
N *  Commands for I2C_control can originate from I2C.h or from implementation
N *  specific I2C*.h (_I2CCC26XX.h_, _I2CTiva.h_, etc.. ) files.
N *  While commands from I2C.h are API portable across driver implementations,
N *  not all implementations may support all these commands.
N *  Conversely, commands from driver implementation specific I2C*.h files add
N *  unique driver capabilities but are not API portable across all I2C driver
N *  implementations.
N *
N *  Commands supported by I2C.h follow a I2C_CMD_\<cmd\> naming
N *  convention.<br>
N *  Commands supported by I2C*.h follow a I2C*_CMD_\<cmd\> naming
N *  convention.<br>
N *  Each control command defines @b arg differently. The types of @b arg are
N *  documented with each command.
N *
N *  See @ref I2C_CMD "I2C_control command codes" for command codes.
N *
N *  See @ref I2C_STATUS "I2C_control return status codes" for status codes.
N *
N *  @pre    I2C_open() has to be called first.
N *
N *  @param  handle      A I2C handle returned from I2C_open()
N *
N *  @param  cmd         I2C.h or I2C*.h commands.
N *
N *  @param  arg         An optional R/W (read/write) command argument
N *                      accompanied with cmd
N *
N *  @return Implementation specific return codes. Negative values indicate
N *          unsuccessful operations.
N *
N *  @sa     I2C_open()
N */
Nextern int I2C_control(I2C_Handle handle, unsigned int cmd, void *arg);
N
N/*!
N *  @brief  Function to initializes the I2C module
N *
N *  @pre    The I2C_config structure must exist and be persistent before this
N *          function can be called. This function must also be called before
N *          any other I2C driver APIs. This function call does not modify any
N *          peripheral registers.
N */
Nextern void I2C_init(void);
N
N/*!
N *  @brief  Function to initialize a given I2C peripheral specified by the
N *          particular index value. The parameter specifies which mode the I2C
N *          will operate.
N *
N *  @pre    I2C controller has been initialized
N *
N *  @param  index         Logical peripheral number for the I2C indexed into
N *                        the I2C_config table
N *
N *  @param  params        Pointer to an parameter block, if NULL it will use
N *                        default values. All the fields in this structure are
N *                        RO (read-only).
N *
N *  @return A I2C_Handle on success or a NULL on an error or if it has been
N *          opened already.
N *
N *  @sa     I2C_init()
N *  @sa     I2C_close()
N */
Nextern I2C_Handle I2C_open(unsigned int index, I2C_Params *params);
N
N/*!
N *  @brief  Function to initialize the I2C_Params struct to its defaults
N *
N *  @param  params      An pointer to I2C_Params structure for
N *                      initialization
N *
N *  Defaults values are:
N *      transferMode = I2C_MODE_BLOCKING
N *      transferCallbackFxn = NULL
N *      bitRate = I2C_100kHz
N */
Nextern void I2C_Params_init(I2C_Params *params);
N
N/*!
N *  @brief  Function to perform an I2C transaction with an I2C slave peripheral.
N *
N *  This function will start a I2C transfer and can only be called from a Task
N *  context when in I2C_MODE_BLOCKING.
N *  The I2C transfer procedure starts with evaluating how many bytes are to be
N *  written and how many are to be read from the I2C peripheral. Due to common
N *  I2C data transfer processes, to be written will always sent before any data
N *  is read.
N *
N *  The data written to the peripheral is preceded with the peripheral's 7-bit
N *  I2C slave address (with the Write bit set).
N *  After all the data has been transmitted, the driver will evaluate if any
N *  data needs to be read from the device.
N *  If so, a Re-START bit is sent, along with the same 7-bit I2C slave address
N *  (with the Read bit). Else, the transfer is concluded with a STOP bit.
N *  After the specified number of bytes have been read by the I2C, the transfer
N *  is ended with a NACK and STOP bit.
N *
N *  In I2C_MODE_BLOCKING, I2C_transfer will block task execution until the
N *  transaction has completed.
N *
N *  In I2C_MODE_CALLBACK, I2C_transfer does not block task execution and calls a
N *  callback function specified by transferCallbackFxn when the transfer
N *  completed. Success or failure of the transaction is determined via the
N *  callback function's bool argument. If a transfer is already taking place,
N *  the transaction is put on an internal queue. The queue is serviced in a
N *  first come first served basis.
N *  The I2C_Transaction structure must stay persistent until the I2C_transfer
N *  function has completed!
N *
N *  @param  handle      A I2C_Handle
N *
N *  @param  transaction A pointer to a I2C_Transaction. All of the fields within
N *                      transaction are WO (write-only) unless otherwise noted
N *                      in the driver implementations.
N *
N *  @return In I2C_MODE_BLOCKING: true on successful transfer; false on an
N *          error, such as an I2C bus fault (NACK).
N *          In I2C_MODE_CALLBACK: always true. The transferCallbackFxn's bool
N *          argument will be true if successful; false on an error, such as an
N *          I2C bus fault (NACK).
N *
N *  @sa     I2C_open
N */
Nextern bool I2C_transfer(I2C_Handle handle, I2C_Transaction *transaction);
Xextern _Bool I2C_transfer(I2C_Handle handle, I2C_Transaction *transaction);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* ti_drivers_I2C__include */
L 45 "../bme280.c" 2
N
N#include "bme280.h"
L 1 "..\bme280.h" 1
N/*
N * @file bme280.h
N * @brief BME280 Library Header
N * @headerfile <>
N * @details Bosch Sensortec BME280 driver library for TI-RTOS using I2C bus
N *
N * @author Eric Brundick
N * @date 2016
N * @version 100
N * @copyright (C) 2016 Eric Brundick spirilis at linux dot com
N *  @n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
N *  @n (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
N *  @n publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to
N *  @n do so, subject to the following conditions:
N *  @n
N *  @n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
N *  @n
N *  @n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
N *  @n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
N *  @n BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
N *  @n OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
N *  @n
N *  @n Parts of this codebase derive from BOSCH SENSORTEC calibration compensation example code and is provided by BOSCH with no
N *  @n implied warranty.  The end-user assumes all responsibility for the performance of this codebase.
N *  @n BOSCH SENSORTEC also states in their datasheet the end-user bears all risk for the use of this product and they do not consider
N *  @n the product suitable for life-sustaining or security sensitive systems.
N *  @n
N *  @n A copy of the BME280 product datasheet may be found on BOSCH SENSORTEC's product page:
N *  @n https://www.bosch-sensortec.com/bst/products/all_products/bme280
N *
N */
N
N#ifndef BME280_H_
N#define BME280_H_
N
N/* Bosch Sensortec BME280 API using TI Drivers I2C */
N#include <ti/drivers/I2C.h>
N#include <ti/sysbios/knl/Semaphore.h>
L 1 "C:/ti/tirtos_tivac_2_16_00_08/products/bios_6_45_01_29/packages/ti/sysbios/knl/Semaphore.h" 1
N/*
N *  Do not modify this file; it is automatically 
N *  generated and any modifications will be overwritten.
N *
N * @(#) xdc-B06
N */
N
N/*
N * ======== GENERATED SECTIONS ========
N *     
N *     PROLOGUE
N *     INCLUDES
N *     
N *     CREATE ARGS
N *     INTERNAL DEFINITIONS
N *     MODULE-WIDE CONFIGS
N *     PER-INSTANCE TYPES
N *     FUNCTION DECLARATIONS
N *     SYSTEM FUNCTIONS
N *     
N *     EPILOGUE
N *     STATE STRUCTURES
N *     PREFIX ALIASES
N */
N
N
N/*
N * ======== PROLOGUE ========
N */
N
N#ifndef ti_sysbios_knl_Semaphore__include
S#define ti_sysbios_knl_Semaphore__include
S
S#ifndef __nested__
S#define __nested__
S#define ti_sysbios_knl_Semaphore__top__
S#endif
S
S#ifdef __cplusplus
S#define __extern extern "C"
S#else
S#define __extern extern
S#endif
S
S#define ti_sysbios_knl_Semaphore___VERS 160
S
S
S/*
S * ======== INCLUDES ========
S */
S
S#include <xdc/std.h>
S
S#include <xdc/runtime/xdc.h>
S#include <xdc/runtime/Types.h>
S#include <xdc/runtime/IInstance.h>
S#include <ti/sysbios/knl/package/package.defs.h>
S
S#include <xdc/runtime/Diags.h>
S#include <xdc/runtime/Log.h>
S#include <xdc/runtime/Assert.h>
S#include <ti/sysbios/knl/Queue.h>
S#include <ti/sysbios/knl/Task.h>
S#include <ti/sysbios/knl/Clock.h>
S#include <xdc/runtime/IModule.h>
S#include <ti/sysbios/knl/Event.h>
S
S
S/*
S * ======== AUXILIARY DEFINITIONS ========
S */
S
S/* Mode */
Senum ti_sysbios_knl_Semaphore_Mode {
S    ti_sysbios_knl_Semaphore_Mode_COUNTING = 0x0,
S    ti_sysbios_knl_Semaphore_Mode_BINARY = 0x1,
S    ti_sysbios_knl_Semaphore_Mode_COUNTING_PRIORITY = 0x2,
S    ti_sysbios_knl_Semaphore_Mode_BINARY_PRIORITY = 0x3
S};
Stypedef enum ti_sysbios_knl_Semaphore_Mode ti_sysbios_knl_Semaphore_Mode;
S
S
S/*
S * ======== CREATE ARGS ========
S */
S
S/* Args__create */
Stypedef struct ti_sysbios_knl_Semaphore_Args__create {
S    xdc_Int count;
S} ti_sysbios_knl_Semaphore_Args__create;
S
S
S/*
S * ======== INTERNAL DEFINITIONS ========
S */
S
S/* PendState */
Senum ti_sysbios_knl_Semaphore_PendState {
S    ti_sysbios_knl_Semaphore_PendState_TIMEOUT = 0,
S    ti_sysbios_knl_Semaphore_PendState_POSTED = 1,
S    ti_sysbios_knl_Semaphore_PendState_CLOCK_WAIT = 2,
S    ti_sysbios_knl_Semaphore_PendState_WAIT_FOREVER = 3
S};
Stypedef enum ti_sysbios_knl_Semaphore_PendState ti_sysbios_knl_Semaphore_PendState;
S
S/* PendElem */
Sstruct ti_sysbios_knl_Semaphore_PendElem {
S    ti_sysbios_knl_Task_PendElem tpElem;
S    ti_sysbios_knl_Semaphore_PendState pendState;
S};
S
S
S/*
S * ======== MODULE-WIDE CONFIGS ========
S */
S
S/* Module__diagsEnabled */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Semaphore_Module__diagsEnabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsEnabled ti_sysbios_knl_Semaphore_Module__diagsEnabled__C;
S
S/* Module__diagsIncluded */
Stypedef xdc_Bits32 CT__ti_sysbios_knl_Semaphore_Module__diagsIncluded;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsIncluded ti_sysbios_knl_Semaphore_Module__diagsIncluded__C;
S
S/* Module__diagsMask */
Stypedef xdc_Bits16 *CT__ti_sysbios_knl_Semaphore_Module__diagsMask;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__diagsMask ti_sysbios_knl_Semaphore_Module__diagsMask__C;
S
S/* Module__gateObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__gateObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__gateObj ti_sysbios_knl_Semaphore_Module__gateObj__C;
S
S/* Module__gatePrms */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__gatePrms;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__gatePrms ti_sysbios_knl_Semaphore_Module__gatePrms__C;
S
S/* Module__id */
Stypedef xdc_runtime_Types_ModuleId CT__ti_sysbios_knl_Semaphore_Module__id;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__id ti_sysbios_knl_Semaphore_Module__id__C;
S
S/* Module__loggerDefined */
Stypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_Module__loggerDefined;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerDefined ti_sysbios_knl_Semaphore_Module__loggerDefined__C;
S
S/* Module__loggerObj */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Module__loggerObj;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerObj ti_sysbios_knl_Semaphore_Module__loggerObj__C;
S
S/* Module__loggerFxn0 */
Stypedef xdc_runtime_Types_LoggerFxn0 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn0;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn0 ti_sysbios_knl_Semaphore_Module__loggerFxn0__C;
S
S/* Module__loggerFxn1 */
Stypedef xdc_runtime_Types_LoggerFxn1 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn1;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn1 ti_sysbios_knl_Semaphore_Module__loggerFxn1__C;
S
S/* Module__loggerFxn2 */
Stypedef xdc_runtime_Types_LoggerFxn2 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn2;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn2 ti_sysbios_knl_Semaphore_Module__loggerFxn2__C;
S
S/* Module__loggerFxn4 */
Stypedef xdc_runtime_Types_LoggerFxn4 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn4;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn4 ti_sysbios_knl_Semaphore_Module__loggerFxn4__C;
S
S/* Module__loggerFxn8 */
Stypedef xdc_runtime_Types_LoggerFxn8 CT__ti_sysbios_knl_Semaphore_Module__loggerFxn8;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__loggerFxn8 ti_sysbios_knl_Semaphore_Module__loggerFxn8__C;
S
S/* Module__startupDoneFxn */
Stypedef xdc_Bool (*CT__ti_sysbios_knl_Semaphore_Module__startupDoneFxn)(void);
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Module__startupDoneFxn ti_sysbios_knl_Semaphore_Module__startupDoneFxn__C;
S
S/* Object__count */
Stypedef xdc_Int CT__ti_sysbios_knl_Semaphore_Object__count;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__count ti_sysbios_knl_Semaphore_Object__count__C;
S
S/* Object__heap */
Stypedef xdc_runtime_IHeap_Handle CT__ti_sysbios_knl_Semaphore_Object__heap;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__heap ti_sysbios_knl_Semaphore_Object__heap__C;
S
S/* Object__sizeof */
Stypedef xdc_SizeT CT__ti_sysbios_knl_Semaphore_Object__sizeof;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__sizeof ti_sysbios_knl_Semaphore_Object__sizeof__C;
S
S/* Object__table */
Stypedef xdc_Ptr CT__ti_sysbios_knl_Semaphore_Object__table;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_Object__table ti_sysbios_knl_Semaphore_Object__table__C;
S
S/* LM_post */
S#define ti_sysbios_knl_Semaphore_LM_post (ti_sysbios_knl_Semaphore_LM_post__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Semaphore_LM_post;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_LM_post ti_sysbios_knl_Semaphore_LM_post__C;
S
S/* LM_pend */
S#define ti_sysbios_knl_Semaphore_LM_pend (ti_sysbios_knl_Semaphore_LM_pend__C)
Stypedef xdc_runtime_Log_Event CT__ti_sysbios_knl_Semaphore_LM_pend;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_LM_pend ti_sysbios_knl_Semaphore_LM_pend__C;
S
S/* A_noEvents */
S#define ti_sysbios_knl_Semaphore_A_noEvents (ti_sysbios_knl_Semaphore_A_noEvents__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_noEvents;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_noEvents ti_sysbios_knl_Semaphore_A_noEvents__C;
S
S/* A_invTimeout */
S#define ti_sysbios_knl_Semaphore_A_invTimeout (ti_sysbios_knl_Semaphore_A_invTimeout__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_invTimeout;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_invTimeout ti_sysbios_knl_Semaphore_A_invTimeout__C;
S
S/* A_badContext */
S#define ti_sysbios_knl_Semaphore_A_badContext (ti_sysbios_knl_Semaphore_A_badContext__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_badContext;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_badContext ti_sysbios_knl_Semaphore_A_badContext__C;
S
S/* A_overflow */
S#define ti_sysbios_knl_Semaphore_A_overflow (ti_sysbios_knl_Semaphore_A_overflow__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_overflow;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_overflow ti_sysbios_knl_Semaphore_A_overflow__C;
S
S/* A_pendTaskDisabled */
S#define ti_sysbios_knl_Semaphore_A_pendTaskDisabled (ti_sysbios_knl_Semaphore_A_pendTaskDisabled__C)
Stypedef xdc_runtime_Assert_Id CT__ti_sysbios_knl_Semaphore_A_pendTaskDisabled;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_A_pendTaskDisabled ti_sysbios_knl_Semaphore_A_pendTaskDisabled__C;
S
S/* supportsEvents */
S#ifdef ti_sysbios_knl_Semaphore_supportsEvents__D
S#define ti_sysbios_knl_Semaphore_supportsEvents (ti_sysbios_knl_Semaphore_supportsEvents__D)
S#else
S#define ti_sysbios_knl_Semaphore_supportsEvents (ti_sysbios_knl_Semaphore_supportsEvents__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_supportsEvents;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_supportsEvents ti_sysbios_knl_Semaphore_supportsEvents__C;
S#endif
S
S/* supportsPriority */
S#ifdef ti_sysbios_knl_Semaphore_supportsPriority__D
S#define ti_sysbios_knl_Semaphore_supportsPriority (ti_sysbios_knl_Semaphore_supportsPriority__D)
S#else
S#define ti_sysbios_knl_Semaphore_supportsPriority (ti_sysbios_knl_Semaphore_supportsPriority__C)
Stypedef xdc_Bool CT__ti_sysbios_knl_Semaphore_supportsPriority;
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_supportsPriority ti_sysbios_knl_Semaphore_supportsPriority__C;
S#endif
S
S/* eventPost */
S#define ti_sysbios_knl_Semaphore_eventPost (ti_sysbios_knl_Semaphore_eventPost__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Semaphore_eventPost)(ti_sysbios_knl_Event_Handle, xdc_UInt);
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_eventPost ti_sysbios_knl_Semaphore_eventPost__C;
S
S/* eventSync */
S#define ti_sysbios_knl_Semaphore_eventSync (ti_sysbios_knl_Semaphore_eventSync__C)
Stypedef xdc_Void (*CT__ti_sysbios_knl_Semaphore_eventSync)(ti_sysbios_knl_Event_Handle, xdc_UInt, xdc_UInt);
S__extern __FAR__ const CT__ti_sysbios_knl_Semaphore_eventSync ti_sysbios_knl_Semaphore_eventSync__C;
S
S
S/*
S * ======== PER-INSTANCE TYPES ========
S */
S
S/* Params */
Sstruct ti_sysbios_knl_Semaphore_Params {
S    size_t __size;
S    const void *__self;
S    void *__fxns;
S    xdc_runtime_IInstance_Params *instance;
S    ti_sysbios_knl_Event_Handle event;
S    xdc_UInt eventId;
S    ti_sysbios_knl_Semaphore_Mode mode;
S    xdc_runtime_IInstance_Params __iprms;
S};
S
S/* Struct */
Sstruct ti_sysbios_knl_Semaphore_Struct {
S    ti_sysbios_knl_Event_Handle __f0;
S    xdc_UInt __f1;
S    ti_sysbios_knl_Semaphore_Mode __f2;
S    volatile xdc_UInt16 __f3;
S    ti_sysbios_knl_Queue_Struct __f4;
S    xdc_runtime_Types_CordAddr __name;
S};
S
S
S/*
S * ======== FUNCTION DECLARATIONS ========
S */
S
S/* Module_startup */
S#define ti_sysbios_knl_Semaphore_Module_startup( state ) (-1)
S
S/* Instance_init__E */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Instance_init__E, "ti_sysbios_knl_Semaphore_Instance_init")
S__extern xdc_Void ti_sysbios_knl_Semaphore_Instance_init__E(ti_sysbios_knl_Semaphore_Object *, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *);
S
S/* Instance_finalize__E */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Instance_finalize__E, "ti_sysbios_knl_Semaphore_Instance_finalize")
S__extern void ti_sysbios_knl_Semaphore_Instance_finalize__E( ti_sysbios_knl_Semaphore_Object* );
S
S/* Handle__label__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Handle__label__S, "ti_sysbios_knl_Semaphore_Handle__label__S")
S__extern xdc_runtime_Types_Label *ti_sysbios_knl_Semaphore_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label *lab );
S
S/* Module__startupDone__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Module__startupDone__S, "ti_sysbios_knl_Semaphore_Module__startupDone__S")
S__extern xdc_Bool ti_sysbios_knl_Semaphore_Module__startupDone__S( void );
S
S/* Object__create__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__create__S, "ti_sysbios_knl_Semaphore_Object__create__S")
S__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar *__pa, xdc_SizeT __psz, xdc_runtime_Error_Block *__eb );
S
S/* create */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_create, "ti_sysbios_knl_Semaphore_create")
S__extern ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_create( xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms, xdc_runtime_Error_Block *__eb );
S
S/* construct */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_construct, "ti_sysbios_knl_Semaphore_construct")
S__extern void ti_sysbios_knl_Semaphore_construct( ti_sysbios_knl_Semaphore_Struct *__obj, xdc_Int count, const ti_sysbios_knl_Semaphore_Params *__prms );
S
S/* Object__delete__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__delete__S, "ti_sysbios_knl_Semaphore_Object__delete__S")
S__extern xdc_Void ti_sysbios_knl_Semaphore_Object__delete__S( xdc_Ptr instp );
S
S/* delete */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_delete, "ti_sysbios_knl_Semaphore_delete")
S__extern void ti_sysbios_knl_Semaphore_delete(ti_sysbios_knl_Semaphore_Handle *instp);
S
S/* Object__destruct__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__destruct__S, "ti_sysbios_knl_Semaphore_Object__destruct__S")
S__extern xdc_Void ti_sysbios_knl_Semaphore_Object__destruct__S( xdc_Ptr objp );
S
S/* destruct */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_destruct, "ti_sysbios_knl_Semaphore_destruct")
S__extern void ti_sysbios_knl_Semaphore_destruct(ti_sysbios_knl_Semaphore_Struct *obj);
S
S/* Object__get__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__get__S, "ti_sysbios_knl_Semaphore_Object__get__S")
S__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__get__S( xdc_Ptr oarr, xdc_Int i );
S
S/* Object__first__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__first__S, "ti_sysbios_knl_Semaphore_Object__first__S")
S__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__first__S( void );
S
S/* Object__next__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Object__next__S, "ti_sysbios_knl_Semaphore_Object__next__S")
S__extern xdc_Ptr ti_sysbios_knl_Semaphore_Object__next__S( xdc_Ptr obj );
S
S/* Params__init__S */
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_Params__init__S, "ti_sysbios_knl_Semaphore_Params__init__S")
S__extern xdc_Void ti_sysbios_knl_Semaphore_Params__init__S( xdc_Ptr dst, const xdc_Void *src, xdc_SizeT psz, xdc_SizeT isz );
S
S/* getCount__E */
S#define ti_sysbios_knl_Semaphore_getCount ti_sysbios_knl_Semaphore_getCount__E
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_getCount__E, "ti_sysbios_knl_Semaphore_getCount")
S__extern xdc_Int ti_sysbios_knl_Semaphore_getCount__E( ti_sysbios_knl_Semaphore_Handle __inst );
S
S/* pend__E */
S#define ti_sysbios_knl_Semaphore_pend ti_sysbios_knl_Semaphore_pend__E
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_pend__E, "ti_sysbios_knl_Semaphore_pend")
S__extern xdc_Bool ti_sysbios_knl_Semaphore_pend__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_UInt32 timeout );
S
S/* post__E */
S#define ti_sysbios_knl_Semaphore_post ti_sysbios_knl_Semaphore_post__E
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_post__E, "ti_sysbios_knl_Semaphore_post")
S__extern xdc_Void ti_sysbios_knl_Semaphore_post__E( ti_sysbios_knl_Semaphore_Handle __inst );
S
S/* registerEvent__E */
S#define ti_sysbios_knl_Semaphore_registerEvent ti_sysbios_knl_Semaphore_registerEvent__E
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_registerEvent__E, "ti_sysbios_knl_Semaphore_registerEvent")
S__extern xdc_Void ti_sysbios_knl_Semaphore_registerEvent__E( ti_sysbios_knl_Semaphore_Handle __inst, ti_sysbios_knl_Event_Handle event, xdc_UInt eventId );
S
S/* reset__E */
S#define ti_sysbios_knl_Semaphore_reset ti_sysbios_knl_Semaphore_reset__E
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_reset__E, "ti_sysbios_knl_Semaphore_reset")
S__extern xdc_Void ti_sysbios_knl_Semaphore_reset__E( ti_sysbios_knl_Semaphore_Handle __inst, xdc_Int count );
S
S/* pendTimeout__I */
S#define ti_sysbios_knl_Semaphore_pendTimeout ti_sysbios_knl_Semaphore_pendTimeout__I
Sxdc__CODESECT(ti_sysbios_knl_Semaphore_pendTimeout__I, "ti_sysbios_knl_Semaphore_pendTimeout")
S__extern xdc_Void ti_sysbios_knl_Semaphore_pendTimeout__I( xdc_UArg arg );
S
S
S/*
S * ======== SYSTEM FUNCTIONS ========
S */
S
S/* Module_startupDone */
S#define ti_sysbios_knl_Semaphore_Module_startupDone() ti_sysbios_knl_Semaphore_Module__startupDone__S()
S
S/* Object_heap */
S#define ti_sysbios_knl_Semaphore_Object_heap() ti_sysbios_knl_Semaphore_Object__heap__C
S
S/* Module_heap */
S#define ti_sysbios_knl_Semaphore_Module_heap() ti_sysbios_knl_Semaphore_Object__heap__C
S
S/* Module_id */
Sstatic inline CT__ti_sysbios_knl_Semaphore_Module__id ti_sysbios_knl_Semaphore_Module_id( void ) 
S{
S    return ti_sysbios_knl_Semaphore_Module__id__C;
S}
S
S/* Module_hasMask */
Sstatic inline xdc_Bool ti_sysbios_knl_Semaphore_Module_hasMask( void ) 
S{
S    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL;
S}
S
S/* Module_getMask */
Sstatic inline xdc_Bits16 ti_sysbios_knl_Semaphore_Module_getMask( void ) 
S{
S    return ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL ? *ti_sysbios_knl_Semaphore_Module__diagsMask__C : 0;
S}
S
S/* Module_setMask */
Sstatic inline xdc_Void ti_sysbios_knl_Semaphore_Module_setMask( xdc_Bits16 mask ) 
S{
S    if (ti_sysbios_knl_Semaphore_Module__diagsMask__C != NULL) *ti_sysbios_knl_Semaphore_Module__diagsMask__C = mask;
S}
S
S/* Params_init */
Sstatic inline void ti_sysbios_knl_Semaphore_Params_init( ti_sysbios_knl_Semaphore_Params *prms ) 
S{
S    if (prms) {
S        ti_sysbios_knl_Semaphore_Params__init__S(prms, 0, sizeof(ti_sysbios_knl_Semaphore_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Params_copy */
Sstatic inline void ti_sysbios_knl_Semaphore_Params_copy(ti_sysbios_knl_Semaphore_Params *dst, const ti_sysbios_knl_Semaphore_Params *src) 
S{
S    if (dst) {
S        ti_sysbios_knl_Semaphore_Params__init__S(dst, (const void *)src, sizeof(ti_sysbios_knl_Semaphore_Params), sizeof(xdc_runtime_IInstance_Params));
S    }
S}
S
S/* Object_count */
S#define ti_sysbios_knl_Semaphore_Object_count() ti_sysbios_knl_Semaphore_Object__count__C
S
S/* Object_sizeof */
S#define ti_sysbios_knl_Semaphore_Object_sizeof() ti_sysbios_knl_Semaphore_Object__sizeof__C
S
S/* Object_get */
Sstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_get(ti_sysbios_knl_Semaphore_Instance_State *oarr, int i) 
S{
S    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__get__S(oarr, i);
S}
S
S/* Object_first */
Sstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_first( void )
S{
S    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__first__S();
S}
S
S/* Object_next */
Sstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_Object_next( ti_sysbios_knl_Semaphore_Object *obj )
S{
S    return (ti_sysbios_knl_Semaphore_Handle)ti_sysbios_knl_Semaphore_Object__next__S(obj);
S}
S
S/* Handle_label */
Sstatic inline xdc_runtime_Types_Label *ti_sysbios_knl_Semaphore_Handle_label( ti_sysbios_knl_Semaphore_Handle inst, xdc_runtime_Types_Label *lab )
S{
S    return ti_sysbios_knl_Semaphore_Handle__label__S(inst, lab);
S}
S
S/* Handle_name */
Sstatic inline xdc_String ti_sysbios_knl_Semaphore_Handle_name( ti_sysbios_knl_Semaphore_Handle inst )
S{
S    xdc_runtime_Types_Label lab;
S    return ti_sysbios_knl_Semaphore_Handle__label__S(inst, &lab)->iname;
S}
S
S/* handle */
Sstatic inline ti_sysbios_knl_Semaphore_Handle ti_sysbios_knl_Semaphore_handle( ti_sysbios_knl_Semaphore_Struct *str )
S{
S    return (ti_sysbios_knl_Semaphore_Handle)str;
S}
S
S/* struct */
Sstatic inline ti_sysbios_knl_Semaphore_Struct *ti_sysbios_knl_Semaphore_struct( ti_sysbios_knl_Semaphore_Handle inst )
S{
S    return (ti_sysbios_knl_Semaphore_Struct*)inst;
S}
S
S
S/*
S * ======== EPILOGUE ========
S */
S
S#ifdef ti_sysbios_knl_Semaphore__top__
S#undef __nested__
S#endif
S
N#endif /* ti_sysbios_knl_Semaphore__include */
N
N
N/*
N * ======== STATE STRUCTURES ========
N */
N
N#if defined(__config__) || (!defined(__nested__) && defined(ti_sysbios_knl_Semaphore__internalaccess))
X#if 0L || (!0L && 0L)
S
S#ifndef ti_sysbios_knl_Semaphore__include_state
S#define ti_sysbios_knl_Semaphore__include_state
S
S/* Object */
Sstruct ti_sysbios_knl_Semaphore_Object {
S    ti_sysbios_knl_Event_Handle event;
S    xdc_UInt eventId;
S    ti_sysbios_knl_Semaphore_Mode mode;
S    volatile xdc_UInt16 count;
S    char __dummy;
S};
S
S/* Instance_State_pendQ */
S__extern __FAR__ const xdc_SizeT ti_sysbios_knl_Semaphore_Instance_State_pendQ__O;
Sstatic inline ti_sysbios_knl_Queue_Handle ti_sysbios_knl_Semaphore_Instance_State_pendQ(ti_sysbios_knl_Semaphore_Object *obj)
S{
S    return (ti_sysbios_knl_Queue_Handle)(((char*)obj) + ti_sysbios_knl_Semaphore_Instance_State_pendQ__O);
S}
S
S#endif /* ti_sysbios_knl_Semaphore__include_state */
S
N#endif
N
N
N/*
N * ======== PREFIX ALIASES ========
N */
N
N#if !defined(__nested__) && !defined(ti_sysbios_knl_Semaphore__nolocalnames)
X#if !0L && !0L
N
N#ifndef ti_sysbios_knl_Semaphore__localnames__done
S#define ti_sysbios_knl_Semaphore__localnames__done
S
S/* module prefix */
S#define Semaphore_Instance ti_sysbios_knl_Semaphore_Instance
S#define Semaphore_Handle ti_sysbios_knl_Semaphore_Handle
S#define Semaphore_Module ti_sysbios_knl_Semaphore_Module
S#define Semaphore_Object ti_sysbios_knl_Semaphore_Object
S#define Semaphore_Struct ti_sysbios_knl_Semaphore_Struct
S#define Semaphore_Mode ti_sysbios_knl_Semaphore_Mode
S#define Semaphore_PendState ti_sysbios_knl_Semaphore_PendState
S#define Semaphore_PendElem ti_sysbios_knl_Semaphore_PendElem
S#define Semaphore_Instance_State ti_sysbios_knl_Semaphore_Instance_State
S#define Semaphore_Mode_COUNTING ti_sysbios_knl_Semaphore_Mode_COUNTING
S#define Semaphore_Mode_BINARY ti_sysbios_knl_Semaphore_Mode_BINARY
S#define Semaphore_Mode_COUNTING_PRIORITY ti_sysbios_knl_Semaphore_Mode_COUNTING_PRIORITY
S#define Semaphore_Mode_BINARY_PRIORITY ti_sysbios_knl_Semaphore_Mode_BINARY_PRIORITY
S#define Semaphore_PendState_TIMEOUT ti_sysbios_knl_Semaphore_PendState_TIMEOUT
S#define Semaphore_PendState_POSTED ti_sysbios_knl_Semaphore_PendState_POSTED
S#define Semaphore_PendState_CLOCK_WAIT ti_sysbios_knl_Semaphore_PendState_CLOCK_WAIT
S#define Semaphore_PendState_WAIT_FOREVER ti_sysbios_knl_Semaphore_PendState_WAIT_FOREVER
S#define Semaphore_LM_post ti_sysbios_knl_Semaphore_LM_post
S#define Semaphore_LM_pend ti_sysbios_knl_Semaphore_LM_pend
S#define Semaphore_A_noEvents ti_sysbios_knl_Semaphore_A_noEvents
S#define Semaphore_A_invTimeout ti_sysbios_knl_Semaphore_A_invTimeout
S#define Semaphore_A_badContext ti_sysbios_knl_Semaphore_A_badContext
S#define Semaphore_A_overflow ti_sysbios_knl_Semaphore_A_overflow
S#define Semaphore_A_pendTaskDisabled ti_sysbios_knl_Semaphore_A_pendTaskDisabled
S#define Semaphore_supportsEvents ti_sysbios_knl_Semaphore_supportsEvents
S#define Semaphore_supportsPriority ti_sysbios_knl_Semaphore_supportsPriority
S#define Semaphore_eventPost ti_sysbios_knl_Semaphore_eventPost
S#define Semaphore_eventSync ti_sysbios_knl_Semaphore_eventSync
S#define Semaphore_Instance_State_pendQ ti_sysbios_knl_Semaphore_Instance_State_pendQ
S#define Semaphore_Params ti_sysbios_knl_Semaphore_Params
S#define Semaphore_getCount ti_sysbios_knl_Semaphore_getCount
S#define Semaphore_pend ti_sysbios_knl_Semaphore_pend
S#define Semaphore_post ti_sysbios_knl_Semaphore_post
S#define Semaphore_registerEvent ti_sysbios_knl_Semaphore_registerEvent
S#define Semaphore_reset ti_sysbios_knl_Semaphore_reset
S#define Semaphore_Module_name ti_sysbios_knl_Semaphore_Module_name
S#define Semaphore_Module_id ti_sysbios_knl_Semaphore_Module_id
S#define Semaphore_Module_startup ti_sysbios_knl_Semaphore_Module_startup
S#define Semaphore_Module_startupDone ti_sysbios_knl_Semaphore_Module_startupDone
S#define Semaphore_Module_hasMask ti_sysbios_knl_Semaphore_Module_hasMask
S#define Semaphore_Module_getMask ti_sysbios_knl_Semaphore_Module_getMask
S#define Semaphore_Module_setMask ti_sysbios_knl_Semaphore_Module_setMask
S#define Semaphore_Object_heap ti_sysbios_knl_Semaphore_Object_heap
S#define Semaphore_Module_heap ti_sysbios_knl_Semaphore_Module_heap
S#define Semaphore_construct ti_sysbios_knl_Semaphore_construct
S#define Semaphore_create ti_sysbios_knl_Semaphore_create
S#define Semaphore_handle ti_sysbios_knl_Semaphore_handle
S#define Semaphore_struct ti_sysbios_knl_Semaphore_struct
S#define Semaphore_Handle_label ti_sysbios_knl_Semaphore_Handle_label
S#define Semaphore_Handle_name ti_sysbios_knl_Semaphore_Handle_name
S#define Semaphore_Instance_init ti_sysbios_knl_Semaphore_Instance_init
S#define Semaphore_Object_count ti_sysbios_knl_Semaphore_Object_count
S#define Semaphore_Object_get ti_sysbios_knl_Semaphore_Object_get
S#define Semaphore_Object_first ti_sysbios_knl_Semaphore_Object_first
S#define Semaphore_Object_next ti_sysbios_knl_Semaphore_Object_next
S#define Semaphore_Object_sizeof ti_sysbios_knl_Semaphore_Object_sizeof
S#define Semaphore_Params_copy ti_sysbios_knl_Semaphore_Params_copy
S#define Semaphore_Params_init ti_sysbios_knl_Semaphore_Params_init
S#define Semaphore_Instance_finalize ti_sysbios_knl_Semaphore_Instance_finalize
S#define Semaphore_delete ti_sysbios_knl_Semaphore_delete
S#define Semaphore_destruct ti_sysbios_knl_Semaphore_destruct
S
N#endif /* ti_sysbios_knl_Semaphore__localnames__done */
N#endif
L 39 "..\bme280.h" 2
N
N/// @brief Default I2C Slave address for the BME280
N#define BOSCH_SENSORTEC_BME280_I2CSLAVE_DEFAULT 0x77
N
N/// @brief Time between RESET and communication ready (actually 2ms)
N#define BME280_RESET_SETTLING_TIME 3
N
N/// @details If this is defined, BME280_readMeasurements() will System_printf(".\r\n"); every time the
N///          STATUS register is found to have MEASURING==1 or IM_UPDATE==1
N#define BME280_DEBUG_STATUS_POLLING 1
N/// @details If this is defined, BME280_open() will report detailed errors using System_printf() for why
N///          it failed to open.
N#define BME280_DEBUG_OPEN 1
N
N/* Data types */
N/// @brief Holds raw register values for measurements
N/// @details This struct type is returned in pointer form by any BME280 API calls
N///          which pull measurement data from the device; it is used as a parameter
N///          for the compensation computation functions that derive usable values
N///          for the measurements.
Ntypedef struct {
N    Uint16 humidity_raw;
N    Uint32 temperature_raw;
N    Uint32 pressure_raw;
N} BME280_RawData;
N
Ntypedef struct bme280_data {
N    /*! Compensated pressure */
N    uint32_t pressure;
N    /*! Compensated temperature */
N    int32_t temperature;
N    /*! Compensated humidity */
N    uint32_t humidity;
W "..\bme280.h" 72 2 declaration requires a typedef name
N};
N/* Basic API */
NVoid BME280_init(I2C_Handle, Uint8 slaveaddr); /// @brief Driver initialization
Xvoid BME280_init(I2C_Handle, Uint8 slaveaddr); 
NBool BME280_open();                            /// @brief Make contact with the chip and read calibration registers
NBool BME280_close();                           /// @brief Reset chip
NBME280_RawData *BME280_read();                 /// @brief Initiate a Forced measurement, poll to completion, read & return raw data
N/// @brief Collect current data
N/// @details This will first poll the STATUS register to ascertain no measurements are in progress; if they are, it
N///          will perform Task_sleep() and poll again.  Since this uses Task_sleep(), this function must ALWAYS
N///          be run within Task context e.g. not within a Swi or a Clock callback.
N///          The STATUS register poll will start with a <BME280_STATUS_MINIMUM_WAIT> millisecond sleep and double the time
N///          until <timeout> is exceeded.
N///          When timeout = 0, it will poll indefinitely.
N#define BME280_STATUS_MINIMUM_WAIT 8
NBME280_RawData *BME280_readMeasurements(Uint16 timeout);
N
N/* Numeric interpretation/compensation API for extracting results */
N
N/// @brief Compute Temperature from BME280_RawData struct
N/// @details Output degrees Celsius with 0.01C resolution.  Divide by 100 for whole degrees.
N///          This function needs to be run before computing Pressure or Humidity to compute
N///          the _t_fine constant used by the Pressure and Humidity compensation functions below.
NInt32 BME280_compensated_Temperature(BME280_RawData *);
N
N/// @brief Compute Pressure from BME280_RawData struct
N/// @details Pressure in Pascals as unsigned 32-bit integer in Q24.8 format; divide by 256 for whole Pascals
NUint32 BME280_compensated_Pressure(BME280_RawData *);
N
N/// @brief Compute Relative Humidity from BME280_RawData struct
N/// @details Humidity in %relativehumidity as unsigned 32-bit integer in Q22.10 format; divide by 1024 for whole %RH
NUint32 BME280_compensated_Humidity(BME280_RawData *);
N
N/* Look at the bottom of this header file for the Periodic Polling API. */
N
N
N/* Internal API */
NVoid BME280_setAddress(Uint8 memAddress);
Xvoid BME280_setAddress(Uint8 memAddress);
NVoid BME280_writeReg(Uint8 memAddress, Uint8 value);
Xvoid BME280_writeReg(Uint8 memAddress, Uint8 value);
NUint8 BME280_readReg(Uint8 memAddress);
NUint16 BME280_readWord(Uint8 memAddress); // Interprets Big-Endian format of the BME280
NUint32 BME280_readWord20(Uint8 memAddress); // Interprets Big-Endian with four LSB bits present in MSB of last byte
N
N
N/* Register defines and constants from BME280 datasheet */
N#define BME280_REG_ID  0xD0
N#define BME280_REG_CALIB00 0x88
N#define BME280_REG_RESET 0xE0
N#define BME280_REG_CALIB26 0xE1
N#define BME280_REG_CTRL_HUM 0xF2
N#define BME280_REG_STATUS 0xF3
N#define BME280_REG_CTRL_MEAS 0xF4
N#define BME280_REG_CONFIG 0xF5
N
N#define BME280_REG_PRESSURE 0xF7
N#define BME280_REG_PRES_MSB 0xF7
N#define BME280_REG_PRES_LSB 0xF8
N#define BME280_REG_PRES_XLSB 0xF9
N
N#define BME280_REG_TEMPERATURE 0xFA
N#define BME280_REG_TEMP_MSB 0xFA
N#define BME280_REG_TEMP_LSB 0xFB
N#define BME280_REG_TEMP_XLSB 0xFC
N
N#define BME280_REG_HUMIDITY 0xFD
N#define BME280_REG_HUM_MSB 0xFD
N#define BME280_REG_HUM_LSB 0xFE
N
N#define BME280_CHIPID 0x60
N#define BME280_CTRL_HUM_OSRS__SKIPPED (0)
N#define BME280_CTRL_HUM_OSRS__1       (1)
N#define BME280_CTRL_HUM_OSRS__2       (2)
N#define BME280_CTRL_HUM_OSRS__4       (3)
N#define BME280_CTRL_HUM_OSRS__8       (4)
N#define BME280_CTRL_HUM_OSRS__16      (5)
N
N#define BME280_STATUS_MEASURING       (0x08)
N#define BME280_STATUS_IM_UPDATE       (0x01)
N
N#define BME280_CTRL_MEAS_OSRS_T_SKIPPED (0 << 5)
N#define BME280_CTRL_MEAS_OSRS_T__1      (1 << 5)
N#define BME280_CTRL_MEAS_OSRS_T__2      (2 << 5)
N#define BME280_CTRL_MEAS_OSRS_T__4      (3 << 5)
N#define BME280_CTRL_MEAS_OSRS_T__8      (4 << 5)
N#define BME280_CTRL_MEAS_OSRS_T__16     (5 << 5)
N
N#define BME280_CTRL_MEAS_OSRS_P_SKIPPED (0 << 2)
N#define BME280_CTRL_MEAS_OSRS_P__1      (1 << 2)
N#define BME280_CTRL_MEAS_OSRS_P__2      (2 << 2)
N#define BME280_CTRL_MEAS_OSRS_P__4      (3 << 2)
N#define BME280_CTRL_MEAS_OSRS_P__8      (4 << 2)
N#define BME280_CTRL_MEAS_OSRS_P__16     (5 << 2)
N
N#define BME280_CTRL_MEAS_MODE_SLEEP     (0)
N#define BME280_CTRL_MEAS_MODE_FORCED    (1)
N#define BME280_CTRL_MEAS_MODE_NORMAL    (3)
N
N#define BME280_CONFIG_SPI3WIRE              (1)
N
N#define BME280_CONFIG_IIR_FILTER_COEF__OFF  (0)
N#define BME280_CONFIG_IIR_FILTER_COEF__2    (1)
N#define BME280_CONFIG_IIR_FILTER_COEF__4    (2)
N#define BME280_CONFIG_IIR_FILTER_COEF__8    (3)
N#define BME280_CONFIG_IIR_FILTER_COEF__16   (4)
N
N#define BME280_CONFIG_STANDBY_TIME__0_5     (0 << 5)
N#define BME280_CONFIG_STANDBY_TIME__62_5    (1 << 5)
N#define BME280_CONFIG_STANDBY_TIME__125     (2 << 5)
N#define BME280_CONFIG_STANDBY_TIME__250     (3 << 5)
N#define BME280_CONFIG_STANDBY_TIME__500     (4 << 5)
N#define BME280_CONFIG_STANDBY_TIME__1000    (5 << 5)
N#define BME280_CONFIG_STANDBY_TIME__10      (6 << 5)
N#define BME280_CONFIG_STANDBY_TIME__20      (7 << 5)
N
N#define BME280_RESET_ASSERT (0xB6)
N
N
N#endif /* BME280_H_ */
L 47 "../bme280.c" 2
N
N
Nstatic I2C_Handle i2cbus;  /// @brief Local persistent copy of the I2C Handle passed during BME280_init()
Nstatic Uint8 i2cAddr;  /// @brief Local persistent copy of the I2C slave address specified during BME280_init()
Nstatic Uint8 _bme280_calibration[33];  /// @brief Local persistent copy of the BME280's unique calibration values discovered during BME280_open()
Nstatic Uint8 _bme280_ctrl_meas;  /// @brief Local copy of CTRL_MEAS settings, to save current OSRS params when modifying CTRL_MEAS:mode[]
N
N/// @brief Driver initialization
N/// @details Performed by user with a known-valid I2C_Handle and slave address
NVoid BME280_init(I2C_Handle hand, Uint8 addr)
Xvoid BME280_init(I2C_Handle hand, Uint8 addr)
N{
N    i2cbus = hand;
N    i2cAddr = addr;
N}
N
N/// @brief Make contact with the chip and read calibration registers
N/// @details This function checks the CHIP_ID register to verify we're talking to a Bosch Sensortec BME280
N///          and then pulls the calibration constants into a local persistent buffer.
N/// @returns true if everything goes well, false if I2C communication fails or if the CHIP_ID is not correct.
NBool BME280_open()
N{
N    Uint8 readId;
N
N    // Verify chip identification, reset chip
N    Task_sleep(BME280_RESET_SETTLING_TIME);
X    ti_sysbios_knl_Task_sleep__E(3);
N
N    // Find Chip ID
N    readId = BME280_readReg(BME280_REG_ID);
X    readId = BME280_readReg(0xD0);
N    if (readId != 0x60) { // Not a BME280?
N        #ifdef BME280_DEBUG_OPEN
W "../bme280.c" 77 9 function "System_printf" declared implicitly
N        System_printf("Error: BME280_open() read I2C bus for CHIP_ID and found invalid ID!\r\n");
W "../bme280.c" 78 9 function "System_flush" declared implicitly
N        System_flush();
N        #endif
N        return false;
X        return 0;
N    }
N    BME280_writeReg(BME280_REG_RESET, BME280_RESET_ASSERT);
X    BME280_writeReg(0xE0, (0xB6));
N    Task_sleep(BME280_RESET_SETTLING_TIME);
X    ti_sysbios_knl_Task_sleep__E(3);
N    #ifdef BME280_DEBUG_OPEN
W "../bme280.c" 85 5 function "System_printf" declared implicitly
N    System_printf("BME280_open: post-softreset ctrl_meas: %u\r\n", BME280_readReg(BME280_REG_CTRL_MEAS));
X    System_printf("BME280_open: post-softreset ctrl_meas: %u\r\n", BME280_readReg(0xF4));
W "../bme280.c" 86 5 function "System_flush" declared implicitly
N    System_flush();
N    #endif
N
N    // Read calibration constants and init chip parameters
N    I2C_Transaction txn;
N    Uint8 regAddr;
N    txn.slaveAddress = i2cAddr;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N
N    regAddr = BME280_REG_CALIB00;
X    regAddr = 0x88;
N    txn.readBuf = &_bme280_calibration[0];
N    txn.readCount = 26;
N    I2C_transfer(i2cbus, &txn);
N    regAddr = BME280_REG_CALIB26;
X    regAddr = 0xE1;
N    txn.readBuf = &_bme280_calibration[26];
N    txn.readCount = 6;
N    I2C_transfer(i2cbus, &txn);
N
N    BME280_writeReg(BME280_REG_CTRL_HUM, BME280_CTRL_HUM_OSRS__4);                // defaults we're using
X    BME280_writeReg(0xF2, (3));                
N    _bme280_ctrl_meas = BME280_CTRL_MEAS_OSRS_T__4 | BME280_CTRL_MEAS_OSRS_P__4;  //
X    _bme280_ctrl_meas = (3 << 5) | (3 << 2);  
N    BME280_writeReg(BME280_REG_CTRL_MEAS, _bme280_ctrl_meas | BME280_CTRL_MEAS_MODE_SLEEP);
X    BME280_writeReg(0xF4, _bme280_ctrl_meas | (0));
N
N    #ifdef BME280_DEBUG_OPEN
N    System_printf("BME280_open: post-config ctrl_meas: %u\r\n", BME280_readReg(BME280_REG_CTRL_MEAS));
X    System_printf("BME280_open: post-config ctrl_meas: %u\r\n", BME280_readReg(0xF4));
N    System_printf("BME280_open: post-config status: %u\r\n", BME280_readReg(BME280_REG_STATUS));
X    System_printf("BME280_open: post-config status: %u\r\n", BME280_readReg(0xF3));
N    System_flush();
N    #endif
N
N    return true;
X    return 1;
R "../bme280.c" 93 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Reset chip
NBool BME280_close()
N{
N    BME280_writeReg(BME280_REG_RESET, BME280_RESET_ASSERT);
X    BME280_writeReg(0xE0, (0xB6));
N    _bme280_ctrl_meas = 0;
N    return true;
X    return 1;
N}
N
N/// @brief Internal API call for setting the current memory pointer.  Not used anywhere though...
NVoid BME280_setAddress(Uint8 memAddress)
Xvoid BME280_setAddress(Uint8 memAddress)
N{
N    I2C_Transaction txn;
N    Uint8 regAddr = memAddress;
N
N    txn.readBuf = NULL;
X    txn.readBuf = 0;
N    txn.readCount = 0;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N    txn.slaveAddress = i2cAddr;
N
N    I2C_transfer(i2cbus, &txn);
R "../bme280.c" 134 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Write a single 8-bit value to a specified memory address
NVoid BME280_writeReg(Uint8 memAddress, Uint8 value)
Xvoid BME280_writeReg(Uint8 memAddress, Uint8 value)
N{
N    I2C_Transaction txn;
N    Uint8 wrBuf[2];
N
N    txn.readBuf = NULL;
X    txn.readBuf = 0;
N    txn.readCount = 0;
N    txn.writeBuf = wrBuf;
N    txn.writeCount = 2;
N    txn.slaveAddress = i2cAddr;
N
N    wrBuf[0] = memAddress;
N    wrBuf[1] = value;
N
N    I2C_transfer(i2cbus, &txn);
N}
N
N/// @brief Read a single 8-bit value from the specified memory address
NUint8 BME280_readReg(Uint8 memAddress)
N{
N    I2C_Transaction txn;
N    Uint8 regAddr = memAddress;
N    Uint8 rdBuf;
N
N    txn.readBuf = &rdBuf;
N    txn.readCount = 1;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N    txn.slaveAddress = i2cAddr;
N
N    I2C_transfer(i2cbus, &txn);
N    return rdBuf;
R "../bme280.c" 166 19 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
R "../bme280.c" 168 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Read a 16-bit value Big-Endian from the specified memory address
NUint16 BME280_readWord(Uint8 memAddress)
N{
N    I2C_Transaction txn;
N    Uint8 regAddr = memAddress;
N    Uint8 rdBuf[2];
N
N    txn.readBuf = &rdBuf;
N    txn.readCount = 2;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N    txn.slaveAddress = i2cAddr;
N
N    I2C_transfer(i2cbus, &txn);
N    return ((Uint16)rdBuf[0] << 8) | (Uint16)rdBuf[1];
R "../bme280.c" 185 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Read a 20-bit (MSB/LSB/XLSB) Big-Endian value from the specified memory address
NUint32 BME280_readWord20(Uint8 memAddress)
N{
N    I2C_Transaction txn;
N    Uint8 regAddr = memAddress;
N    Uint8 rdBuf[3];
N
N    txn.readBuf = &rdBuf;
N    txn.readCount = 3;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N    txn.slaveAddress = i2cAddr;
N
N    I2C_transfer(i2cbus, &txn);
N    return ((Uint32)rdBuf[0] << 12) | ((Uint32)rdBuf[1] << 4) | ((Uint32)rdBuf[2] >> 4);
R "../bme280.c" 202 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Internal buffer used to hold last-known raw data
N/// @details When BME280_readMeasurements() returns a pointer to a BME280_RawData struct, it always
N///          returns a pointer to this buffer.
Nstatic BME280_RawData _rawData;
N
N/// @brief Collect current data
N/// @details This will first poll the STATUS register to ascertain no measurements are in progress; if they are, it
N///          will perform Task_sleep() and poll again.  Since this uses Task_sleep(), this function must ALWAYS
N///          be run within Task context e.g. not within a Swi or a Clock callback.
N///          The STATUS register poll will start with a 2ms sleep and double the time until <timeout> is exceeded.
N///          When timeout = 0, it will poll indefinitely.
NBME280_RawData * BME280_readMeasurements(Uint16 timeout)
N{
N    Uint16 status_delay = BME280_STATUS_MINIMUM_WAIT;
X    Uint16 status_delay = 8;
N    Uint32 total_delay = 0;
N    Uint8 stat = 0;
N
N    while ( (stat = BME280_readReg(BME280_REG_STATUS)) & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE) ) {
X    while ( (stat = BME280_readReg(0xF3)) & ((0x08) | (0x01)) ) {
N        #ifdef BME280_DEBUG_STATUS_POLLING
W "../bme280.c" 229 9 function "System_printf" declared implicitly
N        System_printf("STATUS=%u\r\n", stat);
W "../bme280.c" 230 9 function "System_flush" declared implicitly
N        System_flush();
N        #endif
N        Task_sleep(status_delay);  // Poll until complete or timeout
X        ti_sysbios_knl_Task_sleep__E(status_delay);  
N        total_delay += status_delay;
N        if (status_delay >= 32768) {
N            status_delay = BME280_STATUS_MINIMUM_WAIT;
X            status_delay = 8;
N        } else {
N            status_delay <<= 1;  // Double the poll time
N        }
N        if (timeout != 0 && total_delay > timeout) {
N            return NULL;
X            return 0;
N        }
N    }
N
N    I2C_Transaction txn;
N    Uint8 regAddr = BME280_REG_PRESSURE;
X    Uint8 regAddr = 0xF7;
N    Uint8 rdBuf[8];
N
N    txn.readBuf = &rdBuf;
N    txn.readCount = 8;
N    txn.writeBuf = &regAddr;
N    txn.writeCount = 1;
N    txn.slaveAddress = i2cAddr;
N
N    I2C_transfer(i2cbus, &txn);
N
N    // Fan out results
N    _rawData.humidity_raw = ((Uint16)rdBuf[6] << 8) | (Uint16)rdBuf[7];
N    _rawData.temperature_raw = ((Uint32)rdBuf[3] << 12) | ((Uint32)rdBuf[4] << 4) | ((Uint32)rdBuf[5] >> 4);
N    _rawData.pressure_raw = ((Uint32)rdBuf[0] << 12) | ((Uint32)rdBuf[1] << 4) | ((Uint32)rdBuf[2] >> 4);
N
N    return &_rawData;
R "../bme280.c" 237 26 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
R "../bme280.c" 250 20 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/// @brief Initiate a Forced measurement, poll to completion, read & return raw data
N/// @details By default after BME280_open(), measurement is 4x oversampling, no IIR filter on Pressure.
NBME280_RawData * BME280_read()
N{
N    BME280_writeReg(BME280_REG_CTRL_MEAS, BME280_CTRL_MEAS_MODE_FORCED | _bme280_ctrl_meas);
X    BME280_writeReg(0xF4, (1) | _bme280_ctrl_meas);
N    Task_sleep(BME280_STATUS_MINIMUM_WAIT);
X    ti_sysbios_knl_Task_sleep__E(8);
N
N    return BME280_readMeasurements(0);
N}
N
N/* Calibration positions */
N#define BME280_CALIBOFFSET_U16LE_dig_T1          0
N#define BME280_CALIBOFFSET_S16LE_dig_T2          2
N#define BME280_CALIBOFFSET_S16LE_dig_T3          4
N#define BME280_CALIBOFFSET_U16LE_dig_P1          6
N#define BME280_CALIBOFFSET_S16LE_dig_P2          8
N#define BME280_CALIBOFFSET_S16LE_dig_P3          10
N#define BME280_CALIBOFFSET_S16LE_dig_P4          12
N#define BME280_CALIBOFFSET_S16LE_dig_P5          14
N#define BME280_CALIBOFFSET_S16LE_dig_P6          16
N#define BME280_CALIBOFFSET_S16LE_dig_P7          18
N#define BME280_CALIBOFFSET_S16LE_dig_P8          20
N#define BME280_CALIBOFFSET_S16LE_dig_P9          22
N#define BME280_CALIBOFFSET_U8_dig_H1             25
N#define BME280_CALIBOFFSET_S16LE_dig_H2          26
N#define BME280_CALIBOFFSET_U8_dig_H3             28
N#define BME280_CALIBOFFSET_S16LE_dig_H4          29
N#define BME280_CALIBOFFSET_S16LE_dig_H5          30
N#define BME280_CALIBOFFSET_S8_dig_H6             32
N
N#define BME280_dig_T1 ( _bme280_compute_U16LE(_bme280_calibration[BME280_CALIBOFFSET_U16LE_dig_T1], _bme280_calibration[BME280_CALIBOFFSET_U16LE_dig_T1+1]) )
N#define BME280_dig_T2 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_T2], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_T2+1]) )
N#define BME280_dig_T3 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_T3], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_T3+1]) )
N#define BME280_dig_P1 ( _bme280_compute_U16LE(_bme280_calibration[BME280_CALIBOFFSET_U16LE_dig_P1], _bme280_calibration[BME280_CALIBOFFSET_U16LE_dig_P1+1]) )
N#define BME280_dig_P2 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P2], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P2+1]) )
N#define BME280_dig_P3 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P3], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P3+1]) )
N#define BME280_dig_P4 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P4], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P4+1]) )
N#define BME280_dig_P5 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P5], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P5+1]) )
N#define BME280_dig_P6 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P6], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P6+1]) )
N#define BME280_dig_P7 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P7], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P7+1]) )
N#define BME280_dig_P8 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P8], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P8+1]) )
N#define BME280_dig_P9 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P9], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_P9+1]) )
N#define BME280_dig_H1 ( (Uint8)_bme280_calibration[BME280_CALIBOFFSET_U8_dig_H1] )
N#define BME280_dig_H2 ( _bme280_compute_S16LE(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H2], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H2+1]) )
N#define BME280_dig_H3 ( (Uint8)_bme280_calibration[BME280_CALIBOFFSET_U8_dig_H3] )
N#define BME280_dig_H4 ( _bme280_compute_H4(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H4], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H4+1]) )
N#define BME280_dig_H5 ( _bme280_compute_H5(_bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H5], _bme280_calibration[BME280_CALIBOFFSET_S16LE_dig_H5+1]) )
N#define BME280_dig_H6 ( (Int8)_bme280_calibration[BME280_CALIBOFFSET_S8_dig_H6] )
N
Ninline Int16 _bme280_compute_S16LE(Uint8 r0, Uint8 r1)
N{
N    Int16 value = 0;
N    Uint16 w0 = (Uint16)r0, w1 = (Uint16)r1;
N
N    value = w1 << 8 | w0;
N    return value;
R "../bme280.c" 318 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
Ninline Uint16 _bme280_compute_U16LE(Uint8 r0, Uint8 r1)
N{
N    Uint16 value = 0;
N    Uint16 w0 = (Uint16)r0, w1 = (Uint16)r1;
N
N    value = w1 << 8 | w0;
N    return value;
R "../bme280.c" 327 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
Ninline Int16 _bme280_compute_H4(Uint8 e4, Uint8 e5)
N{
N    Int16 value = 0;
N    // No sign extension necessary per empirical testing...
N    value |= ((Uint16)e4) << 4;
N    value |= e5 & 0x0F;
N    return value;
R "../bme280.c" 335 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
R "../bme280.c" 336 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
Ninline Int16 _bme280_compute_H5(Uint8 e5, Uint8 e6)
N{
N    Int16 value = 0;
N    // No sign extension necessary per empirical testing...
N    value |= ((Uint16)e6) << 4;
N    value |= e5 >> 4;
N    return value;
R "../bme280.c" 344 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
R "../bme280.c" 345 11 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/* These compensation equations are derived from BME280 datasheet pseudocode, page 23 & 24 */
Nstatic Int32 _t_fine;
N
N/// @brief Compute Temperature from BME280_RawData struct
N/// @details Output degrees Celsius with 0.01C resolution.  Divide by 100 for whole degrees.
N///          This function needs to be run before computing Pressure or Humidity to compute
N///          the _t_fine constant used by the Pressure and Humidity compensation functions below.
NInt32 BME280_compensated_Temperature(BME280_RawData *rd)
N{
N    if (rd == NULL) {
X    if (rd == 0) {
N        return -32768;
N    }
N    Int32 adc_T = rd->temperature_raw; // No sign extension will be performed as the raw value is expected to be positive.
N
N    Int32 var1, var2, T;
N
N    var1 = ((((adc_T >> 3) - ((Int32)BME280_dig_T1 << 1))) * ((Int32)BME280_dig_T2)) >> 11;
X    var1 = ((((adc_T >> 3) - ((Int32)( _bme280_compute_U16LE(_bme280_calibration[0], _bme280_calibration[0+1]) ) << 1))) * ((Int32)( _bme280_compute_S16LE(_bme280_calibration[2], _bme280_calibration[2+1]) ))) >> 11;
N    var2 = (((((adc_T >> 4) - (Int32)BME280_dig_T1) * ((adc_T >> 4) - (Int32)BME280_dig_T1)) >> 12) * (Int32)BME280_dig_T3) >> 14;
X    var2 = (((((adc_T >> 4) - (Int32)( _bme280_compute_U16LE(_bme280_calibration[0], _bme280_calibration[0+1]) )) * ((adc_T >> 4) - (Int32)( _bme280_compute_U16LE(_bme280_calibration[0], _bme280_calibration[0+1]) ))) >> 12) * (Int32)( _bme280_compute_S16LE(_bme280_calibration[4], _bme280_calibration[4+1]) )) >> 14;
N    _t_fine = var1 + var2;
N    T = (_t_fine * 5 + 128) >> 8;
N
N    return T;
N}
N
N/// @brief Compute Pressure from BME280_RawData struct
N/// @details Pressure in Pascals as unsigned 32-bit integer in Q24.8 format; divide by 256 for whole Pascals
NUint32 BME280_compensated_Pressure(BME280_RawData *rd)
N{
N    if (rd == NULL) {
X    if (rd == 0) {
N        return 0;
N    }
N    Int32 adc_P = rd->pressure_raw; // No sign extension will be performed as the raw value is expected to be positive.
N
N    Int64 var1, var2, p;
N    var1 = (Int64)_t_fine - 128000;
N    var2 = var1 * var1 * (Int64)BME280_dig_P6;
X    var2 = var1 * var1 * (Int64)( _bme280_compute_S16LE(_bme280_calibration[16], _bme280_calibration[16+1]) );
N    var2 = var2 + ((var1 * (Int64)BME280_dig_P5) << 17);
X    var2 = var2 + ((var1 * (Int64)( _bme280_compute_S16LE(_bme280_calibration[14], _bme280_calibration[14+1]) )) << 17);
N    var2 = var2 + (((Int64)BME280_dig_P3) >> 8) + ((var1 * (Int64)BME280_dig_P2) << 12);
X    var2 = var2 + (((Int64)( _bme280_compute_S16LE(_bme280_calibration[10], _bme280_calibration[10+1]) )) >> 8) + ((var1 * (Int64)( _bme280_compute_S16LE(_bme280_calibration[8], _bme280_calibration[8+1]) )) << 12);
N    var1 = ((var1 * var1 * (Int64)BME280_dig_P3) >> 8) + ((var1 * (Int64)BME280_dig_P2) << 12);
X    var1 = ((var1 * var1 * (Int64)( _bme280_compute_S16LE(_bme280_calibration[10], _bme280_calibration[10+1]) )) >> 8) + ((var1 * (Int64)( _bme280_compute_S16LE(_bme280_calibration[8], _bme280_calibration[8+1]) )) << 12);
N    var1 = (((((Int64)1) << 47) + var1)) * ((Int64)BME280_dig_P1) >> 33;
X    var1 = (((((Int64)1) << 47) + var1)) * ((Int64)( _bme280_compute_U16LE(_bme280_calibration[6], _bme280_calibration[6+1]) )) >> 33;
N    if (var1 == 0) {
N        return 0;  // avoid exception caused by divide by zero
N    }
N    p = 1048576 - adc_P;
N    p = (((p << 31) - var2) * 3125) / var1;
N    var1 = (((Int64)BME280_dig_P9) * (p >> 13) * (p >> 13)) >> 25;
X    var1 = (((Int64)( _bme280_compute_S16LE(_bme280_calibration[22], _bme280_calibration[22+1]) )) * (p >> 13) * (p >> 13)) >> 25;
N    var2 = (((Int64)BME280_dig_P8) * p) >> 19;
X    var2 = (((Int64)( _bme280_compute_S16LE(_bme280_calibration[20], _bme280_calibration[20+1]) )) * p) >> 19;
N    p = ((p + var1 + var2) >> 8) + (((Int64)BME280_dig_P7) << 4);
X    p = ((p + var1 + var2) >> 8) + (((Int64)( _bme280_compute_S16LE(_bme280_calibration[18], _bme280_calibration[18+1]) )) << 4);
N    return (Uint32)p;
N}
N
N/// @brief Compute Relative Humidity from BME280_RawData struct
N/// @details Humidity in %relativehumidity as unsigned 32-bit integer in Q22.10 format; divide by 1024 for whole %RH
NUint32 BME280_compensated_Humidity(BME280_RawData *rd)
N{
N    if (rd == NULL) {
X    if (rd == 0) {
N        return 0;
N    }
N    Int32 adc_H = (Uint32)rd->humidity_raw; // No sign extension will be performed as the raw value is expected to be positive.
N
N    Int32 v_x1_u32r;
N    v_x1_u32r = _t_fine - ((Int32)76800);
N    v_x1_u32r = (((((adc_H << 14) - (((Int32)BME280_dig_H4) << 20) - (((Int32)BME280_dig_H5) * v_x1_u32r)) \
N            + ((Int32)16384)) >> 15) * (((((((v_x1_u32r * ((Int32)BME280_dig_H6)) >> 10) \
N            * (((v_x1_u32r * ((Int32)BME280_dig_H3)) >> 11) + ((Int32)32768))) >> 10) + ((Int32)2097152)) \
N            * ((Int32)BME280_dig_H2) + 8192) >> 14));
X    v_x1_u32r = (((((adc_H << 14) - (((Int32)( _bme280_compute_H4(_bme280_calibration[29], _bme280_calibration[29+1]) )) << 20) - (((Int32)( _bme280_compute_H5(_bme280_calibration[30], _bme280_calibration[30+1]) )) * v_x1_u32r))             + ((Int32)16384)) >> 15) * (((((((v_x1_u32r * ((Int32)( (Int8)_bme280_calibration[32] ))) >> 10)             * (((v_x1_u32r * ((Int32)( (Uint8)_bme280_calibration[28] ))) >> 11) + ((Int32)32768))) >> 10) + ((Int32)2097152))             * ((Int32)( _bme280_compute_S16LE(_bme280_calibration[26], _bme280_calibration[26+1]) )) + 8192) >> 14));
N    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) \
N            * ((Int32)BME280_dig_H1)) >> 4));
X    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)             * ((Int32)( (Uint8)_bme280_calibration[25] ))) >> 4));
N    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
N    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
N    return (Uint32)(v_x1_u32r >> 12);
N}
R "../bme280.c" 213 23 (ULP 7.1) Detected use of global variable "_rawData" within one function "BME280_readMeasurements". Recommend placing variable in the function locally
